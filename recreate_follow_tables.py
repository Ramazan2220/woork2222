#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
"""

import os
import sys
from sqlalchemy import create_engine, MetaData, text
from database.models import Base, FollowTask, FollowHistory
from database.db_manager import init_db
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def recreate_follow_tables():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã follow_tasks –∏ follow_history"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    DATABASE_URL = os.getenv('DATABASE_URL', 'sqlite:///instagram_bot.db')
    engine = create_engine(DATABASE_URL)
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            result = conn.execute(text(
                "SELECT name FROM sqlite_master WHERE type='table' AND name IN ('follow_tasks', 'follow_history')"
            ))
            existing_tables = [row[0] for row in result]
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            for table_name in existing_tables:
                logger.info(f"  –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}")
                conn.execute(text(f"DROP TABLE IF EXISTS {table_name}"))
                conn.commit()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ
        logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã follow_tasks –∏ follow_history
        metadata = MetaData()
        for table in Base.metadata.tables.values():
            if table.name in ['follow_tasks', 'follow_history']:
                logger.info(f"  –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã {table.name}")
                table.create(bind=engine, checkfirst=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        logger.info("\n‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        logger.info("\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü:")
        
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º follow_tasks
            result = conn.execute(text("PRAGMA table_info(follow_tasks)"))
            columns = result.fetchall()
            
            logger.info("\nüìã –¢–∞–±–ª–∏—Ü–∞ follow_tasks:")
            for col in columns:
                logger.info(f"  - {col[1]}: {col[2]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º follow_history
            result = conn.execute(text("PRAGMA table_info(follow_history)"))
            columns = result.fetchall()
            
            logger.info("\nüìã –¢–∞–±–ª–∏—Ü–∞ follow_history:")
            for col in columns:
                logger.info(f"  - {col[1]}: {col[2]}")
        
        logger.info("\n‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –¢–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏.")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        raise

if __name__ == "__main__":
    try:
        recreate_follow_tables()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 