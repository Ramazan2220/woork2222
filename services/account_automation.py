# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç: –ø—Ä–æ–≥—Ä–µ–≤, ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
"""

import logging
import time
from typing import Dict, Optional, Tuple, List
from datetime import datetime, timedelta

from instagram.health_monitor import AdvancedHealthMonitor
from instagram.predictive_monitor import PredictiveMonitor
from instagram.improved_account_warmer import ImprovedAccountWarmer
from services.rate_limiter import rate_limiter, ActionType
# from services.instagram_service import instagram_service  # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù
from database.db_manager import get_instagram_account, update_instagram_account

logger = logging.getLogger(__name__)

class AccountAutomationService:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.health_monitor = AdvancedHealthMonitor()
        self.predictive_monitor = PredictiveMonitor()
        self.warmer = ImprovedAccountWarmer()
        
        # –ö—ç—à —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.account_states = {}
    
    def get_account_status(self, account_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account = get_instagram_account(account_id)
            if not account:
                return {"error": "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
            health_score = self.health_monitor.calculate_comprehensive_health_score(account_id)
            ban_risk = self.predictive_monitor.calculate_ban_risk_score(account_id)
            recommendations = self.health_monitor.get_health_recommendations(account_id)
            risk_details = self.predictive_monitor.get_risk_mitigation_advice(account_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ rate limiter
            action_stats = rate_limiter.get_action_stats(account_id)
            
            return {
                "account_id": account_id,
                "username": account.username,
                "health_score": health_score,
                "ban_risk_score": ban_risk,
                "status": self._determine_status(health_score, ban_risk),
                "recommendations": recommendations,
                "risk_mitigation": risk_details,
                "action_stats": action_stats,
                "can_warm": self._can_warm_account(health_score, ban_risk),
                "suggested_actions": self._suggest_actions(health_score, ban_risk)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
            return {"error": str(e)}
    
    def _determine_status(self, health_score: int, ban_risk: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if ban_risk > 70:
            return "CRITICAL_RISK"
        elif ban_risk > 50:
            return "HIGH_RISK"
        elif health_score < 30:
            return "UNHEALTHY"
        elif health_score < 50:
            return "NEEDS_ATTENTION"
        elif health_score >= 80 and ban_risk < 20:
            return "EXCELLENT"
        else:
            return "GOOD"
    
    def _can_warm_account(self, health_score: int, ban_risk: int) -> bool:
        """–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"""
        return health_score > 20 and ban_risk < 70
    
    def _suggest_actions(self, health_score: int, ban_risk: int) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        actions = []
        
        if ban_risk > 50:
            actions.append("‚ö†Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ 48 —á–∞—Å–æ–≤")
            actions.append("üîÑ –°–º–µ–Ω–∏—Ç—å IP/–ø—Ä–æ–∫—Å–∏")
            actions.append("üì± –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        elif ban_risk > 30:
            actions.append("‚è±Ô∏è –°–Ω–∏–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ 50%")
            actions.append("üéØ –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        
        if health_score < 50:
            actions.append("üî• –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞")
            actions.append("üì∏ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –±–∏–æ")
            actions.append("üëÄ –ë–æ–ª—å—à–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å, –º–µ–Ω—å—à–µ –¥–µ–π—Å—Ç–≤–∏–π")
        
        if not actions:
            actions.append("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
            
        return actions
    
    def smart_warm_account(self, account_id: int, duration_minutes: int = 30) -> Tuple[bool, str]:
        """–£–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            status = self.get_account_status(account_id)
            
            if status.get("error"):
                return False, status["error"]
            
            if not status["can_warm"]:
                return False, f"–ü—Ä–æ–≥—Ä–µ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: —Å—Ç–∞—Ç—É—Å {status['status']}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            can_view, reason = rate_limiter.can_perform_action(account_id, ActionType.VIEW_FEED)
            if not can_view:
                return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –ª–∏–º–∏—Ç—ã: {reason}"
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥—Ä–µ–≤–∞
            if status["ban_risk_score"] > 30:
                duration_minutes = min(duration_minutes, 15)  # –°–æ–∫—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è
                logger.info(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –±–∞–Ω–∞ ({status['ban_risk_score']}), —Å–æ–∫—Ä–∞—â–∞—é –ø—Ä–æ–≥—Ä–µ–≤ –¥–æ {duration_minutes} –º–∏–Ω—É—Ç")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
            success, message = self.warmer.warm_account_improved(account_id, duration_minutes)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                update_instagram_account(account_id, last_warmup=datetime.now())
                logger.info(f"‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            return success, message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–Ω–æ–º –ø—Ä–æ–≥—Ä–µ–≤–µ: {e}")
            return False, str(e)
    
    def perform_safe_action(self, account_id: int, action_type: ActionType, action_func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            status = self.get_account_status(account_id)
            
            if status["ban_risk_score"] > 60:
                return False, "–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –±–∞–Ω–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            can_perform, reason = rate_limiter.can_perform_action(account_id, action_type)
            if not can_perform:
                return False, reason
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            wait_time = rate_limiter.get_wait_time(account_id, action_type)
            logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º {action_type.value}")
            time.sleep(wait_time)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            result = action_func(*args, **kwargs)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            rate_limiter.record_action(account_id, action_type)
            
            return True, result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
            return False, str(e)
    
    def get_daily_recommendations(self) -> Dict[int, List[str]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        from database.db_manager import get_instagram_accounts
        
        recommendations = {}
        accounts = get_instagram_accounts()
        
        for account in accounts:
            if account.is_active:
                status = self.get_account_status(account.id)
                if not status.get("error"):
                    recommendations[account.id] = {
                        "username": account.username,
                        "status": status["status"],
                        "health_score": status["health_score"],
                        "ban_risk": status["ban_risk_score"],
                        "actions": status["suggested_actions"]
                    }
        
        return recommendations
    
    def auto_manage_accounts(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏")
        
        recommendations = self.get_daily_recommendations()
        
        for account_id, data in recommendations.items():
            logger.info(f"\nüì± –ê–∫–∫–∞—É–Ω—Ç: {data['username']}")
            logger.info(f"   –°—Ç–∞—Ç—É—Å: {data['status']}")
            logger.info(f"   –ó–¥–æ—Ä–æ–≤—å–µ: {data['health_score']}/100")
            logger.info(f"   –†–∏—Å–∫ –±–∞–Ω–∞: {data['ban_risk']}/100")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            if data['status'] == "CRITICAL_RISK":
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ 48 —á–∞—Å–æ–≤
                for action_type in ActionType:
                    rate_limiter.block_action(account_id, action_type, 48 * 3600)
                logger.warning(f"üîí –ê–∫–∫–∞—É–Ω—Ç {data['username']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 48 —á–∞—Å–æ–≤")
                
            elif data['status'] in ["NEEDS_ATTENTION", "UNHEALTHY"] and data['ban_risk'] < 50:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–µ–≥–∫–∏–π –ø—Ä–æ–≥—Ä–µ–≤
                self.smart_warm_account(account_id, duration_minutes=15)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
automation_service = AccountAutomationService() 