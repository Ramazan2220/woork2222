# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å Anti-Detection –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–æ—Ç–æ–≤
"""

import random
import time
import logging
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
import json
import hashlib

from database.db_manager import get_instagram_account, update_instagram_account
from utils.rotating_proxy_manager import RotatingProxyManager

logger = logging.getLogger(__name__)

class AntiDetectionService:
    """–°–µ—Ä–≤–∏—Å –∑–∞—â–∏—Ç—ã –æ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è Instagram"""
    
    def __init__(self):
        self.proxy_manager = RotatingProxyManager()
        self.fingerprints = {}
        self.behavior_patterns = {}
        
    def create_human_behavior_pattern(self, account_id: int) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        
        # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ "–ª–∏—á–Ω–æ—Å—Ç–∏"
        personality = {
            # –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—É—Ç—Ä–µ–Ω–Ω–∏–π/–¥–Ω–µ–≤–Ω–æ–π/–≤–µ—á–µ—Ä–Ω–∏–π —Ç–∏–ø)
            'active_hours': self._generate_active_hours(),
            
            # –°–∫–æ—Ä–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π (–±—ã—Å—Ç—Ä—ã–π/—Å—Ä–µ–¥–Ω–∏–π/–º–µ–¥–ª–µ–Ω–Ω—ã–π)
            'action_speed': random.choice(['fast', 'medium', 'slow']),
            
            # –ò–Ω—Ç–µ—Ä–µ—Å—ã (–¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
            'interests': random.sample([
                'travel', 'food', 'fitness', 'fashion', 'art', 
                'music', 'photography', 'nature', 'tech', 'sports'
            ], k=random.randint(3, 5)),
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
            'scroll_patterns': {
                'speed': random.uniform(0.5, 2.0),  # –°–∫–æ—Ä–æ—Å—Ç—å —Å–∫—Ä–æ–ª–ª–∞
                'pause_probability': random.uniform(0.1, 0.3),  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞—É–∑—ã
                'pause_duration': (2, 10),  # –î–∏–∞–ø–∞–∑–æ–Ω –ø–∞—É–∑—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            },
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            'interaction_patterns': {
                'like_probability': random.uniform(0.05, 0.15),
                'comment_probability': random.uniform(0.01, 0.05),
                'save_probability': random.uniform(0.02, 0.08),
                'story_view_probability': random.uniform(0.3, 0.7),
            },
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            'typing_patterns': {
                'speed_wpm': random.randint(30, 80),  # –°–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
                'typo_probability': random.uniform(0.01, 0.05),
                'backspace_probability': random.uniform(0.05, 0.15),
            }
        }
        
        self.behavior_patterns[account_id] = personality
        return personality
    
    def _generate_active_hours(self) -> List[int]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        active_type = random.choice(['morning', 'afternoon', 'evening', 'night'])
        
        hours_map = {
            'morning': list(range(6, 12)),      # 6:00 - 12:00
            'afternoon': list(range(12, 18)),   # 12:00 - 18:00
            'evening': list(range(18, 23)),     # 18:00 - 23:00
            'night': list(range(20, 24)) + list(range(0, 3))  # 20:00 - 03:00
        }
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Å—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        main_hours = hours_map[active_type]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∞—Å—ã –≤–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        all_hours = list(range(24))
        additional_hours = random.sample(
            [h for h in all_hours if h not in main_hours], 
            k=random.randint(2, 5)
        )
        
        return sorted(main_hours + additional_hours)
    
    def generate_device_fingerprint(self, account_id: int) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π fingerprint —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ 2024
        devices = [
            {
                'manufacturer': 'samsung',
                'model': 'SM-S928B',  # Galaxy S24 Ultra
                'android_version': 34,
                'android_release': '14.0',
                'resolution': '3120x1440',
                'dpi': 640
            },
            {
                'manufacturer': 'Google',
                'model': 'Pixel 8 Pro',
                'android_version': 34,
                'android_release': '14.0',
                'resolution': '3120x1440', 
                'dpi': 512
            },
            {
                'manufacturer': 'OnePlus',
                'model': 'CPH2581',  # OnePlus 12
                'android_version': 34,
                'android_release': '14.0',
                'resolution': '3168x1440',
                'dpi': 510
            },
            {
                'manufacturer': 'Apple',
                'model': 'iPhone15,3',  # iPhone 15 Pro Max
                'ios_version': '17.2.1',
                'resolution': '2796x1290',
                'scale': 3
            }
        ]
        
        device = random.choice(devices)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
        unique_seed = f"{account_id}_{datetime.now().isoformat()}"
        
        fingerprint = {
            **device,
            'device_id': hashlib.md5(f"device_{unique_seed}".encode()).hexdigest(),
            'phone_id': hashlib.md5(f"phone_{unique_seed}".encode()).hexdigest(),
            'uuid': hashlib.md5(f"uuid_{unique_seed}".encode()).hexdigest(),
            'advertising_id': hashlib.md5(f"adid_{unique_seed}".encode()).hexdigest(),
            'app_version': '321.0.0.32.118',  # –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Instagram
            'capabilities': '3brTv10=',  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ capabilities
            'connection_type': random.choice(['WIFI', '4G']),
            'user_agent': self._generate_user_agent(device),
            'timezone_offset': random.choice([-28800, -25200, -21600, -18000, -14400, 0, 3600, 7200, 10800]),
            'created_at': datetime.now().isoformat()
        }
        
        self.fingerprints[account_id] = fingerprint
        return fingerprint
    
    def _generate_user_agent(self, device: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å User-Agent –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if 'ios_version' in device:
            # iOS User-Agent
            ios_v = device['ios_version'].replace('.', '_')
            return f"Instagram 321.0.0.32.118 ({device['model']}; iOS {ios_v}; ru_RU; scale={device['scale']})"
        else:
            # Android User-Agent
            return (
                f"Instagram 321.0.0.32.118 Android "
                f"({device['android_version']}/{device['android_release']}; "
                f"{device['dpi']}dpi; {device['resolution']}; "
                f"{device['manufacturer']}; {device['model']}; {device['model']}; en_US)"
            )
    
    def humanize_action_timing(self, account_id: int, action_type: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ–ø–æ–¥–æ–±–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–≤–µ–¥–µ–Ω–∏—è
        if account_id not in self.behavior_patterns:
            self.create_human_behavior_pattern(account_id)
        
        pattern = self.behavior_patterns[account_id]
        speed = pattern['action_speed']
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ —Ç–∏–ø–∞–º –¥–µ–π—Å—Ç–≤–∏–π
        base_delays = {
            'scroll': (0.5, 3.0),
            'like': (0.3, 1.5),
            'unlike': (0.2, 1.0),
            'follow': (1.0, 3.0),
            'unfollow': (0.8, 2.5),
            'comment': (15.0, 45.0),  # –í—Ä–µ–º—è –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            'story_view': (3.0, 8.0),
            'post_view': (2.0, 10.0),
            'typing': (0.05, 0.15),  # –ú–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
            'navigation': (0.5, 2.0),
        }
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
        speed_modifiers = {
            'fast': 0.7,
            'medium': 1.0,
            'slow': 1.5
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        min_delay, max_delay = base_delays.get(action_type, (1.0, 3.0))
        modifier = speed_modifiers[speed]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        min_delay *= modifier
        max_delay *= modifier
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
        mean = (min_delay + max_delay) / 2
        std = (max_delay - min_delay) / 4
        
        delay = random.gauss(mean, std)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        delay = max(min_delay, min(max_delay, delay))
        
        # –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–∫—Ä–æ–ø–∞—É–∑—ã (—á–µ–ª–æ–≤–µ–∫ –æ—Ç–≤–ª–µ–∫—Å—è)
        if random.random() < 0.05:  # 5% —à–∞–Ω—Å
            delay += random.uniform(2, 10)
            logger.info(f"üò¥ –î–æ–±–∞–≤–ª–µ–Ω–∞ –º–∏–∫—Ä–æ–ø–∞—É–∑–∞: +{delay:.1f} —Å–µ–∫")
        
        return delay
    
    def should_perform_action(self, account_id: int, action_type: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–æ–ª–∂–Ω–æ –ª–∏ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥)"""
        
        if account_id not in self.behavior_patterns:
            self.create_human_behavior_pattern(account_id)
        
        pattern = self.behavior_patterns[account_id]
        probabilities = pattern['interaction_patterns']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
        probability = probabilities.get(f"{action_type}_probability", 0.1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ–º –ª–∏ –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        return random.random() < probability
    
    def is_safe_time(self, account_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        if account_id not in self.behavior_patterns:
            self.create_human_behavior_pattern(account_id)
        
        pattern = self.behavior_patterns[account_id]
        current_hour = datetime.now().hour
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        is_active_hour = current_hour in pattern['active_hours']
        
        # –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ–º –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã –≤–Ω–µ –æ–±—ã—á–Ω—ã—Ö —á–∞—Å–æ–≤ (10% —à–∞–Ω—Å)
        if not is_active_hour and random.random() < 0.1:
            logger.info(f"üåô –í–Ω–µ–ø–ª–∞–Ω–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ {current_hour}:00")
            return True
        
        return is_active_hour
    
    def rotate_proxy_if_needed(self, account_id: int, force: bool = False) -> Optional[str]:
        """–†–æ—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
        
        account = get_instagram_account(account_id)
        if not account or not account.proxy_id:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –º–µ–Ω—è–ª–∏ IP
        last_rotation = self.proxy_manager.get_last_rotation(account_id)
        
        # –†–æ—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30-60 –º–∏–Ω—É—Ç –∏–ª–∏ –ø—Ä–∏ force
        if force or (last_rotation and 
                    (datetime.now() - last_rotation) > timedelta(minutes=random.randint(30, 60))):
            
            new_session_id = self.proxy_manager.generate_session_id(account_id)
            logger.info(f"üîÑ –†–æ—Ç–∞—Ü–∏—è IP –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}")
            return new_session_id
        
        return None
    
    def simulate_human_typing(self, text: str) -> List[Tuple[str, float]]:
        """–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞"""
        
        typing_events = []
        current_text = ""
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–±–æ—Ä–∞
        wpm = random.randint(30, 80)  # –°–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        char_delay = 60.0 / (wpm * 5)  # –ü—Ä–∏–º–µ—Ä–Ω–æ 5 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–ª–æ–≤–æ
        
        for char in text:
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∏–º–≤–æ–ª–æ–º
            delay = random.gauss(char_delay, char_delay * 0.3)
            delay = max(0.01, delay)
            
            # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –æ–ø–µ—á–∞—Ç–∫–∏
            if random.random() < 0.02:  # 2% —à–∞–Ω—Å –æ–ø–µ—á–∞—Ç–∫–∏
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
                wrong_char = random.choice('abcdefghijklmnopqrstuvwxyz')
                typing_events.append((current_text + wrong_char, delay))
                
                # –ü–∞—É–∑–∞ –æ—Å–æ–∑–Ω–∞–Ω–∏—è
                typing_events.append((current_text + wrong_char, random.uniform(0.3, 0.8)))
                
                # –£–¥–∞–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
                typing_events.append((current_text, 0.1))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
            current_text += char
            typing_events.append((current_text, delay))
            
            # –ü–∞—É–∑—ã –Ω–∞ –ø—Ä–æ–±–µ–ª–∞—Ö (–æ–±–¥—É–º—ã–≤–∞–Ω–∏–µ)
            if char == ' ' and random.random() < 0.3:
                typing_events.append((current_text, random.uniform(0.5, 2.0)))
        
        return typing_events

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
anti_detection = AntiDetectionService() 