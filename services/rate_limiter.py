# -*- coding: utf-8 -*-
"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π Rate Limiter –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
"""

import time
import logging
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Dict, Optional
from enum import Enum
from database.db_manager import get_instagram_account

logger = logging.getLogger(__name__)

class ActionType(Enum):
    """–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    LIKE = "like"
    FOLLOW = "follow"
    UNFOLLOW = "unfollow"
    COMMENT = "comment"
    POST = "post"
    STORY = "story"
    REEL = "reel"
    VIEW_STORY = "view_story"
    VIEW_FEED = "view_feed"
    DIRECT_MESSAGE = "direct_message"

class RateLimiter:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å rate limiting"""
    
    # –õ–∏–º–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    DEFAULT_LIMITS = {
        # –õ–∏–º–∏—Ç—ã –≤ —á–∞—Å –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (< 7 –¥–Ω–µ–π)
        "new_hourly": {
            ActionType.LIKE: 10,
            ActionType.FOLLOW: 5,
            ActionType.UNFOLLOW: 5,
            ActionType.COMMENT: 3,
            ActionType.POST: 1,
            ActionType.STORY: 2,
            ActionType.REEL: 1,
            ActionType.DIRECT_MESSAGE: 5
        },
        # –õ–∏–º–∏—Ç—ã –≤ –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        "new_daily": {
            ActionType.LIKE: 50,
            ActionType.FOLLOW: 20,
            ActionType.UNFOLLOW: 20,
            ActionType.COMMENT: 10,
            ActionType.POST: 3,
            ActionType.STORY: 5,
            ActionType.REEL: 2,
            ActionType.DIRECT_MESSAGE: 20
        },
        # –õ–∏–º–∏—Ç—ã –≤ —á–∞—Å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Ç—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (> 30 –¥–Ω–µ–π)
        "warmed_hourly": {
            ActionType.LIKE: 60,
            ActionType.FOLLOW: 30,
            ActionType.UNFOLLOW: 30,
            ActionType.COMMENT: 20,
            ActionType.POST: 5,
            ActionType.STORY: 10,
            ActionType.REEL: 3,
            ActionType.DIRECT_MESSAGE: 30
        },
        # –õ–∏–º–∏—Ç—ã –≤ –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Ç—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        "warmed_daily": {
            ActionType.LIKE: 500,
            ActionType.FOLLOW: 200,
            ActionType.UNFOLLOW: 200,
            ActionType.COMMENT: 100,
            ActionType.POST: 20,
            ActionType.STORY: 30,
            ActionType.REEL: 10,
            ActionType.DIRECT_MESSAGE: 150
        }
    }
    
    def __init__(self):
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–µ–π—Å—Ç–≤–∏–π: account_id -> action_type -> list of timestamps
        self._actions: Dict[int, Dict[ActionType, list]] = defaultdict(lambda: defaultdict(list))
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: account_id -> action_type -> unlock_time
        self._blocks: Dict[int, Dict[ActionType, datetime]] = defaultdict(dict)
    
    def _get_account_age_days(self, account_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –¥–Ω—è—Ö"""
        try:
            account = get_instagram_account(account_id)
            if account and account.created_at:
                age = (datetime.now() - account.created_at).days
                return age
        except:
            pass
        return 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º
    
    def _get_limits(self, account_id: int) -> Dict[str, Dict[ActionType, int]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        age_days = self._get_account_age_days(account_id)
        
        if age_days < 7:
            # –ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç - —Å–∞–º—ã–µ —Å—Ç—Ä–æ–≥–∏–µ –ª–∏–º–∏—Ç—ã
            return {
                "hourly": self.DEFAULT_LIMITS["new_hourly"],
                "daily": self.DEFAULT_LIMITS["new_daily"]
            }
        elif age_days < 30:
            # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã
            return {
                "hourly": {k: int(v * 1.5) for k, v in self.DEFAULT_LIMITS["new_hourly"].items()},
                "daily": {k: int(v * 1.5) for k, v in self.DEFAULT_LIMITS["new_daily"].items()}
            }
        else:
            # –ü—Ä–æ–≥—Ä–µ—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç
            return {
                "hourly": self.DEFAULT_LIMITS["warmed_hourly"],
                "daily": self.DEFAULT_LIMITS["warmed_daily"]
            }
    
    def _cleanup_old_actions(self, account_id: int, action_type: ActionType):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)"""
        cutoff_time = time.time() - 86400  # 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        self._actions[account_id][action_type] = [
            ts for ts in self._actions[account_id][action_type] 
            if ts > cutoff_time
        ]
    
    def can_perform_action(self, account_id: int, action_type: ActionType) -> tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–º–æ–∂–Ω–æ_–ª–∏, –ø—Ä–∏—á–∏–Ω–∞_–æ—Ç–∫–∞–∑–∞)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if account_id in self._blocks and action_type in self._blocks[account_id]:
            unlock_time = self._blocks[account_id][action_type]
            if datetime.now() < unlock_time:
                wait_seconds = (unlock_time - datetime.now()).seconds
                return False, f"–î–µ–π—Å—Ç–≤–∏–µ {action_type.value} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {wait_seconds} —Å–µ–∫—É–Ω–¥"
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        self._cleanup_old_actions(account_id, action_type)
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        limits = self._get_limits(account_id)
        
        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        now = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        actions = self._actions[account_id][action_type]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç
        hour_ago = now - 3600
        hourly_count = sum(1 for ts in actions if ts > hour_ago)
        hourly_limit = limits["hourly"].get(action_type, 0)
        
        if hourly_count >= hourly_limit:
            return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç —á–∞—Å–æ–≤–æ–π –ª–∏–º–∏—Ç ({hourly_count}/{hourly_limit}) –¥–ª—è {action_type.value}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
        day_ago = now - 86400
        daily_count = sum(1 for ts in actions if ts > day_ago)
        daily_limit = limits["daily"].get(action_type, 0)
        
        if daily_count >= daily_limit:
            return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({daily_count}/{daily_limit}) –¥–ª—è {action_type.value}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π (–Ω–µ —á–∞—â–µ 1 –¥–µ–π—Å—Ç–≤–∏—è –≤ 2 —Å–µ–∫—É–Ω–¥—ã)
        if actions and (now - actions[-1]) < 2:
            return False, "–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 2 —Å–µ–∫—É–Ω–¥—ã"
        
        return True, None
    
    def record_action(self, account_id: int, action_type: ActionType):
        """–ó–∞–ø–∏—Å–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        self._actions[account_id][action_type].append(time.time())
        logger.info(f"‚úÖ –î–µ–π—Å—Ç–≤–∏–µ {action_type.value} –∑–∞–ø–∏—Å–∞–Ω–æ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
    
    def block_action(self, account_id: int, action_type: ActionType, duration_seconds: int):
        """–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"""
        unlock_time = datetime.now() + timedelta(seconds=duration_seconds)
        self._blocks[account_id][action_type] = unlock_time
        logger.warning(f"üîí –î–µ–π—Å—Ç–≤–∏–µ {action_type.value} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –Ω–∞ {duration_seconds} —Å–µ–∫—É–Ω–¥")
    
    def get_action_stats(self, account_id: int) -> Dict[str, Dict[str, int]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–π—Å—Ç–≤–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞"""
        stats = {"hourly": {}, "daily": {}}
        now = time.time()
        hour_ago = now - 3600
        day_ago = now - 86400
        
        for action_type in ActionType:
            actions = self._actions[account_id][action_type]
            stats["hourly"][action_type.value] = sum(1 for ts in actions if ts > hour_ago)
            stats["daily"][action_type.value] = sum(1 for ts in actions if ts > day_ago)
        
        return stats
    
    def get_wait_time(self, account_id: int, action_type: ActionType) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º"""
        age_days = self._get_account_age_days(account_id)
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞
        if age_days < 7:
            base_delay = 30  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–æ–≤—ã—Ö
        elif age_days < 30:
            base_delay = 15  # 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞–µ–º—ã—Ö
        else:
            base_delay = 5   # 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Ç—ã—Ö
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ¬±20%
        import random
        variation = base_delay * 0.2
        delay = base_delay + random.uniform(-variation, variation)
        
        return max(2, int(delay))  # –ú–∏–Ω–∏–º—É–º 2 —Å–µ–∫—É–Ω–¥—ã

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
rate_limiter = RateLimiter() 