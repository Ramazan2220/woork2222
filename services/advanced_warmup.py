import logging
import random
import time
import json
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum

from instagrapi import Client
from instagrapi.exceptions import (
    ClientError, UserNotFound, MediaNotFound,
    LoginRequired, ChallengeRequired
)

from services.anti_detection import anti_detection
from services.rate_limiter import rate_limiter, ActionType
from database.db_manager import get_instagram_account, update_instagram_account

logger = logging.getLogger(__name__)


class WarmupStrategy(Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    BABY = "baby"  # –ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç (0-7 –¥–Ω–µ–π)
    CHILD = "child"  # –ú–æ–ª–æ–¥–æ–π –∞–∫–∫–∞—É–Ω—Ç (7-30 –¥–Ω–µ–π)  
    TEEN = "teen"  # –ü–æ–¥—Ä–æ—Å—Ç–æ–∫ (30-90 –¥–Ω–µ–π)
    ADULT = "adult"  # –í–∑—Ä–æ—Å–ª—ã–π (90+ –¥–Ω–µ–π)
    CUSTOM = "custom"  # –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è


@dataclass(frozen=False)
class WarmupSession:
    """–°–µ—Å—Å–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    account_id: int
    strategy: WarmupStrategy
    duration_minutes: int
    interests: List[str]
    start_time: datetime
    actions_performed: Dict[str, int]
    errors: List[str]
    time_pattern_used: bool = False  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    

class AdvancedWarmupService:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π instagrapi
    """
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è
    TIME_PATTERNS = {
        "morning": {  # 6:00-9:00
            "hours": range(6, 9),
            "duration": (5, 15),
            "actions": ["check_stories", "quick_feed_scroll", "check_notifications"],
            "intensity": 0.3,  # 30% –æ—Ç –æ–±—ã—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            "likes_ratio": 0.2,
            "story_views_ratio": 0.6
        },
        "lunch": {  # 12:00-14:00
            "hours": range(12, 14),
            "duration": (10, 25),
            "actions": ["feed_scroll", "reels", "explore", "save_posts"],
            "intensity": 0.6,
            "likes_ratio": 0.4,
            "reels_ratio": 0.7
        },
        "evening": {  # 18:00-22:00
            "hours": range(18, 22),
            "duration": (20, 45),
            "actions": ["all_features"],
            "intensity": 1.0,  # –ü–æ–ª–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            "likes_ratio": 0.5,
            "comments_ratio": 0.2,
            "save_ratio": 0.3
        },
        "night": {  # 22:00-6:00
            "hours": list(range(22, 24)) + list(range(0, 6)),
            "duration": (5, 10),
            "actions": ["quick_stories", "minimal_activity"],
            "intensity": 0.2,
            "story_views_ratio": 0.8
        }
    }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
    STRATEGY_CONFIGS = {
        WarmupStrategy.BABY: {
            "actions_per_hour": (10, 20),
            "likes_ratio": 0.3,
            "follows_ratio": 0.1,
            "comments_ratio": 0.0,
            "story_views_ratio": 0.4,
            "explore_ratio": 0.2,
            "session_duration": (5, 15),  # –º–∏–Ω—É—Ç—ã
            "sessions_per_day": (3, 5),
            "scroll_depth": (3, 7),  # –ø–æ—Å—Ç—ã
            "read_time": (2, 5)  # —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ—Å—Ç
        },
        WarmupStrategy.CHILD: {
            "actions_per_hour": (20, 40),
            "likes_ratio": 0.4,
            "follows_ratio": 0.15,
            "comments_ratio": 0.05,
            "story_views_ratio": 0.3,
            "explore_ratio": 0.1,
            "session_duration": (10, 30),
            "sessions_per_day": (4, 6),
            "scroll_depth": (5, 15),
            "read_time": (3, 8)
        },
        WarmupStrategy.TEEN: {
            "actions_per_hour": (40, 80),
            "likes_ratio": 0.4,
            "follows_ratio": 0.2,
            "comments_ratio": 0.1,
            "story_views_ratio": 0.2,
            "explore_ratio": 0.1,
            "session_duration": (20, 45),
            "sessions_per_day": (5, 8),
            "scroll_depth": (10, 25),
            "read_time": (2, 6)
        },
        WarmupStrategy.ADULT: {
            "actions_per_hour": (80, 150),
            "likes_ratio": 0.35,
            "follows_ratio": 0.25,
            "comments_ratio": 0.15,
            "story_views_ratio": 0.15,
            "explore_ratio": 0.1,
            "session_duration": (30, 60),
            "sessions_per_day": (6, 10),
            "scroll_depth": (20, 50),
            "read_time": (1, 5)
        }
    }
    
    def __init__(self):
        self.rate_limiter = rate_limiter
        self.anti_detection = anti_detection
        self.active_sessions: Dict[int, WarmupSession] = {}
        self.stop_callback = None  # –î–æ–±–∞–≤–ª—è–µ–º callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
    def determine_strategy(self, account_id: int) -> WarmupStrategy:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            account = get_instagram_account(account_id)
            if not account or not account.created_at:
                return WarmupStrategy.BABY
                
            age_days = (datetime.now() - account.created_at).days
            
            if age_days < 7:
                return WarmupStrategy.BABY
            elif age_days < 30:
                return WarmupStrategy.CHILD
            elif age_days < 90:
                return WarmupStrategy.TEEN
            else:
                return WarmupStrategy.ADULT
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return WarmupStrategy.BABY
    
    def create_instagram_client(self, account_id: int) -> Optional[Client]:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç Instagram —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            # from services.instagram_service import instagram_service  # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù
            from instagram.client import login_with_session
            from utils.smart_validator_service import validate_before_use, ValidationPriority
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ID:{account_id} –ø–µ—Ä–µ–¥ –ø—Ä–æ–≥—Ä–µ–≤–æ–º")
            if not validate_before_use(account_id, ValidationPriority.CRITICAL):
                logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç ID:{account_id} –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None
            
            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç ID:{account_id} –≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—Ö–æ–¥")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            account = get_instagram_account(account_id)
            if not account:
                return None
                
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
            password = instagram_service.get_decrypted_password(account_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –∫—ç—à –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            from instagram.client_patch import add_account_to_cache
            add_account_to_cache(
                account_id,
                account.username,
                account.email,
                account.email_password
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é login_with_session —Å IMAP –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
            cl = login_with_session(
                username=account.username,
                password=password, 
                account_id=account_id,
                email=account.email,
                email_password=account.email_password
            )
            
            if cl:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è @{account.username}")
                
                # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞!
                try:
                    from instagram.session_manager import save_session
                    save_session(cl, account_id)
                    logger.info(f"üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è @{account.username}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é: {e}")
                
                return cl
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –¥–ª—è @{account.username}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
            return None
    
    def simulate_human_scroll(self, posts: List[Any], config: Dict) -> List[Tuple[Any, float]]:
        """
        –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –ª–µ–Ω—Ç—ã
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (–ø–æ—Å—Ç, –≤—Ä–µ–º—è_–ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
        """
        viewed_posts = []
        scroll_depth = random.randint(*config["scroll_depth"])
        
        for i, post in enumerate(posts[:scroll_depth]):
            # –í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            base_time = random.uniform(*config["read_time"])
            
            # –í–∏–¥–µ–æ —Å–º–æ—Ç—Ä–∏–º –¥–æ–ª—å—à–µ
            if hasattr(post, 'media_type') and post.media_type == 2:  # Video
                base_time *= random.uniform(2, 4)
            
            # –ö–∞—Ä—É—Å–µ–ª–∏ —Ç–æ–∂–µ –¥–æ–ª—å—à–µ  
            elif hasattr(post, 'media_type') and post.media_type == 8:  # Carousel
                base_time *= random.uniform(1.5, 2.5)
            
            # –ò–Ω–æ–≥–¥–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ–¥–æ–ª—å—à–µ (–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å)
            if random.random() < 0.15:
                base_time *= random.uniform(2, 5)
            
            # –ò–Ω–æ–≥–¥–∞ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–µ–º
            elif random.random() < 0.3:
                base_time *= random.uniform(0.3, 0.7)
            
            viewed_posts.append((post, base_time))
            
            # –ò–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–æ—Å—Ç—É
            if i > 0 and random.random() < 0.1:
                prev_post, prev_time = viewed_posts[i-1]
                extra_time = random.uniform(1, 3)
                viewed_posts[i-1] = (prev_post, prev_time + extra_time)
        
        return viewed_posts
    
    def perform_warmup_actions(
        self, 
        cl: Client, 
        session: WarmupSession,
        config: Dict
    ) -> Dict[str, int]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞"""
        actions = {
            "feed_views": 0,
            "likes": 0,
            "follows": 0,
            "comments": 0,
            "story_views": 0,
            "explore_views": 0,
            "profile_visits": 0,
            "saved_posts": 0,  # –ù–æ–≤–æ–µ
            "reels_views": 0,  # –ù–æ–≤–æ–µ
            "video_loops": 0,  # –ù–æ–≤–æ–µ
            "location_searches": 0,  # –ù–æ–≤–æ–µ
            "notification_checks": 0,  # –ù–æ–≤–æ–µ
            "long_press_previews": 0,  # –ù–æ–≤–æ–µ
            "accidental_likes": 0,  # –ù–æ–≤–æ–µ
            "cancelled_comments": 0,  # –ù–æ–≤–æ–µ
            "ad_clicks": 0  # –ù–æ–≤–æ–µ
        }
        
        try:
            # 1. –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –ª–µ–Ω—Ç—ã
            if random.random() < 0.9:  # 90% —Å–µ—Å—Å–∏–π –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –ª–µ–Ω—Ç—ã
                logger.info("üì± –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–µ–Ω—Ç—É...")
                
                # –≠–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                time.sleep(random.uniform(0.5, 2))
                
                # –ü–æ–ª—É—á–∞–µ–º –ª–µ–Ω—Ç—É
                timeline = cl.get_timeline_feed()
                if timeline and 'feed_items' in timeline:
                    posts = [item['media_or_ad'] for item in timeline['feed_items'] 
                            if 'media_or_ad' in item]
                    
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
                    viewed_posts = self.simulate_human_scroll(posts, config)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    self._current_feed_posts = posts
                    
                    for post, view_time in viewed_posts:
                        # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º
                        logger.info(f"üëÄ –°–º–æ—Ç—Ä–∏–º –ø–æ—Å—Ç {view_time:.1f} —Å–µ–∫...")
                        time.sleep(view_time)
                        actions["feed_views"] += 1
                        
                        # –†–µ—à–∞–µ–º, –ª–∞–π–∫–∞—Ç—å –ª–∏
                        if random.random() < config["likes_ratio"]:
                            if self._can_perform_action(session.account_id, ActionType.LIKE):
                                try:
                                    cl.media_like(post['id'])
                                    actions["likes"] += 1
                                    logger.info("‚ù§Ô∏è –ü–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫")
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∞–π–∫–Ω—É—Ç—ã–π –ø–æ—Å—Ç
                                    self._last_liked_media = post['id']
                                    
                                    # –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –ª–∞–π–∫–∞
                                    time.sleep(random.uniform(0.5, 1.5))
                                except Exception as e:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ª–∞–π–∫–Ω—É—Ç—å: {e}")
            
            # 2. –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–æ—Ä–∏—Å
            if random.random() < config["story_views_ratio"]:
                logger.info("üì∏ –°–º–æ—Ç—Ä–∏–º –∏—Å—Ç–æ—Ä–∏–∏...")
                self._view_stories(cl, session, config, actions)
            
            # 3. –ü–æ—Å–µ—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –ø–æ–¥–ø–∏—Å–∫–∏
            if random.random() < config["follows_ratio"]:
                logger.info("üë§ –ò–∑—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏...")
                self._explore_profiles(cl, session, config, actions)
            
            # 4. –†–∞–∑–¥–µ–ª Explore
            if random.random() < config["explore_ratio"]:
                logger.info("üîç –ó–∞—Ö–æ–¥–∏–º –≤ Explore...")
                self._browse_explore(cl, session, config, actions)
            
            # 5. –ü–æ–∏—Å–∫ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
            if session.interests and random.random() < 0.3:
                interest = random.choice(session.interests)
                logger.info(f"üîé –ò—â–µ–º –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É: {interest}")
                self._search_by_interest(cl, session, interest, config, actions)
            
            # 6. Reels (–ü–†–ò–û–†–ò–¢–ï–¢)
            if random.random() < config.get("reels_ratio", 0.4):
                self._browse_reels(cl, session)
            
            # 7. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ (–ü–†–ò–û–†–ò–¢–ï–¢) 
            if random.random() < config.get("save_ratio", 0.2):
                self._save_interesting_posts(cl, session)
            
            # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ü–†–ò–û–†–ò–¢–ï–¢)
            if random.random() < 0.4:  # –î–æ–≤–æ–ª—å–Ω–æ —á–∞—Å—Ç–æ
                self._check_notifications(cl, session, actions)
            
            # 9. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π
            if random.random() < 0.15:
                self._explore_locations(cl, session, config, actions)
            
            # 10. UI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤—Å–µ–π —Å–µ—Å—Å–∏–∏
            self._simulate_ui_interactions(cl, session, actions)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if hasattr(self, '_current_feed_posts'):
                self._last_viewed_posts = self._current_feed_posts
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ: {e}")
            session.errors.append(str(e))
        
        return actions
    
    def _view_stories(self, cl: Client, session: WarmupSession, config: Dict, actions: Dict):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–π
            stories_tray = cl.get_timeline_feed().get('tray', [])
            
            if stories_tray:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                stories_to_view = random.randint(3, min(10, len(stories_tray)))
                selected_stories = random.sample(stories_tray, stories_to_view)
                
                for story_item in selected_stories:
                    if 'user' in story_item:
                        username = story_item['user'].get('username', 'unknown')
                        
                        # –í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
                        view_time = random.uniform(1.5, 4.5)
                        
                        # –ò–Ω–æ–≥–¥–∞ –¥–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞
                        if random.random() < 0.3:
                            view_time = random.uniform(4, 7)
                        
                        # –ò–Ω–æ–≥–¥–∞ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        elif random.random() < 0.2:
                            view_time = random.uniform(0.5, 1)
                        
                        logger.info(f"üì∏ –°–º–æ—Ç—Ä–∏–º –∏—Å—Ç–æ—Ä–∏—é @{username} ({view_time:.1f} —Å–µ–∫)")
                        time.sleep(view_time)
                        actions["story_views"] += 1
                        
                        # –ò–Ω–æ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é
                        if random.random() < 0.05:  # 5% —à–∞–Ω—Å
                            reactions = ["üî•", "üòç", "üëè", "üíØ", "üôå"]
                            reaction = random.choice(reactions)
                            logger.info(f"üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é: {reaction}")
                            time.sleep(random.uniform(1, 2))
                            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∏—Å—Ç–æ—Ä–∏–π: {e}")
    
    def _explore_profiles(self, cl: Client, session: WarmupSession, config: Dict, actions: Dict):
        """–ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
            if session.interests:
                search_query = random.choice(session.interests)
            else:
                search_query = random.choice(["travel", "food", "fitness", "art", "nature"])
            
            users = cl.search_users(search_query)[:20]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
            if users:
                # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                profiles_to_view = random.randint(2, min(5, len(users)))
                selected_users = random.sample(users, profiles_to_view)
                
                for user in selected_users:
                    # –ó–∞—Ö–æ–¥–∏–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
                    logger.info(f"üë§ –ó–∞—Ö–æ–¥–∏–º –∫ @{user.username}")
                    
                    # –≠–º—É–ª–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—Ñ–∏–ª—è
                    time.sleep(random.uniform(1, 2.5))
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è
                    user_info = cl.user_info(user.pk)
                    actions["profile_visits"] += 1
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                    browse_time = random.uniform(3, 10)
                    
                    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π - —Å–º–æ—Ç—Ä–∏–º –¥–æ–ª—å—à–µ
                    if user_info.media_count > 50 and user_info.follower_count > 1000:
                        browse_time *= random.uniform(1.5, 2.5)
                        
                        # –°–º–æ—Ç—Ä–∏–º –ø–æ—Å—Ç—ã
                        logger.info(f"üì∑ –°–º–æ—Ç—Ä–∏–º –ø–æ—Å—Ç—ã @{user.username}")
                        time.sleep(browse_time)
                        
                        # –†–µ—à–∞–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ª–∏
                        if random.random() < config["follows_ratio"]:
                            if self._can_perform_action(session.account_id, ActionType.FOLLOW):
                                try:
                                    cl.user_follow(user.pk)
                                    actions["follows"] += 1
                                    logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ @{user.username}")
                                    
                                    # –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –º–æ–∂–µ–º –ø–æ–ª–∞–π–∫–∞—Ç—å –ø–∞—Ä—É –ø–æ—Å—Ç–æ–≤
                                    if random.random() < 0.5:
                                        medias = cl.user_medias(user.pk, amount=3)
                                        for media in medias[:random.randint(1, 2)]:
                                            if self._can_perform_action(session.account_id, ActionType.LIKE):
                                                cl.media_like(media.pk)
                                                actions["likes"] += 1
                                                time.sleep(random.uniform(1, 2))
                                                
                                except Exception as e:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: {e}")
                    else:
                        # –ë—ã—Å—Ç—Ä–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∏ —É—Ö–æ–¥–∏–º
                        time.sleep(browse_time)
                        
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
    
    def _browse_explore(self, cl: Client, session: WarmupSession, config: Dict, actions: Dict):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑–¥–µ–ª–∞ Explore"""
        try:
            logger.info("üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º Explore...")
            
            # –≠–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –≤ Explore
            time.sleep(random.uniform(0.5, 1.5))
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ—Å—Ç—ã
            # –í instagrapi –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è explore, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º
            trending_tags = ["instagood", "photooftheday", "beautiful", "love", "nature"]
            tag = random.choice(trending_tags)
            
            medias = cl.hashtag_medias_recent(tag, amount=20)
            
            if medias:
                # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ—Å—Ç—ã
                viewed_posts = self.simulate_human_scroll(medias, config)
                
                for media, view_time in viewed_posts:
                    logger.info(f"üîç –°–º–æ—Ç—Ä–∏–º –ø–æ—Å—Ç –≤ Explore ({view_time:.1f} —Å–µ–∫)")
                    time.sleep(view_time)
                    actions["explore_views"] += 1
                    
                    # –ò–Ω–æ–≥–¥–∞ –ª–∞–π–∫–∞–µ–º
                    if random.random() < config["likes_ratio"] * 0.7:  # –ß—É—Ç—å —Ä–µ–∂–µ —á–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–µ–Ω—Ç–µ
                        if self._can_perform_action(session.account_id, ActionType.LIKE):
                            try:
                                cl.media_like(media.pk)
                                actions["likes"] += 1
                                logger.info("‚ù§Ô∏è –õ–∞–π–∫ –≤ Explore")
                            except:
                                pass
                                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –≤ Explore: {e}")
    
    def _search_by_interest(self, cl: Client, session: WarmupSession, interest: str, config: Dict, actions: Dict):
        """–ü–æ–∏—Å–∫ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
        try:
            # –ò—â–µ–º —Ö–µ—à—Ç–µ–≥–∏
            hashtags = cl.search_hashtags(interest)  # –£–±—Ä–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä count
            
            if hashtags:
                hashtag = random.choice(hashtags[:5])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5
                logger.info(f"#Ô∏è‚É£ –ò–∑—É—á–∞–µ–º #{hashtag.name}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
                medias = cl.hashtag_medias_recent(hashtag.name, amount=10)
                
                if medias:
                    # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ
                    for media in medias[:random.randint(3, 7)]:
                        view_time = random.uniform(*config["read_time"])
                        time.sleep(view_time)
                        actions["explore_views"] += 1
                        
                        # –õ–∞–π–∫–∞–µ–º –µ—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å
                        if random.random() < config["likes_ratio"]:
                            if self._can_perform_action(session.account_id, ActionType.LIKE):
                                try:
                                    cl.media_like(media.pk)
                                    actions["likes"] += 1
                                    logger.info(f"‚ù§Ô∏è –õ–∞–π–∫ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É {interest}")
                                except:
                                    pass
                                    
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º: {e}")
    
    def _can_perform_action(self, account_id: int, action_type: ActionType) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ"""
        can_do, reason = rate_limiter.can_perform_action(account_id, action_type)
        if not can_do:
            logger.warning(f"‚è≥ {reason}")
        return can_do
    
    def start_warmup(
        self, 
        account_id: int, 
        duration_minutes: int = 30,
        interests: List[str] = None,
        strategy: WarmupStrategy = None
    ) -> Tuple[bool, str]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            if not strategy:
                strategy = self.determine_strategy(account_id)
            
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {strategy.value}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            session = WarmupSession(
                account_id=account_id,
                strategy=strategy,
                duration_minutes=duration_minutes,
                interests=interests or [],
                start_time=datetime.now(),
                actions_performed={},
                errors=[],
                time_pattern_used=False # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω
            cl = self.create_instagram_client(account_id)
            if not cl:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
            try:
                # –î–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                cl.user_info(cl.user_id)
            except Exception as e:
                error_msg = str(e)
                if "login_required" in error_msg or "challenge_required" in error_msg:
                    logger.error(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {error_msg}")
                    return False, f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥: {error_msg}"
                elif "user_not_found" in error_msg or "We can't find an account" in error_msg:
                    logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Instagram")
                    return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Instagram"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            self.active_sessions[account_id] = session
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            import threading
            stop_check_event = threading.Event()
            
            def check_stop():
                while not stop_check_event.is_set():
                    if self.stop_callback and self.stop_callback():
                        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
                        session.is_active = False
                        break
                    time.sleep(1)
            
            stop_thread = threading.Thread(target=check_stop)
            stop_thread.daemon = True
            stop_thread.start()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            config = self.STRATEGY_CONFIGS[strategy]
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω (–ü–†–ò–û–†–ò–¢–ï–¢)
            time_pattern = self.determine_time_pattern()
            if time_pattern:
                logger.info(f"‚è∞ –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å {time_pattern['intensity']*100:.0f}%")
                
                # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                config = config.copy()
                for key in ['likes_ratio', 'follows_ratio', 'comments_ratio', 'story_views_ratio']:
                    if key in config:
                        config[key] *= time_pattern['intensity']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
                if 'duration' in time_pattern:
                    duration_minutes = min(
                        duration_minutes,
                        random.randint(*time_pattern['duration'])
                    )
                session.time_pattern_used = True # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ–≤
            end_time = datetime.now() + timedelta(minutes=duration_minutes)
            total_actions = {}
            
            while datetime.now() < end_time:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤
                if self.stop_callback and self.stop_callback():
                    logger.info("‚èπÔ∏è –ü—Ä–æ–≥—Ä–µ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    break
                    
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                actions = self.perform_warmup_actions(cl, session, config)
                
                # –°—É–º–º–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                for action, count in actions.items():
                    total_actions[action] = total_actions.get(action, 0) + count
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                pause = random.uniform(30, 120)
                logger.info(f"‚è∏Ô∏è –ü–∞—É–∑–∞ {pause:.0f} —Å–µ–∫—É–Ω–¥...")
                time.sleep(pause)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ—Ä–∞ –ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–µ—Å—Å–∏—é
                session_duration = (datetime.now() - session.start_time).seconds / 60
                min_duration, max_duration = config["session_duration"]
                
                if session_duration > random.uniform(min_duration, max_duration):
                    logger.info("üì± –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–∫–æ–Ω–µ—Ü —Å–µ—Å—Å–∏–∏)")
                    break
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            session.actions_performed = total_actions
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞
            update_instagram_account(
                account_id,
                last_warmup=datetime.now(),
                warmup_stats=json.dumps(total_actions)
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"""
‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!

üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ª–µ–Ω—Ç—ã: {total_actions.get('feed_views', 0)}
‚Ä¢ –õ–∞–π–∫–æ–≤: {total_actions.get('likes', 0)}
‚Ä¢ –ü–æ–¥–ø–∏—Å–æ–∫: {total_actions.get('follows', 0)}
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏—Å—Ç–æ—Ä–∏–π: {total_actions.get('story_views', 0)}
‚Ä¢ –ü–æ—Å–µ—â–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª–µ–π: {total_actions.get('profile_visits', 0)}
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ Explore: {total_actions.get('explore_views', 0)}

üé¨ Reels –∏ –≤–∏–¥–µ–æ:
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ Reels: {total_actions.get('reels_views', 0)}
‚Ä¢ –ó–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ: {total_actions.get('video_loops', 0)}

üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_actions.get('saved_posts', 0)}

üìç –õ–æ–∫–∞—Ü–∏–∏:
‚Ä¢ –ü–æ–∏—Å–∫–æ–≤ –º–µ—Å—Ç: {total_actions.get('location_searches', 0)}

üîî –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {total_actions.get('notification_checks', 0)}

üéØ UI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ –î–æ–ª–≥–∏—Ö –Ω–∞–∂–∞—Ç–∏–π: {total_actions.get('long_press_previews', 0)}
‚Ä¢ –°–ª—É—á–∞–π–Ω—ã—Ö –ª–∞–π–∫–æ–≤: {total_actions.get('accidental_likes', 0)}
‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_actions.get('cancelled_comments', 0)}
‚Ä¢ –ö–ª–∏–∫–æ–≤ –Ω–∞ —Ä–µ–∫–ª–∞–º—É: {total_actions.get('ad_clicks', 0)}

‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(datetime.now() - session.start_time).seconds // 60} –º–∏–Ω—É—Ç
üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy.value}
‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: {"–ü—Ä–∏–º–µ–Ω–µ–Ω" if session.time_pattern_used else "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"}
"""
            
            del self.active_sessions[account_id]
            return True, report
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
            if account_id in self.active_sessions:
                del self.active_sessions[account_id]
            return False, str(e)
    
    def determine_time_pattern(self) -> Optional[Dict]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω"""
        current_hour = datetime.now().hour
        current_day = datetime.now().weekday()
        
        # –í—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞=5, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6)
        is_weekend = current_day in [5, 6]
        
        for pattern_name, pattern in self.TIME_PATTERNS.items():
            if current_hour in pattern["hours"]:
                pattern_copy = pattern.copy()
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
                if is_weekend:
                    pattern_copy["intensity"] *= 1.3
                    pattern_copy["duration"] = (
                        int(pattern["duration"][0] * 1.5),
                        int(pattern["duration"][1] * 1.5)
                    )
                    
                return pattern_copy
        
        return None
    
    def _save_interesting_posts(self, cl: Client, session: WarmupSession) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        if not self._can_perform_action("save", session):
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–µ–Ω—Ç—É
            timeline = cl.timeline_feed()
            if not timeline or not hasattr(timeline, 'feed_items'):
                return
                
            posts = [item.media for item in timeline.feed_items if hasattr(item, 'media')][:10]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º 1-3 –ø–æ—Å—Ç–∞
            posts_to_save = random.randint(1, min(3, len(posts)))
            saved = 0
            
            for post in random.sample(posts, min(posts_to_save, len(posts))):
                try:
                    cl.media_save(post.pk)
                    session.posts_saved += 1
                    saved += 1
                    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å—Ç –æ—Ç @{post.user.username}")
                    time.sleep(random.uniform(2, 5))
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å—Ç: {e}")
                    
            if saved > 0:
                logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved} –ø–æ—Å—Ç–æ–≤")
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
    
    def _browse_reels(self, cl: Client, session: WarmupSession) -> None:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä Reels"""
        if not self._can_perform_action("reels", session):
            return
            
        logger.info("üé¨ –û—Ç–∫—Ä—ã–≤–∞–µ–º Reels...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º Reels —á–µ—Ä–µ–∑ hashtag –∏–ª–∏ timeline
            reels_items = []
            try:
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ —Ö–µ—à—Ç–µ–≥
                reels_tag = cl.hashtag_medias_recent('reels', amount=20)
                reels_items = [m for m in reels_tag if m.media_type == 2]  # 2 = video/reel
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Reels —á–µ—Ä–µ–∑ —Ö–µ—à—Ç–µ–≥: {e}")
                
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º timeline
            if not reels_items:
                try:
                    timeline = cl.user_medias(cl.user_id, amount=20)
                    reels_items = [m for m in timeline if m.media_type == 2]
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Reels –∏–∑ timeline: {e}")
            
            if reels_items:
                reels_to_view = random.randint(5, min(15, len(reels_items)))
                logger.info(f"üé• –°–º–æ—Ç—Ä–∏–º {reels_to_view} Reels...")
                
                for i, reel in enumerate(reels_items[:reels_to_view]):
                    # –í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    duration = getattr(reel, 'video_duration', 15) if hasattr(reel, 'video_duration') else 15
                    view_time = min(duration * 0.8, random.uniform(10, 30))
                    
                    logger.info(f"‚ñ∂Ô∏è –°–º–æ—Ç—Ä–∏–º Reel {i+1}/{reels_to_view} ({view_time:.1f} —Å–µ–∫)...")
                    time.sleep(view_time)
                    
                    # –ò–Ω–æ–≥–¥–∞ –ª–∞–π–∫–∞–µ–º
                    if random.random() < 0.3:
                        try:
                            cl.media_like(reel.pk)
                            session.reels_watched += 1
                            logger.info("‚ù§Ô∏è –õ–∞–π–∫–Ω—É–ª–∏ Reel")
                        except Exception as e:
                            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ª–∞–π–∫–Ω—É—Ç—å: {e}")
                    
                    # –ò–Ω–æ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                    if random.random() < 0.1:
                        try:
                            cl.media_save(reel.pk)
                            session.posts_saved += 1
                            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ Reel")
                        except Exception as e:
                            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")
                            
                    # –ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –≤–∏–¥–µ–æ (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä)
                    if random.random() < 0.15:
                        logger.info("üîÑ –ü–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –≤–∏–¥–µ–æ...")
                        time.sleep(random.uniform(5, 15))
                        
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≤–∏–¥–µ–æ
                    time.sleep(random.uniform(2, 5))
                    
                logger.info(f"‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ {reels_to_view} Reels")
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ Reels: {e}")
    
    def _explore_locations(self, cl: Client, session: WarmupSession, config: Dict, actions: Dict):
        """–ò—Å–∫–∞—Ç—å –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ—Å—Ç—ã"""
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            lat = 55.7558  # –ú–æ—Å–∫–≤–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            lng = 37.6173
            
            logger.info("üìç –ò—â–µ–º –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...")
            
            # –ü–æ–∏—Å–∫ –º–µ—Å—Ç
            nearby_locations = cl.location_search(lat, lng)
            
            if nearby_locations:
                # –í—ã–±–∏—Ä–∞–µ–º 1-3 –º–µ—Å—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
                locations_to_explore = random.sample(
                    nearby_locations, 
                    min(random.randint(1, 3), len(nearby_locations))
                )
                
                for location in locations_to_explore:
                    logger.info(f"üìç –ò–∑—É—á–∞–µ–º –º–µ—Å—Ç–æ: {location.name}")
                    actions["location_searches"] += 1
                    
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ –º–µ—Å—Ç–∞
                    location_medias = cl.location_medias_recent(location.pk, amount=10)
                    
                    # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤
                    for media in location_medias[:random.randint(3, 7)]:
                        view_time = random.uniform(2, 5)
                        time.sleep(view_time)
                        actions["explore_views"] += 1
                        
                        # –ò–Ω–æ–≥–¥–∞ –ª–∞–π–∫–∞–µ–º –º–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                        if random.random() < 0.15:
                            if self._can_perform_action(session.account_id, ActionType.LIKE):
                                try:
                                    cl.media_like(media.pk)
                                    actions["likes"] += 1
                                except:
                                    pass
                                    
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–π: {e}")
    
    def _check_notifications(self, cl: Client, session: WarmupSession, actions: Dict):
        """–ü—Ä–æ–≤–µ—Ä—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–ü–†–ò–û–†–ò–¢–ï–¢)"""
        try:
            logger.info("üîî –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
            
            # –≠–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            time.sleep(random.uniform(1, 2))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –¥–ª—è –ª–∞–π–∫–æ–≤
            account = get_instagram_account(session.account_id)
            if account and account.username:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
                    user_id = cl.user_id_from_username(account.username)
                    
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞, –Ω–æ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
                    try:
                        user_medias = cl.user_medias(user_id, amount=3)
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞: {e}")
                        user_medias = []
                    
                    for media in user_medias:
                        # –°–º–æ—Ç—Ä–∏–º –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª (–ü–†–ò–û–†–ò–¢–ï–¢)
                        try:
                            likers = cl.media_likers(media.pk)
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∞–π–∫–∏: {e}")
                            continue
                        
                        if likers:
                            logger.info(f"üë• {len(likers)} –ª–∞–π–∫–æ–≤ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–æ—Å—Ç–µ")
                            
                            # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –ª–∞–π–∫–Ω—É–≤—à–∏—Ö
                            for liker in likers[:random.randint(2, 5)]:
                                time.sleep(random.uniform(0.5, 1.5))
                                
                                # –ò–Ω–æ–≥–¥–∞ –∑–∞—Ö–æ–¥–∏–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
                                if random.random() < 0.3:
                                    logger.info(f"üë§ –°–º–æ—Ç—Ä–∏–º –ø—Ä–æ—Ñ–∏–ª—å @{liker.username}")
                                    actions["profile_visits"] += 1
                                    time.sleep(random.uniform(2, 4))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                    followers = cl.user_followers(user_id, amount=20)
                    logger.info(f"üë• –ü—Ä–æ–≤–µ—Ä—è–µ–º {len(followers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                    
                    actions["notification_checks"] += 1
                    
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
                    
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    def _simulate_ui_interactions(self, cl: Client, session: WarmupSession, actions: Dict):
        """–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å UI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)"""
        try:
            # –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–ü–†–ò–û–†–ò–¢–ï–¢)
            if random.random() < 0.15:  # 15% –ø–æ—Å—Ç–æ–≤
                logger.info("üëÜ –î–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                press_duration = random.uniform(0.8, 2.5)
                time.sleep(press_duration)
                actions["long_press_previews"] += 1
            
            # –°–ª—É—á–∞–π–Ω–æ –ª–∞–π–∫–Ω—É—Ç—å –∏ —É–±—Ä–∞—Ç—å (–ü–†–ò–û–†–ò–¢–ï–¢)
            if random.random() < 0.05 and hasattr(self, '_last_liked_media'):  # 5% —à–∞–Ω—Å
                logger.info("üòÖ –£–ø—Å, —Å–ª—É—á–∞–π–Ω–æ –ª–∞–π–∫–Ω—É–ª–∏")
                
                # –ë—ã—Å—Ç—Ä–æ —É–±–∏—Ä–∞–µ–º –ª–∞–π–∫
                time.sleep(random.uniform(0.5, 1.5))
                
                try:
                    if self._last_liked_media:
                        cl.media_unlike(self._last_liked_media)
                        logger.info("‚ùå –£–±—Ä–∞–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π –ª–∞–π–∫")
                        actions["accidental_likes"] += 1
                except:
                    pass
            
            # –ù–∞—á–∞—Ç—å –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –æ—Ç–º–µ–Ω–∏—Ç—å (–ü–†–ò–û–†–ò–¢–ï–¢)
            if random.random() < 0.1:  # 10% —à–∞–Ω—Å
                logger.info("üí≠ –ù–∞—á–∏–Ω–∞–µ–º –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
                
                # –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
                typing_time = random.uniform(3, 8)
                time.sleep(typing_time)
                
                # 70% —à–∞–Ω—Å –ø–µ—Ä–µ–¥—É–º–∞—Ç—å
                if random.random() < 0.7:
                    logger.info("‚ùå –ü–µ—Ä–µ–¥—É–º–∞–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å")
                    actions["cancelled_comments"] += 1
                else:
                    # –î–æ–ø–∏—Å—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    logger.info("üí¨ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            
            # –ò–Ω–æ–≥–¥–∞ –∫–ª–∏–∫–∞—Ç—å –Ω–∞ —Ä–µ–∫–ª–∞–º—É
            if random.random() < 0.03:  # 3% —à–∞–Ω—Å
                logger.info("üì¢ –°–ª—É—á–∞–π–Ω–æ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Ä–µ–∫–ª–∞–º—É")
                time.sleep(random.uniform(2, 5))
                actions["ad_clicks"] += 1
                
                # –≠–º—É–ª–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç
                time.sleep(random.uniform(1, 2))
                logger.info("‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –∏–∑ —Ä–µ–∫–ª–∞–º—ã")
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ UI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {e}")
    
    def stop_warmup(self, account_id: int) -> Tuple[bool, str]:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤"""
        if account_id in self.active_sessions:
            del self.active_sessions[account_id]
            return True, "–ü—Ä–æ–≥—Ä–µ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return False, "–ü—Ä–æ–≥—Ä–µ–≤ –Ω–µ –∑–∞–ø—É—â–µ–Ω"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
advanced_warmup = AdvancedWarmupService() 