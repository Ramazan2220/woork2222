#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Web API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞ —Å Instagram Telegram Bot
"""

import os
import sys
import json
import logging
import threading
import concurrent.futures
from datetime import datetime
from flask import Flask, request, jsonify, send_from_directory, send_file
from flask_cors import CORS
import requests
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –í–ê–ñ–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º monkey patch –ü–ï–†–í–´–ú –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–µ–π —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
from instagram.monkey_patch import *
from instagram.deep_patch import apply_deep_patch

# –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª—É–±–æ–∫–∏–π –ø–∞—Ç—á
apply_deep_patch()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
from database.db_manager import (
    init_db, get_instagram_accounts, add_instagram_account, add_instagram_account_without_login,
    get_instagram_account, update_instagram_account, delete_instagram_account,
    get_proxies, add_proxy, get_proxy, update_proxy, delete_proxy,
    assign_proxy_to_account, bulk_add_instagram_accounts
)
from database.models import InstagramAccount, Proxy

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π Instagram
try:
    from instagram.client import test_instagram_login_with_proxy
    INTEGRATION_AVAILABLE = True
    logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError as e:
    INTEGRATION_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
except Exception as e:
    INTEGRATION_AVAILABLE = False
    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e}")

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
init_db()

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞
@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    return send_from_directory('web-dashboard', 'index.html')

@app.route('/<path:filename>')
def static_files(filename):
    """–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–∞—à–±–æ—Ä–¥–∞"""
    return send_from_directory('web-dashboard', filename)

# =============================================================================
# API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
# =============================================================================

@app.route('/api/accounts', methods=['GET'])
def get_accounts():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        accounts = get_instagram_accounts()
        accounts_data = []
        
        for account in accounts:
            account_data = {
                'id': account.id,
                'username': account.username,
                'email': account.email,
                'full_name': account.full_name or '',
                'biography': account.biography or '',
                'is_active': account.is_active,
                'created_at': account.created_at.isoformat() if account.created_at else None,
                'updated_at': account.updated_at.isoformat() if account.updated_at else None,
                'proxy_id': account.proxy_id,
                'proxy': None
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω
            if account.proxy_id:
                proxy = get_proxy(account.proxy_id)
                if proxy:
                    account_data['proxy'] = {
                        'id': proxy.id,
                        'host': proxy.host,
                        'port': proxy.port,
                        'protocol': proxy.protocol
                    }
            
            accounts_data.append(account_data)
        
        return jsonify({
            'success': True,
            'data': accounts_data,
            'total': len(accounts_data)
        })
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/accounts', methods=['POST'])
def add_account():
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
    try:
        data = request.get_json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['username', 'password']
        for field in required_fields:
            if field not in data or not data[field]:
                return jsonify({
                    'success': False,
                    'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
                }), 400
        
        username = data['username']
        password = data['password']
        email = data.get('email', '')
        email_password = data.get('email_password', '')
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        existing_accounts = get_instagram_accounts()
        for acc in existing_accounts:
            if acc.username == username:
                return jsonify({
                    'success': False,
                    'error': f'–ê–∫–∫–∞—É–Ω—Ç —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                }), 400
        
        if INTEGRATION_AVAILABLE and (email and email_password):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            import threading
            import asyncio
            
            def background_add_account():
                """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
                try:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    
                    async def run_add_account():
                        logger.info(f"üîÑ –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {username} –Ω–∞—á–∞—Ç–∞")
                        
                        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                        success = True
                        message = "–ê–∫–∫–∞—É–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
                        account_data = None
                        
                        # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ Instagram
                        from instagram.client import test_instagram_login_with_proxy
                        login_success = test_instagram_login_with_proxy(
                            account_id=account.id,
                            username=username,
                            password=password,
                            email=email,
                            email_password=email_password
                        )
                        
                        if login_success:
                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Instagram –¥–ª—è {username}")
                            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
                            from database.db_manager import update_instagram_account
                            update_instagram_account(account.id, is_active=True)
                            message = "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                        else:
                            logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Instagram")
                            message = "–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Instagram"
                            success = False
                        
                        return success, message, account_data
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                    success, message, account_data = loop.run_until_complete(run_add_account())
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {username}: {e}")
                finally:
                    loop.close()
            
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            account = add_instagram_account_without_login(
                username=username,
                password=password,
                email=email,
                email_password=email_password
            )
            
            if not account:
                return jsonify({
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
                    'integration_used': False
                }), 500
            
            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î —Å ID {account.id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if 'full_name' in data or 'biography' in data:
                update_instagram_account(
                    account.id,
                    full_name=data.get('full_name', ''),
                    biography=data.get('biography', '')
                )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            thread = threading.Thread(target=background_add_account, daemon=True)
            thread.start()
            
            return jsonify({
                'success': True,
                'data': {
                    'id': account.id,
                    'username': account.username,
                    'email': account.email,
                    'full_name': data.get('full_name', ''),
                    'biography': data.get('biography', ''),
                    'is_active': account.is_active,
                    'created_at': account.created_at.isoformat(),
                    'processing': True
                },
                'message': f'–ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –í—Å–∫–æ—Ä–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ.',
                'integration_used': True,
                'processing': True
            })
        else:
            # –î–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ—á—Ç—ã –∏–ª–∏ –±–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∫–∞–∫ –≤ Telegram –±–æ—Ç–µ
            logger.info(f"üìù –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç {username} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞
            account = add_instagram_account_without_login(
                username=username,
                password=password,
                email=email,
                email_password=email_password
            )
            
            if not account:
                return jsonify({
                    'success': False,
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
                    'integration_used': False
                }), 500
            
            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î —Å ID {account.id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            if 'full_name' in data or 'biography' in data:
                update_instagram_account(
                    account.id,
                    full_name=data.get('full_name', ''),
                    biography=data.get('biography', '')
                )
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            logger.info(f"üì° –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}")
            from utils.proxy_manager import assign_proxy_to_account
            proxy_success, proxy_message = assign_proxy_to_account(account.id)
            
            if not proxy_success:
                logger.warning(f"‚ö†Ô∏è {proxy_message}")
            else:
                logger.info(f"‚úÖ {proxy_message}")
            
            return jsonify({
                'success': True,
                'data': {
                    'id': account.id,
                    'username': account.username,
                    'email': account.email,
                    'full_name': data.get('full_name', ''),
                    'biography': data.get('biography', ''),
                    'is_active': account.is_active,
                    'created_at': account.created_at.isoformat(),
                    'proxy_assigned': proxy_success,
                    'login_successful': False
                },
                'message': f'–ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –ø–æ–ª–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã.',
                'integration_used': False
            })
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/accounts/bulk', methods=['POST'])
def bulk_add_accounts():
    """–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–¥–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    try:
        data = request.get_json()
        
        if 'accounts' not in data or not isinstance(data['accounts'], list):
            return jsonify({
                'success': False,
                'error': '–ü–æ–ª–µ accounts –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤'
            }), 400
        
        accounts_data = data['accounts']
        
        if len(accounts_data) == 0:
            return jsonify({
                'success': False,
                'error': '–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 - –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ)
        parallel_threads = data.get('parallel_threads', 1)
        if parallel_threads < 1:
            parallel_threads = 1
        elif parallel_threads > 5:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            parallel_threads = 5
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {len(accounts_data)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–ø–æ—Ç–æ–∫–æ–≤: {parallel_threads})")
        
        def process_single_account(account_data, account_index):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
            username = account_data.get('username', '').strip()
            password = account_data.get('password', '').strip()
            email = account_data.get('email', '').strip()
            email_password = account_data.get('email_password', '').strip()
            
            try:
                logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç {account_index + 1}/{len(accounts_data)}: {username}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if not username or not password:
                    logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {username}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                    return False
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                account = add_instagram_account_without_login(
                    username=username,
                    password=password,
                    email=email,
                    email_password=email_password
                )
                
                if not account:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {username} –≤ –ë–î")
                    return False
                
                logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î —Å ID {account.id}")
                
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                logger.info(f"üì° –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}")
                from utils.proxy_manager import assign_proxy_to_account
                proxy_success, proxy_message = assign_proxy_to_account(account.id)
                
                if not proxy_success:
                    logger.warning(f"‚ö†Ô∏è {proxy_message}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å email –¥–∞–Ω–Ω—ã–µ, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ Instagram
                if email and email_password and INTEGRATION_AVAILABLE:
                    logger.info(f"üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ Instagram –¥–ª—è {username}")
                    
                    from instagram.client import test_instagram_login_with_proxy
                    login_success = test_instagram_login_with_proxy(
                        account_id=account.id,
                        username=username,
                        password=password,
                        email=email,
                        email_password=email_password
                    )
                    
                    if login_success:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Instagram –¥–ª—è {username}")
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
                        from database.db_manager import update_instagram_account
                        update_instagram_account(account.id, is_active=True)
                    else:
                        logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Instagram")
                
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {username}: {e}")
                return False
        
        def background_bulk_add():
            """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
            success_count = 0
            failed_count = 0
            
            if parallel_threads == 1:
                # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                for i, account_data in enumerate(accounts_data):
                    if process_single_account(account_data, i):
                        success_count += 1
                    else:
                        failed_count += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                    import time
                    time.sleep(2)
            else:
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º {parallel_threads} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤")
                
                with concurrent.futures.ThreadPoolExecutor(max_workers=parallel_threads) as executor:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    future_to_account = {
                        executor.submit(process_single_account, account_data, i): (account_data, i) 
                        for i, account_data in enumerate(accounts_data)
                    }
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    for future in concurrent.futures.as_completed(future_to_account):
                        account_data, account_index = future_to_account[future]
                        try:
                            if future.result():
                                success_count += 1
                            else:
                                failed_count += 1
                        except Exception as e:
                            username = account_data.get('username', 'unknown')
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}: {e}")
                            failed_count += 1
            
            logger.info(f"‚úÖ –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=background_bulk_add, daemon=True)
        thread.start()
        
        logger.info(f"üîÑ –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(accounts_data)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞—á–∞—Ç–∞")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        return jsonify({
            'success': True,
            'message': f'–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(accounts_data)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ {parallel_threads} –ø–æ—Ç–æ–∫–µ(–∞—Ö). –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.',
            'processing': True,
            'total_accounts': len(accounts_data),
            'parallel_threads': parallel_threads
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/accounts/<int:account_id>', methods=['PUT'])
def update_account(account_id):
    """–û–±–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"""
    try:
        data = request.get_json()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        success, message = update_instagram_account(account_id, **data)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            account = get_instagram_account(account_id)
            if account:
                return jsonify({
                    'success': True,
                    'data': {
                        'id': account.id,
                        'username': account.username,
                        'email': account.email,
                        'full_name': account.full_name or '',
                        'biography': account.biography or '',
                        'is_active': account.is_active,
                        'updated_at': account.updated_at.isoformat()
                    }
                })
        
        return jsonify({
            'success': False,
            'error': message
        }), 400
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/accounts/<int:account_id>', methods=['DELETE'])
def delete_account(account_id):
    """–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"""
    try:
        success, message = delete_instagram_account(account_id)
        
        if success:
            return jsonify({
                'success': True,
                'message': '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
            })
        else:
            return jsonify({
                'success': False,
                'error': message
            }), 400
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# =============================================================================
# API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏
# =============================================================================

@app.route('/api/proxies', methods=['GET'])
def get_proxies_api():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏"""
    try:
        proxies = get_proxies()
        proxies_data = []
        
        for proxy in proxies:
            proxy_data = {
                'id': proxy.id,
                'protocol': proxy.protocol,
                'type': proxy.protocol,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å frontend
                'host': proxy.host,
                'port': proxy.port,
                'username': proxy.username,
                'is_active': proxy.is_active,
                'assigned_to': None,  # –ë—É–¥–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –Ω–∏–∂–µ
                'created_at': proxy.created_at.isoformat() if proxy.created_at else None,
                'updated_at': proxy.updated_at.isoformat() if proxy.updated_at else None
            }
            
            # –ò—â–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            assigned_accounts = get_instagram_accounts()
            assigned_account = None
            for account in assigned_accounts:
                if hasattr(account, 'proxy_id') and account.proxy_id == proxy.id:
                    assigned_account = account.username
                    break
            
            proxy_data['assigned_to'] = assigned_account
            proxies_data.append(proxy_data)
        
        return jsonify({
            'success': True,
            'data': proxies_data,
            'total': len(proxies_data)
        })
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/proxies', methods=['POST'])
def add_proxy_api():
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏"""
    try:
        data = request.get_json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['host', 'port']
        for field in required_fields:
            if field not in data or not data[field]:
                return jsonify({
                    'success': False,
                    'error': f'–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
                }), 400
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏
        success, result = add_proxy(
            protocol=data.get('protocol', 'http'),
            host=data['host'],
            port=int(data['port']),
            username=data.get('username'),
            password=data.get('password')
        )
        
        if success:
            proxy = get_proxy(result)
            return jsonify({
                'success': True,
                'data': {
                    'id': proxy.id,
                    'protocol': proxy.protocol,
                    'host': proxy.host,
                    'port': proxy.port,
                    'username': proxy.username,
                    'is_active': proxy.is_active,
                    'created_at': proxy.created_at.isoformat()
                }
            })
        else:
            return jsonify({
                'success': False,
                'error': result
            }), 400
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/accounts/<int:account_id>/proxy', methods=['POST'])
def assign_proxy(account_id):
    """–ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∞–∫–∫–∞—É–Ω—Ç—É"""
    try:
        data = request.get_json()
        
        if 'proxy_id' not in data:
            return jsonify({
                'success': False,
                'error': '–ü–æ–ª–µ proxy_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
            }), 400
        
        success, message = assign_proxy_to_account(account_id, data['proxy_id'])
        
        if success:
            return jsonify({
                'success': True,
                'message': '–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç—É'
            })
        else:
            return jsonify({
                'success': False,
                'error': message
            }), 400
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/proxies/bulk', methods=['POST'])
def bulk_add_proxies():
    """–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
    try:
        data = request.get_json()
        
        if 'proxies' not in data or not isinstance(data['proxies'], list):
            return jsonify({
                'success': False,
                'error': '–ü–æ–ª–µ proxies –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –ø—Ä–æ–∫—Å–∏'
            }), 400
        
        proxies_data = data['proxies']
        check_proxies = data.get('check_proxies', False)
        
        if len(proxies_data) == 0:
            return jsonify({
                'success': False,
                'error': '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            }), 400
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {len(proxies_data)} –ø—Ä–æ–∫—Å–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success_count = 0
        failed_count = 0
        results = []
        
        for proxy_data in proxies_data:
            try:
                success, result = add_proxy(
                    protocol=proxy_data.get('protocol', 'http'),
                    host=proxy_data['host'],
                    port=int(proxy_data['port']),
                    username=proxy_data.get('username'),
                    password=proxy_data.get('password')
                )
                
                if success:
                    success_count += 1
                    results.append({
                        'host': proxy_data['host'],
                        'port': proxy_data['port'],
                        'success': True,
                        'id': result
                    })
                    logger.info(f"‚úÖ –ü—Ä–æ–∫—Å–∏ {proxy_data['host']}:{proxy_data['port']} –¥–æ–±–∞–≤–ª–µ–Ω")
                else:
                    failed_count += 1
                    results.append({
                        'host': proxy_data['host'],
                        'port': proxy_data['port'],
                        'success': False,
                        'error': result
                    })
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ {proxy_data['host']}:{proxy_data['port']}: {result}")
                    
            except Exception as e:
                failed_count += 1
                results.append({
                    'host': proxy_data.get('host', 'unknown'),
                    'port': proxy_data.get('port', 'unknown'),
                    'success': False,
                    'error': str(e)
                })
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏
        if check_proxies and success_count > 0:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {success_count} –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏
        
        return jsonify({
            'success': True,
            'message': f'–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫',
            'data': {
                'total': len(proxies_data),
                'success_count': success_count,
                'failed_count': failed_count,
                'results': results,
                'check_proxies': check_proxies
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/proxies/<int:proxy_id>/check', methods=['POST'])
def check_proxy_api(proxy_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏"""
    try:
        from database.db_manager import update_proxy
        import time
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        proxy = get_proxy(proxy_id)
        if not proxy:
            return jsonify({
                'success': False,
                'error': f'–ü—Ä–æ–∫—Å–∏ —Å ID {proxy_id} –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ {proxy.host}:{proxy.port}")
        
        is_active = False
        error_message = None
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å
            if proxy.username and proxy.password:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º auth –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                proxy_url = f"{proxy.protocol}://{proxy.host}:{proxy.port}"
                proxies = {
                    'http': proxy_url,
                    'https': proxy_url
                }
                
                response = requests.get(
                    'http://httpbin.org/ip',
                    proxies=proxies,
                    auth=(proxy.username, proxy.password),
                    timeout=15
                )
            else:
                # –ü—Ä–æ–∫—Å–∏ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                proxy_url = f"{proxy.protocol}://{proxy.host}:{proxy.port}"
                proxies = {
                    'http': proxy_url,
                    'https': proxy_url
                }
                
                response = requests.get(
                    'http://httpbin.org/ip',
                    proxies=proxies,
                    timeout=15
                )
            
            if response.status_code == 200:
                is_active = True
                logger.info(f"‚úÖ –ü—Ä–æ–∫—Å–∏ {proxy.host}:{proxy.port} —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                error_message = f"HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}"
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ {proxy.host}:{proxy.port} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
        except requests.exceptions.ConnectTimeout:
            error_message = "–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ {proxy.host}:{proxy.port}: —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        except requests.exceptions.ProxyError as e:
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {str(e)}"
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ {proxy.host}:{proxy.port}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ - {e}")
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞: {str(e)}"
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ {proxy.host}:{proxy.port}: –æ–±—â–∞—è –æ—à–∏–±–∫–∞ - {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_proxy(proxy_id, is_active=is_active)
        
        return jsonify({
            'success': True,
            'data': {
                'proxy_id': proxy_id,
                'host': proxy.host,
                'port': proxy.port,
                'is_active': is_active,
                'error_message': error_message,
                'checked_at': time.time()
            },
            'is_active': is_active
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∫—Å–∏ {proxy_id}: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/proxies/check-all', methods=['POST'])
def check_all_proxies():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏"""
    try:
        import concurrent.futures
        import time
        import random
        
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–∫—Å–∏
        proxies = get_proxies()
        if not proxies:
            return jsonify({
                'success': True,
                'message': '–ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
                'data': {
                    'total': 0,
                    'checked': 0,
                    'active': 0,
                    'inactive': 0
                }
            })
        
        def check_single_proxy(proxy):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏"""
            try:
                import requests
                from database.db_manager import update_proxy
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
                time.sleep(random.uniform(0.5, 2.0))
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø—Ä–æ–∫—Å–∏ –±–æ–ª–µ–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ
                if proxy.username and proxy.password:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º auth –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    proxy_url = f"{proxy.protocol}://{proxy.host}:{proxy.port}"
                    proxies = {
                        'http': proxy_url,
                        'https': proxy_url
                    }
                    
                    response = requests.get(
                        'http://httpbin.org/ip',
                        proxies=proxies,
                        auth=(proxy.username, proxy.password),
                        timeout=20  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                    )
                else:
                    # –ü—Ä–æ–∫—Å–∏ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    proxy_url = f"{proxy.protocol}://{proxy.host}:{proxy.port}"
                    proxies = {
                        'http': proxy_url,
                        'https': proxy_url
                    }
                    
                    response = requests.get(
                        'http://httpbin.org/ip',
                        proxies=proxies,
                        timeout=20
                    )
                
                is_active = response.status_code == 200
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                update_proxy(proxy.id, is_active=is_active)
                
                return {
                    'id': proxy.id,
                    'host': proxy.host,
                    'port': proxy.port,
                    'username': proxy.username,
                    'is_active': is_active,
                    'success': True,
                    'response_code': response.status_code if is_active else None
                }
                
            except requests.exceptions.ConnectTimeout:
                # –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                update_proxy(proxy.id, is_active=False)
                return {
                    'id': proxy.id,
                    'host': proxy.host,
                    'port': proxy.port,
                    'username': proxy.username,
                    'is_active': False,
                    'success': False,
                    'error': '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
                }
                
            except requests.exceptions.ProxyError as e:
                # –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏
                update_proxy(proxy.id, is_active=False)
                return {
                    'id': proxy.id,
                    'host': proxy.host,
                    'port': proxy.port,
                    'username': proxy.username,
                    'is_active': False,
                    'success': False,
                    'error': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {str(e)}'
                }
                
            except Exception as e:
                # –û–±—â–∞—è –æ—à–∏–±–∫–∞
                update_proxy(proxy.id, is_active=False)
                return {
                    'id': proxy.id,
                    'host': proxy.host,
                    'port': proxy.port,
                    'username': proxy.username,
                    'is_active': False,
                    'success': False,
                    'error': f'–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}'
                }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (—Å–Ω–∏–∂–∞–µ–º –¥–æ 3 –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        results = []
        with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
            future_to_proxy = {executor.submit(check_single_proxy, proxy): proxy for proxy in proxies}
            
            for future in concurrent.futures.as_completed(future_to_proxy):
                result = future.result()
                results.append(result)
                
                # –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                if result['success']:
                    status = '‚úÖ' if result['is_active'] else '‚ùå'
                    username_info = f" (user: {result['username']})" if result['username'] else ""
                    logger.info(f"{status} –ü—Ä–æ–∫—Å–∏ {result['host']}:{result['port']}{username_info}")
                else:
                    logger.warning(f"‚ùå –ü—Ä–æ–∫—Å–∏ {result['host']}:{result['port']}: {result['error']}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total = len(results)
        active = len([r for r in results if r['is_active']])
        inactive = total - active
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
        error_types = {}
        for result in results:
            if not result['success'] and 'error' in result:
                error_type = result['error'].split(':')[0]
                error_types[error_type] = error_types.get(error_type, 0) + 1
        
        logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {total} –≤—Å–µ–≥–æ, {active} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {inactive} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö")
        if error_types:
            logger.info(f"üìä –¢–∏–ø—ã –æ—à–∏–±–æ–∫: {error_types}")
        
        return jsonify({
            'success': True,
            'message': f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {active} –∏–∑ {total} –ø—Ä–æ–∫—Å–∏ –∞–∫—Ç–∏–≤–Ω—ã',
            'data': {
                'total': total,
                'checked': total,
                'active': active,
                'inactive': inactive,
                'error_types': error_types,
                'results': results,
                'checked_at': time.time()
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/proxies/<int:proxy_id>', methods=['DELETE'])
def delete_proxy_api(proxy_id):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏"""
    try:
        success, message = delete_proxy(proxy_id)
        
        if success:
            logger.info(f"üóëÔ∏è –ü—Ä–æ–∫—Å–∏ ID {proxy_id} —É–¥–∞–ª–µ–Ω")
            return jsonify({
                'success': True,
                'message': '–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
            })
        else:
            return jsonify({
                'success': False,
                'error': message
            }), 400
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ {proxy_id}: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/proxies/<int:proxy_id>', methods=['PUT'])
def update_proxy_api(proxy_id):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏"""
    try:
        data = request.get_json()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏
        success, message = update_proxy(proxy_id, **data)
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏
            proxy = get_proxy(proxy_id)
            if proxy:
                logger.info(f"‚úèÔ∏è –ü—Ä–æ–∫—Å–∏ ID {proxy_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                return jsonify({
                    'success': True,
                    'data': {
                        'id': proxy.id,
                        'protocol': proxy.protocol,
                        'host': proxy.host,
                        'port': proxy.port,
                        'username': proxy.username,
                        'is_active': proxy.is_active,
                        'updated_at': proxy.updated_at.isoformat()
                    }
                })
        
        return jsonify({
            'success': False,
            'error': message
        }), 400
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ {proxy_id}: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# =============================================================================
# API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# =============================================================================

@app.route('/api/stats', methods=['GET'])
def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        accounts = get_instagram_accounts()
        proxies = get_proxies()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_accounts = len(accounts)
        active_accounts = len([acc for acc in accounts if acc.is_active])
        inactive_accounts = total_accounts - active_accounts
        
        total_proxies = len(proxies)
        active_proxies = len([proxy for proxy in proxies if proxy.is_active])
        
        # –ê–∫–∫–∞—É–Ω—Ç—ã —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
        accounts_with_proxy = len([acc for acc in accounts if acc.proxy_id])
        
        return jsonify({
            'success': True,
            'data': {
                'accounts': {
                    'total': total_accounts,
                    'active': active_accounts,
                    'inactive': inactive_accounts,
                    'with_proxy': accounts_with_proxy
                },
                'proxies': {
                    'total': total_proxies,
                    'active': active_proxies,
                    'inactive': total_proxies - active_proxies
                }
            }
        })
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# =============================================================================
# API –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
# =============================================================================

@app.route('/api/integration/status', methods=['GET'])
def get_integration_status_api():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º"""
    try:
        if INTEGRATION_AVAILABLE:
            status = get_integration_status()
            return jsonify({
                'success': True,
                'data': {
                    'integration_available': True,
                    'systems': status,
                    'total_systems': len(status),
                    'active_systems': sum(status.values())
                }
            })
        else:
            return jsonify({
                'success': True,
                'data': {
                    'integration_available': False,
                    'message': '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                }
            })
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/accounts/<int:account_id>/retry', methods=['POST'])
def retry_account_login(account_id):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        data = request.get_json()
        max_retries = data.get('max_retries', 3)
        
        logger.info(f"üîÑ –ó–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}")
        
        if not INTEGRATION_AVAILABLE:
            return jsonify({
                'success': False,
                'error': '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }), 503
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        import threading
        import asyncio
        
        # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        retry_result = {'completed': False, 'success': False, 'message': ''}
        
        def background_retry():
            """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                async def run_retry():
                    from account_integration_service import account_service
                    return await account_service.retry_account_login_with_new_code(
                        account_id, max_retries
                    )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                success, message = loop.run_until_complete(run_retry())
                
                retry_result['completed'] = True
                retry_result['success'] = success
                retry_result['message'] = message
                
                logger.info(f"‚úÖ –§–æ–Ω–æ–≤–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}: {message}")
                
            except Exception as e:
                retry_result['completed'] = True
                retry_result['success'] = False
                retry_result['message'] = f"–û—à–∏–±–∫–∞: {str(e)}"
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}: {e}")
            finally:
                loop.close()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        account = get_instagram_account(account_id)
        if not account:
            return jsonify({
                'success': False,
                'error': f'–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—á—Ç—ã
        if not account.email or not account.email_password:
            return jsonify({
                'success': False,
                'error': '–£ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'
            }), 400
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=background_retry, daemon=True)
        thread.start()
        
        return jsonify({
            'success': True,
            'message': f'–ù–∞—á–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}. –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.',
            'data': {
                'account_id': account_id,
                'username': account.username,
                'max_retries': max_retries,
                'processing': True
            }
        })
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/accounts/retry-bulk', methods=['POST'])
def retry_bulk_accounts():
    """–ú–∞—Å—Å–æ–≤–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        data = request.get_json()
        
        if 'account_ids' not in data or not isinstance(data['account_ids'], list):
            return jsonify({
                'success': False,
                'error': '–ü–æ–ª–µ account_ids –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ ID –∞–∫–∫–∞—É–Ω—Ç–æ–≤'
            }), 400
        
        account_ids = data['account_ids']
        max_retries_per_account = data.get('max_retries_per_account', 3)
        
        if len(account_ids) == 0:
            return jsonify({
                'success': False,
                'error': '–°–ø–∏—Å–æ–∫ ID –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            }), 400
        
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        if not INTEGRATION_AVAILABLE:
            return jsonify({
                'success': False,
                'error': '–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }), 503
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        import threading
        import asyncio
        
        def background_bulk_retry():
            """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏"""
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –ø–æ—Ç–æ–∫–∞
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                async def run_bulk_retry():
                    from account_integration_service import account_service
                    return await account_service.bulk_retry_failed_accounts(
                        account_ids, max_retries_per_account
                    )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                results = loop.run_until_complete(run_bulk_retry())
                
                logger.info(f"‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results['success'])} —É—Å–ø–µ—à–Ω–æ, {len(results['failed'])} –æ—à–∏–±–æ–∫")
                
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                return results
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –º–∞—Å—Å–æ–≤–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {e}")
            finally:
                loop.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –∏—Ö –¥–∞–Ω–Ω—ã–µ
        valid_accounts = []
        invalid_accounts = []
        
        for account_id in account_ids:
            account = get_instagram_account(account_id)
            if not account:
                invalid_accounts.append({'id': account_id, 'error': '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
            elif not account.email or not account.email_password:
                invalid_accounts.append({
                    'id': account_id, 
                    'username': account.username,
                    'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã'
                })
            else:
                valid_accounts.append({
                    'id': account_id,
                    'username': account.username
                })
        
        if len(valid_accounts) == 0:
            return jsonify({
                'success': False,
                'error': '–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏',
                'invalid_accounts': invalid_accounts
            }), 400
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=background_bulk_retry, daemon=True)
        thread.start()
        
        return jsonify({
            'success': True,
            'message': f'–ù–∞—á–∞—Ç–∞ –º–∞—Å—Å–æ–≤–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è {len(valid_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è.',
            'data': {
                'valid_accounts': valid_accounts,
                'invalid_accounts': invalid_accounts,
                'total_processing': len(valid_accounts),
                'max_retries_per_account': max_retries_per_account,
                'processing': True
            }
        })
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∞—Å—Å–æ–≤–æ–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# =============================================================================
# API –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
# =============================================================================

@app.route('/api/posts', methods=['POST'])
def create_post():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç"""
    try:
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ form-data, —Ç–∞–∫ –∏ JSON
        if request.content_type and 'application/json' in request.content_type:
            # JSON –∑–∞–ø—Ä–æ—Å —Å base64 —Ñ–∞–π–ª–æ–º
            data = request.get_json()
            post_type = data.get('type')
            caption = data.get('caption', '')
            hashtags = data.get('hashtags', '')
            publish_now = data.get('publish_now', True)
            scheduled_time = data.get('scheduled_time') if not publish_now else None
            account_ids = data.get('accounts', [])
            uniquify_content = data.get('uniquify', False)
            concurrent_threads = data.get('concurrent_threads', 3)
            publish_delay = data.get('publish_delay', 60)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–∑ base64 (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
            media_data = data.get('media_data')
            if not media_data:
                return jsonify({
                    'success': False,
                    'error': '–ú–µ–¥–∏–∞—Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
                }), 400
        else:
            # Form-data –∑–∞–ø—Ä–æ—Å
            post_type = request.form.get('type')
            caption = request.form.get('caption', '')
            hashtags = request.form.get('hashtags', '')
            publish_now = request.form.get('publish_now', 'true').lower() == 'true'
            scheduled_time = request.form.get('scheduled_time') if not publish_now else None
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
            account_ids = request.form.getlist('accounts[]')
            if not account_ids:
                account_ids = request.form.getlist('selected_accounts[]')
            if not account_ids:
                account_ids = request.form.getlist('account_ids[]')
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º account_selection –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            account_selection = request.form.get('account_selection', 'specific')
            if account_selection == 'all' or not account_ids:
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã" –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–∏—Å–æ–∫, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                all_accounts = get_instagram_accounts()
                account_ids = [str(acc.id) for acc in all_accounts if acc.is_active]
                logger.info(f"üìã –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {len(account_ids)} —à—Ç.")
            
            uniquify_content = request.form.get('uniquify', 'false').lower() == 'true'
            concurrent_threads = int(request.form.get('concurrent_threads', 3))
            publish_delay = int(request.form.get('publish_delay', 60))
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π
            story_link = request.form.get('story_link', '')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if post_type == 'carousel':
                # –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –æ–∂–∏–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤
                media_files = []
                media_count = int(request.form.get('media_count', 0))
                
                for i in range(media_count):
                    file_key = f'media_{i}'
                    if file_key in request.files:
                        media_file = request.files[file_key]
                        if media_file.filename != '':
                            media_files.append(media_file)
                
                if not media_files:
                    return jsonify({
                        'success': False,
                        'error': '–î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
                    }), 400
                    
                if len(media_files) > 10:
                    return jsonify({
                        'success': False,
                        'error': '–ú–∞–∫—Å–∏–º—É–º 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏'
                    }), 400
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –æ–¥–∏–Ω —Ñ–∞–π–ª
                if 'media' not in request.files:
                    return jsonify({
                        'success': False,
                        'error': '–ú–µ–¥–∏–∞—Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
                    }), 400
                    
                media_file = request.files['media']
                if media_file.filename == '':
                    return jsonify({
                        'success': False,
                        'error': '–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'
                    }), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not post_type:
            return jsonify({
                'success': False,
                'error': '–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
            }), 400
            
        if post_type not in ['feed', 'reels', 'story', 'carousel']:
            return jsonify({
                'success': False,
                'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
            }), 400
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if concurrent_threads < 1 or concurrent_threads > 10:
            concurrent_threads = 3
        if publish_delay < 10 or publish_delay > 300:
            publish_delay = 60
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º account_ids –≤ —á–∏—Å–ª–∞
        try:
            if isinstance(account_ids, list):
                account_ids = [int(acc_id) for acc_id in account_ids if acc_id]
            else:
                account_ids = []
        except (ValueError, TypeError):
            return jsonify({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–æ–≤'
            }), 400
            
        if not account_ids:
            return jsonify({
                'success': False,
                'error': '–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'
            }), 400
        
        logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {account_ids}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª(—ã)
        import tempfile
        import uuid
        import json
        temp_dir = tempfile.gettempdir()
        
        if request.content_type and 'application/json' in request.content_type:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ base64 –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
            return jsonify({
                'success': False,
                'error': 'JSON upload –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ form-data'
            }), 400
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if post_type == 'carousel':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫–∞—Ä—É—Å–µ–ª–∏
                temp_paths = []
                for media_file in media_files:
                    file_extension = media_file.filename.split('.')[-1].lower()
                    temp_filename = f"{uuid.uuid4()}.{file_extension}"
                    temp_path = os.path.join(temp_dir, temp_filename)
                    media_file.save(temp_path)
                    temp_paths.append(temp_path)
                
                # –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º JSON —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π
                media_path_data = json.dumps(temp_paths)
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                file_extension = media_file.filename.split('.')[-1].lower()
                temp_filename = f"{uuid.uuid4()}.{file_extension}"
                temp_path = os.path.join(temp_dir, temp_filename)
                media_file.save(temp_path)
                media_path_data = temp_path
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        from database.db_manager import create_publish_task
        from database.models import TaskType, TaskStatus
        from utils.task_queue import add_task_to_queue, start_task_queue
        import random
        import time
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        if post_type == 'carousel':
            task_type = TaskType.CAROUSEL
            file_extension = 'jpg'  # –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        else:
            task_type_map = {
                'feed': TaskType.PHOTO if file_extension in ['jpg', 'jpeg', 'png', 'webp'] else TaskType.VIDEO,
                'reels': TaskType.REEL,
                'story': TaskType.STORY
            }
            task_type = task_type_map.get(post_type, TaskType.PHOTO)
            
            # –î–ª—è reels –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø REEL –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            if post_type == 'reels':
                task_type = TaskType.REEL
        
        logger.info(f"üìù –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post_type} -> TaskType: {task_type}")
        logger.info(f"üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –ø–æ—Ç–æ–∫–∏={concurrent_threads}, –∑–∞–¥–µ—Ä–∂–∫–∞={publish_delay}—Å")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω
        start_task_queue()
        
        created_tasks = []
        failed_tasks = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π batch_id –¥–ª—è –≥—Ä—É–ø–ø—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        batch_id = str(uuid.uuid4()) if len(account_ids) > 1 else None
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –±–∞—Ç—á–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Ç–æ–∫–æ–≤
        account_batches = []
        for i in range(0, len(account_ids), concurrent_threads):
            batch = account_ids[i:i + concurrent_threads]
            account_batches.append(batch)
        
        logger.info(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ {len(account_ids)} –∑–∞–¥–∞—á –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ {len(account_batches)} –±–∞—Ç—á–∞—Ö –ø–æ {concurrent_threads} –ø–æ—Ç–æ–∫–æ–≤")
        logger.info(f"‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏: {publish_delay}¬±{int(publish_delay*0.5)} —Å–µ–∫—É–Ω–¥")
        
        task_counter = 0
        for batch_index, batch_account_ids in enumerate(account_batches):
            for account_id in batch_account_ids:
                try:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    additional_data = {
                        'hide_from_feed': False,  # –¥–ª—è Reels
                        'uniquify_content': uniquify_content,
                        'post_type': post_type,
                        'batch_index': batch_index,
                        'concurrent_threads': concurrent_threads,
                        'publish_delay': publish_delay,
                        'batch_id': batch_id  # –î–æ–±–∞–≤–ª—è–µ–º batch_id –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π
                    if post_type == 'story':
                        additional_data['story_link'] = story_link
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π caption —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏
                    full_caption = caption
                    if hashtags and post_type in ['feed', 'reels']:
                        full_caption = f"{caption}\n\n{hashtags}".strip()
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                    if publish_now:
                        success, task_id = create_publish_task(
                            account_id=account_id,
                            task_type=task_type,
                            media_path=media_path_data,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º media_path_data –≤–º–µ—Å—Ç–æ temp_path
                            caption=full_caption,
                            additional_data=json.dumps(additional_data)  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å options –Ω–∞ additional_data
                        )
                        
                        if success:
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
                            # –ü–µ—Ä–≤—ã–π –±–∞—Ç—á —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å—Ä–∞–∑—É, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
                            base_delay = batch_index * publish_delay
                            random_delay = random.randint(0, int(publish_delay * 0.5))
                            total_delay = base_delay + random_delay
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                            add_task_to_queue(task_id, 0, None, delay_seconds=total_delay)
                            
                            created_tasks.append({
                                'task_id': task_id,
                                'account_id': account_id,
                                'delay_seconds': total_delay,
                                'batch_index': batch_index
                            })
                            
                            task_counter += 1
                            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ #{task_id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} (#{task_counter}/{len(account_ids)}, –∑–∞–¥–µ—Ä–∂–∫–∞: {total_delay}—Å)")
                        else:
                            failed_tasks.append({
                                'account_id': account_id,
                                'error': task_id  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ task_id —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                            })
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {task_id}")
                    else:
                        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è - –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
                        failed_tasks.append({
                            'account_id': account_id,
                            'error': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'
                        })
                        
                except Exception as e:
                    failed_tasks.append({
                        'account_id': account_id,
                        'error': str(e)
                    })
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        
        if created_tasks:
            logger.info(f"üéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {len(created_tasks)} –∑–∞–¥–∞—á –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            max_delay = max([task['delay_seconds'] for task in created_tasks]) if created_tasks else 0
            estimated_completion = max_delay + 300  # + 5 –º–∏–Ω—É—Ç –Ω–∞ —Å–∞–º—É –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            
            return jsonify({
                'success': True,
                'message': f'–°–æ–∑–¥–∞–Ω–æ {len(created_tasks)} –∑–∞–¥–∞—á –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏: {concurrent_threads} –ø–æ—Ç–æ–∫–æ–≤, –∑–∞–¥–µ—Ä–∂–∫–∞ {publish_delay}—Å',
                'data': {
                    'created_tasks': created_tasks,
                    'failed_tasks': failed_tasks,
                    'total_accounts': len(account_ids),
                    'successful_tasks': len(created_tasks),
                    'concurrent_threads': concurrent_threads,
                    'publish_delay': publish_delay,
                    'batches_count': len(account_batches),
                    'estimated_completion_seconds': estimated_completion
                }
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é',
                'failed_tasks': failed_tasks
            }), 400
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/posts', methods=['GET'])
def get_posts():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        from database.db_manager import get_session
        from database.models import PublishTask, InstagramAccount
        from sqlalchemy.orm import joinedload
        
        session = get_session()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        tasks = session.query(PublishTask).options(
            joinedload(PublishTask.account)
        ).order_by(PublishTask.created_at.desc()).limit(100).all()
        
        posts_data = []
        for task in tasks:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            additional_data = {}
            if task.options:
                try:
                    additional_data = json.loads(task.options) if isinstance(task.options, str) else task.options
                except:
                    additional_data = {}
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å—Ç–∞ –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            post_type = additional_data.get('post_type', '')
            if not post_type:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤ additional_data, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
                if task.task_type:
                    task_type_value = task.task_type.value if hasattr(task.task_type, 'value') else str(task.task_type)
                    if 'PHOTO' in task_type_value:
                        post_type = 'feed'
                    elif 'REEL' in task_type_value:
                        post_type = 'reels'
                    elif 'STORY' in task_type_value:
                        post_type = 'story'
                    elif 'CAROUSEL' in task_type_value:
                        post_type = 'carousel'
                    else:
                        post_type = 'feed'
            
            posts_data.append({
                'id': task.id,
                'account_id': task.account_id,
                'account_username': task.account.username if task.account else 'Unknown',
                'task_type': task.task_type.value if task.task_type else 'unknown',
                'post_type': post_type,
                'status': task.status.value if task.status else 'unknown',
                'caption': task.caption or '',
                'media_path': task.media_path or '',
                'scheduled_time': task.scheduled_time.isoformat() if task.scheduled_time else None,
                'completed_time': task.completed_time.isoformat() if task.completed_time else None,
                'error_message': task.error_message,
                'created_at': task.created_at.isoformat() if task.created_at else None,
                'updated_at': task.updated_at.isoformat() if task.updated_at else None,
                'batch_id': additional_data.get('batch_id'),
                'batch_index': additional_data.get('batch_index')
            })
        
        session.close()
        
        return jsonify({
            'success': True,
            'data': posts_data,
            'total': len(posts_data)
        })
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/posts/<int:task_id>', methods=['DELETE'])
def delete_post(task_id):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ —Å–∞–º –ø–æ—Å—Ç –∏–∑ Instagram"""
    try:
        from database.db_manager import get_session
        from database.models import PublishTask, TaskStatus, TaskType
        
        session = get_session()
        task = session.query(PublishTask).filter(PublishTask.id == task_id).first()
        
        if not task:
            session.close()
            return jsonify({
                'success': False,
                'error': '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }), 404
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Instagram
        account_id = task.account_id
        status = task.status
        media_id = task.media_id  # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –ø–æ–ª—è media_id
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ #{task_id}: status={status}, media_id={media_id}, options={task.options}")
        
        # –ï—Å–ª–∏ media_id –Ω–µ –≤ –ø–æ–ª–µ, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ options (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π)
        if status == TaskStatus.COMPLETED and not media_id and task.options:
            try:
                options = json.loads(task.options) if isinstance(task.options, str) else task.options
                media_id = options.get('media_id')
                logger.info(f"üìã –ò–∑–≤–ª–µ—á–µ–Ω media_id –∏–∑ options: {media_id}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å media_id –∏–∑ options: {e}")
                pass
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –∏–∑ Instagram –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
        instagram_deleted = False
        instagram_error = None
        
        if status == TaskStatus.COMPLETED and media_id:
            try:
                logger.info(f"üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç {media_id} –∏–∑ Instagram –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º InstagramClient –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                from instagram.client import InstagramClient
                client = InstagramClient(account_id)
                
                logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                if not client.check_login():
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç {account_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞")
                    instagram_error = "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç Instagram"
                    raise Exception(instagram_error)
                
                # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ Instagram
                delete_result = client.client.media_delete(media_id)
                logger.info(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è: {delete_result}")
                
                if delete_result:
                    instagram_deleted = True
                    logger.info(f"‚úÖ –ü–æ—Å—Ç {media_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ Instagram")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç {media_id} –∏–∑ Instagram")
                    instagram_error = "Instagram –≤–µ—Ä–Ω—É–ª –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
                    
            except Exception as e:
                instagram_error = str(e)
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ Instagram: {e}")
        
        # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if task.media_path and os.path.exists(task.media_path):
            try:
                # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ä—É—Å–µ–ª—å, —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
                if task.task_type == TaskType.CAROUSEL:
                    try:
                        media_paths = json.loads(task.media_path)
                        for path in media_paths:
                            if os.path.exists(path):
                                os.remove(path)
                    except:
                        # –ï—Å–ª–∏ –Ω–µ JSON, —É–¥–∞–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ñ–∞–π–ª
                        os.remove(task.media_path)
                else:
                    os.remove(task.media_path)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª {task.media_path}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        session.delete(task)
        session.commit()
        session.close()
        
        response_data = {
            'success': True,
            'message': '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
        }
        
        if status == TaskStatus.COMPLETED:
            if instagram_deleted:
                response_data['message'] = '–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ Instagram –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
                response_data['instagram_deleted'] = True
            elif instagram_error:
                response_data['message'] = '–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –∏–∑ Instagram'
                response_data['instagram_deleted'] = False
                response_data['instagram_error'] = instagram_error
            else:
                response_data['message'] = '–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ—Å—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ Instagram)'
                response_data['instagram_deleted'] = False
        
        return jsonify(response_data)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/posts/task/<int:task_id>/status', methods=['GET'])
def get_task_status_api(task_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        from utils.task_queue import get_task_status
        
        status = get_task_status(task_id)
        if status:
            return jsonify({
                'success': True,
                'data': status
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
            }), 404
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/check-username', methods=['POST'])
def check_username():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞ –≤ Instagram"""
    try:
        data = request.get_json()
        username = data.get('username', '').strip()
        
        if not username:
            return jsonify({
                'success': False,
                'error': '–Æ–∑–µ—Ä–Ω–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω'
            }), 400
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
        import re
        username_regex = re.compile(r'^[a-zA-Z0-9._]{1,30}$')
        if not username_regex.match(username):
            return jsonify({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞',
                'available': False
            }), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Instagram API
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞: {username}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            accounts = get_instagram_accounts()
            active_account = next((acc for acc in accounts if acc.is_active), None)
            
            if not active_account:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                return jsonify({
                    'success': True,
                    'available': None,
                    'message': '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
                    'warning': True
                })
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º InstagramClient –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            from instagram.client import InstagramClient
            client = InstagramClient(active_account.id)
            
            if not client.check_login():
                return jsonify({
                    'success': True,
                    'available': None,
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Instagram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏',
                    'warning': True
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞
            try:
                user_info = client.client.user_info_by_username(username)
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∑–Ω–∞—á–∏—Ç —é–∑–µ—Ä–Ω–µ–π–º –∑–∞–Ω—è—Ç
                available = False
                suggestions = []
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                import random
                suffixes = ['_official', '_real', '_new', str(random.randint(100, 999)), '_pro']
                for suffix in suffixes[:3]:
                    suggestions.append(f"{username}{suffix}")
                    
            except Exception as e:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 404 –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —é–∑–µ—Ä–Ω–µ–π–º —Å–≤–æ–±–æ–¥–µ–Ω
                if "User not found" in str(e) or "404" in str(e):
                    available = True
                    suggestions = []
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —é–∑–µ—Ä–Ω–µ–π–º–∞: {e}")
                    return jsonify({
                        'success': True,
                        'available': None,
                        'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å',
                        'warning': True
                    })
            
            return jsonify({
                'success': True,
                'available': available,
                'suggestions': suggestions
            })
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —é–∑–µ—Ä–Ω–µ–π–º–∞ —á–µ—Ä–µ–∑ Instagram: {e}")
            return jsonify({
                'success': True,
                'available': None,
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ',
                'warning': True
            })
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_username: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/profiles/update', methods=['POST'])
def update_profiles():
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        account_ids = request.form.getlist('account_ids[]')
        if not account_ids:
            return jsonify({
                'success': False,
                'error': '–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã'
            }), 400
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–∞
        try:
            account_ids = [int(acc_id) for acc_id in account_ids]
        except ValueError:
            return jsonify({
                'success': False,
                'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–æ–≤'
            }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        username = request.form.get('username', '').strip()
        display_names = request.form.getlist('display_names[]')  # –ú–∞—Å—Å–∏–≤ –∏–º–µ–Ω
        display_name = request.form.get('display_name', '').strip()  # –û–¥–Ω–æ –∏–º—è –¥–ª—è –≤—Å–µ—Ö
        bio = request.form.get('bio', '').strip()
        website = request.form.get('website', '').strip()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Ç–æ–∫–æ–≤
        thread_count = int(request.form.get('thread_count', 3))
        action_delay = int(request.form.get('action_delay', 5))
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        enable_uniquifier = request.form.get('enable_uniquifier', 'false').lower() == 'true'
        uniquify_avatar = request.form.get('uniquify_avatar', 'false').lower() == 'true'
        uniquify_bio = request.form.get('uniquify_bio', 'false').lower() == 'true'
        uniquify_name = request.form.get('uniquify_name', 'false').lower() == 'true'
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤
        avatar_paths = []
        
        # –û–¥–∏–Ω–æ—á–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
        if 'avatar' in request.files:
            avatar_file = request.files['avatar']
            if avatar_file.filename != '':
                import uuid
                file_extension = avatar_file.filename.split('.')[-1].lower()
                temp_filename = f"{uuid.uuid4()}.{file_extension}"
                temp_path = os.path.join(tempfile.gettempdir(), temp_filename)
                avatar_file.save(temp_path)
                avatar_paths.append(temp_path)
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã
        if 'avatars[]' in request.files:
            avatar_files = request.files.getlist('avatars[]')
            for avatar_file in avatar_files:
                if avatar_file.filename != '':
                    import uuid
                    file_extension = avatar_file.filename.split('.')[-1].lower()
                    temp_filename = f"{uuid.uuid4()}.{file_extension}"
                    temp_path = os.path.join(tempfile.gettempdir(), temp_filename)
                    avatar_file.save(temp_path)
                    avatar_paths.append(temp_path)
        
        # –û–ø—Ü–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
        distribute_avatars = request.form.get('distribute_avatars', 'true').lower() == 'true'
        randomize_avatars = request.form.get('randomize_avatars', 'false').lower() == 'true'
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if randomize_avatars and len(avatar_paths) > 1:
            import random
            random.shuffle(avatar_paths)
        
        logger.info(f"üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        logger.info(f"   –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        logger.info(f"   - Username: {username}")
        logger.info(f"   - Display name(s): {display_names or display_name}")
        logger.info(f"   - Bio: {bio}")
        logger.info(f"   - Website: {website}")
        logger.info(f"   - Avatars: {len(avatar_paths)} —Ñ–∞–π–ª–æ–≤")
        logger.info(f"   - –ü–æ—Ç–æ–∫–∏: {thread_count}, –∑–∞–¥–µ—Ä–∂–∫–∞: {action_delay}—Å")
        logger.info(f"   - –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è: –∞–≤–∞—Ç–∞—Ä={uniquify_avatar}, –±–∏–æ={uniquify_bio}, –∏–º—è={uniquify_name}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if display_names and len(display_names) > 0:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
            names_for_accounts = []
            for i, acc_id in enumerate(account_ids):
                # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω
                name_index = i % len(display_names)
                names_for_accounts.append(display_names[name_index])
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω–æ –∏–º—è –¥–ª—è –≤—Å–µ—Ö
            names_for_accounts = [display_name] * len(account_ids)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        results = {
            'success': [],
            'failed': []
        }
        
        success_count = 0
        failed_accounts = []
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        def process_account(i, account_id):
            nonlocal success_count, failed_accounts
            try:
                account = get_instagram_account(account_id)
                if not account:
                    results['failed'].append({
                        'account_id': account_id,
                        'error': '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
                    })
                    return
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                update_data = {}
                
                # –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è —Å —É—á–µ—Ç–æ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                if names_for_accounts[i]:
                    update_data['full_name'] = names_for_accounts[i]
                    if uniquify_name and len(account_ids) > 1:
                        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å
                        update_data['full_name'] += f" {i+1}"
                
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                if bio:
                    update_data['biography'] = bio
                    if uniquify_bio and len(account_ids) > 1:
                        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä
                        emojis = ['‚ú®', 'üåü', 'üí´', '‚≠ê', 'üåà', 'üéØ', 'üöÄ', 'üíé']
                        emoji = emojis[i % len(emojis)]
                        update_data['biography'] = f"{emoji} {bio}"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if update_data:
                    update_instagram_account(account_id, **update_data)
                
                # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ –∞–≤–∞—Ç–∞—Ä —á–µ—Ä–µ–∑ Instagram API
                if (username or avatar_paths or names_for_accounts[i] or bio or website) and account.is_active:
                    try:
                        from instagram.client import InstagramClient
                        client = InstagramClient(account_id)
                        
                        if client.check_login():
                            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Instagram API
                            instagram_update_data = {}
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —é–∑–µ—Ä–Ω–µ–π–º
                            if username:
                                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫ —é–∑–µ—Ä–Ω–µ–π–º—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                                unique_username = username
                                if len(account_ids) > 1:
                                    unique_username = f"{username}{i+1}"
                                instagram_update_data['username'] = unique_username
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è
                            if names_for_accounts[i]:
                                full_name = names_for_accounts[i]
                                if uniquify_name and len(account_ids) > 1:
                                    full_name += f" {i+1}"
                                instagram_update_data['full_name'] = full_name
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                            if bio:
                                biography = bio
                                if uniquify_bio and len(account_ids) > 1:
                                    emojis = ['‚ú®', 'üåü', 'üí´', '‚≠ê', 'üåà', 'üéØ', 'üöÄ', 'üíé']
                                    emoji = emojis[i % len(emojis)]
                                    biography = f"{emoji} {bio}"
                                instagram_update_data['biography'] = biography
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∏–æ–≥—Ä–∞—Ñ–∏—é (—Ç–∞–∫ –∫–∞–∫ Instagram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API)
                            if website and bio:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –±–∏–æ–≥—Ä–∞—Ñ–∏—è —É–∂–µ —ç—Ç—É —Å—Å—ã–ª–∫—É
                                if website not in bio:
                                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω–µ—Ü –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
                                    bio_with_link = f"{bio}\nüîó {website}"
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤ 150 —Å–∏–º–≤–æ–ª–æ–≤
                                    if len(bio_with_link) <= 150:
                                        instagram_update_data['biography'] = bio_with_link
                                        logger.info(f"üîó –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∏–æ–≥—Ä–∞—Ñ–∏—é: {website}")
                                    else:
                                        # –û–±—Ä–µ–∑–∞–µ–º –±–∏–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã –≤–ª–µ–∑–ª–∞ —Å—Å—ã–ª–∫–∞
                                        link_part = f"\nüîó {website}"
                                        max_bio_length = 150 - len(link_part)
                                        truncated_bio = bio[:max_bio_length].rsplit(' ', 1)[0] + "..."
                                        instagram_update_data['biography'] = truncated_bio + link_part
                                        logger.info(f"üîó –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∏–æ–≥—Ä–∞—Ñ–∏—é (—Å –æ–±—Ä–µ–∑–∫–æ–π —Ç–µ–∫—Å—Ç–∞): {website}")
                                else:
                                    logger.info(f"‚ÑπÔ∏è –°—Å—ã–ª–∫–∞ {website} —É–∂–µ –µ—Å—Ç—å –≤ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏")
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Instagram
                            if instagram_update_data:
                                try:
                                    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –≤ Instagram –¥–ª—è {account.username}: {instagram_update_data}")
                                    
                                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
                                    original_timeout = client.client.request_timeout
                                    client.client.request_timeout = 30  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
                                    
                                    logger.info(f"   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å account_edit...")
                                    
                                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ account_edit
                                    client.client.account_edit(**instagram_update_data)
                                    logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Instagram –¥–ª—è {account.username}")
                                    
                                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                                    client.client.request_timeout = original_timeout
                                    
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                                    local_update_data = {}
                                    if 'username' in instagram_update_data:
                                        local_update_data['username'] = instagram_update_data['username']
                                    if 'full_name' in instagram_update_data:
                                        local_update_data['full_name'] = instagram_update_data['full_name']
                                    if 'biography' in instagram_update_data:
                                        local_update_data['biography'] = instagram_update_data['biography']
                                    if 'external_url' in instagram_update_data:
                                        local_update_data['website'] = instagram_update_data['external_url']
                                    
                                    if local_update_data:
                                        update_instagram_account(account_id, **local_update_data)
                                        logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {account.username}")
                                    
                                    success_count += 1
                                except TimeoutError as e:
                                    logger.error(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è {account.username}: {str(e)}")
                                    failed_accounts.append({
                                        'username': account.username,
                                        'error': f'–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: {str(e)}'
                                    })
                                except Exception as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ API –¥–ª—è {account.username}: {str(e)}")
                                    logger.error(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
                                    import traceback
                                    logger.error(f"   Traceback: {traceback.format_exc()}")
                                    
                                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ Instagram
                                    error_message = str(e)
                                    if "Another account is using the same email" in error_message:
                                        error_message = "–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º Instagram"
                                    elif "Another account is using the same phone number" in error_message:
                                        error_message = "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º Instagram"
                                    elif "You need an email or confirmed phone number" in error_message:
                                        error_message = "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π email –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                                    elif "Please wait a few minutes before you try again" in error_message:
                                        error_message = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
                                    elif "invalid phone number" in error_message.lower():
                                        error_message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                                    elif "invalid email" in error_message.lower():
                                        error_message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email"
                                    
                                    failed_accounts.append({
                                        'username': account.username,
                                        'error': error_message
                                    })
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –æ—Ç–¥–µ–ª—å–Ω–æ
                            if avatar_paths:
                                try:
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∞–≤–∞—Ç–∞—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                                    if distribute_avatars and len(avatar_paths) > 1:
                                        # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–æ–≤
                                        avatar_index = i % len(avatar_paths)
                                        avatar_to_use = avatar_paths[avatar_index]
                                    else:
                                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∞–≤–∞—Ç–∞—Ä –¥–ª—è –≤—Å–µ—Ö
                                        avatar_to_use = avatar_paths[0]
                                    
                                    avatar_num = (avatar_index + 1) if (distribute_avatars and len(avatar_paths) > 1) else 1
                                    logger.info(f"üì∏ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è {account.username} (—Ñ–∞–π–ª {avatar_num} –∏–∑ {len(avatar_paths)})")
                                    
                                    # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞
                                    avatar_to_upload = avatar_to_use
                                    if uniquify_avatar and len(account_ids) > 1:
                                        from utils.image_utils import uniquify_image
                                        avatar_to_upload = uniquify_image(avatar_to_use, i)
                                        logger.info(f"üé® –ê–≤–∞—Ç–∞—Ä —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {account.username}")
                                    
                                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                                    original_timeout = client.client.request_timeout
                                    client.client.request_timeout = 30
                                    
                                    client.client.account_change_picture(avatar_to_upload)
                                    logger.info(f"‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {account.username}")
                                    
                                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                                    client.client.request_timeout = original_timeout
                                    
                                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                                    if avatar_to_upload != avatar_to_use and os.path.exists(avatar_to_upload):
                                        try:
                                            os.remove(avatar_to_upload)
                                        except:
                                            pass
                                            
                                except TimeoutError as e:
                                    logger.error(f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è {account.username}: {str(e)}")
                                except Exception as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –¥–ª—è {account.username}: {str(e)}")
                                    import traceback
                                    logger.error(f"   Traceback: {traceback.format_exc()}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Instagram API –¥–ª—è {account.username}: {e}")
                        results['failed'].append({
                            'account_id': account_id,
                            'username': account.username,
                            'error': str(e)
                        })
                        return
                
                # –ï—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ API, –Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ
                if any(fa['username'] == account.username for fa in failed_accounts):
                    error_info = next(fa for fa in failed_accounts if fa['username'] == account.username)
                    results['failed'].append({
                        'account_id': account_id,
                        'username': account.username,
                        'error': error_info['error']
                    })
                else:
                    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞, –∑–Ω–∞—á–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                    results['success'].append({
                        'account_id': account_id,
                        'username': account.username,
                        'display_name': names_for_accounts[i]
                    })
                
            except Exception as e:
                results['failed'].append({
                    'account_id': account_id,
                    'error': str(e)
                })
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ—Ç–æ–∫–æ–≤
        import concurrent.futures
        import time
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å {thread_count} –ø–æ—Ç–æ–∫–∞–º–∏")
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=thread_count) as executor:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            futures = []
            for i, account_id in enumerate(account_ids):
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
                if i > 0:
                    time.sleep(action_delay / thread_count)
                
                future = executor.submit(process_account, i, account_id)
                futures.append(future)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            concurrent.futures.wait(futures)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∞–≤–∞—Ç–∞—Ä–æ–≤
        for avatar_path in avatar_paths:
            if os.path.exists(avatar_path):
                try:
                    os.remove(avatar_path)
                except:
                    pass
        
        return jsonify({
            'success': True,
            'message': f'–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(results["success"])} –∏–∑ {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
            'results': results
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ update_profiles: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/groups', methods=['GET'])
def get_groups():
    """–ü–æ–ª—É—á–∏—Ç—å –≥—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)"""
    try:
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –≥—Ä—É–ø–ø—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = get_instagram_accounts()
        
        groups = [
            {
                'id': 'all',
                'name': '–í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã',
                'account_count': len(accounts)
            },
            {
                'id': 'active',
                'name': '–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã',
                'account_count': len([acc for acc in accounts if acc.is_active])
            },
            {
                'id': 'inactive',
                'name': '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã',
                'account_count': len([acc for acc in accounts if not acc.is_active])
            }
        ]
        
        return jsonify({
            'success': True,
            'data': groups
        })
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# =============================================================================
# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
# =============================================================================

@app.route('/media/<path:filename>')
def serve_media(filename):
    """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ò—â–µ–º —Ñ–∞–π–ª –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        possible_paths = [
            os.path.join('media', filename),
            os.path.join('/tmp', filename),
            os.path.join(tempfile.gettempdir(), filename),
            filename  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                return send_file(path)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return '', 404
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return '', 404

@app.route('/api/warmup/settings', methods=['GET', 'POST'])
def warmup_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    try:
        settings_file = 'warmup_settings.json'
        
        if request.method == 'GET':
            # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if os.path.exists(settings_file):
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
            else:
                settings = {
                    'minPostsPerDay': 1,
                    'maxPostsPerDay': 3,
                    'minStoriesPerDay': 2,
                    'maxStoriesPerDay': 5,
                    'minFollowsPerDay': 10,
                    'maxFollowsPerDay': 30,
                    'minLikesPerDay': 20,
                    'maxLikesPerDay': 50,
                    'minCommentsPerDay': 5,
                    'maxCommentsPerDay': 15,
                    'actionDelay': 30,
                    'sessionDuration': 120,
                    'nightPauseStart': '23:00',
                    'nightPauseEnd': '07:00'
                }
            
            return jsonify({
                'success': True,
                'data': settings
            })
        
        else:  # POST
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            data = request.get_json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
            if not data:
                return jsonify({
                    'success': False,
                    'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è'
                }), 400
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –≤ –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
            settings = {
                'minPostsPerDay': 1,
                'maxPostsPerDay': 3,
                'minStoriesPerDay': 2,
                'maxStoriesPerDay': 5,
                'minFollowsPerDay': 10,
                'maxFollowsPerDay': 30,
                'minLikesPerDay': 20,
                'maxLikesPerDay': 50,
                'minCommentsPerDay': 5,
                'maxCommentsPerDay': 15,
                'actionDelay': 30,
                'sessionDuration': 120,
                'nightPauseStart': '23:00',
                'nightPauseEnd': '07:00'
            }
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
            if 'phases' in data:
                # –§–∞–∑–∞ 1 - –ø–æ–¥–ø–∏—Å–∫–∏
                if 'phase1' in data['phases'] and data['phases']['phase1'].get('enabled'):
                    settings['minFollowsPerDay'] = data['phases']['phase1'].get('min_daily', 10)
                    settings['maxFollowsPerDay'] = data['phases']['phase1'].get('max_daily', 30)
                
                # –§–∞–∑–∞ 2 - –ª–∞–π–∫–∏
                if 'phase2' in data['phases'] and data['phases']['phase2'].get('enabled'):
                    settings['minLikesPerDay'] = data['phases']['phase2'].get('min_daily', 20)
                    settings['maxLikesPerDay'] = data['phases']['phase2'].get('max_daily', 50)
            
            # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
            if 'working_hours' in data:
                settings['nightPauseStart'] = data['working_hours'].get('start', '09:00')
                settings['nightPauseEnd'] = data['working_hours'].get('end', '21:00')
            
            # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            if 'action_intervals' in data:
                settings['actionDelay'] = data['action_intervals'].get('min', 30)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            settings['full_settings'] = data
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(data.get('accounts', []))} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            
            return jsonify({
                'success': True,
                'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
            })
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ warmup_settings: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/warmup/start', methods=['POST'])
def start_warmup():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        data = request.get_json()
        account_ids = data.get('account_ids', [])
        settings = data.get('settings')  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ü–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        target_accounts = data.get('target_accounts', '')
        unique_follows = data.get('unique_follows', True)
        
        if not account_ids:
            return jsonify({
                'success': False,
                'error': '–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã'
            }), 400
        
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if settings:
            logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞")
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            settings['target_accounts'] = target_accounts
            settings['unique_follows'] = unique_follows
        else:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
            settings_file = 'warmup_settings.json'
            if os.path.exists(settings_file):
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞")
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                settings['target_accounts'] = target_accounts
                settings['unique_follows'] = unique_follows
            else:
                return jsonify({
                    'success': False,
                    'error': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                }), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if not target_accounts.strip():
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏'
            }), 400
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        target_accounts_list = [acc.strip() for acc in target_accounts.split('\n') if acc.strip()]
        logger.info(f"üéØ –¶–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(target_accounts_list)}")
        logger.info(f"üîÑ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {'–≤–∫–ª—é—á–µ–Ω—ã' if unique_follows else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ñ–∞–∑–∞
        if 'phases' in settings:
            enabled_phases = []
            for phase_name, phase_data in settings['phases'].items():
                if phase_data.get('enabled', False):
                    enabled_phases.append(phase_name)
            
            if not enabled_phases:
                return jsonify({
                    'success': False,
                    'error': '–ù–µ –≤–∫–ª—é—á–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ —Ñ–∞–∑–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞'
                }), 400
            
            logger.info(f"üéØ –í–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–∑—ã: {', '.join(enabled_phases)}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        from database.db_manager import get_session
        from database.models import WarmupTask, WarmupStatus
        from datetime import datetime
        
        session = get_session()
        created_tasks = []
        
        try:
            for account_id in account_ids:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                existing_task = session.query(WarmupTask).filter(
                    WarmupTask.account_id == account_id,
                    WarmupTask.status.in_([WarmupStatus.PENDING, WarmupStatus.RUNNING])
                ).first()
                
                if existing_task:
                    logger.warning(f"‚ö†Ô∏è –î–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                task = WarmupTask(
                    account_id=account_id,
                    settings=json.dumps(settings),
                    status=WarmupStatus.PENDING,
                    created_at=datetime.now()
                )
                session.add(task)
                created_tasks.append(account_id)
            
            session.commit()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á –ø—Ä–æ–≥—Ä–µ–≤–∞
            from utils.async_warmup_queue import start_async_warmup_queue
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            max_workers = settings.get('max_concurrent_accounts', 3)
            start_async_warmup_queue(max_workers=max_workers)
            
            return jsonify({
                'success': True,
                'message': f'–ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(created_tasks)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
                'started_accounts': created_tasks,
                'target_accounts_count': len(target_accounts_list),
                'unique_follows_enabled': unique_follows,
                'max_concurrent_accounts': max_workers
            })
            
        except Exception as e:
            session.rollback()
            raise e
        finally:
            session.close()
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/warmup/status', methods=['GET'])
def get_warmup_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        from database.db_manager import get_session
        from database.models import WarmupTask, InstagramAccount
        
        session = get_session()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        tasks = session.query(
            WarmupTask,
            InstagramAccount.username
        ).join(
            InstagramAccount,
            WarmupTask.account_id == InstagramAccount.id
        ).order_by(
            WarmupTask.created_at.desc()
        ).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        tasks_data = []
        for task, username in tasks:
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"Task {task.id}: status={task.status}, value={task.status.value}")
            
            task_data = {
                'id': task.id,
                'account_id': task.account_id,
                'username': username,
                'status': task.status.value,
                'progress': task.progress or {},
                'created_at': task.created_at.isoformat() if task.created_at else None,
                'started_at': task.started_at.isoformat() if task.started_at else None,
                'completed_at': task.completed_at.isoformat() if task.completed_at else None,
                'error': task.error
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            if task.progress:
                task_data['stats'] = {
                    'posts': task.progress.get('posts_created', 0),
                    'stories': task.progress.get('stories_created', 0),
                    'follows': task.progress.get('follows_made', 0),
                    'likes': task.progress.get('likes_given', 0),
                    'comments': task.progress.get('comments_made', 0)
                }
            else:
                task_data['stats'] = {
                    'posts': 0,
                    'stories': 0,
                    'follows': 0,
                    'likes': 0,
                    'comments': 0
                }
            
            tasks_data.append(task_data)
        
        session.close()
        
        return jsonify({
            'success': True,
            'data': tasks_data
        })
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/warmup/stop', methods=['POST'])
def stop_warmup():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        data = request.get_json()
        account_ids = data.get('account_ids', [])
        
        if not account_ids:
            return jsonify({
                'success': False,
                'error': '–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã'
            }), 400
        
        from database.db_manager import get_session
        from database.models import WarmupTask, WarmupStatus
        from datetime import datetime
        
        session = get_session()
        stopped_count = 0
        
        try:
            for account_id in account_ids:
                # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
                tasks = session.query(WarmupTask).filter(
                    WarmupTask.account_id == account_id,
                    WarmupTask.status.in_([WarmupStatus.PENDING, WarmupStatus.RUNNING])
                ).all()
                
                for task in tasks:
                    task.status = WarmupStatus.CANCELLED
                    task.completed_at = datetime.now()
                    stopped_count += 1
            
            session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            remaining_tasks = session.query(WarmupTask).filter(
                WarmupTask.status.in_([WarmupStatus.PENDING, WarmupStatus.RUNNING])
            ).count()
            
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å
            if remaining_tasks == 0:
                from utils.async_warmup_queue import stop_async_warmup_queue
                stop_async_warmup_queue()
                logger.info("üõë –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–≥—Ä–µ–≤–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            return jsonify({
                'success': True,
                'message': f'–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} –∑–∞–¥–∞—á –ø—Ä–æ–≥—Ä–µ–≤–∞'
            })
            
        except Exception as e:
            session.rollback()
            raise e
        finally:
            session.close()
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# =============================================================================
# API –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫
# =============================================================================

@app.route('/api/follow/tasks', methods=['GET'])
def get_follow_tasks():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        from database.db_manager import get_session
        from database.models import FollowTask, InstagramAccount
        
        session = get_session()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        tasks = session.query(
            FollowTask,
            InstagramAccount.username
        ).join(
            InstagramAccount,
            FollowTask.account_id == InstagramAccount.id
        ).order_by(
            FollowTask.created_at.desc()
        ).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        tasks_data = []
        for task, username in tasks:
            task_data = {
                'id': task.id,
                'name': task.name,
                'account_id': task.account_id,
                'account_username': username,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 'account'
                'source_type': task.source_type.value,
                'source_value': task.source_value,
                'status': task.status.value,
                'follows_per_hour': task.follows_per_hour,
                'follow_limit': task.follow_limit,
                'followed_count': task.followed_count,
                'skipped_count': task.skipped_count,
                'failed_count': task.failed_count,
                'filters': task.filters or {},
                'created_at': task.created_at.isoformat() if task.created_at else None,
                'started_at': task.started_at.isoformat() if task.started_at else None,
                'completed_at': task.completed_at.isoformat() if task.completed_at else None,
                'last_action_at': task.last_action_at.isoformat() if task.last_action_at else None,
                'error': task.error
            }
            tasks_data.append(task_data)
        
        session.close()
        
        return jsonify({
            'success': True,
            'tasks': tasks_data  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'data' –Ω–∞ 'tasks' –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è JavaScript
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/follow/tasks', methods=['POST'])
def create_follow_task():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['name', 'source_type', 'source_value']
        for field in required_fields:
            if field not in data:
                return jsonify({
                    'success': False,
                    'error': f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}'
                }), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        account_ids = data.get('account_ids', [])
        if not account_ids:
            # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π account_id
            single_account_id = data.get('account_id')
            if single_account_id:
                account_ids = [single_account_id]
            else:
                return jsonify({
                    'success': False,
                    'error': '–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã'
                }), 400
        
        from database.db_manager import get_session
        from database.models import FollowTask, FollowSourceType, FollowTaskStatus, InstagramAccount
        from datetime import datetime
        
        session = get_session()
        created_tasks = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            try:
                source_type = FollowSourceType(data['source_type'])
            except ValueError:
                return jsonify({
                    'success': False,
                    'error': f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {data["source_type"]}'
                }), 400
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
            target_accounts = data.get('target_accounts', [])
            unique_follows = data.get('unique_follows', True)
            task_mode = data.get('task_mode', 'multiple')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
            
            # –î–ª—è –ø—Ä—è–º—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Ü–µ–ª–µ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            if source_type == 'direct' or (target_accounts and len(target_accounts) > 0):
                if task_mode == 'single':
                    # –†–µ–∂–∏–º "–æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç" - —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É —Å–æ –≤—Å–µ–º–∏ —Ü–µ–ª—è–º–∏
                    for account_id in account_ids:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                        account = session.query(InstagramAccount).filter_by(id=account_id).first()
                        if not account:
                            logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            continue
                        
                        # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∑–∞–¥–∞—á—É —Å–æ –≤—Å–µ–º–∏ —Ü–µ–ª–µ–≤—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                        task_name = f"{data['name']} - @{account.username} ({len(target_accounts)} —Ü–µ–ª–µ–π)"
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                        task = FollowTask(
                            name=task_name,
                            account_id=account_id,
                            source_type=FollowSourceType.FOLLOWERS,
                            source_value='batch_follow',  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                            follows_per_hour=data.get('follows_per_hour', 20),
                            follow_limit=len(target_accounts),  # –õ–∏–º–∏—Ç —Ä–∞–≤–µ–Ω –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ü–µ–ª–µ–π
                            filters={
                                **data.get('filters', {}),
                                'threads': data.get('threads', 1),
                                'delay_min': data.get('delay_min', 30),
                                'delay_max': data.get('delay_max', 90),
                                'target_accounts': target_accounts,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
                                'unique_follows': unique_follows
                            },
                            status=FollowTaskStatus.PENDING,
                            created_at=datetime.now()
                        )
                        
                        session.add(task)
                        created_tasks.append({
                            'account_id': account_id,
                            'account_username': account.username,
                            'targets_count': len(target_accounts)
                        })
                else:
                    # –†–µ–∂–∏–º "–æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–µ–ª–∏" (—Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
                    for account_id in account_ids:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                        account = session.query(InstagramAccount).filter_by(id=account_id).first()
                        if not account:
                            logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            continue
                        
                        for target_account in target_accounts:
                            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∑–∞–¥–∞—á–∏
                            task_name = f"{data['name']} - @{account.username} ‚Üí @{target_account}"
                            
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                            task = FollowTask(
                                name=task_name,
                                account_id=account_id,
                                source_type=FollowSourceType.FOLLOWERS,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º followers –∫–∞–∫ —Ç–∏–ø –¥–ª—è –ø—Ä—è–º—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                                source_value=f"@{target_account}",  # –î–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                                follows_per_hour=data.get('follows_per_hour', 20),
                                follow_limit=1,  # –î–ª—è –ø—Ä—è–º–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ª–∏–º–∏—Ç –≤—Å–µ–≥–¥–∞ 1
                                filters={
                                    **data.get('filters', {}),
                                    'threads': data.get('threads', 1),
                                    'delay_min': data.get('delay_min', 30),
                                    'delay_max': data.get('delay_max', 90)
                                },
                                status=FollowTaskStatus.PENDING,
                                created_at=datetime.now()
                            )
                            
                            session.add(task)
                            created_tasks.append({
                                'account_id': account_id,
                                'account_username': account.username,
                                'target': target_account
                            })
            else:
                # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤/–ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
                if target_accounts and source_type in [FollowSourceType.FOLLOWERS, FollowSourceType.FOLLOWING]:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∫–∞–∂–¥–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    for account_id in account_ids:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                        account = session.query(InstagramAccount).filter_by(id=account_id).first()
                        if not account:
                            logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            continue
                        
                        for target_account in target_accounts:
                            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∑–∞–¥–∞—á–∏
                            task_name = f"{data['name']} - @{account.username} ‚Üí {target_account}"
                            
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                            task = FollowTask(
                                name=task_name,
                                account_id=account_id,
                                source_type=source_type,
                                source_value=target_account,
                                follows_per_hour=data.get('follows_per_hour', 20),
                                follow_limit=data.get('follow_limit', 500),
                                filters={
                                    **data.get('filters', {}),
                                    'threads': data.get('threads', 1),
                                    'delay_min': data.get('delay_min', 30),
                                    'delay_max': data.get('delay_max', 90)
                                },
                                status=FollowTaskStatus.PENDING,
                                created_at=datetime.now()
                            )
                            
                            session.add(task)
                            created_tasks.append({
                                'account_id': account_id,
                                'account_username': account.username,
                                'target': target_account
                            })
                else:
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    for account_id in account_ids:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                        account = session.query(InstagramAccount).filter_by(id=account_id).first()
                        if not account:
                            logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            continue
                        
                        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∑–∞–¥–∞—á–∏
                        task_name = f"{data['name']} - @{account.username}"
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                        task = FollowTask(
                            name=task_name,
                            account_id=account_id,
                            source_type=source_type,
                            source_value=data['source_value'],
                            follows_per_hour=data.get('follows_per_hour', 20),
                            follow_limit=data.get('follow_limit', 500),
                            filters={
                                **data.get('filters', {}),
                                'threads': data.get('threads', 1),
                                'delay_min': data.get('delay_min', 30),
                                'delay_max': data.get('delay_max', 90)
                            },
                            status=FollowTaskStatus.PENDING,
                            created_at=datetime.now()
                        )
                        
                        session.add(task)
                        created_tasks.append({
                            'account_id': account_id,
                            'account_username': account.username,
                            'source': data['source_value']
                        })
            
            session.commit()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
            from utils.async_follow_queue import start_async_follow_queue
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            max_threads = data.get('threads', 5)
            start_async_follow_queue(max_workers=max_threads)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_tasks)} –∑–∞–¥–∞—á –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏")
            
            return jsonify({
                'success': True,
                'message': f'–°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {len(created_tasks)}',
                'created_tasks': created_tasks
            })
            
        except Exception as e:
            session.rollback()
            raise e
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/follow/tasks/<int:task_id>', methods=['PUT'])
def update_follow_task_status(task_id):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (–ø–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞)"""
    try:
        data = request.get_json()
        status = data.get('status')
        
        from database.db_manager import get_session
        from database.models import FollowTask, FollowTaskStatus
        from datetime import datetime
        
        session = get_session()
        
        try:
            task = session.query(FollowTask).filter_by(id=task_id).first()
            if not task:
                return jsonify({
                    'success': False,
                    'error': '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                }), 404
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è enum
            if status:
                status_lower = status.lower()
                try:
                    new_status = FollowTaskStatus(status_lower)
                    task.status = new_status
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
                    if new_status == FollowTaskStatus.RUNNING and not task.started_at:
                        task.started_at = datetime.now()
                    elif new_status in [FollowTaskStatus.COMPLETED, FollowTaskStatus.FAILED, FollowTaskStatus.CANCELLED]:
                        task.completed_at = datetime.now()
                    
                    message = f'–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {status}'
                except ValueError:
                    return jsonify({
                        'success': False,
                        'error': f'–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}'
                    }), 400
            else:
                # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
                action = data.get('action')
                if action == 'pause':
                    if task.status == FollowTaskStatus.RUNNING:
                        task.status = FollowTaskStatus.PAUSED
                        message = '–ó–∞–¥–∞—á–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
                    else:
                        return jsonify({
                            'success': False,
                            'error': '–ó–∞–¥–∞—á–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞'
                        }), 400
                elif action == 'resume':
                    if task.status == FollowTaskStatus.PAUSED:
                        task.status = FollowTaskStatus.RUNNING
                        message = '–ó–∞–¥–∞—á–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞'
                    else:
                        return jsonify({
                            'success': False,
                            'error': '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ'
                        }), 400
                else:
                    return jsonify({
                        'success': False,
                        'error': '–ù–µ —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ'
                    }), 400
            
            session.commit()
            
            return jsonify({
                'success': True,
                'message': message
            })
            
        except Exception as e:
            session.rollback()
            raise e
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/follow/tasks/<int:task_id>', methods=['DELETE'])
def delete_follow_task(task_id):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        from database.db_manager import get_session
        from database.models import FollowTask, FollowTaskStatus
        from datetime import datetime
        
        session = get_session()
        
        try:
            task = session.query(FollowTask).filter_by(id=task_id).first()
            if not task:
                return jsonify({
                    'success': False,
                    'error': '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                }), 404
            
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω—è–µ–º –µ—ë
            if task.status in [FollowTaskStatus.RUNNING, FollowTaskStatus.PENDING]:
                task.status = FollowTaskStatus.CANCELLED
                task.completed_at = datetime.now()
                session.commit()
                
                # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                import time
                time.sleep(1)
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
            session.delete(task)
            session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            active_tasks = session.query(FollowTask).filter(
                FollowTask.status.in_([FollowTaskStatus.PENDING, FollowTaskStatus.RUNNING])
            ).count()
            
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            if active_tasks == 0:
                from utils.async_follow_queue import stop_async_follow_queue
                stop_async_follow_queue()
                logger.info("üõë –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            return jsonify({
                'success': True,
                'message': '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
            })
            
        except Exception as e:
            session.rollback()
            raise e
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/follow/tasks/stop-all', methods=['POST'])
def stop_all_follow_tasks():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        from database.db_manager import get_session
        from database.models import FollowTask, FollowTaskStatus
        from datetime import datetime
        
        session = get_session()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            active_tasks = session.query(FollowTask).filter(
                FollowTask.status.in_([
                    FollowTaskStatus.RUNNING, 
                    FollowTaskStatus.PENDING,
                    FollowTaskStatus.PAUSED
                ])
            ).all()
            
            stopped_count = 0
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
            for task in active_tasks:
                task.status = FollowTaskStatus.STOPPED
                task.completed_at = datetime.now()
                if task.status == FollowTaskStatus.PENDING and not task.started_at:
                    task.started_at = datetime.now()
                stopped_count += 1
            
            session.commit()
            
            # –ï—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            if stopped_count > 0:
                from utils.async_follow_queue import stop_async_follow_queue
                stop_async_follow_queue()
                logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} –∑–∞–¥–∞—á –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫")
            
            return jsonify({
                'success': True,
                'stopped_count': stopped_count,
                'message': f'–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} –∑–∞–¥–∞—á'
            })
            
        except Exception as e:
            session.rollback()
            raise e
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/follow/stats', methods=['GET'])
def get_follow_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        from database.db_manager import get_session
        from database.models import FollowTask, FollowHistory, FollowTaskStatus
        from datetime import datetime, timedelta
        from sqlalchemy import func
        
        session = get_session()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º
        active_tasks = session.query(FollowTask).filter(
            FollowTask.status == FollowTaskStatus.RUNNING
        ).count()
        
        # –ü–æ–¥–ø–∏—Å–æ–∫ —Å–µ–≥–æ–¥–Ω—è
        today_start = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        today_follows = session.query(FollowHistory).filter(
            FollowHistory.followed_at >= today_start
        ).count()
        
        # –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫
        total_followed = session.query(func.sum(FollowTask.followed_count)).scalar() or 0
        
        # –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (–ø–æ–¥–ø–∏—Å–∫–∏ + –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ + –æ—à–∏–±–∫–∏)
        total_processed = session.query(
            func.sum(FollowTask.followed_count + FollowTask.skipped_count + FollowTask.failed_count)
        ).scalar() or 0
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        if total_processed > 0:
            success_rate = (total_followed / total_processed) * 100
        else:
            success_rate = 0
        
        session.close()
        
        return jsonify({
            'success': True,
            'active_tasks': active_tasks,
            'today_follows': today_follows,
            'total_followed': total_followed,
            'success_rate': round(success_rate, 1)
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# =============================================================================
# API –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
# =============================================================================

@app.route('/api/accounts/validate', methods=['POST'])
def validate_accounts():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        from utils.smart_validator_service import get_smart_validator, ValidationPriority
        from database.db_manager import get_instagram_accounts
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
        validator = get_smart_validator()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        accounts = get_instagram_accounts()
        for account in accounts:
            validator.request_validation(account.id, ValidationPriority.HIGH)
        
        logger.info(f"üîç –î–æ–±–∞–≤–ª–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–≤–µ—Ä–∫–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = validator.get_stats()
        
        return jsonify({
            'success': True,
            'message': f'–î–æ–±–∞–≤–ª–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–≤–µ—Ä–∫–∏',
            'stats': stats
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/accounts/validate/status', methods=['GET'])
def get_validation_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    try:
        from utils.smart_validator_service import get_smart_validator
        
        validator = get_smart_validator()
        stats = validator.get_stats()
        load = validator.get_system_load()
        
        return jsonify({
            'success': True,
            'is_running': validator.is_running,
            'check_interval_minutes': validator.check_interval // 60,
            'auto_repair': True,  # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ –≤ —É–º–Ω–æ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ
            'stats': stats,
            'system_load': {
                'cpu': load.cpu_usage,
                'memory': load.memory_usage,
                'is_high': load.is_high_load
            },
            'last_results': {
                'valid': stats['status_counts'].get('valid', 0),
                'invalid': stats['status_counts'].get('invalid', 0),
                'repaired': stats['status_counts'].get('valid', 0),  # –°—á–∏—Ç–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–µ
                'failed_repair': stats['status_counts'].get('failed', 0)
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/accounts/validate/settings', methods=['PUT'])
def update_validation_settings():
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    try:
        data = request.get_json()
        from utils.smart_validator_service import get_smart_validator
        
        validator = get_smart_validator()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if 'check_interval_minutes' in data:
            validator.check_interval = data['check_interval_minutes'] * 60
            
        # –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
        # auto_repair –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω –≤ —É–º–Ω–æ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–µ
        
        # –ù–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–∏—Å - –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        
        return jsonify({
            'success': True,
            'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'settings': {
                'check_interval_minutes': validator.check_interval // 60,
                'auto_repair': True,
                'max_concurrent_checks': validator.max_concurrent_checks,
                'max_concurrent_recoveries': validator.max_concurrent_recoveries
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/accounts/<int:account_id>/check', methods=['POST'])
def check_single_account(account_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        from utils.smart_validator_service import get_smart_validator, ValidationPriority
        from database.db_manager import get_instagram_account
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        account = get_instagram_account(account_id)
        if not account:
            return jsonify({
                'success': False,
                'error': '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }), 404
        
        logger.info(f"üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ @{account.username}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validator = get_smart_validator()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        validator.request_validation(account_id, ValidationPriority.CRITICAL)
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
        import time
        for _ in range(10):
            status = validator.get_account_status(account_id)
            if status and status.value != 'checking':
                is_valid = validator.is_account_valid(account_id)
                
                return jsonify({
                    'success': True,
                    'is_valid': is_valid,
                    'status': status.value,
                    'username': account.username
                })
            time.sleep(1)
        
        # –ï—Å–ª–∏ –Ω–µ –¥–æ–∂–¥–∞–ª–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        return jsonify({
            'success': True,
            'is_valid': None,
            'status': 'checking',
            'username': account.username,
            'message': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å'
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/accounts/validate/stop', methods=['POST'])
def stop_validation():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    try:
        from utils.smart_validator_service import get_smart_validator
        
        validator = get_smart_validator()
        validator.stop()
        
        return jsonify({
            'success': True,
            'message': '–°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        })
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# =============================================================================
# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
# =============================================================================

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ Web API —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists('web-dashboard'):
        logger.error("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è web-dashboard –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
    from utils.task_queue import start_task_queue
    start_task_queue()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—ã–π —Ñ–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    try:
        from utils.smart_validator_service import get_smart_validator
        smart_validator = get_smart_validator()
        smart_validator.start()
        logger.info("‚úÖ –£–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.run(
        host='0.0.0.0',
        port=8080,
        debug=True,
        use_reloader=False  # –û—Ç–∫–ª—é—á–∞–µ–º reloader —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    ) 