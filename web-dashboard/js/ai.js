// AI Assistant page JavaScript

let currentTab = 'content';
let aiStats = {};
let recentInteractions = [];

document.addEventListener('DOMContentLoaded', async () => {
    await loadAIData();
    setupEventListeners();
});

async function loadAIData() {
    try {
        aiStats = await api.getAIStats();
        recentInteractions = await api.getRecentInteractions();
        updateAIStats();
        renderRecentInteractions();
    } catch (error) {
        console.error('Error loading AI data:', error);
        // –ó–∞–≥–ª—É—à–∫–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        aiStats = generateMockAIStats();
        recentInteractions = generateMockInteractions();
        updateAIStats();
        renderRecentInteractions();
    }
}

function generateMockAIStats() {
    return {
        generated_content: 1247,
        ai_responses: 3856,
        accuracy: 98.7,
        tokens_used: 12500,
        content_today: 47,
        content_month: 1247,
        content_total: 8520,
        responses_today: 156,
        responses_month: 3856,
        responses_total: 24120,
        tokens_today: 2100,
        tokens_month: 12500,
        tokens_limit: 100000
    };
}

function generateMockInteractions() {
    const interactions = [];
    const types = ['comment', 'dm', 'story_mention'];
    const accounts = ['user_001', 'user_002', 'user_003', 'user_004', 'user_005'];
    
    for (let i = 0; i < 10; i++) {
        interactions.push({
            id: i + 1,
            type: types[Math.floor(Math.random() * types.length)],
            account: accounts[Math.floor(Math.random() * accounts.length)],
            message: `–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è ${i + 1}...`,
            response: `–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç ${i + 1}...`,
            timestamp: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000),
            confidence: Math.floor(Math.random() * 20) + 80 // 80-100%
        });
    }
    
    return interactions;
}

function setupEventListeners() {
    document.getElementById('ai-model').addEventListener('change', (e) => {
        console.log('AI model changed to:', e.target.value);
    });
    
    // Content generation form
    document.getElementById('content-type').addEventListener('change', updateContentForm);
}

function updateAIStats() {
    document.getElementById('generated-content').textContent = aiStats.generated_content.toLocaleString();
    document.getElementById('ai-responses').textContent = aiStats.ai_responses.toLocaleString();
    document.getElementById('ai-accuracy').textContent = aiStats.accuracy + '%';
    document.getElementById('tokens-used').textContent = (aiStats.tokens_used / 1000).toFixed(1) + 'K';
}

function renderRecentInteractions() {
    const container = document.getElementById('recent-interactions');
    
    if (recentInteractions.length === 0) {
        container.innerHTML = '<p class="text-slate-400 text-sm">–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π</p>';
        return;
    }
    
    const html = recentInteractions.map(interaction => `
        <div class="bg-slate-600/30 rounded-lg p-3 border-l-4 border-${getInteractionColor(interaction.type)}-400">
            <div class="flex items-center justify-between mb-2">
                <span class="text-white font-medium">@${interaction.account}</span>
                <span class="text-xs text-slate-400">${formatTime(interaction.timestamp)}</span>
            </div>
            <div class="text-sm text-slate-300 mb-1">${interaction.message}</div>
            <div class="text-sm text-slate-400 mb-2">‚Ü≥ ${interaction.response}</div>
            <div class="flex items-center justify-between">
                <span class="text-xs text-slate-500">${getInteractionTypeText(interaction.type)}</span>
                <span class="text-xs text-green-400">${interaction.confidence}% —Ç–æ—á–Ω–æ—Å—Ç—å</span>
            </div>
        </div>
    `).join('');
    
    container.innerHTML = html;
}

function getInteractionColor(type) {
    const colors = {
        'comment': 'blue',
        'dm': 'green',
        'story_mention': 'purple'
    };
    return colors[type] || 'gray';
}

function getInteractionTypeText(type) {
    const types = {
        'comment': '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        'dm': '–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        'story_mention': '–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ Stories'
    };
    return types[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function formatTime(date) {
    return new Date(date).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
    });
}

function switchTab(tab) {
    currentTab = tab;
    
    // Update tab buttons
    document.querySelectorAll('button[onclick^="switchTab"]').forEach(btn => {
        btn.className = btn.className.replace('bg-blue-600 text-white', 'text-slate-400 hover:text-white');
    });
    
    const activeBtn = document.querySelector(`button[onclick="switchTab('${tab}')"]`);
    if (activeBtn) {
        activeBtn.className = activeBtn.className.replace('text-slate-400 hover:text-white', 'bg-blue-600 text-white');
    }
    
    // Show/hide tabs
    ['content-tab', 'interaction-tab', 'analytics-tab', 'settings-tab'].forEach(tabId => {
        const element = document.getElementById(tabId);
        if (tabId === `${tab}-tab`) {
            element.classList.remove('hidden');
        } else {
            element.classList.add('hidden');
        }
    });
    
    // Re-initialize icons for newly shown content
    lucide.createIcons();
}

function updateContentForm() {
    const contentType = document.getElementById('content-type').value;
    const themeInput = document.getElementById('content-theme');
    const instructionsInput = document.getElementById('content-instructions');
    
    // Update placeholder text based on content type
    const placeholders = {
        'caption': '–ù–∞–ø—Ä–∏–º–µ—Ä: –º–æ—Ç–∏–≤–∞—Ü–∏—è, –±–∏–∑–Ω–µ—Å, –∫—Ä–∞—Å–æ—Ç–∞...',
        'story': '–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞ –∫—É–ª–∏—Å–∞–º–∏, –≤–æ–ø—Ä–æ—Å –¥–Ω—è...',
        'comment': '–ù–∞–ø—Ä–∏–º–µ—Ä: –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∫–∞...',
        'bio': '–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ...',
        'hashtags': '–ù–∞–ø—Ä–∏–º–µ—Ä: —Ñ–∏—Ç–Ω–µ—Å, –µ–¥–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è...'
    };
    
    themeInput.placeholder = placeholders[contentType] || '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É...';
    
    const instructions = {
        'caption': '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é',
        'story': '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Stories',
        'comment': '–°–æ–∑–¥–∞–π—Ç–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        'bio': '–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–µ—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è',
        'hashtags': '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏'
    };
    
    instructionsInput.placeholder = instructions[contentType] || '–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É...';
}

async function generateContent() {
    const contentType = document.getElementById('content-type').value;
    const theme = document.getElementById('content-theme').value;
    const tone = document.getElementById('content-tone').value;
    const instructions = document.getElementById('content-instructions').value;
    const model = document.getElementById('ai-model').value;
    
    if (!theme.trim()) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        return;
    }
    
    const resultContainer = document.getElementById('generated-result');
    resultContainer.innerHTML = '<div class="text-blue-400">–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç...</div>';
    
    try {
        const result = await api.generateContent({
            type: contentType,
            theme: theme,
            tone: tone,
            instructions: instructions,
            model: model
        });
        
        resultContainer.innerHTML = `<div class="text-white whitespace-pre-wrap">${result.content}</div>`;
    } catch (error) {
        console.error('Error generating content:', error);
        // –ó–∞–≥–ª—É—à–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const mockContent = generateMockContent(contentType, theme, tone);
        resultContainer.innerHTML = `<div class="text-white whitespace-pre-wrap">${mockContent}</div>`;
    }
}

function generateMockContent(type, theme, tone) {
    const mockContents = {
        'caption': `‚ú® ${theme} ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! 

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö, —á—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—Å? üí™

#${theme.replace(/\s+/g, '')} #–º–æ—Ç–∏–≤–∞—Ü–∏—è #–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ #—É—Å–ø–µ—Ö`,

        'story': `${theme} –∑–∞ –∫—É–ª–∏—Å–∞–º–∏ üé¨

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ª–∏ –≤–∞–º –∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ?`,

        'comment': `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å —Ç–∞–∫–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –æ ${theme}! –û—á–µ–Ω—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç! üôå`,

        'bio': `${theme} —ç–Ω—Ç—É–∑–∏–∞—Å—Ç üåü
–î–µ–ª—é—Å—å –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
üëá –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏`,

        'hashtags': `#${theme.replace(/\s+/g, '')} #–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ #–º–æ—Ç–∏–≤–∞—Ü–∏—è #—É—Å–ø–µ—Ö #—Ä–∞–∑–≤–∏—Ç–∏–µ #—Ü–µ–ª–∏ #–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è #lifestyle #–ø–æ–∑–∏—Ç–∏–≤ #—ç–Ω–µ—Ä–≥–∏—è`
    };
    
    return mockContents[type] || `–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ç–µ–º—É "${theme}" –≤ ${tone} —Ç–æ–Ω–µ.`;
}

function copyContent() {
    const content = document.getElementById('generated-result').textContent;
    
    if (!content || content.includes('–ù–∞–∂–º–∏—Ç–µ') || content.includes('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º')) {
        alert('–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
    }
    
    navigator.clipboard.writeText(content).then(() => {
        alert('–ö–æ–Ω—Ç–µ–Ω—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    }).catch(() => {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏');
    });
}

function saveContent() {
    const content = document.getElementById('generated-result').textContent;
    const contentType = document.getElementById('content-type').value;
    
    if (!content || content.includes('–ù–∞–∂–º–∏—Ç–µ') || content.includes('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º')) {
        alert('–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return;
    }
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    alert('–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É!');
}

function startAI() {
    const model = document.getElementById('ai-model').value;
    alert(`–ó–∞–ø—É—Å–∫ –ò–ò —Å –º–æ–¥–µ–ª—å—é ${model} (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)`);
}

function saveAISettings() {
    alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
} 