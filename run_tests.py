#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ MVP
"""

import sys
import unittest
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(
    level=logging.WARNING,  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –æ—à–∏–±–∫–∏
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def run_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í MVP\n")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    try:
        from tests.test_services import (
            TestRateLimiter,
            TestAntiDetection,
            TestInstagramService,
            TestAsyncTaskProcessor,
            TestAccountAutomation
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç-–∫–ª–∞—Å—Å—ã
        suite.addTests(loader.loadTestsFromTestCase(TestRateLimiter))
        suite.addTests(loader.loadTestsFromTestCase(TestAntiDetection))
        suite.addTests(loader.loadTestsFromTestCase(TestInstagramService))
        suite.addTests(loader.loadTestsFromTestCase(TestAsyncTaskProcessor))
        suite.addTests(loader.loadTestsFromTestCase(TestAccountAutomation))
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        print("\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("1. –§–∞–π–ª tests/test_services.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("2. –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(result.failures)}")
    print(f"üí• –û—à–∏–±–æ–∫: {len(result.errors)}")
    
    if result.wasSuccessful():
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return True
    else:
        print("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        if result.failures:
            print("\n–ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
            for test, traceback in result.failures:
                print(f"- {test}")
        
        if result.errors:
            print("\n–¢–µ—Å—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
            for test, traceback in result.errors:
                print(f"- {test}")
        
        return False

def run_specific_test(test_name):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç"""
    
    print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}\n")
    
    try:
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–π —Ç–µ—Å—Ç
        module = __import__('tests.test_services', fromlist=[test_name])
        test_class = getattr(module, test_name)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º suite
        loader = unittest.TestLoader()
        suite = loader.loadTestsFromTestCase(test_class)
        
        runner = unittest.TextTestRunner(verbosity=2)
        result = runner.run(suite)
        
        return result.wasSuccessful()
        
    except AttributeError:
        print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
        print("- TestRateLimiter")
        print("- TestAntiDetection")
        print("- TestInstagramService")
        print("- TestAsyncTaskProcessor")
        print("- TestAccountAutomation")
        return False

if __name__ == "__main__":
    if len(sys.argv) > 1:
        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        success = run_specific_test(sys.argv[1])
    else:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        success = run_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1) 