#!/usr/bin/env python3
"""
–ß–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏:
–û–±—ã—á–Ω—ã–µ instagrapi.Client VS Lazy Loading –∫–ª–∏–µ–Ω—Ç—ã
"""

import os
import sys
import time
import gc
import psutil
import threading
from typing import List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from instagrapi import Client as InstagrapiClient
from instagram.lazy_client_factory import init_lazy_factory, get_lazy_client, shutdown_lazy_factory
from database.db_manager import init_db, get_all_accounts
from device_manager import get_or_create_device_settings


def get_memory_usage_mb():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –≤ MB"""
    process = psutil.Process()
    return process.memory_info().rss / 1024 / 1024


def force_garbage_collection():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞"""
    gc.collect()
    gc.collect()
    gc.collect()


def test_regular_clients(num_clients: int = 20):
    """–¢–µ—Å—Ç —Å –æ–±—ã—á–Ω—ã–º–∏ instagrapi.Client"""
    print(f"\nüî¥ –¢–ï–°–¢ –û–ë–´–ß–ù–´–• –ö–õ–ò–ï–ù–¢–û–í ({num_clients} —à—Ç—É–∫)")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    all_accounts = get_all_accounts()
    accounts = all_accounts[:num_clients]
    
    if len(accounts) < num_clients:
        print(f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        accounts = all_accounts
        num_clients = len(accounts)
    
    # –ò–∑–º–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–º—è—Ç—å
    force_garbage_collection()
    baseline_memory = get_memory_usage_mb()
    print(f"üìä –ë–∞–∑–æ–≤–∞—è –ø–∞–º—è—Ç—å: {baseline_memory:.1f} MB")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
    print(f"\nüì± –°–æ–∑–¥–∞–µ–º {num_clients} –æ–±—ã—á–Ω—ã—Ö instagrapi.Client...")
    regular_clients = []
    
    start_time = time.time()
    
    for i, account in enumerate(accounts):
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π instagrapi.Client
            device_settings = get_or_create_device_settings(account.id)
            client = InstagrapiClient(settings=device_settings)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏
            try:
                import instagram.client_patch
                import instagram.deep_patch
            except ImportError:
                pass
            
            regular_clients.append(client)
            
            if (i + 1) % 5 == 0:
                current_memory = get_memory_usage_mb()
                memory_per_client = (current_memory - baseline_memory) / (i + 1)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {i+1} –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–∞–º—è—Ç—å: {current_memory:.1f} MB (+{memory_per_client:.1f} MB/–∫–ª–∏–µ–Ω—Ç)")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {i+1}: {e}")
    
    creation_time = time.time() - start_time
    force_garbage_collection()
    final_memory = get_memory_usage_mb()
    
    memory_overhead = final_memory - baseline_memory
    memory_per_client = memory_overhead / len(regular_clients) if regular_clients else 0
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–´–ß–ù–´–• –ö–õ–ò–ï–ù–¢–û–í:")
    print(f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(regular_clients)}")
    print(f"‚Ä¢ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {creation_time:.2f}—Å")
    print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç: {creation_time/len(regular_clients)*1000:.1f}–º—Å")
    print(f"‚Ä¢ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {final_memory:.1f} MB")
    print(f"‚Ä¢ Overhead –ø–∞–º—è—Ç–∏: {memory_overhead:.1f} MB")
    print(f"‚Ä¢ –ü–∞–º—è—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç: {memory_per_client:.1f} MB")
    
    # –û—á–∏—â–∞–µ–º
    del regular_clients
    force_garbage_collection()
    
    return {
        'clients_created': len(accounts),
        'total_memory_mb': memory_overhead,
        'memory_per_client_mb': memory_per_client,
        'creation_time_sec': creation_time
    }


def test_lazy_clients(num_clients: int = 20, activate_clients: int = 5):
    """–¢–µ—Å—Ç —Å Lazy Loading –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    print(f"\nüü¢ –¢–ï–°–¢ LAZY –ö–õ–ò–ï–ù–¢–û–í ({num_clients} –≤—Å–µ–≥–æ, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º {activate_clients})")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    all_accounts = get_all_accounts()
    accounts = all_accounts[:num_clients]
    
    if len(accounts) < num_clients:
        print(f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        accounts = all_accounts
        num_clients = len(accounts)
    
    # –ò–∑–º–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–º—è—Ç—å
    force_garbage_collection()
    baseline_memory = get_memory_usage_mb()
    print(f"üìä –ë–∞–∑–æ–≤–∞—è –ø–∞–º—è—Ç—å: {baseline_memory:.1f} MB")
    
    # –°–æ–∑–¥–∞–µ–º lazy –∫–ª–∏–µ–Ω—Ç—ã
    print(f"\nüì± –°–æ–∑–¥–∞–µ–º {num_clients} lazy –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    lazy_clients = []
    
    start_time = time.time()
    
    for i, account in enumerate(accounts):
        try:
            client = get_lazy_client(account.id)
            lazy_clients.append(client)
            
            if (i + 1) % 5 == 0:
                current_memory = get_memory_usage_mb()
                memory_overhead = current_memory - baseline_memory
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {i+1} lazy –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø–∞–º—è—Ç—å: {current_memory:.1f} MB (+{memory_overhead:.3f} MB)")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è lazy –∫–ª–∏–µ–Ω—Ç–∞ {i+1}: {e}")
    
    lazy_creation_time = time.time() - start_time
    force_garbage_collection()
    lazy_only_memory = get_memory_usage_mb()
    lazy_overhead = lazy_only_memory - baseline_memory
    
    print(f"\nüìä LAZY –ö–õ–ò–ï–ù–¢–´ –°–û–ó–î–ê–ù–´:")
    print(f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {len(lazy_clients)}")
    print(f"‚Ä¢ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {lazy_creation_time:.3f}—Å")
    print(f"‚Ä¢ –ü–∞–º—è—Ç—å: {lazy_only_memory:.1f} MB (+{lazy_overhead:.3f} MB)")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤
    print(f"\n‚ö° –ê–ö–¢–ò–í–ò–†–£–ï–ú {activate_clients} –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    activated_count = 0
    activation_start = time.time()
    
    for i, client in enumerate(lazy_clients[:activate_clients]):
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            print(f"üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç {i+1}...")
            
            # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π instagrapi.Client
            real_client = client._ensure_real_client()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
            if client.is_active:
                activated_count += 1
                current_memory = get_memory_usage_mb()
                print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {i+1} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –ø–∞–º—è—Ç—å: {current_memory:.1f} MB")
            else:
                print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {i+1} –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {i+1}: {e}")
    
    activation_time = time.time() - activation_start
    force_garbage_collection()
    final_memory = get_memory_usage_mb()
    
    total_overhead = final_memory - baseline_memory
    activation_overhead = final_memory - lazy_only_memory
    memory_per_active_client = activation_overhead / activated_count if activated_count > 0 else 0
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ LAZY –ö–õ–ò–ï–ù–¢–û–í:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {len(lazy_clients)}")
    print(f"‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {activated_count}")
    print(f"‚Ä¢ –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_time:.2f}—Å")
    print(f"‚Ä¢ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {final_memory:.1f} MB")
    print(f"‚Ä¢ –û–±—â–∏–π overhead: {total_overhead:.1f} MB")
    print(f"‚Ä¢ Overhead –æ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {activation_overhead:.1f} MB")
    print(f"‚Ä¢ –ü–∞–º—è—Ç—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {memory_per_active_client:.1f} MB")
    
    return {
        'clients_created': len(lazy_clients),
        'clients_activated': activated_count,
        'total_memory_mb': total_overhead,
        'activation_memory_mb': activation_overhead,
        'memory_per_active_client_mb': memory_per_active_client,
        'lazy_creation_time_sec': lazy_creation_time,
        'activation_time_sec': activation_time
    }


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("üî• –ß–ï–°–¢–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ü–ê–ú–Ø–¢–ò: –û–ë–´–ß–ù–´–ï VS LAZY –ö–õ–ò–ï–ù–¢–´")
    print("=" * 70)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        init_db()
        init_lazy_factory(max_active_clients=100)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞
        num_clients = 50  # –ë–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —á–µ—Ç–∫–æ–π —Ä–∞–∑–Ω–∏—Ü—ã
        activate_count = 10  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å
        
        print(f"\nüéØ –ü–ê–†–ê–ú–ï–¢–†–´ –¢–ï–°–¢–ê:")
        print(f"‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {num_clients}")
        print(f"‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º lazy –∫–ª–∏–µ–Ω—Ç–æ–≤: {activate_count}")
        
        # –¢–µ—Å—Ç 1: –û–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        regular_results = test_regular_clients(num_clients)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
        print("\n‚è∏Ô∏è –ü–∞—É–∑–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏...")
        time.sleep(2)
        force_garbage_collection()
        time.sleep(1)
        
        # –¢–µ—Å—Ç 2: Lazy –∫–ª–∏–µ–Ω—Ç—ã
        lazy_results = test_lazy_clients(num_clients, activate_count)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "=" * 70)
        print("üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó")
        print("=" * 70)
        
        print(f"\nüî¥ –û–ë–´–ß–ù–´–ï –ö–õ–ò–ï–ù–¢–´ ({regular_results['clients_created']} —à—Ç—É–∫):")
        print(f"‚Ä¢ –û–±—â–∞—è –ø–∞–º—è—Ç—å: {regular_results['total_memory_mb']:.1f} MB")
        print(f"‚Ä¢ –ü–∞–º—è—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç: {regular_results['memory_per_client_mb']:.1f} MB")
        print(f"‚Ä¢ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {regular_results['creation_time_sec']:.2f}—Å")
        
        print(f"\nüü¢ LAZY –ö–õ–ò–ï–ù–¢–´ ({lazy_results['clients_created']} –≤—Å–µ–≥–æ, {lazy_results['clients_activated']} –∞–∫—Ç–∏–≤–Ω—ã—Ö):")
        print(f"‚Ä¢ –û–±—â–∞—è –ø–∞–º—è—Ç—å: {lazy_results['total_memory_mb']:.1f} MB")
        print(f"‚Ä¢ –ü–∞–º—è—Ç—å –æ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {lazy_results['activation_memory_mb']:.1f} MB")
        print(f"‚Ä¢ –ü–∞–º—è—Ç—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: {lazy_results['memory_per_active_client_mb']:.1f} MB")
        print(f"‚Ä¢ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è lazy: {lazy_results['lazy_creation_time_sec']:.3f}—Å")
        print(f"‚Ä¢ –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {lazy_results['activation_time_sec']:.2f}—Å")
        
        # –ü–æ–¥—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏
        print(f"\nüí∞ –≠–ö–û–ù–û–ú–ò–Ø:")
        
        # –ï—Å–ª–∏ –±—ã –≤—Å–µ lazy –∫–ª–∏–µ–Ω—Ç—ã –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏
        estimated_full_lazy_memory = (lazy_results['memory_per_active_client_mb'] * 
                                    lazy_results['clients_created'])
        
        memory_saved = regular_results['total_memory_mb'] - lazy_results['total_memory_mb']
        memory_saved_percentage = (memory_saved / regular_results['total_memory_mb']) * 100
        
        potential_memory_saved = regular_results['total_memory_mb'] - estimated_full_lazy_memory
        potential_percentage = (potential_memory_saved / regular_results['total_memory_mb']) * 100
        
        print(f"‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {memory_saved:.1f} MB ({memory_saved_percentage:.1f}%)")
        print(f"‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {potential_memory_saved:.1f} MB ({potential_percentage:.1f}%)")
        
        # –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è
        speed_improvement = regular_results['creation_time_sec'] / lazy_results['lazy_creation_time_sec']
        print(f"‚Ä¢ –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è: –≤ {speed_improvement:.0f}x —Ä–∞–∑")
        
        print(f"\nüéØ –í–´–í–û–î–´:")
        if memory_saved > 0:
            print(f"‚úÖ Lazy Loading —ç–∫–æ–Ω–æ–º–∏—Ç {memory_saved:.1f} MB –ø–∞–º—è—Ç–∏!")
            print(f"‚úÖ –ü—Ä–∏ –ø–æ–ª–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏—è —Å–æ—Å—Ç–∞–≤–∏—Ç {potential_memory_saved:.1f} MB")
        else:
            print(f"‚ö†Ô∏è –¢–µ–∫—É—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: {memory_saved:.1f} MB")
            print("üí° –≠–∫–æ–Ω–æ–º–∏—è –±—É–¥–µ—Ç –∑–∞–º–µ—Ç–Ω–∞ –ø—Ä–∏ –±–æ–ª—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        if speed_improvement > 1:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ lazy –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ {speed_improvement:.0f}x –±—ã—Å—Ç—Ä–µ–µ!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False
    
    finally:
        print("\nüßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        try:
            shutdown_lazy_factory()
        except:
            pass


if __name__ == "__main__":
    main() 