#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–µ–∫—Ç–∞
"""

import os
import sys
import logging
import asyncio
from datetime import datetime
from typing import Dict, List, Optional, Tuple, Any

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –í–ê–ñ–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º monkey patch –ü–ï–†–í–´–ú –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–µ–π —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
from instagram.monkey_patch import *
from instagram.deep_patch import apply_deep_patch

# –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–ª—É–±–æ–∫–∏–π –ø–∞—Ç—á
apply_deep_patch()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
from database.db_manager import (
    get_instagram_account, get_instagram_account_by_username, 
    add_instagram_account, activate_instagram_account,
    update_account_session_data,
    update_instagram_account, get_instagram_accounts
)
from instagram.client import test_instagram_login_with_proxy

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã Instagram
try:
    from instagram.auth_manager import AuthManager
    from instagram.profile_manager import ProfileManager
    from instagram.health_monitor import HealthMonitor
    from instagram.advanced_verification import AdvancedVerification
    from instagram.lifecycle_manager import LifecycleManager
    from instagram.improved_account_warmer import ImprovedAccountWarmer
    from instagram.predictive_monitor import PredictiveMonitor
    from instagram.activity_limiter import ActivityLimiter
    from instagram.email_utils import EmailUtils
    from instagram.device_manager import DeviceManager
except ImportError as e:
    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ Instagram: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AccountIntegrationService:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.auth_manager = None
        self.profile_manager = None
        self.health_monitor = None
        self.verification_system = None
        self.lifecycle_manager = None
        self.warmer = None
        self.predictive_monitor = None
        self.activity_limiter = None
        self.email_utils = None
        self.device_manager = None
        
        self._initialize_systems()
    
    def _initialize_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            if 'AuthManager' in globals():
                self.auth_manager = AuthManager()
                logger.info("‚úÖ AuthManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if 'ProfileManager' in globals():
                self.profile_manager = ProfileManager()
                logger.info("‚úÖ ProfileManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if 'HealthMonitor' in globals():
                self.health_monitor = HealthMonitor()
                logger.info("‚úÖ HealthMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if 'AdvancedVerification' in globals():
                self.verification_system = AdvancedVerification()
                logger.info("‚úÖ AdvancedVerification –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if 'LifecycleManager' in globals():
                self.lifecycle_manager = LifecycleManager()
                logger.info("‚úÖ LifecycleManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if 'ImprovedAccountWarmer' in globals():
                self.warmer = ImprovedAccountWarmer()
                logger.info("‚úÖ ImprovedAccountWarmer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if 'PredictiveMonitor' in globals():
                self.predictive_monitor = PredictiveMonitor()
                logger.info("‚úÖ PredictiveMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if 'ActivityLimiter' in globals():
                self.activity_limiter = ActivityLimiter()
                logger.info("‚úÖ ActivityLimiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if 'EmailUtils' in globals():
                self.email_utils = EmailUtils()
                logger.info("‚úÖ EmailUtils –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if 'DeviceManager' in globals():
                self.device_manager = DeviceManager()
                logger.info("‚úÖ DeviceManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º: {e}")
    
    async def add_account_with_full_processing(
        self, 
        username: str, 
        password: str, 
        email: str = None, 
        email_password: str = None,
        full_name: str = None,
        biography: str = None,
        validate_credentials: bool = True,
        setup_profile: bool = True,
        start_warming: bool = True
    ) -> Tuple[bool, str, Optional[Dict]]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–µ—Ä–µ–∑ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Instagram
            password: –ü–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
            email: Email –∞–∫–∫–∞—É–Ω—Ç–∞
            email_password: –ü–∞—Ä–æ–ª—å –æ—Ç email
            full_name: –ü–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
            biography: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            validate_credentials: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            setup_profile: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
            start_warming: –ó–∞–ø—É—Å–∫–∞—Ç—å –ª–∏ –ø—Ä–æ–≥—Ä–µ–≤
            
        Returns:
            Tuple[success, message, account_data]
        """
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ {username}")
        
        try:
            # 1. –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"üìù –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç {username} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            success, result = add_instagram_account(
                username=username,
                password=password,
                email=email,
                email_password=email_password
            )
            
            if success:
                account_id = result  # result —Å–æ–¥–µ—Ä–∂–∏—Ç account_id –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å ID {account_id}")
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å–Ω–∞—á–∞–ª–∞ (—É—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º)
                update_instagram_account(account_id, is_active=False)
                
                if validate_credentials:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ input()
                    import builtins
                    original_input = builtins.input
                    
                    def patched_input(prompt=""):
                        prompt_lower = prompt.lower()
                        if "password" in prompt_lower and username in prompt:
                            logger.info(f"üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è {username}")
                            return password
                        elif "code" in prompt_lower and username in prompt:
                            logger.info(f"üìß –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {username}")
                            if email and email_password:
                                from instagram.email_utils_optimized import get_verification_code_from_email
                                code = get_verification_code_from_email(email, email_password, max_attempts=5, delay_between_attempts=10)
                                if code:
                                    logger.info(f"‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω: {code}")
                                    return code
                            return ""
                        else:
                            return ""
                    
                    # –ü–∞—Ç—á–∏–º input –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    builtins.input = patched_input
                    
                    try:
                        logger.info(f"üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ Instagram –¥–ª—è {username}")
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ Telegram –±–æ—Ç–∞
                        login_success = test_instagram_login_with_proxy(
                            account_id, username, password, email, email_password
                        )
                        
                        if login_success:
                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Instagram –¥–ª—è {username}")
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π
                            activate_instagram_account(account_id)
                        else:
                            logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Instagram.")
                        results['success'].append(username)
                        
                    except Exception as login_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –¥–ª—è {username}: {login_error}")
                        results['success'].append(username)  # –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–∞–∑—É
                    
                    finally:
                        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é input
                        builtins.input = original_input
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {username} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                results['failed'].append(username)
            
            # 2. –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
            if full_name or biography:
                logger.info(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {username}")
                update_instagram_account(
                    account_id,
                    full_name=full_name or '',
                    biography=biography or ''
                )
            
            # 3. –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            logger.info(f"üì° –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}")
            try:
                from utils.proxy_manager import assign_proxy_to_account
                proxy_success, proxy_message = assign_proxy_to_account(account_id)
                
                if not proxy_success:
                    logger.warning(f"‚ö†Ô∏è {proxy_message}")
                else:
                    logger.info(f"‚úÖ {proxy_message}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏: {e}")
                proxy_success = False
            
            # 4. –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
            login_successful = False
            if email and email_password and validate_credentials:
                logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ {email}")
                
                try:
                    from instagram.email_utils import test_email_connection
                    email_success, email_message = test_email_connection(email, email_password)
                    
                    if not email_success:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ: {email_message}")
                        return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ: {email_message}", None
                    
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    
                    # –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ Instagram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏
                    logger.info(f"üîÑ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ Instagram –¥–ª—è {username}")
                    
                    login_successful = test_instagram_login_with_proxy(
                        account_id=account_id,
                        username=username,
                        password=password,
                        email=email,
                        email_password=email_password
                    )
                    
                    if login_successful:
                        # –ï—Å–ª–∏ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Instagram –¥–ª—è {username}")
                        activate_instagram_account(account_id)
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Instagram –¥–ª—è {username}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ö–æ–¥–∞ –≤ Instagram: {e}")
                    login_successful = False
            else:
                logger.info(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è {username}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ö–æ–¥ –≤ Instagram")
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            if validate_credentials and self.auth_manager:
                logger.info(f"üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ AuthManager –¥–ª—è {username}")
                try:
                    auth_result = await self._validate_account_credentials(
                        username, password, email, email_password
                    )
                    if not auth_result['success']:
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {auth_result['message']}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            # 6. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            if self.device_manager:
                logger.info(f"üì± –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è {username}")
                try:
                    device_result = await self._setup_device(account_id, username)
                    logger.info(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {device_result}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            
            # 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è
            if self.health_monitor:
                logger.info(f"üè• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è {username}")
                try:
                    health_result = await self._initialize_health_monitoring(account_id)
                    logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            
            # 8. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if setup_profile and self.profile_manager:
                logger.info(f"üë§ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è {username}")
                try:
                    profile_result = await self._setup_profile(
                        account_id, username, full_name, biography
                    )
                    logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            
            # 9. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if self.predictive_monitor:
                logger.info(f"üîÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è {username}")
                try:
                    await self._initialize_predictive_monitoring(account_id)
                    logger.info(f"‚úÖ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            
            # 10. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if self.activity_limiter:
                logger.info(f"‚è±Ô∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {username}")
                try:
                    await self._setup_activity_limiter(account_id)
                    logger.info(f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è: {e}")
            
            # 11. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if start_warming and self.warmer:
                logger.info(f"üî• –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è {username}")
                try:
                    warming_result = await self._start_account_warming(account_id)
                    logger.info(f"‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–ø—É—â–µ–Ω: {warming_result}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
            
            # 12. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª
            if self.lifecycle_manager:
                logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –¥–ª—è {username}")
                try:
                    await self._initialize_lifecycle_management(account_id)
                    logger.info(f"‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            updated_account = get_instagram_account(account_id)
            account_data = {
                'id': updated_account.id,
                'username': updated_account.username,
                'email': updated_account.email,
                'full_name': updated_account.full_name or '',
                'biography': updated_account.biography or '',
                'is_active': updated_account.is_active,
                'created_at': updated_account.created_at.isoformat() if updated_account.created_at else None,
                'systems_initialized': True,
                'login_successful': login_successful,
                'proxy_assigned': proxy_success if 'proxy_success' in locals() else False
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if login_successful:
                message = f"–ê–∫–∫–∞—É–Ω—Ç {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
            elif email and email_password:
                message = f"–ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Instagram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                message = f"–ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã."
            
            logger.info(f"üéâ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {username} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True, message, account_data
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {username}: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}", None
    
    async def _validate_account_credentials(
        self, username: str, password: str, email: str = None, email_password: str = None
    ) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            if self.auth_manager:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º AuthManager –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                result = await self.auth_manager.validate_credentials(username, password)
                return result
            else:
                # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ AuthManager
                return {'success': True, 'message': 'AuthManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É'}
        except Exception as e:
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'}
    
    async def _setup_device(self, account_id: int, username: str) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            if self.device_manager:
                device_info = await self.device_manager.setup_device_for_account(account_id, username)
                return {'success': True, 'device_info': device_info}
            else:
                return {'success': True, 'message': 'DeviceManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        except Exception as e:
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {str(e)}'}
    
    async def _initialize_health_monitoring(self, account_id: int) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            if self.health_monitor:
                await self.health_monitor.initialize_account_monitoring(account_id)
                return {'success': True}
            else:
                return {'success': True, 'message': 'HealthMonitor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        except Exception as e:
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}'}
    
    async def _setup_profile(
        self, account_id: int, username: str, full_name: str = None, biography: str = None
    ) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            if self.profile_manager:
                profile_data = {
                    'full_name': full_name or '',
                    'biography': biography or '',
                    'username': username
                }
                result = await self.profile_manager.setup_profile(account_id, profile_data)
                return result
            else:
                return {'success': True, 'message': 'ProfileManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        except Exception as e:
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}'}
    
    async def _initialize_predictive_monitoring(self, account_id: int) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        try:
            if self.predictive_monitor:
                await self.predictive_monitor.initialize_account(account_id)
                return {'success': True}
            else:
                return {'success': True, 'message': 'PredictiveMonitor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        except Exception as e:
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}'}
    
    async def _setup_activity_limiter(self, account_id: int) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            if self.activity_limiter:
                await self.activity_limiter.setup_account_limits(account_id)
                return {'success': True}
            else:
                return {'success': True, 'message': 'ActivityLimiter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        except Exception as e:
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}'}
    
    async def _start_account_warming(self, account_id: int) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            if self.warmer:
                warming_result = await self.warmer.start_warming_process(account_id)
                return warming_result
            else:
                return {'success': True, 'message': 'AccountWarmer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        except Exception as e:
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞: {str(e)}'}
    
    async def _initialize_lifecycle_management(self, account_id: int) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º"""
        try:
            if self.lifecycle_manager:
                await self.lifecycle_manager.initialize_account_lifecycle(account_id)
                return {'success': True}
            else:
                return {'success': True, 'message': 'LifecycleManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        except Exception as e:
            return {'success': False, 'message': f'–û—à–∏–±–∫–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {str(e)}'}
    
    def bulk_add_accounts_with_processing(
        self, 
        accounts_data: List[Dict[str, str]],
        validate_credentials: bool = True,
        setup_profile: bool = True,
        start_warming: bool = False  # –î–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤
    ) -> Dict[str, List]:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–∞–±–æ—á–µ–π –ª–æ–≥–∏–∫–∏ –∏–∑ Telegram –±–æ—Ç–∞
        
        Args:
            accounts_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            validate_credentials: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            setup_profile: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
            start_warming: –ó–∞–ø—É—Å–∫–∞—Ç—å –ª–∏ –ø—Ä–æ–≥—Ä–µ–≤
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {'success': [...], 'failed': [...]}
        """
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(accounts_data)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        results = {
            'success': [],
            'failed': [],
            'already_exists': [],
            'total': len(accounts_data)
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∫–∞–∫ –≤ Telegram –±–æ—Ç–µ)
        total_accounts = len(accounts_data)
        added_accounts = 0
        failed_accounts = 0
        already_exists = 0
        failed_accounts_list = []
        
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        for i, account_data in enumerate(accounts_data):
            username = account_data.get('username')
            password = account_data.get('password')
            email = account_data.get('email')
            email_password = account_data.get('email_password')
            
            logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç: {username}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
                existing_account = get_instagram_account_by_username(username)
                if existing_account:
                    logger.info(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    results['already_exists'].append(username)
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                success, result = add_instagram_account(
                    username=username,
                    password=password,
                    email=email,
                    email_password=email_password
                )
                
                if success:
                    account_id = result  # result —Å–æ–¥–µ—Ä–∂–∏—Ç account_id –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å ID {account_id}")
                    
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å–Ω–∞—á–∞–ª–∞ (—É—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º)
                    update_instagram_account(account_id, is_active=False)
                    
                    if validate_credentials:
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ input()
                        import builtins
                        original_input = builtins.input
                        
                        def patched_input(prompt=""):
                            prompt_lower = prompt.lower()
                            if "password" in prompt_lower and username in prompt:
                                logger.info(f"üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è {username}")
                                return password
                            elif "code" in prompt_lower and username in prompt:
                                logger.info(f"üìß –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {username}")
                                if email and email_password:
                                    from instagram.email_utils_optimized import get_verification_code_from_email
                                    code = get_verification_code_from_email(email, email_password, max_attempts=5, delay_between_attempts=10)
                                    if code:
                                        logger.info(f"‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω: {code}")
                                        return code
                                return ""
                            else:
                                return ""
                        
                        # –ü–∞—Ç—á–∏–º input –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                        builtins.input = patched_input
                        
                        try:
                            logger.info(f"üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ Instagram –¥–ª—è {username}")
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ Telegram –±–æ—Ç–∞
                            login_success = test_instagram_login_with_proxy(
                                account_id, username, password, email, email_password
                            )
                            
                            if login_success:
                                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ Instagram –¥–ª—è {username}")
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π
                                activate_instagram_account(account_id)
                                results['success'].append(username)
                            else:
                                logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Instagram.")
                                results['success'].append(username)  # –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–∞–∑—É
                        
                        except Exception as login_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –¥–ª—è {username}: {login_error}")
                            results['success'].append(username)  # –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç–∞–∫ –∫–∞–∫ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –±–∞–∑—É
                        
                        finally:
                            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é input
                            builtins.input = original_input
                    else:
                        results['success'].append(username)
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {username} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {result}")
                    results['failed'].append(username)
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {username}: {str(e)}")
                results['failed'].append(username)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–∫–∞–∫ –≤ Telegram –±–æ—Ç–µ)
        logger.info(f"üìä –ò—Ç–æ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
        logger.info(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_accounts}")
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(results['success'])}")
        logger.info(f"–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {len(results['already_exists'])}")
        logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {len(results['failed'])}")

        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–∫–∞–∫ –≤ Telegram –±–æ—Ç–µ)
        if results['failed']:
            logger.error(f"‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
            for failed_account in results['failed']:
                logger.error(f"  - {failed_account}")
        
        logger.info(f"üéâ –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(results['success'])} —É—Å–ø–µ—à–Ω–æ, {len(results['failed'])} –æ—à–∏–±–æ–∫")
        return results
    
    def get_system_status(self) -> Dict[str, bool]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        return {
            'auth_manager': self.auth_manager is not None,
            'profile_manager': self.profile_manager is not None,
            'health_monitor': self.health_monitor is not None,
            'verification_system': self.verification_system is not None,
            'lifecycle_manager': self.lifecycle_manager is not None,
            'warmer': self.warmer is not None,
            'predictive_monitor': self.predictive_monitor is not None,
            'activity_limiter': self.activity_limiter is not None,
            'email_utils': self.email_utils is not None,
            'device_manager': self.device_manager is not None
        }

    async def retry_account_login_with_new_code(
        self, 
        account_id: int, 
        max_retries: int = 3
    ) -> Tuple[bool, str]:
        """
        –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ "Please check the code"
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            Tuple[success, message]
        """
        logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ID {account_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã
            account = get_instagram_account(account_id)
            if not account:
                return False, f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
            username = account.username
            password = account.password
            email = account.email
            email_password = account.email_password
            
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è {username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—á—Ç—ã
            if not email or not email_password:
                return False, "–î–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥"
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            try:
                from instagram.client import _instagram_clients
                if account_id in _instagram_clients:
                    del _instagram_clients[account_id]
                    logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω –∫—ç—à –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ email –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                from instagram.email_utils import cleanup_email_logs
                cleanup_email_logs(email)
                logger.info(f"üóëÔ∏è –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ email –¥–ª—è {email}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ email: {e}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            for attempt in range(max_retries):
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –≤—Ö–æ–¥–∞ –¥–ª—è {username}")
                
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π)
                    if attempt > 0:
                        delay = 45 + (attempt * 30)  # 45, 75, 105 —Å–µ–∫—É–Ω–¥
                        logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π {attempt + 1}")
                        await asyncio.sleep(delay)
                    
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—Ö–æ–¥–∞
                    from instagram.client import test_instagram_login_with_proxy
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–¥–æ–≤
                    login_successful = test_instagram_login_with_proxy(
                        account_id=account_id,
                        username=username,
                        password=password,
                        email=email,
                        email_password=email_password
                    )
                    
                    if login_successful:
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è {username} –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                        
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        try:
                            activate_instagram_account(account_id)
                            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î: {e}")
                        
                        return True, f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è {username} –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}"
                    
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ {attempt + 1} –¥–ª—è {username}")
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                        if attempt < max_retries - 1:
                            logger.info(f"üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ –¥–ª—è {username}")
                            continue
                        else:
                            logger.error(f"‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è {username}")
                            return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫"
                
                except Exception as e:
                    error_msg = str(e)
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1} –¥–ª—è {username}: {error_msg}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    if "check the code" in error_msg.lower() or "try again" in error_msg.lower():
                        logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {username} - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏")
                        if attempt < max_retries - 1:
                            continue
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
                        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {username}: {error_msg}")
                        return False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_msg}"
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            return False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –¥–ª—è {username} –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫"
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –≤—Ö–æ–¥–∞: {e}")
            return False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
    
    async def bulk_retry_failed_accounts(
        self, 
        account_ids: List[int], 
        max_retries_per_account: int = 3
    ) -> Dict[str, List]:
        """
        –ú–∞—Å—Å–æ–≤–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        
        Args:
            account_ids: –°–ø–∏—Å–æ–∫ ID –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
            max_retries_per_account: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {'success': [...], 'failed': [...]}
        """
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        results = {
            'success': [],
            'failed': [],
            'total': len(account_ids)
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º: –º–∞–∫—Å–∏–º—É–º 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        semaphore = asyncio.Semaphore(2)
        
        async def retry_single_account(account_id):
            async with semaphore:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                    account = get_instagram_account(account_id)
                    username = account.username if account else f"ID{account_id}"
                    
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username} (ID: {account_id})")
                    
                    success, message = await self.retry_account_login_with_new_code(
                        account_id, max_retries_per_account
                    )
                    
                    if success:
                        results['success'].append({
                            'account_id': account_id,
                            'username': username,
                            'message': message
                        })
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è {username}: {message}")
                    else:
                        results['failed'].append({
                            'account_id': account_id,
                            'username': username,
                            'error': message
                        })
                        logger.error(f"‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è {username}: {message}")
                        
                except Exception as e:
                    error_msg = str(e)
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –¥–ª—è ID {account_id}: {error_msg}")
                    
                    results['failed'].append({
                        'account_id': account_id,
                        'username': f"ID{account_id}",
                        'error': f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_msg}"
                    })
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        tasks = [retry_single_account(account_id) for account_id in account_ids]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(*tasks, return_exceptions=True)
        
        logger.info(f"üéâ –ú–∞—Å—Å–æ–≤–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(results['success'])}")
        logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {len(results['failed'])}")
        
        return results

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
account_service = AccountIntegrationService()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def add_account_integrated(account_data: Dict[str, str]) -> Tuple[bool, str, Optional[Dict]]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
    return await account_service.add_account_with_full_processing(**account_data)

async def bulk_add_accounts_integrated(accounts_data: List[Dict[str, str]]) -> Dict[str, List]:
    """–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
    return account_service.bulk_add_accounts_with_processing(accounts_data)

def get_integration_status() -> Dict[str, bool]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º"""
    return account_service.get_system_status()

if __name__ == '__main__':
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    import asyncio
    
    async def test_service():
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º
        status = get_integration_status()
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º: {status}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        test_account = {
            'username': 'test_integration_user',
            'password': 'test_password',
            'email': 'test@example.com',
            'full_name': 'Test Integration User',
            'biography': 'Test account for integration testing'
        }
        
        success, message, account_data = await add_account_integrated(test_account)
        logger.info(f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {success}, {message}")
        
        if account_data:
            logger.info(f"üìù –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {account_data}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_service()) 