#!/usr/bin/env python3

print('üí° –£–ú–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ë–ï–ó –£–†–ï–ó–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê')
print('=' * 60)
print()

print('‚ùå –ü–õ–û–•–ê–Ø –ò–î–ï–Ø: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
print('   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚Üí –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã —Å–æ–∂—Ä—É—Ç')
print('   ‚Ä¢ –õ–∏–º–∏—Ç—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã ‚Üí –ø–æ—Ç–µ—Ä—è –∫–ª–∏–µ–Ω—Ç–æ–≤')
print('   ‚Ä¢ –£—Ä–µ–∑–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º')
print()

print('‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ò–î–ï–Ø: –£–º–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤')
print('   ‚Ä¢ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
print('   ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ "–ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º"')
print('   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–∞–∂–µ –Ω–µ –∑–∞–º–µ—Ç—è—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π')
print()

print('üß† –ü–†–ò–ù–¶–ò–ü–´ –£–ú–ù–û–ô –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:')
print()

smart_optimizations = [
    {
        'category': 'üéØ INTELLIGENT LOADING',
        'principle': '–°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ä–µ–∞–ª—å–Ω–æ –Ω—É–∂–Ω—ã',
        'methods': [
            '‚ö° Lazy Loading - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é',
            'üîÑ Just-In-Time –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π',
            'üì¶ On-demand –ø—Ä–æ–∫—Å–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
            'üíæ –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤',
            'üé≠ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏'
        ],
        'savings': 'RAM: 70%, CPU: 50%, –¢—Ä–∞—Ñ–∏–∫: 30%',
        'user_impact': '–ù–£–õ–ï–í–û–ô - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∑–∞–º–µ—á–∞—é—Ç'
    },
    
    {
        'category': 'üîÑ SMART CACHING',
        'principle': '–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è',
        'methods': [
            'üìä –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ Instagram API –æ—Ç–≤–µ—Ç–æ–≤',
            'üîó –†–µ—é–∑ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
            'üë§ –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π',
            'üì∏ –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤',
            'üé≠ –ü—É–ª –ø—Ä–æ–∫—Å–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π'
        ],
        'savings': '–¢—Ä–∞—Ñ–∏–∫: 60%, CPU: 40%, –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 80%',
        'user_impact': '–ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ'
    },
    
    {
        'category': 'üìä INTELLIGENT BATCHING',
        'principle': '–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        'methods': [
            'üì¶ Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
            'üîÑ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–∫—Å–∏',
            '‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π',
            'üéØ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞',
            'üì∏ –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤'
        ],
        'savings': 'CPU: 50%, –¢—Ä–∞—Ñ–∏–∫: 40%, –í—Ä–µ–º—è: 60%',
        'user_impact': '–ù–£–õ–ï–í–û–ô - –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ'
    },
    
    {
        'category': '‚ö° ASYNC OPTIMIZATION',
        'principle': '–ù–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, –¥–µ–ª–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ',
        'methods': [
            'üîÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á',
            '‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
            'üåä Stream –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
            'üéØ –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
            'üîÑ Background –∑–∞–¥–∞—á–∏'
        ],
        'savings': 'CPU: 60%, –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 70%',
        'user_impact': '–ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô - –±—ã—Å—Ç—Ä–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ'
    },
    
    {
        'category': 'üóúÔ∏è COMPRESSION & DEDUPLICATION',
        'principle': '–°–∂–∏–º–∞—Ç—å –∏ –∏—Å–∫–ª—é—á–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã',
        'methods': [
            'üì∏ –°–∂–∞—Ç–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞',
            'üìä –ö–æ–º–ø—Ä–µ—Å—Å–∏—è –ª–æ–≥–æ–≤',
            'üîÑ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
            'üíæ –°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏',
            'üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
        ],
        'savings': '–î–∏—Å–∫: 70%, RAM: 30%, –¢—Ä–∞—Ñ–∏–∫: 40%',
        'user_impact': '–ù–£–õ–ï–í–û–ô - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∑–∞–º–µ—á–∞—é—Ç'
    },
    
    {
        'category': 'üßπ INTELLIGENT CLEANUP',
        'principle': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞—Ç—å –Ω–µ–Ω—É–∂–Ω–æ–µ',
        'methods': [
            'üóëÔ∏è –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Å—Å–∏–π',
            'üìä –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏',
            'üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏',
            'üîÑ Garbage collection –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
            '‚è∞ Scheduled cleanup –∑–∞–¥–∞—á–∏'
        ],
        'savings': 'RAM: 50%, –î–∏—Å–∫: 80%, CPU: 20%',
        'user_impact': '–ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô - —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ'
    }
]

for opt in smart_optimizations:
    print(f"{opt['category']}")
    print(f"üí° –ü—Ä–∏–Ω—Ü–∏–ø: {opt['principle']}")
    print('üõ†Ô∏è –ú–µ—Ç–æ–¥—ã:')
    for method in opt['methods']:
        print(f"   ‚Ä¢ {method}")
    print(f"üìà –≠–∫–æ–Ω–æ–º–∏—è: {opt['savings']}")
    print(f"üë§ –í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {opt['user_impact']}")
    print()

print('üéØ –ö–û–ù–ö–†–ï–¢–ù–´–ï –†–ï–®–ï–ù–ò–Ø –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô:')
print()

concrete_solutions = [
    {
        'name': '‚ö° LAZY INSTAGRAM CLIENTS',
        'description': '–°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏',
        'implementation': '–§–∞–±—Ä–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π',
        'file': 'instagram/lazy_client_factory.py',
        'savings': '80% RAM —ç–∫–æ–Ω–æ–º–∏–∏',
        'code_snippet': '''
class LazyInstagramClient:
    def __init__(self, account_id):
        self.account_id = account_id
        self._client = None  # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    
    @property
    def client(self):
        if self._client is None:
            self._client = self._create_real_client()
        return self._client
    
    def publish(self, *args, **kwargs):
        return self.client.publish(*args, **kwargs)
        '''
    },
    
    {
        'name': 'üìä SMART API CACHE',
        'description': '–ö—ç—à–∏—Ä—É–µ–º Instagram API –æ—Ç–≤–µ—Ç—ã —Å —É–º–Ω—ã–º TTL',
        'implementation': 'Redis –∫—ç—à —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏',
        'file': 'utils/smart_cache.py',
        'savings': '60% —Ç—Ä–∞—Ñ–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∏',
        'code_snippet': '''
class SmartInstagramCache:
    def __init__(self):
        self.cache = {}
        self.ttl_rules = {
            'user_info': 3600,      # 1 —á–∞—Å
            'followers': 1800,      # 30 –º–∏–Ω—É—Ç  
            'media_info': 7200,     # 2 —á–∞—Å–∞
        }
    
    def get_or_fetch(self, endpoint, params, fetch_func):
        cache_key = self._make_key(endpoint, params)
        
        if cache_key in self.cache:
            return self.cache[cache_key]
        
        result = fetch_func(endpoint, params)
        ttl = self.ttl_rules.get(endpoint, 1800)
        self.cache[cache_key] = (result, time.time() + ttl)
        
        return result
        '''
    },
    
    {
        'name': 'üîÑ INTELLIGENT BATCHING',
        'description': '–ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è UX',
        'implementation': 'Micro-batching —Å –∫–æ—Ä–æ—Ç–∫–∏–º –æ–∫–Ω–æ–º –æ–∂–∏–¥–∞–Ω–∏—è',
        'file': 'utils/smart_batcher.py',
        'savings': '50% CPU –∏ —Ç—Ä–∞—Ñ–∏–∫–∞',
        'code_snippet': '''
class SmartBatcher:
    def __init__(self, batch_size=10, max_wait_ms=100):
        self.batch_size = batch_size
        self.max_wait_ms = max_wait_ms
        self.pending_requests = []
        
    async def add_request(self, request):
        self.pending_requests.append(request)
        
        # –ë–∞—Ç—á –≥–æ—Ç–æ–≤ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç - –≤—ã–ø–æ–ª–Ω—è–µ–º
        if (len(self.pending_requests) >= self.batch_size or
            await self._wait_timeout()):
            await self._execute_batch()
    
    async def _execute_batch(self):
        batch = self.pending_requests[:self.batch_size]
        self.pending_requests = self.pending_requests[self.batch_size:]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–¥–Ω–∏–º API –≤—ã–∑–æ–≤–æ–º
        await self._batch_api_call(batch)
        '''
    },
    
    {
        'name': 'üíæ MEMORY POOL MANAGER',
        'description': '–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å',
        'implementation': '–ü—É–ª –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —á–∞—Å—Ç–æ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π',
        'file': 'utils/memory_pool.py',
        'savings': '40% RAM + 60% CPU –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤',
        'code_snippet': '''
class MemoryPool:
    def __init__(self, object_factory, initial_size=100):
        self.factory = object_factory
        self.available = []
        self.in_use = set()
        
        # –ü—Ä–µ–¥—Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        for _ in range(initial_size):
            self.available.append(self.factory())
    
    def acquire(self):
        if self.available:
            obj = self.available.pop()
        else:
            obj = self.factory()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –µ—Å–ª–∏ –ø—É–ª –ø—É—Å—Ç
        
        self.in_use.add(obj)
        return obj
    
    def release(self, obj):
        if obj in self.in_use:
            self.in_use.remove(obj)
            obj.reset()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.available.append(obj)
        '''
    }
]

for sol in concrete_solutions:
    print(f"{sol['name']}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {sol['description']}")
    print(f"üîß –†–µ–∞–ª–∏–∑–∞—Ü–∏—è: {sol['implementation']}")
    print(f"üìÅ –§–∞–π–ª: {sol['file']}")
    print(f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è: {sol['savings']}")
    print(f"üíª –ö–æ–¥:")
    print(sol['code_snippet'])
    print()

print('üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:')
print()
print('üéØ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ë–ï–ó –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô:')
print('‚îú‚îÄ‚îÄ üíæ RAM: -70% (–±–µ–∑ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤)')
print('‚îú‚îÄ‚îÄ ‚ö° CPU: -60% (–±–µ–∑ —É—Ä–µ–∑–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π)')
print('‚îú‚îÄ‚îÄ üåê –¢—Ä–∞—Ñ–∏–∫: -50% (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤)')
print('‚îú‚îÄ‚îÄ üóÑÔ∏è –î–∏—Å–∫: -80% (–±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö)')
print('‚îî‚îÄ‚îÄ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: $20 ‚Üí $5-6/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
print()

print('‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:')
print('‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –¢–û–¢ –ñ–ï —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª')
print('‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–´–°–¢–†–ï–ï –∏ –°–¢–ê–ë–ò–õ–¨–ù–ï–ï')
print('‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –ù–ï –°–ú–û–ì–£–¢ –ø–µ—Ä–µ–º–∞–Ω–∏—Ç—å')
print('‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é 10x')
print()

print('üöÄ –ü–õ–ê–ù –í–ù–ï–î–†–ï–ù–ò–Ø:')
print('üìÖ –ù–µ–¥–µ–ª—è 1: Lazy Loading + Smart Cache')
print('üìÖ –ù–µ–¥–µ–ª—è 2: Intelligent Batching')
print('üìÖ –ù–µ–¥–µ–ª—è 3: Memory Pool + Cleanup')
print('üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: -70% —Å—Ç–æ–∏–º–æ—Å—Ç–∏, +50% –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
print()

print('üí° –ì–õ–ê–í–ù–ê–Ø –ò–î–ï–Ø:')
print('–ù–ï –û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô,')
print('–ê –î–ï–õ–ê–ï–ú –°–ò–°–¢–ï–ú–£ –£–ú–ù–ï–ï! üß†') 