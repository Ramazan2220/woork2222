#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
from pathlib import Path

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = Path("data/database.sqlite")

def fix_task_statuses():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ enum –∑–Ω–∞—á–µ–Ω–∏—è"""
    
    if not DB_PATH.exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {DB_PATH}")
        return False
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–æ–≤
        status_mapping = {
            'pending': 'PENDING',
            'processing': 'PROCESSING', 
            'completed': 'COMPLETED',
            'failed': 'FAILED',
            'cancelled': 'CANCELLED',
            'scheduled': 'SCHEDULED'
        }
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ —Ç–∞–±–ª–∏—Ü–µ publish_tasks
        print("üìù –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ —Ç–∞–±–ª–∏—Ü–µ publish_tasks...")
        for old_status, new_status in status_mapping.items():
            cursor.execute("""
                UPDATE publish_tasks 
                SET status = ? 
                WHERE LOWER(status) = ?
            """, (new_status, old_status))
            
            if cursor.rowcount > 0:
                print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {cursor.rowcount} –∑–∞–ø–∏—Å–µ–π: {old_status} -> {new_status}")
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ —Ç–∞–±–ª–∏—Ü–µ tasks (–µ—Å–ª–∏ –µ—Å—Ç—å)
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='tasks'")
        if cursor.fetchone():
            print("\nüìù –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –≤ —Ç–∞–±–ª–∏—Ü–µ tasks...")
            for old_status, new_status in status_mapping.items():
                cursor.execute("""
                    UPDATE tasks 
                    SET status = ? 
                    WHERE LOWER(status) = ?
                """, (new_status, old_status))
                
                if cursor.rowcount > 0:
                    print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {cursor.rowcount} –∑–∞–ø–∏—Å–µ–π: {old_status} -> {new_status}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
        print("\nüìä –¢–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã –≤ publish_tasks:")
        cursor.execute("SELECT status, COUNT(*) FROM publish_tasks GROUP BY status")
        for status, count in cursor.fetchall():
            print(f"   - {status}: {count}")
        
        conn.close()
        print("\n‚úÖ –°—Ç–∞—Ç—É—Å—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}")
        return False

if __name__ == "__main__":
    fix_task_statuses() 