#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import os
import sys
from datetime import datetime
from telegram import Update, BotCommand
from telegram.ext import Updater, Dispatcher, CommandHandler, CallbackQueryHandler, MessageHandler, Filters

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
from database.db_manager import get_total_accounts, init_db
from utils.subscription_service import subscription_service

# –ò–º–ø–æ—Ä—Ç—ã –∞–¥–º–∏–Ω –±–æ—Ç–∞
from admin_bot.config.settings import ADMIN_BOT_TOKEN, MESSAGES, BOT_COMMANDS
from admin_bot.config.admin_list import is_admin, get_user_role, AdminRole
from admin_bot.keyboards.main_keyboard import get_main_keyboard, get_back_to_main_keyboard
from admin_bot.handlers.user_handlers import handle_users_callbacks, user_service

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AdminBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        if not ADMIN_BOT_TOKEN:
            raise ValueError("ADMIN_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        
        self.logger = logging.getLogger(__name__)
        self.updater = Updater(token=ADMIN_BOT_TOKEN, use_context=True)
        self.dispatcher = self.updater.dispatcher
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.dispatcher.add_handler(CommandHandler("start", self.start_command))
        self.dispatcher.add_handler(CommandHandler("stats", self.stats_command))
        self.dispatcher.add_handler(CommandHandler("help", self.help_command))
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.dispatcher.add_handler(CallbackQueryHandler(self.callback_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        from admin_bot.handlers.user_handlers import handle_user_input
        self.dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_user_input))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.dispatcher.add_error_handler(self.error_handler)
    
    def start_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username
        
        if not is_admin(user_id):
            update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞."
            )
            return
        
        role = get_user_role(user_id)
        role_names = {
            AdminRole.SUPER_ADMIN: "–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            AdminRole.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            AdminRole.MODERATOR: "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
        }
        
        welcome_text = f"""üéõÔ∏è **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ INSTAGRAM BOT**

üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username or '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}!

üîë **–í–∞—à–∞ —Ä–æ–ª—å:** {role_names.get(role, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚è∞ **–í—Ä–µ–º—è –≤—Ö–æ–¥–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:"""
        
        keyboard = get_main_keyboard(user_id)
        update.message.reply_text(welcome_text, reply_markup=keyboard, parse_mode='Markdown')
    
    def stats_command(self, update, context):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user_id = update.effective_user.id
        
        if not is_admin(user_id):
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
        
        try:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
            total_accounts = get_total_accounts()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            user_stats = user_service.get_statistics()
            
            role = get_user_role(user_id)
            role_name = {
                AdminRole.SUPER_ADMIN: "–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                AdminRole.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 
                AdminRole.MODERATOR: "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
            }.get(role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            stats_text = f"""üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**

üë§ **–í–∞—à–∞ —Ä–æ–ª—å:** {role_name}

ü§ñ **–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç:**
‚Ä¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}

üë• **–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {user_stats['active_users']}
‚Ä¢ –ù–∞ —Ç—Ä–∏–∞–ª–µ: {user_stats['trial_users']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {user_stats['blocked_users']}
‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {user_stats['expired_users']}

üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**
‚Ä¢ –û—Ü–µ–Ω–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥: ${user_stats['estimated_revenue']:.2f}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${user_stats['estimated_revenue'] / max(user_stats['total_users'], 1):.2f}

üìä **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–ª–∞–Ω–∞–º:**"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∞—Ö
            from admin_bot.models.user import PLAN_INFO
            for plan_key, count in user_stats['plans_distribution'].items():
                plan_info = None
                # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞–Ω –ø–æ –∫–ª—é—á—É
                for plan_enum, info in PLAN_INFO.items():
                    if plan_enum.value == plan_key:
                        plan_info = info
                        break
                
                if plan_info and count > 0:
                    stats_text += f"\n‚Ä¢ {plan_info['name']}: {count}"
            
            stats_text += f"\n\n‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            
            update.message.reply_text(stats_text, parse_mode='Markdown')
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    def help_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        user_id = update.effective_user.id
        
        if not is_admin(user_id):
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
        
        help_text = """‚ùì **–ü–û–ú–û–©–¨ –ü–û –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò**

üîß **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/stats - –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üìã **–†–∞–∑–¥–µ–ª—ã:**
üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
üí∞ **–§–∏–Ω–∞–Ω—Å—ã** - –¥–æ—Ö–æ–¥—ã –∏ –ø–ª–∞—Ç–µ–∂–∏
‚öôÔ∏è **–°–∏—Å—Ç–µ–º–∞** - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

üö® **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        
        keyboard = get_back_to_main_keyboard()
        update.message.reply_text(help_text, reply_markup=keyboard, parse_mode='Markdown')
    
    def main_menu_callback(self, update, context):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        user_id = update.effective_user.id
        
        if not is_admin(user_id):
            query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        role = get_user_role(user_id)
        role_names = {
            AdminRole.SUPER_ADMIN: "–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            AdminRole.ADMIN: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            AdminRole.MODERATOR: "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
        }
        
        main_text = f"""üéõÔ∏è **–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ INSTAGRAM BOT**

üîë **–í–∞—à–∞ —Ä–æ–ª—å:** {role_names.get(role, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:"""
        
        keyboard = get_main_keyboard(user_id)
        query.edit_message_text(main_text, reply_markup=keyboard, parse_mode='Markdown')
    
    def refresh_main_callback(self, update, context):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        self.main_menu_callback(update, context)
    
    def callback_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        data = query.data
        user_id = update.effective_user.id
        
        if not is_admin(user_id):
            query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        try:
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (data.startswith("users") or data.startswith("user_") or 
                data.startswith("confirm_delete_") or data.startswith("cancel_delete_")):
                handle_users_callbacks(update, context)
            # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ callback'–∏
            elif data == "main_menu":
                self.main_menu_callback(update, context)
            elif data == "refresh_main":
                self.refresh_main_callback(update, context)
            elif data == "help":
                query.answer()
                self.help_command(update, context)
            elif data == "stats":
                query.answer()
                self.stats_command(update, context)
            else:
                self.handle_menu_callbacks(update, context)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
            query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    def handle_menu_callbacks(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        query = update.callback_query
        data = query.data
        
        if data == "analytics":
            query.edit_message_text(
                "üìà **–ê–ù–ê–õ–ò–¢–ò–ö–ê**\n\nüöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n‚Ä¢ –û—Ç—á–µ—Ç—ã –ø–æ –¥–æ—Ö–æ–¥–∞–º\n‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                reply_markup=get_main_keyboard(update.effective_user.id),
                parse_mode='Markdown'
            )
        elif data == "financial":
            query.edit_message_text(
                "üí∞ **–§–ò–ù–ê–ù–°–û–í–´–ï –û–¢–ß–ï–¢–´**\n\nüöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π\n‚Ä¢ –û—Ç—á–µ—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º\n‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–æ—Ö–æ–¥–æ–≤",
                reply_markup=get_main_keyboard(update.effective_user.id),
                parse_mode='Markdown'
            )
        elif data == "system":
            query.edit_message_text(
                "‚öôÔ∏è **–°–ò–°–¢–ï–ú–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò**\n\nüöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏",
                reply_markup=get_main_keyboard(update.effective_user.id),
                parse_mode='Markdown'
            )
        elif data == "notifications":
            query.edit_message_text(
                "üîî **–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø**\n\nüöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤\n‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                reply_markup=get_main_keyboard(update.effective_user.id),
                parse_mode='Markdown'
            )
        elif data == "export":
            query.edit_message_text(
                "üìä **–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•**\n\nüöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:\n‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV/JSON\n‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã\n‚Ä¢ –ê—Ä—Ö–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=get_main_keyboard(update.effective_user.id),
                parse_mode='Markdown'
            )
        else:
            query.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def error_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self.logger.error(f'Update "{update}" caused error "{context.error}"')
        
        if update and update.effective_message:
            try:
                update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            except Exception:
                pass
    
    def setup_commands(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        commands = [
            BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("help", "–ü–æ–º–æ—â—å")
        ]
        
        try:
            self.updater.bot.set_my_commands(commands)
            self.logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω –±–æ—Ç–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            init_db()
            self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            self.setup_commands()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            bot_info = self.updater.bot.get_me()
            self.logger.info(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            self.updater.start_polling(drop_pending_updates=True)
            self.logger.info("üü¢ –ê–¥–º–∏–Ω –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.updater.idle()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–¥–º–∏–Ω –±–æ—Ç–∞: {e}")
            raise

if __name__ == "__main__":
    try:
        admin_bot = AdminBot()
        admin_bot.run()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 