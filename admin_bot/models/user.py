from datetime import datetime, timedelta
from enum import Enum
from typing import Optional

class SubscriptionPlan(Enum):
    """–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏"""
    FREE_TRIAL_1_DAY = "free_trial_1_day"
    FREE_TRIAL_3_DAYS = "free_trial_3_days"
    FREE_TRIAL_7_DAYS = "free_trial_7_days"
    SUBSCRIPTION_30_DAYS = "subscription_30_days"
    SUBSCRIPTION_90_DAYS = "subscription_90_days"
    SUBSCRIPTION_LIFETIME = "subscription_lifetime"

class UserStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    ACTIVE = "active"
    EXPIRED = "expired"
    BLOCKED = "blocked"
    TRIAL = "trial"

class User:
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞—Ä–∏—Ñ–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏"""
    
    def __init__(self, telegram_id: int, username: str = None, 
                 subscription_plan: SubscriptionPlan = None):
        self.telegram_id = telegram_id
        self.username = username
        self.subscription_plan = subscription_plan
        self.created_at = datetime.now()
        self.subscription_start = None
        self.subscription_end = None
        self.status = UserStatus.TRIAL
        self.accounts_count = 0
        self.last_activity = datetime.now()
        
    @property
    def is_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏"""
        if self.subscription_plan == SubscriptionPlan.SUBSCRIPTION_LIFETIME:
            return self.status != UserStatus.BLOCKED
        
        if self.subscription_end is None:
            return False
            
        return datetime.now() < self.subscription_end and self.status == UserStatus.ACTIVE
    
    @property
    def days_remaining(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        if self.subscription_plan == SubscriptionPlan.SUBSCRIPTION_LIFETIME:
            return -1  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            
        if self.subscription_end is None:
            return 0
            
        delta = self.subscription_end - datetime.now()
        return max(0, delta.days)
    
    @property
    def is_trial(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Ç—Ä–∏–∞–ª—å–Ω–æ–π"""
        return self.subscription_plan in [
            SubscriptionPlan.FREE_TRIAL_1_DAY,
            SubscriptionPlan.FREE_TRIAL_3_DAYS,
            SubscriptionPlan.FREE_TRIAL_7_DAYS
        ]
    
    def set_subscription(self, plan: SubscriptionPlan):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω"""
        self.subscription_plan = plan
        self.subscription_start = datetime.now()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
        plan_durations = {
            SubscriptionPlan.FREE_TRIAL_1_DAY: 1,
            SubscriptionPlan.FREE_TRIAL_3_DAYS: 3,
            SubscriptionPlan.FREE_TRIAL_7_DAYS: 7,
            SubscriptionPlan.SUBSCRIPTION_30_DAYS: 30,
            SubscriptionPlan.SUBSCRIPTION_90_DAYS: 90,
            SubscriptionPlan.SUBSCRIPTION_LIFETIME: None
        }
        
        duration = plan_durations.get(plan)
        if duration:
            self.subscription_end = self.subscription_start + timedelta(days=duration)
        else:
            self.subscription_end = None  # –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        if self.is_trial:
            self.status = UserStatus.TRIAL
        else:
            self.status = UserStatus.ACTIVE
    
    def extend_subscription(self, days: int):
        """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"""
        if self.subscription_end:
            self.subscription_end += timedelta(days=days)
        else:
            self.subscription_end = datetime.now() + timedelta(days=days)
    
    def block_user(self):
        """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.status = UserStatus.BLOCKED
    
    def unblock_user(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.is_active:
            self.status = UserStatus.ACTIVE
        else:
            self.status = UserStatus.EXPIRED
    
    def update_activity(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.last_activity = datetime.now()
    
    def to_dict(self) -> dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'telegram_id': self.telegram_id,
            'username': self.username,
            'subscription_plan': self.subscription_plan.value if self.subscription_plan else None,
            'created_at': self.created_at.isoformat(),
            'subscription_start': self.subscription_start.isoformat() if self.subscription_start else None,
            'subscription_end': self.subscription_end.isoformat() if self.subscription_end else None,
            'status': self.status.value,
            'accounts_count': self.accounts_count,
            'last_activity': self.last_activity.isoformat(),
            'is_active': self.is_active,
            'days_remaining': self.days_remaining,
            'is_trial': self.is_trial
        }
    
    @classmethod
    def from_dict(cls, data: dict) -> 'User':
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        user = cls(
            telegram_id=data['telegram_id'],
            username=data.get('username')
        )
        
        if data.get('subscription_plan'):
            user.subscription_plan = SubscriptionPlan(data['subscription_plan'])
        
        user.created_at = datetime.fromisoformat(data['created_at'])
        
        if data.get('subscription_start'):
            user.subscription_start = datetime.fromisoformat(data['subscription_start'])
        
        if data.get('subscription_end'):
            user.subscription_end = datetime.fromisoformat(data['subscription_end'])
        
        user.status = UserStatus(data['status'])
        user.accounts_count = data.get('accounts_count', 0)
        user.last_activity = datetime.fromisoformat(data['last_activity'])
        
        return user

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
PLAN_INFO = {
    SubscriptionPlan.FREE_TRIAL_1_DAY: {
        'name': 'üÜì –§—Ä–∏ —Ç—Ä–∏–∞–ª 1 –¥–µ–Ω—å',
        'duration': 1,
        'price': 0,
        'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –¥–µ–Ω—å'
    },
    SubscriptionPlan.FREE_TRIAL_3_DAYS: {
        'name': 'üÜì –§—Ä–∏ —Ç—Ä–∏–∞–ª 3 –¥–Ω—è',
        'duration': 3,
        'price': 0,
        'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –¥–Ω—è'
    },
    SubscriptionPlan.FREE_TRIAL_7_DAYS: {
        'name': 'üÜì –§—Ä–∏ —Ç—Ä–∏–∞–ª 7 –¥–Ω–µ–π',
        'duration': 7,
        'price': 0,
        'description': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ –Ω–µ–¥–µ–ª—é'
    },
    SubscriptionPlan.SUBSCRIPTION_30_DAYS: {
        'name': 'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ 30 –¥–Ω–µ–π',
        'duration': 30,
        'price': 200,
        'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü'
    },
    SubscriptionPlan.SUBSCRIPTION_90_DAYS: {
        'name': 'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ 3 –º–µ—Å—è—Ü–∞',
        'duration': 90,
        'price': 400,
        'description': '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –º–µ—Å—è—Ü–∞'
    },
    SubscriptionPlan.SUBSCRIPTION_LIFETIME: {
        'name': 'üíé –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–≤—Å–µ–≥–¥–∞',
        'duration': None,
        'price': 500,
        'description': '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞'
    }
} 