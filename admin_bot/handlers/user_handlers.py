from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from datetime import datetime, timedelta
import math

from ..config.admin_list import is_admin, has_permission, Permission
from ..services.user_service import UserService
from ..models.user import SubscriptionPlan, UserStatus, PLAN_INFO
from ..middleware.admin_auth import admin_required, permission_required

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_service = UserService()

@admin_required
def users_menu(update: Update, context: CallbackContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.VIEW_USERS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = user_service.get_statistics()
    
    text = f"""üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']}
‚Ä¢ –ù–∞ —Ç—Ä–∏–∞–ª–µ: {stats['trial_users']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['blocked_users']}
‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö: {stats['expired_users']}

üí∞ **–û—Ü–µ–Ω–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥:** ${stats['estimated_revenue']:.2f}
"""
    
    keyboard = [
        [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_add")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_search")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞–Ω–∞–º", callback_data="users_plans_stats")],
        [InlineKeyboardButton("‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="users_expiring")],
        [InlineKeyboardButton("üîß –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="users_bulk_operations")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

@admin_required
def users_list(update: Update, context: CallbackContext):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.VIEW_USERS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    page = int(context.user_data.get('users_page', 1))
    per_page = 10
    
    users = user_service.get_all_users()
    total_pages = math.ceil(len(users) / per_page)
    
    start_idx = (page - 1) * per_page
    end_idx = start_idx + per_page
    page_users = users[start_idx:end_idx]
    
    text = f"üë• **–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô** (—Å—Ç—Ä. {page}/{total_pages})\n\n"
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    keyboard = []
    user_buttons = []
    
    for i, user in enumerate(page_users, start_idx + 1):
        status_emoji = "‚úÖ" if user.is_active else "‚ùå" if user.status == UserStatus.BLOCKED else "‚è∞"
        plan_name = PLAN_INFO[user.subscription_plan]['name'] if user.subscription_plan else "–ë–µ–∑ –ø–ª–∞–Ω–∞"
        
        # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ç–µ–∫—Å—Ç–µ (—ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è Markdown)
        username_display = user.username or '–ù–µ—Ç username'
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
        username_display = username_display.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')
        
        text += f"{i}. {status_emoji} @{username_display}\n"
        text += f"   ID: `{user.telegram_id}` | {plan_name}\n\n"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        button_text = f"{status_emoji} @{user.username or str(user.telegram_id)}"
        user_buttons.append(InlineKeyboardButton(button_text, callback_data=f"user_detail_{user.telegram_id}"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        if len(user_buttons) == 2:
            keyboard.append(user_buttons)
            user_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_buttons:
        keyboard.append(user_buttons)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"users_page_{page-1}"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥", callback_data=f"users_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.extend([
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="users_search")],
        [InlineKeyboardButton("üÜï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="users_add")] if has_permission(user_id, Permission.MANAGE_USERS) else [],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="users_menu")]
    ])
    
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
    keyboard = [row for row in keyboard if row]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

@admin_required
def users_plans_stats(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞—Ä–∏—Ñ–Ω—ã–º –ø–ª–∞–Ω–∞–º"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.VIEW_ANALYTICS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    stats = user_service.get_statistics()
    
    text = "üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ê–†–ò–§–ù–´–ú –ü–õ–ê–ù–ê–ú**\n\n"
    
    total_revenue = 0
    for plan in SubscriptionPlan:
        count = stats['plans_distribution'].get(plan.value, 0)
        if count > 0:
            plan_info = PLAN_INFO[plan]
            revenue = count * plan_info['price']
            total_revenue += revenue
            
            text += f"**{plan_info['name']}**\n"
            text += f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}\n"
            text += f"‚Ä¢ –¶–µ–Ω–∞: ${plan_info['price']}\n"
            text += f"‚Ä¢ –î–æ—Ö–æ–¥: ${revenue:.2f}\n\n"
    
    text += f"üí∞ **–û–±—â–∏–π –¥–æ—Ö–æ–¥:** ${total_revenue:.2f}\n"
    text += f"üìà **–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:** ${total_revenue / max(stats['total_users'], 1):.2f}"
    
    keyboard = [
        [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="users_export_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="users_menu")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

@admin_required
def users_add(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.MANAGE_USERS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    text = """‚ûï **–î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**

üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`telegram_id username plan`

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:**
‚Ä¢ `trial_1` - –¢—Ä–∏–∞–ª 1 –¥–µ–Ω—å
‚Ä¢ `trial_3` - –¢—Ä–∏–∞–ª 3 –¥–Ω—è  
‚Ä¢ `trial_7` - –¢—Ä–∏–∞–ª 7 –¥–Ω–µ–π
‚Ä¢ `month` - 30 –¥–Ω–µ–π ($200)
‚Ä¢ `3month` - 3 –º–µ—Å—è—Ü–∞ ($400)
‚Ä¢ `lifetime` - –ù–∞–≤—Å–µ–≥–¥–∞ ($500)

**–ü—Ä–∏–º–µ—Ä:**
`123456789 testuser month`

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."""

    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users_menu")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['waiting_for'] = 'user_add_data'

@admin_required
def users_search(update: Update, context: CallbackContext):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.VIEW_USERS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    text = """üîç **–ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**

üìù –í–≤–µ–¥–∏—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:
‚Ä¢ Telegram ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)
‚Ä¢ Username (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ username)

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."""

    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="users_menu")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    context.user_data['waiting_for'] = 'user_search_query'

@admin_required
def users_expiring(update: Update, context: CallbackContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.VIEW_USERS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π
    expiring_users = user_service.get_expiring_users(days=7)
    
    text = f"‚è∞ **–ò–°–¢–ï–ö–ê–Æ–©–ò–ï –ü–û–î–ü–ò–°–ö–ò** ({len(expiring_users)} —á–µ–ª.)\n\n"
    
    if not expiring_users:
        text += "‚úÖ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π"
    else:
        for user in expiring_users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 10
            days_left = user.days_remaining
            urgency = "üî¥" if days_left <= 1 else "üü°" if days_left <= 3 else "üü¢"
            
            text += f"{urgency} @{user.username or '–ù–µ—Ç username'}\n"
            text += f"   ID: `{user.telegram_id}`\n"
            text += f"   –ü–ª–∞–Ω: {PLAN_INFO[user.subscription_plan]['name']}\n"
            text += f"   –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: {days_left} –¥–Ω.\n\n"
        
        if len(expiring_users) > 10:
            text += f"... –∏ –µ—â–µ {len(expiring_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    keyboard = [
        [InlineKeyboardButton("üì¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="users_notify_expiring")] if expiring_users and has_permission(user_id, Permission.SEND_NOTIFICATIONS) else [],
        [InlineKeyboardButton("üìä –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="users_expiring_full")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="users_menu")]
    ]
    
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
    keyboard = [row for row in keyboard if row]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

@admin_required 
def user_detail(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.VIEW_USERS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    target_user_id = int(query.data.split('_')[-1])
    user = user_service.get_user(target_user_id)
    
    if not user:
        query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    plan_info = PLAN_INFO.get(user.subscription_plan, {})
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    from utils.subscription_service import subscription_service
    user_stats = subscription_service.get_user_stats(target_user_id)
    
    text = f"""üë§ **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ {user.username or '–ë–µ–∑ username'}**

üÜî **ID:** `{user.telegram_id}`
üë§ **Username:** @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {user.created_at.strftime('%d.%m.%Y %H:%M') if user.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üïê **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {user.last_activity.strftime('%d.%m.%Y %H:%M') if user.last_activity else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üíé **–ü–æ–¥–ø–∏—Å–∫–∞:**
‚Ä¢ –ü–ª–∞–Ω: {plan_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω')}
‚Ä¢ –¶–µ–Ω–∞: ${plan_info.get('price', 0)}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {user.status.value}
‚Ä¢ –ù–∞—á–∞–ª–æ: {user.subscription_start.strftime('%d.%m.%Y') if user.subscription_start else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
‚Ä¢ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {user.subscription_end.strftime('%d.%m.%Y') if user.subscription_end else '‚ôæÔ∏è –ù–∞–≤—Å–µ–≥–¥–∞'}
‚Ä¢ –î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å: {user.days_remaining if user.days_remaining != float('inf') else '‚ôæÔ∏è'}

üì± **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {user.accounts_count}
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ: {'‚úÖ –ï—Å—Ç—å' if user_stats.get('has_access') else '‚ùå –ù–µ—Ç'}
‚Ä¢ –¢—Ä–∏–∞–ª—å–Ω—ã–π: {'‚úÖ –î–∞' if user.is_trial else '‚ùå –ù–µ—Ç'}"""

    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∞–º–∏)
    if has_permission(user_id, Permission.MANAGE_USERS):
        keyboard.append([
            InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω", callback_data=f"user_edit_plan_{target_user_id}"),
            InlineKeyboardButton("‚è∞ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"user_extend_{target_user_id}")
        ])
        
        if user.status == UserStatus.BLOCKED:
            keyboard.append([InlineKeyboardButton("üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_unblock_{target_user_id}")])
        else:
            keyboard.append([InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_block_{target_user_id}")])
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"user_delete_{target_user_id}")])
    
    keyboard.append([
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"user_detail_{target_user_id}"),
        InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="users_list")
    ])
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

@admin_required
def users_bulk_operations(update: Update, context: CallbackContext):
    """–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.MANAGE_USERS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    stats = user_service.get_statistics()
    
    text = f"""üîß **–ú–ê–°–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò**

üìä **–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['expired_users']}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats['blocked_users']}

‚ö†Ô∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:**"""

    keyboard = [
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏—Ö", callback_data="bulk_clean_expired")],
        [InlineKeyboardButton("üìß –£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏", callback_data="bulk_notify_expiring")],
        [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="bulk_export_users")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="users_menu")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

def handle_user_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not update.message or not update.message.text:
        return
    
    user_id = update.effective_user.id
    if not is_admin(user_id):
        return
    
    waiting_for = context.user_data.get('waiting_for')
    text = update.message.text.strip()
    
    if waiting_for == 'user_add_data':
        handle_add_user_data(update, context, text)
    elif waiting_for == 'user_search_query':
        handle_search_user(update, context, text)
    elif waiting_for == 'user_extend_days':
        handle_extend_user(update, context, text)

def handle_add_user_data(update: Update, context: CallbackContext, text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        parts = text.split()
        if len(parts) != 3:
            update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `telegram_id username plan`", parse_mode='Markdown')
            return
        
        telegram_id, username, plan_code = parts
        telegram_id = int(telegram_id)
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–¥–æ–≤ –ø–ª–∞–Ω–æ–≤
        plan_mapping = {
            'trial_1': SubscriptionPlan.FREE_TRIAL_1_DAY,
            'trial_3': SubscriptionPlan.FREE_TRIAL_3_DAYS,
            'trial_7': SubscriptionPlan.FREE_TRIAL_7_DAYS,
            'month': SubscriptionPlan.SUBSCRIPTION_30_DAYS,
            '3month': SubscriptionPlan.SUBSCRIPTION_90_DAYS,
            'lifetime': SubscriptionPlan.SUBSCRIPTION_LIFETIME
        }
        
        if plan_code not in plan_mapping:
            update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–ª–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: trial_1, trial_3, trial_7, month, 3month, lifetime")
            return
        
        plan = plan_mapping[plan_code]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = user_service.get_user(telegram_id)
        if existing_user:
            update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = user_service.create_user(telegram_id, username)
        user.set_subscription(plan)
        user_service.update_user(user)
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª!
        user_service.save_users()
        
        plan_info = PLAN_INFO[plan]
        
        update.message.reply_text(
            f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
            f"üë§ Username: @{username}\n"
            f"üÜî ID: {telegram_id}\n"
            f"üíé –ü–ª–∞–Ω: {plan_info['name']}\n"
            f"üí∞ –¶–µ–Ω–∞: ${plan_info['price']}\n"
            f"‚è∞ –î–Ω–µ–π: {plan_info['duration'] if plan_info['duration'] else '‚ôæÔ∏è'}",
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('waiting_for', None)
        
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

def handle_search_user(update: Update, context: CallbackContext, query_text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        users = user_service.get_all_users()
        found_users = []
        
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        search_query = query_text.replace('@', '').lower()
        
        for user in users:
            # –ü–æ–∏—Å–∫ –ø–æ ID
            if search_query.isdigit() and str(user.telegram_id) == search_query:
                found_users.append(user)
                continue
            
            # –ü–æ–∏—Å–∫ –ø–æ username
            if user.username and search_query in user.username.lower():
                found_users.append(user)
        
        if not found_users:
            update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            context.user_data.pop('waiting_for', None)
            return
        
        if len(found_users) == 1:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            user = found_users[0]
            show_user_detail_text(update, user)
        else:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            text = f"üîç **–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(found_users)}**\n\n"
            
            for i, user in enumerate(found_users[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
                status_emoji = "‚úÖ" if user.is_active else "‚ùå" if user.status == UserStatus.BLOCKED else "‚è∞"
                plan_name = PLAN_INFO[user.subscription_plan]['name'] if user.subscription_plan else "–ë–µ–∑ –ø–ª–∞–Ω–∞"
                text += f"{i}. {status_emoji} @{user.username or '–ù–µ—Ç username'} | ID: {user.telegram_id}\n"
                text += f"   {plan_name}\n\n"
            
            if len(found_users) > 10:
                text += f"... –∏ –µ—â–µ {len(found_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            update.message.reply_text(text, parse_mode='Markdown')
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop('waiting_for', None)
        
    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

def show_user_detail_text(update: Update, user):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    plan_info = PLAN_INFO.get(user.subscription_plan, {})
    
    text = f"""üë§ **–ù–ê–ô–î–ï–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨**

üÜî **ID:** `{user.telegram_id}`
üë§ **Username:** @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üíé **–ü–ª–∞–Ω:** {plan_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω')}
üí∞ **–¶–µ–Ω–∞:** ${plan_info.get('price', 0)}
üìÖ **–°—Ç–∞—Ç—É—Å:** {user.status.value}
‚è∞ **–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å:** {user.days_remaining if user.days_remaining != float('inf') else '‚ôæÔ∏è'}
üì± **–ê–∫–∫–∞—É–Ω—Ç–æ–≤:** {user.accounts_count}"""

    update.message.reply_text(text, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def handle_users_callbacks(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    query = update.callback_query
    data = query.data
    
    if data == "users_menu":
        users_menu(update, context)
    elif data == "users_list":
        users_list(update, context)
    elif data == "users_add":
        users_add(update, context)
    elif data == "users_search":
        users_search(update, context)
    elif data == "users_plans_stats":
        users_plans_stats(update, context)
    elif data == "users_expiring":
        users_expiring(update, context)
    elif data == "users_bulk_operations":
        users_bulk_operations(update, context)
    elif data.startswith("users_page_"):
        page = int(data.split('_')[-1])
        context.user_data['users_page'] = page
        users_list(update, context)
    elif data.startswith("user_detail_"):
        user_detail(update, context)
    elif data.startswith("user_block_"):
        handle_block_user(update, context)
    elif data.startswith("user_unblock_"):
        handle_unblock_user(update, context)
    elif data.startswith("user_edit_plan_"):
        handle_edit_user_plan(update, context)
    elif data.startswith("user_extend_"):
        handle_extend_user_menu(update, context)
    elif data.startswith("user_delete_"):
        handle_delete_user_confirm(update, context)
    elif data.startswith("confirm_delete_"):
        handle_delete_user_execute(update, context)
    elif data.startswith("cancel_delete_"):
        handle_cancel_delete_user(update, context)
    else:
        query.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def handle_block_user(update: Update, context: CallbackContext):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.MANAGE_USERS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    target_user_id = int(query.data.split('_')[-1])
    
    success = user_service.block_user(target_user_id)
    if success:
        user_service.save_users()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['callback_data'] = f"user_detail_{target_user_id}"
        user_detail(update, context)
    else:
        query.answer("‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

def handle_unblock_user(update: Update, context: CallbackContext):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.MANAGE_USERS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    target_user_id = int(query.data.split('_')[-1])
    
    success = user_service.unblock_user(target_user_id)
    if success:
        user_service.save_users()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['callback_data'] = f"user_detail_{target_user_id}"
        user_detail(update, context)
    else:
        query.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")

def handle_edit_user_plan(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.MANAGE_USERS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    target_user_id = int(query.data.split('_')[-1])
    user = user_service.get_user(target_user_id)
    
    if not user:
        query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = f"""‚úèÔ∏è **–ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–õ–ê–ù–ê**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–ë–µ–∑ username'}
üíé –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: {PLAN_INFO[user.subscription_plan]['name'] if user.subscription_plan else '–ë–µ–∑ –ø–ª–∞–Ω–∞'}

üõí **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω:**"""

    keyboard = []
    for plan, info in PLAN_INFO.items():
        keyboard.append([InlineKeyboardButton(
            f"{info['name']} - ${info['price']}", 
            callback_data=f"set_plan_{target_user_id}_{plan.value}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"user_detail_{target_user_id}")])
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

def handle_extend_user_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.MANAGE_USERS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    target_user_id = int(query.data.split('_')[-1])
    
    text = f"""‚è∞ **–ü–†–û–î–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ò**

üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:
(–Ω–∞–ø—Ä–∏–º–µ—Ä: 30, 90, 365)

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞."""

    keyboard = [
        [
            InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data=f"extend_days_{target_user_id}_30"),
            InlineKeyboardButton("90 –¥–Ω–µ–π", callback_data=f"extend_days_{target_user_id}_90")
        ],
        [InlineKeyboardButton("365 –¥–Ω–µ–π", callback_data=f"extend_days_{target_user_id}_365")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"user_detail_{target_user_id}")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

def handle_delete_user_confirm(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.MANAGE_USERS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    target_user_id = int(query.data.split('_')[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = user_service.get_user(target_user_id)
    if not user:
        query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = f"""‚ö†Ô∏è **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{user.username} (ID: `{user.telegram_id}`)
üìÖ **–°–æ–∑–¥–∞–Ω:** {user.created_at.strftime('%d.%m.%Y %H:%M')}
üìä **–ü–ª–∞–Ω:** {PLAN_INFO[user.subscription_plan]['name'] if user.subscription_plan else '–ë–µ–∑ –ø–ª–∞–Ω–∞'}
üí≥ **–°—Ç–∞—Ç—É—Å:** {user.status.value}

üóëÔ∏è **–í–´ –£–í–ï–†–ï–ù–´ –ß–¢–û –•–û–¢–ò–¢–ï –£–î–ê–õ–ò–¢–¨ –≠–¢–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø?**

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ **–ù–ï–û–ë–†–ê–¢–ò–ú–û**:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–Ω–æ–≤–æ"""

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–ê, –£–î–ê–õ–ò–¢–¨", callback_data=f"confirm_delete_{target_user_id}"),
            InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data=f"cancel_delete_{target_user_id}")
        ]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

def handle_delete_user_execute(update: Update, context: CallbackContext):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not has_permission(user_id, Permission.MANAGE_USERS):
        query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    target_user_id = int(query.data.split('_')[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    user = user_service.get_user(target_user_id)
    if not user:
        query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    username = user.username
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = user_service.delete_user(target_user_id)
    
    if success:
        user_service.save_users()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        admin_username = update.effective_user.username or update.effective_user.first_name
        logger.warning(f"üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: –ê–¥–º–∏–Ω @{admin_username} (ID: {user_id}) —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} (ID: {target_user_id})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        text = f"""‚úÖ **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –£–î–ê–õ–ï–ù**

üë§ **–£–¥–∞–ª–µ–Ω:** @{username} (ID: `{target_user_id}`)
üë®‚Äçüíº **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** @{admin_username} (ID: `{user_id}`)
üïê **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
üîí –î–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."""

        keyboard = [
            [InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_list")]
        ]
        
        query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')
    else:
        query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['callback_data'] = f"user_detail_{target_user_id}"
        user_detail(update, context)

def handle_cancel_delete_user(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    target_user_id = int(query.data.split('_')[-1])
    
    query.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['callback_data'] = f"user_detail_{target_user_id}"
    user_detail(update, context)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_user_for_list(user, index):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ø–∏—Å–∫–∞"""
    status_emoji = "‚úÖ" if user.is_active else "‚ùå" if user.status == UserStatus.BLOCKED else "‚è∞"
    plan_name = PLAN_INFO[user.subscription_plan]['name'] if user.subscription_plan else "–ë–µ–∑ –ø–ª–∞–Ω–∞"
    
    return f"{index}. {status_emoji} @{user.username or '–ù–µ—Ç username'} | {plan_name}" 