"""
Middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–≤
"""

import logging
from functools import wraps
from typing import Callable, Any, List
from telegram import Update
from telegram.ext import CallbackContext

from ..config.admin_list import is_admin, has_permission, Permission, get_user_role
from ..config.settings import MESSAGES

logger = logging.getLogger(__name__)

def admin_required(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
    """
    @wraps(func)
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        
        if not is_admin(user_id):
            logger.warning(f"Unauthorized access attempt from user {user_id}")
            update.message.reply_text(
                MESSAGES['unauthorized'], 
                parse_mode='HTML'
            )
            return
        
        logger.info(f"Admin {user_id} accessed {func.__name__}")
        return func(update, context, *args, **kwargs)
    
    return wrapper

def permission_required(permission: Permission):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
            user_id = update.effective_user.id
            
            if not is_admin(user_id):
                logger.warning(f"Unauthorized access attempt from user {user_id}")
                update.message.reply_text(
                    MESSAGES['unauthorized'], 
                    parse_mode='HTML'
                )
                return
            
            if not has_permission(user_id, permission):
                role = get_user_role(user_id)
                logger.warning(f"Permission denied for user {user_id} (role: {role.value}) for {permission.value}")
                update.message.reply_text(
                    f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                    f"–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–æ: <code>{permission.value}</code>\n"
                    f"–í–∞—à–∞ —Ä–æ–ª—å: <code>{role.value}</code>",
                    parse_mode='HTML'
                )
                return
            
            logger.info(f"Admin {user_id} used permission {permission.value} in {func.__name__}")
            return func(update, context, *args, **kwargs)
        
        return wrapper
    return decorator

class AdminAuthMiddleware:
    """
    Middleware –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
    
    def check_admin_access(self, update: Update, context: CallbackContext) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if not is_admin(user_id):
            self.logger.warning(f"Unauthorized access attempt from user {user_id}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if update.message:
                    update.message.reply_text(
                        MESSAGES['unauthorized'], 
                        parse_mode='HTML'
                    )
                elif update.callback_query:
                    update.callback_query.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                    update.callback_query.message.reply_text(
                        MESSAGES['unauthorized'], 
                        parse_mode='HTML'
                    )
            except Exception as e:
                self.logger.error(f"Error sending unauthorized message: {e}")
            
            return False
        
        return True
    
    def check_permission(self, update: Update, context: CallbackContext, permission: Permission) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ –¥–æ—Å—Ç—É–ø–∞"""
        user_id = update.effective_user.id
        
        if not self.check_admin_access(update, context):
            return False
        
        if not has_permission(user_id, permission):
            role = get_user_role(user_id)
            self.logger.warning(f"Permission denied for user {user_id} (role: {role.value}) for {permission.value}")
            
            try:
                error_msg = (
                    f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤</b>\n\n"
                    f"–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∞–≤–æ: <code>{permission.value}</code>\n"
                    f"–í–∞—à–∞ —Ä–æ–ª—å: <code>{role.value}</code>"
                )
                
                if update.message:
                    update.message.reply_text(error_msg, parse_mode='HTML')
                elif update.callback_query:
                    update.callback_query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
                    update.callback_query.message.reply_text(error_msg, parse_mode='HTML')
            except Exception as e:
                self.logger.error(f"Error sending permission denied message: {e}")
            
            return False
        
        return True
    
    def get_user_info(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ-–∞–¥–º–∏–Ω–µ"""
        if not is_admin(user_id):
            return {}
        
        role = get_user_role(user_id)
        permissions = has_permission(user_id, Permission.VIEW_USERS)  # –ü—Ä–æ–≤–µ—Ä–∏–º —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä–∞–≤–æ
        
        return {
            'user_id': user_id,
            'role': role.value,
            'is_admin': True,
            'has_basic_permissions': permissions
        } 