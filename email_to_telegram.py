import asyncio
import logging
import time
import aiohttp
import imaplib
import email as email_lib
from email.header import decode_header
import re
from datetime import datetime, timedelta, timezone
from config import VERIFICATION_BOT_TOKEN, VERIFICATION_BOT_ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def send_telegram_message(chat_id, text):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    """
    url = f"https://api.telegram.org/bot{VERIFICATION_BOT_TOKEN}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=data) as response:
                if response.status == 200:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {response.status}")
                    return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")
        return False

async def get_verification_code_from_telegram(timeout=300):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç Telegram-–±–æ—Ç–∞
    """
    url = f"https://api.telegram.org/bot{VERIFICATION_BOT_TOKEN}/getUpdates"
    params = {
        "offset": -1,
        "timeout": 30
    }

    start_time = time.time()

    while time.time() - start_time < timeout:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data["ok"] and data["result"]:
                            for update in data["result"]:
                                if "message" in update and "text" in update["message"]:
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞
                                    if str(update["message"]["from"]["id"]) == str(VERIFICATION_BOT_ADMIN_ID):
                                        text = update["message"]["text"]
                                        # –ò—â–µ–º –∫–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ
                                        code_match = re.search(r'–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: (\d{6})', text)
                                        if code_match:
                                            return code_match.group(1)

                        # –û–±–Ω–æ–≤–ª—è–µ–º offset –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                        if data["result"]:
                            params["offset"] = data["result"][-1]["update_id"] + 1

                    # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                    await asyncio.sleep(2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram: {str(e)}")
            await asyncio.sleep(5)

    logger.warning(f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ ({timeout} —Å–µ–∫—É–Ω–¥)")
    return None

async def get_email_content(email_address, password):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞ –æ—Ç Instagram
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä IMAP –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ–º–µ–Ω–∞ –ø–æ—á—Ç—ã
    if email_address.endswith('@gmail.com'):
        imap_server = 'imap.gmail.com'
    elif any(email_address.endswith(domain) for domain in [
        '@fmailler.com', '@fmailler.net', '@fmaillerbox.net', '@firstmail.ltd',
        '@fmailler.ltd', '@firstmail.net', '@firstmail.com'
    ]):
        imap_server = 'imap.firstmail.ltd'
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–æ–≤ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        domain = email_address.split('@')[1]
        imap_server = f'imap.{domain}'

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É IMAP
        mail = imaplib.IMAP4_SSL(imap_server, 993)
        mail.login(email_address, password)
        mail.select("inbox")

        # –ò—â–µ–º –ø–∏—Å—å–º–∞ –æ—Ç Instagram
        status, messages = mail.search(None, '(FROM "instagram" UNSEEN)')

        if status != "OK" or not messages[0]:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫
            status, messages = mail.search(None, 'FROM "instagram"')
            if status != "OK" or not messages[0]:
                mail.close()
                mail.logout()
                return None

        # –ü–æ–ª—É—á–∞–µ–º ID –ø–∏—Å–µ–º
        email_ids = messages[0].split()

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Å—å–º–æ
        latest_email_id = email_ids[-1]
        status, msg_data = mail.fetch(latest_email_id, "(RFC822)")

        if status != "OK":
            mail.close()
            mail.logout()
            return None

        # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
        msg = email_lib.message_from_bytes(msg_data[0][1])

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É
        subject = ""
        subject_header = msg.get("Subject", "")
        if subject_header:
            decoded_subject = decode_header(subject_header)
            subject = decoded_subject[0][0]
            if isinstance(subject, bytes):
                subject = subject.decode(decoded_subject[0][1] or 'utf-8')

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        body = ""
        if msg.is_multipart():
            for part in msg.walk():
                content_type = part.get_content_type()
                if content_type == "text/plain" or content_type == "text/html":
                    try:
                        payload = part.get_payload(decode=True)
                        charset = part.get_content_charset() or 'utf-8'
                        body += payload.decode(charset, errors='replace')
                    except:
                        pass
        else:
            try:
                payload = msg.get_payload(decode=True)
                charset = msg.get_content_charset() or 'utf-8'
                body = payload.decode(charset, errors='replace')
            except:
                pass

        mail.close()
        mail.logout()

        return {
            "subject": subject,
            "body": body
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–∏—Å—å–º–∞: {str(e)}")
        return None

async def get_code_from_email_via_telegram(email, password, timeout=300):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç
    """
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –¥–ª—è {email}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not VERIFICATION_BOT_TOKEN or not VERIFICATION_BOT_ADMIN_ID:
        logger.error("VERIFICATION_BOT_TOKEN –∏–ª–∏ VERIFICATION_BOT_ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return None

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
        email_content = await get_email_content(email, password)

        if not email_content:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞ –¥–ª—è {email}")
            return None

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞ –≤ Telegram
        message = f"üìß <b>–ü–∏—Å—å–º–æ –æ—Ç Instagram</b>\n\n"
        message += f"<b>–¢–µ–º–∞:</b> {email_content['subject']}\n\n"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
        body_preview = email_content['body'][:3000] + "..." if len(email_content['body']) > 3000 else email_content['body']
        message += f"<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>\n{body_preview}"

        await send_telegram_message(VERIFICATION_BOT_ADMIN_ID, message)

        # –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –æ—Ç –±–æ—Ç–∞
        verification_code = await get_verification_code_from_telegram(timeout)

        if verification_code:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {verification_code}")
            return verification_code
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram")
            return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram: {str(e)}")
        return None

def get_code_from_email_via_telegram_sync(email, password, timeout=300):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    """
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        return loop.run_until_complete(get_code_from_email_via_telegram(email, password, timeout))
    finally:
        loop.close()

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == "__main__":
    email = "test@example.com"
    email_password = "password"

    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è {email}...")
    code = get_code_from_email_via_telegram_sync(email, email_password)

    if code:
        print(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥: {code}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥")