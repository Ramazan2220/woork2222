import logging
import threading
import time
import sys
from datetime import datetime
from telegram.ext import Updater
from instagram.monkey_patch import *
from instagram.client_patch import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Å–∏–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—á–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from config import (
    TELEGRAM_TOKEN, LOG_LEVEL, LOG_FORMAT, LOG_FILE,
    TELEGRAM_READ_TIMEOUT, TELEGRAM_CONNECT_TIMEOUT,
    TELEGRAM_ERROR_LOG,
    # Lazy Loading –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    USE_LAZY_LOADING, LAZY_MAX_ACTIVE_CLIENTS, LAZY_CLEANUP_INTERVAL,
    LAZY_FALLBACK_TO_NORMAL, LAZY_INACTIVE_THRESHOLD,
    LAZY_ENABLE_STATS_LOGGING, LAZY_STATS_LOG_INTERVAL
)
from database.db_manager import init_db
from telegram_bot.bot import setup_bot
from utils.scheduler import start_scheduler
from utils.task_queue import start_task_queue  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from utils.system_monitor import start_system_monitoring, stop_system_monitoring

print(f"Python version: {sys.version}")
print(f"Python executable: {sys.executable}")
print(f"Python path: {sys.path}")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format=LOG_FORMAT,
    level=getattr(logging, LOG_LEVEL),
    handlers=[
        logging.FileHandler(LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def error_callback(update, context):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ Telegram"""
    logger.error(f'Update "{update}" caused error "{context.error}"')

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
    with open(TELEGRAM_ERROR_LOG, 'a') as f:
        f.write(f'{datetime.now()} - Update: {update} - Error: {context.error}\n')

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    logger.info("–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á...")
    scheduler_thread = threading.Thread(target=start_scheduler, daemon=True)
    scheduler_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
    logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á...")
    start_task_queue()  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—É—Å–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
    logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
    start_system_monitoring()
    
    # –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    logger.info("–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    from utils.smart_validator_service import get_smart_validator
    smart_validator = get_smart_validator()
    smart_validator.start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Universal Client Adapter (Lazy Loading + –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Universal Client Adapter —Å Lazy Loading...")
    from instagram.client_adapter import init_client_adapter, ClientConfig
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    client_config = ClientConfig(
        use_lazy_loading=True,      # –í–∫–ª—é—á–∞–µ–º Lazy Loading
        lazy_max_active=1000,       # –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–≤–º–µ—Å—Ç–æ 30,000)
        lazy_cleanup_interval=1800, # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        fallback_to_normal=True     # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    )
    init_client_adapter(client_config)
    logger.info("‚úÖ Universal Client Adapter –≥–æ—Ç–æ–≤ (—ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏: ~98%)")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Instagram Client Pool (–¥–ª—è fallback —Ä–µ–∂–∏–º–∞)
    logger.info("üèä‚Äç‚ôÇÔ∏è –ì–æ—Ç–æ–≤–∏–º Instagram Client Pool –¥–ª—è fallback —Ä–µ–∂–∏–º–∞...")
    from instagram.client_pool import init_client_pool
    init_client_pool(
        initial_max_clients=50,      # –£–º–µ–Ω—å—à–∞–µ–º —Ç.–∫. –æ—Å–Ω–æ–≤–Ω–æ–µ - lazy –∫–ª–∏–µ–Ω—Ç—ã
        max_clients_limit=200,       # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è fallback
        adaptive_scaling=True,       # –í–∫–ª—é—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        inactive_threshold=2700,     # 45 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        old_threshold=14400          # 4 —á–∞—Å–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
    )
    logger.info("‚úÖ Instagram Client Pool –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Structured Logging —Å Sampling
    logger.info("üìù –ì–æ—Ç–æ–≤–∏–º Structured Logging –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤...")
    from utils.structured_logger import init_structured_logging, SamplingConfig, SamplingStrategy
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
    configs = {
        "instagram": SamplingConfig(SamplingStrategy.ADAPTIVE, min_level=logging.INFO),
        "telegram": SamplingConfig(SamplingStrategy.TIME_WINDOW, time_window=60, max_logs_per_window=100),
        "performance": SamplingConfig(SamplingStrategy.FREQUENCY, frequency=10),
        "database": SamplingConfig(SamplingStrategy.TIME_WINDOW, time_window=120, max_logs_per_window=50),
        "warmup": SamplingConfig(SamplingStrategy.HASH_BASED, hash_percentage=25),
        "publish": SamplingConfig(SamplingStrategy.FREQUENCY, frequency=5)
    }
    
    init_structured_logging(configs)
    logger.info("‚úÖ Structured Logging –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞...")
    updater = Updater(
        TELEGRAM_TOKEN,
        use_context=True,
        read_timeout=TELEGRAM_READ_TIMEOUT,
        connect_timeout=TELEGRAM_CONNECT_TIMEOUT
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setup_bot(updater.dispatcher)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    updater.dispatcher.add_error_handler(error_callback)

    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        updater.start_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        updater.idle()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        stop_system_monitoring()
        updater.stop()

if __name__ == '__main__':
    main()