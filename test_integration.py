#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Lazy Loading —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

import os
import sys
import time
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database.db_manager import init_db, get_all_accounts

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def test_backward_compatibility():
    """–¢–µ—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    print("\nüîÑ –¢–ï–°–¢ –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò")
    print("=" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        init_db()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Client Adapter
        from instagram.client_adapter import init_client_adapter, ClientConfig
        
        config = ClientConfig(
            use_lazy_loading=True,
            lazy_max_active=50,
            fallback_to_normal=True
        )
        init_client_adapter(config)
        print("‚úÖ Client Adapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é (–¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        print("\nüì± –¢–µ—Å—Ç–∏—Ä—É–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–£–Æ —Ñ—É–Ω–∫—Ü–∏—é get_instagram_client...")
        
        accounts = get_all_accounts()[:3]
        if not accounts:
            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        clients = []
        for account in accounts:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–û –¢–£ –ñ–ï —Ñ—É–Ω–∫—Ü–∏—é —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ
                from instagram.client import get_instagram_client
                
                client = get_instagram_client(account.id)
                clients.append(client)
                
                print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id} (@{account.username})")
                print(f"   –¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞: {type(client).__name__}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∏–º–µ–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã
                assert hasattr(client, 'user_id'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id"
                assert hasattr(client, 'account'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç account"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                account_data = client.account
                print(f"   –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã: {account_data.username}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id}: {e}")
                return False
        
        print(f"\n‚úÖ –í—Å–µ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        from instagram.client import get_instagram_client_stats, is_using_lazy_loading
        
        stats = get_instagram_client_stats()
        is_lazy = is_using_lazy_loading()
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"‚Ä¢ –†–µ–∂–∏–º: {stats.get('mode', 'unknown')}")
        print(f"‚Ä¢ Lazy Loading –∞–∫—Ç–∏–≤–µ–Ω: {is_lazy}")
        print(f"‚Ä¢ Fallback —Ä–µ–∂–∏–º: {stats.get('fallback_mode', False)}")
        
        if is_lazy:
            print(f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ lazy –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats.get('lazy_total_created', 0)}")
            print(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: {stats.get('lazy_currently_active', 0)}")
            print(f"‚Ä¢ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: {stats.get('lazy_memory_saved_mb', 0):.1f} MB")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_mixed_usage():
    """–¢–µ—Å—Ç —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π –∫–æ–¥)"""
    print("\nüîÄ –¢–ï–°–¢ –°–ú–ï–®–ê–ù–ù–û–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    try:
        accounts = get_all_accounts()[:5]
        if len(accounts) < 2:
            print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")
            return False
        
        # –°–ø–æ—Å–æ–± 1: –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å)
        print("üì± –°–ø–æ—Å–æ–± 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–¢–ê–†–£–Æ —Ñ—É–Ω–∫—Ü–∏—é...")
        from instagram.client import get_instagram_client
        
        client1 = get_instagram_client(accounts[0].id)
        print(f"‚úÖ –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {type(client1).__name__} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {accounts[0].id}")
        
        # –°–ø–æ—Å–æ–± 2: –ù–æ–≤—ã–π –∞–¥–∞–ø—Ç–µ—Ä (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        print("üì± –°–ø–æ—Å–æ–± 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–û–í–´–ô –∞–¥–∞–ø—Ç–µ—Ä...")
        from instagram.client_adapter import get_universal_client
        
        client2 = get_universal_client(accounts[1].id)
        print(f"‚úÖ –ù–æ–≤—ã–π –∞–¥–∞–ø—Ç–µ—Ä: {type(client2).__name__} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {accounts[1].id}")
        
        # –°–ø–æ—Å–æ–± 3: –ü—Ä—è–º–æ–π lazy –∫–ª–∏–µ–Ω—Ç
        print("üì± –°–ø–æ—Å–æ–± 3: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ü–†–Ø–ú–û–ô lazy –∫–ª–∏–µ–Ω—Ç...")
        from instagram.lazy_client_factory import get_lazy_client
        
        client3 = get_lazy_client(accounts[2].id)
        print(f"‚úÖ –ü—Ä—è–º–æ–π lazy: {type(client3).__name__} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {accounts[2].id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ
        print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å API...")
        
        for i, client in enumerate([client1, client2, client3], 1):
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–æ–≤—ã–º —Å–≤–æ–π—Å—Ç–≤–∞–º
                account_data = client.account
                print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {i}: –¥–æ—Å—Ç—É–ø –∫ account.username = {account_data.username}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
                assert callable(getattr(client, '_ensure_real_client', None)) or hasattr(client, 'client'), \
                    f"–ö–ª–∏–µ–Ω—Ç {i} –Ω–µ –∏–º–µ–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"
                
            except Exception as e:
                print(f"‚ùå –ö–ª–∏–µ–Ω—Ç {i} –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º: {e}")
                return False
        
        print("‚úÖ –í—Å–µ —Å–ø–æ—Å–æ–±—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_performance_comparison():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 60)
    
    try:
        accounts = get_all_accounts()[:20]
        if len(accounts) < 10:
            print(f"‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            accounts = get_all_accounts()
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ {len(accounts)} –∫–ª–∏–µ–Ω—Ç–æ–≤...")
        
        start_time = time.time()
        created_clients = []
        
        for account in accounts:
            try:
                from instagram.client import get_instagram_client
                client = get_instagram_client(account.id)
                created_clients.append(client)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {account.id}: {e}")
        
        creation_time = time.time() - start_time
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(created_clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ {creation_time:.3f}—Å")
        print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç: {creation_time/len(created_clients)*1000:.1f}–º—Å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏
        from instagram.client import get_instagram_client_stats
        stats = get_instagram_client_stats()
        
        if stats.get('mode') == 'lazy':
            print(f"üíæ –≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏: {stats.get('lazy_memory_saved_mb', 0):.1f} MB")
            print(f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats.get('lazy_currently_active', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_configuration_modes():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –¢–ï–°–¢ –†–ï–ñ–ò–ú–û–í –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
    print("=" * 60)
    
    try:
        from instagram.client_adapter import ClientConfig, init_client_adapter
        
        # –†–µ–∂–∏–º 1: –¢–æ–ª—å–∫–æ Lazy Loading
        print("üîß –†–µ–∂–∏–º 1: –¢–æ–ª—å–∫–æ Lazy Loading (–±–µ–∑ fallback)...")
        config1 = ClientConfig(
            use_lazy_loading=True,
            fallback_to_normal=False,
            lazy_max_active=10
        )
        
        try:
            init_client_adapter(config1)
            print("‚úÖ –†–µ–∂–∏–º 1 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –†–µ–∂–∏–º 1 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        
        # –†–µ–∂–∏–º 2: –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        print("üîß –†–µ–∂–∏–º 2: –¢–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã...")
        config2 = ClientConfig(
            use_lazy_loading=False,
            fallback_to_normal=True
        )
        
        init_client_adapter(config2)
        print("‚úÖ –†–µ–∂–∏–º 2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –†–µ–∂–∏–º 3: –ì–∏–±—Ä–∏–¥–Ω—ã–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π)
        print("üîß –†–µ–∂–∏–º 3: –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º...")
        config3 = ClientConfig(
            use_lazy_loading=True,
            fallback_to_normal=True,
            lazy_max_active=100
        )
        
        init_client_adapter(config3)
        print("‚úÖ –†–µ–∂–∏–º 3 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
        accounts = get_all_accounts()[:2]
        if accounts:
            from instagram.client import get_instagram_client, is_using_lazy_loading
            
            client = get_instagram_client(accounts[0].id)
            is_lazy = is_using_lazy_loading()
            
            print(f"‚úÖ –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç: lazy={is_lazy}, —Ç–∏–ø={type(client).__name__}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò LAZY LOADING")
    print("=" * 70)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ —Ä–∞–±–æ—Ç—É —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º")
    
    tests = [
        ("–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", test_backward_compatibility),
        ("–°–º–µ—à–∞–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ", test_mixed_usage),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_performance_comparison),
        ("–†–µ–∂–∏–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_configuration_modes),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"üèÅ {test_name}: {status}")
        except Exception as e:
            results.append((test_name, False))
            print(f"üèÅ {test_name}: ‚ùå –û–®–ò–ë–ö–ê - {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 70)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test_name}")
    
    print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ Lazy Loading –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        print("\nüí° –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    
    return passed == total


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 