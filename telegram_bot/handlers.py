import logging
import os
from datetime import datetime
from pathlib import Path

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import CallbackContext, ConversationHandler

from config import MEDIA_DIR, ADMIN_USER_IDS
from database.db_manager import (
    add_instagram_account, get_instagram_accounts, get_instagram_account,
    add_proxy, get_proxies, assign_proxy_to_account,
    create_publish_task, delete_instagram_account
)
from .keyboards import (
    get_main_menu_keyboard,
    get_accounts_menu_keyboard, get_tasks_menu_keyboard, 
    get_proxy_menu_keyboard, get_accounts_list_keyboard, 
    get_account_actions_keyboard
)
from utils.proxy_manager import distribute_proxies, check_proxy, check_all_proxies
from instagram.post_manager import PostManager
from instagram.reels_manager import ReelsManager, publish_reels_in_parallel

# –ò–º–ø–æ—Ä—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–∏—Å—Ç–µ–º
from instagram.improved_account_warmer import ImprovedAccountWarmer, warm_account_improved
from instagram.health_monitor import AdvancedHealthMonitor
from instagram.activity_limiter import ActivityLimiter
from instagram.advanced_verification import AdvancedVerificationSystem
from instagram.lifecycle_manager import AccountLifecycleManager
from instagram.predictive_monitor import PredictiveMonitor

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è profile_setup
from profile_setup.name_manager import update_profile_name
from profile_setup.username_manager import update_username
from profile_setup.bio_manager import update_biography, clear_biography
from profile_setup.links_manager import update_profile_links
from profile_setup.avatar_manager import update_profile_picture, remove_profile_picture
from profile_setup.post_manager import upload_photo, upload_video, delete_all_posts
from profile_setup.cleanup_manager import clear_profile

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler - –∏–º–ø–æ—Ä—Ç –∏–∑ states.py
from .states import (
    WAITING_USERNAME, WAITING_PASSWORD, WAITING_ACCOUNT_INFO,
    WAITING_ACCOUNTS_FILE, WAITING_COOKIES_INFO, WAITING_NEW_PASSWORD,
    WAITING_ACCOUNT_SELECTION, WAITING_BIO_OR_AVATAR,
    WAITING_TASK_TYPE, WAITING_MEDIA, WAITING_CAPTION,
    WAITING_SCHEDULE_TIME, WAITING_PROXY_INFO, WAITING_PROFILE_PHOTO
)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data_store = {}

def start_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_USER_IDS:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
    from .keyboards import get_start_keyboard
    update.message.reply_text(
        "ü§ñ –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Instagram.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:",
        reply_markup=get_start_keyboard()
    )

def help_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    help_text = (
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        
        "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:*\n"
        "/accounts - –ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "/add_account - –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç Instagram\n"
        "/list_accounts - –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "/profile_setup - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
        
        "*–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:*\n"
        "/tasks - –ú–µ–Ω—é –∑–∞–¥–∞—á\n"
        "/publish_now - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
        "/schedule_publish - –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n\n"
        
        "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:*\n"
        "/proxy - –ú–µ–Ω—é –ø—Ä–æ–∫—Å–∏\n"
        "/add_proxy - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏\n"
        "/distribute_proxies - –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏\n"
        "/list_proxies - –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏\n\n"
        
        "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
    )
    
    update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

def accounts_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /accounts"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    update.message.reply_text(
        "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Instagram:",
        reply_markup=get_accounts_menu_keyboard()
    )

def tasks_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    update.message.reply_text(
        "–ú–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:",
        reply_markup=get_tasks_menu_keyboard()
    )

def proxy_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /proxy"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    update.message.reply_text(
        "–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏:",
        reply_markup=get_proxy_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–∏—Å—Ç–µ–º
def advanced_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /advanced"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    keyboard = [
        [InlineKeyboardButton("üîç Health Monitor", callback_data="health_monitor")],
        [InlineKeyboardButton("‚ö° Activity Limiter", callback_data="activity_limiter")],
        [InlineKeyboardButton("üöÄ Improved Warmer", callback_data="improved_warmer")],
        [InlineKeyboardButton("üìä System Status", callback_data="system_status")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        "üéõÔ∏è *–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

def health_monitor_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /health_monitor"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    
    try:
        health_monitor = AdvancedHealthMonitor()
        accounts = get_instagram_accounts()
        
        if not accounts:
            update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        report = "üìä *–û—Ç—á–µ—Ç Health Monitor*\n\n"
        
        for account in accounts:
            score = health_monitor.calculate_comprehensive_health_score(account.id)
            recommendations = health_monitor.get_health_recommendations(account.id)
            
            status = "üü¢" if score >= 80 else "üü°" if score >= 60 else "üî¥"
            report += f"{status} *{account.username}*: {score}/100\n"
            
            if recommendations:
                report += f"   üí° {recommendations[0]}\n"
            report += "\n"
        
        update.message.reply_text(report, parse_mode=ParseMode.MARKDOWN)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Health Monitor: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")

def improved_warmer_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /improved_warmer"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    accounts = get_instagram_accounts()
    
    if not accounts:
        update.message.reply_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    keyboard = []
    for account in accounts:
        keyboard.append([InlineKeyboardButton(
            f"üî• {account.username}", 
            callback_data=f"improved_warm_{account.id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="advanced_systems")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        "üöÄ *–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

def system_status_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /system_status"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
        health_monitor = AdvancedHealthMonitor()
        activity_limiter = ActivityLimiter()
        lifecycle_manager = AccountLifecycleManager()
        predictive_monitor = PredictiveMonitor()
        
        accounts = get_instagram_accounts()
        total_accounts = len(accounts)
        
        # Health Monitor Status
        healthy_accounts = 0
        for account in accounts:
            score = health_monitor.calculate_comprehensive_health_score(account.id)
            if score >= 80:
                healthy_accounts += 1
        
        # Activity Limiter Status
        restricted_accounts = 0
        for account in accounts:
            restrictions = activity_limiter.check_current_restrictions(account.id)
            if restrictions:
                restricted_accounts += 1
        
        status_report = (
            f"üìä *–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º*\n\n"
            f"üë• *–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
            f"   –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n\n"
            
            f"üîç *Health Monitor:*\n"
            f"   ‚úÖ –ó–¥–æ—Ä–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {healthy_accounts}/{total_accounts}\n"
            f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è: {int(healthy_accounts/total_accounts*100) if total_accounts > 0 else 0}%\n\n"
            
            f"‚ö° *Activity Limiter:*\n"
            f"   üö´ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏: {restricted_accounts}/{total_accounts}\n"
            f"   ‚úÖ –°–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts - restricted_accounts}\n\n"
            
            f"üîÑ *Lifecycle Manager:*\n"
            f"   üÜï –°—Ç–∞—Ç—É—Å: –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è\n\n"
            
            f"üõ°Ô∏è *Predictive Monitor:*\n"
            f"   üéØ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤: –ê–∫—Ç–∏–≤–Ω–∞\n"
            f"   üìä ML –º–æ–¥–µ–ª—å: –ì–æ—Ç–æ–≤–∞ –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º\n\n"
            
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        update.message.reply_text(status_report, parse_mode=ParseMode.MARKDOWN)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ System Status: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
def add_account_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if context.args is None or len(context.args) == 0:
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω) –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram:"
        )
        return WAITING_USERNAME
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user_id in user_data_store:
        user_data_store[user_id] = {}
    
    if 'instagram_username' not in user_data_store[user_id]:
        user_data_store[user_id]['instagram_username'] = update.message.text
        update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:"
        )
        return WAITING_PASSWORD
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø–∞—Ä–æ–ª—å
    if 'instagram_password' not in user_data_store[user_id]:
        user_data_store[user_id]['instagram_password'] = update.message.text
    
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        username = user_data_store[user_id]['instagram_username']
        password = user_data_store[user_id]['instagram_password']
    
        success, result = add_instagram_account(username, password)
    
        if success:
            update.message.reply_text(
                f"–ê–∫–∫–∞—É–Ω—Ç {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=get_accounts_menu_keyboard()
            )
        else:
            update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {result}",
                reply_markup=get_accounts_menu_keyboard()
            )
    
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del user_data_store[user_id]
    
        return ConversationHandler.END

def list_accounts_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    accounts = get_instagram_accounts()
    
    if not accounts:
        update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_account",
            reply_markup=get_accounts_menu_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    keyboard = get_accounts_list_keyboard(accounts)
    
    update.message.reply_text(
        "–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram:",
        reply_markup=keyboard
    )

def profile_setup_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è Instagram"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if context.args is None or len(context.args) == 0:
        accounts = get_instagram_accounts()
    
        if not accounts:
            update.message.reply_text(
                "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_account",
                reply_markup=get_accounts_menu_keyboard()
            )
            return ConversationHandler.END
    
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        keyboard = []
        for account in accounts:
            keyboard.append([InlineKeyboardButton(account.username, callback_data=f"profile_setup_{account.id}")])
    
        reply_markup = InlineKeyboardMarkup(keyboard)
    
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:",
            reply_markup=reply_markup
        )
    
        return WAITING_ACCOUNT_SELECTION
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞–∫–∫–∞—É–Ω—Ç (—á–µ—Ä–µ–∑ callback_handler)
    if 'selected_account_id' in user_data_store.get(user_id, {}):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è)
        if update.message.text:
            user_data_store[user_id]['profile_bio'] = update.message.text
    
            update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –∞–≤–∞—Ç–∞—Ä:"
            )
    
            return WAITING_BIO_OR_AVATAR
    
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ (–∞–≤–∞—Ç–∞—Ä)
        if update.message.photo:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            photo_file = update.message.photo[-1].get_file()
    
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            avatar_dir = Path(MEDIA_DIR) / "avatars"
            os.makedirs(avatar_dir, exist_ok=True)
    
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            avatar_path = avatar_dir / f"avatar_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            photo_file.download(avatar_path)
    
            user_data_store[user_id]['avatar_path'] = str(avatar_path)
    
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            account_id = user_data_store[user_id]['selected_account_id']
            bio = user_data_store[user_id].get('profile_bio')
    
            success, task_id = create_publish_task(
                account_id=account_id,
                task_type='profile',
                media_path=str(avatar_path),
                caption=bio
            )
    
            if success:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                account = get_instagram_account(account_id)
    
                update.message.reply_text(
                    f"–ó–∞–¥–∞—á–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è {account.username} —Å–æ–∑–¥–∞–Ω–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
                )
    
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
                from database.db_manager import get_pending_tasks
                tasks = get_pending_tasks()
                for task in tasks:
                    if task.id == task_id:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–æ ProfileManager
                        success = True
                        error = None
                        
                        if task.media_path:
                            success, error = update_profile_picture(account_id, task.media_path)
                        
                        if task.caption:
                            bio_success, bio_error = update_biography(account_id, task.caption)
                            if not success:  # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å –∏–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
                                success, error = bio_success, bio_error
    
                        if success:
                            update.message.reply_text(
                                f"–ü—Ä–æ—Ñ–∏–ª—å {account.username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                                reply_markup=get_accounts_menu_keyboard()
                            )
                        else:
                            update.message.reply_text(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {error}",
                                reply_markup=get_accounts_menu_keyboard()
                            )
    
                        break
            else:
                update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_id}",
                    reply_markup=get_accounts_menu_keyboard()
                )
    
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_data_store[user_id]
    
            return ConversationHandler.END
    
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
        if update.message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–æ
            account_id = user_data_store[user_id]['selected_account_id']
            bio = user_data_store[user_id].get('profile_bio')
    
            success, task_id = create_publish_task(
                account_id=account_id,
                task_type='profile',
                caption=bio
            )
    
            if success:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                account = get_instagram_account(account_id)
    
                update.message.reply_text(
                    f"–ó–∞–¥–∞—á–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è {account.username} —Å–æ–∑–¥–∞–Ω–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
                )
    
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
                from database.db_manager import get_pending_tasks
                tasks = get_pending_tasks()
                for task in tasks:
                    if task.id == task_id:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ ProfileManager
                        success, error = update_biography(account_id, bio)
    
                        if success:
                            update.message.reply_text(
                                f"–ü—Ä–æ—Ñ–∏–ª—å {account.username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                                reply_markup=get_accounts_menu_keyboard()
                            )
                        else:
                            update.message.reply_text(
                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {error}",
                                reply_markup=get_accounts_menu_keyboard()
                            )
    
                        break
            else:
                update.message.reply_text(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_id}",
                    reply_markup=get_accounts_menu_keyboard()
                )
    
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_data_store[user_id]
    
            return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
def publish_now_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if context.args is None or len(context.args) == 0:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("Reels (–≤–∏–¥–µ–æ)", callback_data="publish_type_reel")],
            [InlineKeyboardButton("–§–æ—Ç–æ", callback_data="publish_type_post")],
            [InlineKeyboardButton("–ú–æ–∑–∞–∏–∫–∞ (6 —á–∞—Å—Ç–µ–π)", callback_data="publish_type_mosaic")]
        ]
    
        reply_markup = InlineKeyboardMarkup(keyboard)
    
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )
    
        return WAITING_TASK_TYPE
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ callback_handler)
    if 'publish_type' in user_data_store.get(user_id, {}):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª –∞–∫–∫–∞—É–Ω—Ç
        if 'selected_account_id' not in user_data_store[user_id]:
            accounts = get_instagram_accounts()
    
            if not accounts:
                update.message.reply_text(
                    "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_account",
                    reply_markup=get_tasks_menu_keyboard()
                )
                return ConversationHandler.END
    
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
            keyboard = []
            for account in accounts:
                keyboard.append([InlineKeyboardButton(account.username, callback_data=f"publish_account_{account.id}")])
    
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è Reels
            if user_data_store[user_id]['publish_type'] == 'reel':
                keyboard.append([InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="publish_account_all")])
    
            reply_markup = InlineKeyboardMarkup(keyboard)
    
            update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=reply_markup
            )
    
            return WAITING_ACCOUNT_SELECTION
    
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–¥–∏–∞—Ñ–∞–π–ª
        if 'media_path' not in user_data_store[user_id]:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ
            if update.message.photo and user_data_store[user_id]['publish_type'] in ['post', 'mosaic']:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
                photo_file = update.message.photo[-1].get_file()
    
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                photo_dir = Path(MEDIA_DIR) / "photos"
                os.makedirs(photo_dir, exist_ok=True)
    
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                photo_path = photo_dir / f"photo_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
                photo_file.download(photo_path)
    
                user_data_store[user_id]['media_path'] = str(photo_path)
    
                update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è):"
                )
    
                return WAITING_CAPTION
    
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ
            elif (update.message.video or update.message.document) and user_data_store[user_id]['publish_type'] == 'reel':
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
                if update.message.video:
                    video_file = update.message.video.get_file()
                    file_name = f"video_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4"
                else:
                    video_file = update.message.document.get_file()
                    file_name = update.message.document.file_name
    
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                video_dir = Path(MEDIA_DIR) / "videos"
                os.makedirs(video_dir, exist_ok=True)
    
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                video_path = video_dir / file_name
                video_file.download(video_path)
    
                user_data_store[user_id]['media_path'] = str(video_path)
    
                update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è):"
                )
    
                return WAITING_CAPTION
    
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø —Ñ–∞–π–ª–∞
            else:
                update.message.reply_text(
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {'—Ñ–æ—Ç–æ' if user_data_store[user_id]['publish_type'] in ['post', 'mosaic'] else '–≤–∏–¥–µ–æ'} –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
                )
                return WAITING_MEDIA
    
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –æ–ø–∏—Å–∞–Ω–∏–µ
        if 'caption' not in user_data_store[user_id]:
            if update.message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                user_data_store[user_id]['caption'] = ""
            else:
                user_data_store[user_id]['caption'] = update.message.text
    
            # –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            publish_type = user_data_store[user_id]['publish_type']
            media_path = user_data_store[user_id]['media_path']
            caption = user_data_store[user_id]['caption']
    
            # –ï—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            if user_data_store[user_id].get('selected_account_id') == 'all':
                if publish_type == 'reel':
                    update.message.reply_text(
                        "–ù–∞—á–∏–Ω–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é Reels –≤–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã..."
                    )
    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                    accounts = get_instagram_accounts()
                    account_ids = [account.id for account in accounts]
    
                    # –ü—É–±–ª–∏–∫—É–µ–º Reels –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                    results = publish_reels_in_parallel(media_path, caption, account_ids)
    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                    report = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels:\n\n"
                    for account_id, result in results.items():
                        account = get_instagram_account(account_id)
                        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if result['success'] else f"‚ùå –û—à–∏–±–∫–∞: {result['result']}"
                        report += f"{account.username}: {status}\n"
    
                    update.message.reply_text(
                        report,
                        reply_markup=get_tasks_menu_keyboard()
                    )
            else:
                # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç
                account_id = user_data_store[user_id]['selected_account_id']
    
                success, task_id = create_publish_task(
                    account_id=account_id,
                    task_type=publish_type,
                    media_path=media_path,
                    caption=caption
                )
    
                if success:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                    account = get_instagram_account(account_id)
    
                    update.message.reply_text(
                        f"–ó–∞–¥–∞—á–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –∞–∫–∫–∞—É–Ω—Ç {account.username} —Å–æ–∑–¥–∞–Ω–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è..."
                    )
    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
                    from database.db_manager import get_pending_tasks
                    tasks = get_pending_tasks()
    
                    for task in tasks:
                        if task.id == task_id:
                            if publish_type == 'reel':
                                manager = ReelsManager(account_id)
                                success, error = manager.execute_reel_task(task)
                            else:  # 'post' –∏–ª–∏ 'mosaic'
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ PostManager
                                if publish_type == 'post':
                                    success, error = upload_photo(account_id, media_path, caption)
                                else:  # 'mosaic'
                                    manager = PostManager(account_id)
                                    success, error = manager.execute_post_task(task)
    
                            if success:
                                update.message.reply_text(
                                    f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç {account.username} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
                                    reply_markup=get_tasks_menu_keyboard()
                                )
                            else:
                                update.message.reply_text(
                                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {error}",
                                    reply_markup=get_tasks_menu_keyboard()
                                )
    
                            break
                else:
                    update.message.reply_text(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_id}",
                        reply_markup=get_tasks_menu_keyboard()
                    )
    
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_data_store[user_id]
    
            return ConversationHandler.END

def schedule_publish_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ publish_now_handler, –Ω–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —à–∞–≥–æ–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–æ—Ö–æ–∂–∞, –Ω–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Å–∏
def add_proxy_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if context.args is None or len(context.args) == 0:
        update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ø—Ä–æ—Ç–æ–∫–æ–ª://–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å@—Ö–æ—Å—Ç:–ø–æ—Ä—Ç\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: http://user:pass@1.2.3.4:8080\n"
            "–ò–ª–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: http://1.2.3.4:8080"
        )
        return WAITING_PROXY_INFO
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    proxy_info = update.message.text
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    try:
        # –†–∞–∑–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
        protocol, rest = proxy_info.split('://', 1)
    
        # –†–∞–∑–±–∏—Ä–∞–µ–º –ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å@—Ö–æ—Å—Ç:–ø–æ—Ä—Ç –∏–ª–∏ —Ö–æ—Å—Ç:–ø–æ—Ä—Ç
        if '@' in rest:
            auth, host_port = rest.split('@', 1)
            username, password = auth.split(':', 1)
        else:
            host_port = rest
            username = None
            password = None
    
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ö–æ—Å—Ç:–ø–æ—Ä—Ç
        host, port = host_port.split(':', 1)
        port = int(port)
    
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success, result = add_proxy(host, port, username, password, protocol)
    
        if success:
            update.message.reply_text(
                f"–ü—Ä–æ–∫—Å–∏ {host}:{port} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=get_proxy_menu_keyboard()
            )
        else:
            update.message.reply_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {result}",
                reply_markup=get_proxy_menu_keyboard()
            )
    except Exception as e:
        update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏: {e}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_proxy_menu_keyboard()
        )
    
    return ConversationHandler.END

def distribute_proxies_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    update.message.reply_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º...")
    
    success, message = distribute_proxies()
    
    if success:
        update.message.reply_text(
            f"–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: {message}",
            reply_markup=get_proxy_menu_keyboard()
        )
    else:
        update.message.reply_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {message}",
            reply_markup=get_proxy_menu_keyboard()
        )

def list_proxies_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏"""
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_USER_IDS:
        return
    
    proxies = get_proxies()
    
    if not proxies:
        update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_proxy",
            reply_markup=get_proxy_menu_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏
    proxy_list = "–°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏:\n\n"
    
    for proxy in proxies:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if proxy.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        last_checked = proxy.last_checked.strftime("%d.%m.%Y %H:%M") if proxy.last_checked else "–ù–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è"
    
        proxy_list += f"ID: {proxy.id}\n"
        proxy_list += f"–ê–¥—Ä–µ—Å: {proxy.protocol}://{proxy.host}:{proxy.port}\n"
        if proxy.username and proxy.password:
            proxy_list += f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {proxy.username}:{'*' * len(proxy.password)}\n"
        proxy_list += f"–°—Ç–∞—Ç—É—Å: {status}\n"
        proxy_list += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_checked}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏", callback_data="check_all_proxies")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        proxy_list,
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
def photo_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
    user_id = update.effective_user.id

    if user_id not in ADMIN_USER_IDS:
        return

    update.message.reply_text(
        "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ß—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ—ë, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /publish_now",
        reply_markup=get_main_menu_keyboard()
    )

def video_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ"""
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
    user_id = update.effective_user.id

    if user_id not in ADMIN_USER_IDS:
        return

    update.message.reply_text(
        "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∏–¥–µ–æ. –ß—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ–≥–æ –≤ Reels, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /publish_now",
        reply_markup=get_main_menu_keyboard()
    )

def text_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
    user_id = update.effective_user.id

    if user_id not in ADMIN_USER_IDS:
        return

    update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.",
        reply_markup=get_main_menu_keyboard()
    )

def callback_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in ADMIN_USER_IDS:
        query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    data = query.data

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not user_id in user_data_store:
        user_data_store[user_id] = {}

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é
    if data == "main_menu":
        from .keyboards import get_main_menu_keyboard
        query.edit_message_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_main_menu_keyboard()
        )
    
    elif data == "menu_publications":
        from .keyboards import get_publications_menu_keyboard
        query.edit_message_text(
            "üì§ *–ú–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=get_publications_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == "menu_scheduled":
        from .keyboards import get_scheduled_menu_keyboard
        query.edit_message_text(
            "üóìÔ∏è *–ú–µ–Ω—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=get_scheduled_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == "menu_warmup":
        from .keyboards import get_warmup_menu_keyboard
        query.edit_message_text(
            "üî• *–ú–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_warmup_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == "menu_statistics":
        from .keyboards import get_statistics_menu_keyboard
        query.edit_message_text(
            "üìä *–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_statistics_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == "menu_settings":
        from .keyboards import get_settings_menu_keyboard
        query.edit_message_text(
            "‚öôÔ∏è *–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_settings_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == "menu_accounts":
        from .keyboards import get_accounts_menu_keyboard
        query.edit_message_text(
            "üë§ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_accounts_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif data == "tasks_menu":
        query.edit_message_text(
            "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_tasks_menu_keyboard()
        )

    # –î–µ–π—Å—Ç–≤–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    elif data == "add_account":
        query.edit_message_text(
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "username:password:email:email_password\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: myaccount:mypass123:my@email.com:emailpass"
        )
        return WAITING_ACCOUNT_INFO

    elif data == "bulk_add_accounts":
        query.edit_message_text(
            "üì• –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "username:password:email:email_password\n"
            "(–ø–æ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)"
        )
        return WAITING_ACCOUNTS_FILE

    elif data == "add_account_cookie":
        query.edit_message_text(
            "üç™ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ cookies\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª cookies –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ cookies"
        )
        return WAITING_COOKIES_INFO

    elif data == "list_accounts":
        accounts = get_instagram_accounts()
        if not accounts:
            query.edit_message_text(
                "üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'",
                reply_markup=get_accounts_menu_keyboard()
            )
        else:
            query.edit_message_text(
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
                reply_markup=get_accounts_list_keyboard(accounts)
            )

    elif data == "upload_accounts":
        query.edit_message_text(
            "üì§ –í—ã–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
            "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=get_accounts_menu_keyboard()
        )

    elif data == "profile_setup":
        accounts = get_instagram_accounts()
        if not accounts:
            query.edit_message_text(
                "‚öôÔ∏è –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π",
                reply_markup=get_accounts_menu_keyboard()
            )
        else:
            keyboard = []
            for account in accounts:
                keyboard.append([InlineKeyboardButton(
                    f"{account.username} {'‚úÖ' if account.is_active else '‚ùå'}",
                    callback_data=f"profile_setup_{account.id}"
                )])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_accounts")])
            
            query.edit_message_text(
                "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    elif data == "folders_menu":
        from .keyboards import get_folders_menu_keyboard
        query.edit_message_text(
            "üìÅ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_folders_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )


    
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
    elif data == "scheduled_posts":
        from .keyboards import get_publications_menu_keyboard
        query.edit_message_text("üóìÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_publications_menu_keyboard())
    
    elif data == "publication_history":
        from .keyboards import get_publications_menu_keyboard
        query.edit_message_text("üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_publications_menu_keyboard())
    
    elif data == "warmup_analytics":
        from .keyboards import get_warmup_menu_keyboard
        query.edit_message_text("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_warmup_menu_keyboard())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    elif data == "general_stats":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—â—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        from .handlers.analytics_handlers import start_general_analytics
        start_general_analytics(update, context)
    
    elif data == "accounts_stats":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        from .handlers.analytics_handlers import start_accounts_analytics
        start_accounts_analytics(update, context)
    
    elif data == "publications_stats":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å –≤—ã–±–æ—Ä–æ–º –∞–∫–∫–∞—É–Ω—Ç–∞
        from .handlers.analytics_handlers import start_publications_analytics
        start_publications_analytics(update, context)
    
    elif data == "warmup_stats":
        from .keyboards import get_statistics_menu_keyboard
        query.edit_message_text("üî• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–µ–≤—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_statistics_menu_keyboard())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    elif data in ["analytics_recent_posts", "analytics_top_likes", "analytics_top_comments", "analytics_detailed", "analytics_stories"]:
        from .handlers.analytics_handlers import handle_analytics_action
        handle_analytics_action(update, context, data)
    
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Advanced Warmup 2.0
    elif data == "smart_warm_menu":
        from telegram_bot.handlers.automation_handlers import smart_warm_command
        smart_warm_command(update, context)
    
    elif data == "status":
        from telegram_bot.handlers.automation_handlers import status_command
        status_command(update, context)
    
    elif data == "limits":
        from telegram_bot.handlers.automation_handlers import limits_command
        limits_command(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    elif data == "general_settings":
        from .keyboards import get_settings_menu_keyboard
        query.edit_message_text("üîß –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_settings_menu_keyboard())
    
    elif data == "schedule_settings":
        from .keyboards import get_settings_menu_keyboard
        query.edit_message_text("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_settings_menu_keyboard())
    
    elif data == "notifications_settings":
        from .keyboards import get_settings_menu_keyboard
        query.edit_message_text("üö® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_settings_menu_keyboard())
    
    elif data == "security_settings":
        from .keyboards import get_settings_menu_keyboard
        query.edit_message_text("üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_settings_menu_keyboard())
    
    elif data == "backup_settings":
        from .keyboards import get_settings_menu_keyboard
        query.edit_message_text("üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_settings_menu_keyboard())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∏–ø–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    elif data == "publish_post":
        # –í—ã–±–∏—Ä–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        from .keyboards import get_publications_menu_keyboard
        accounts = get_instagram_accounts()
        if not accounts:
            query.edit_message_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                reply_markup=get_publications_menu_keyboard()
            )
        else:
            keyboard = []
            for account in accounts:
                keyboard.append([InlineKeyboardButton(
                    f"{'‚úÖ' if account.is_active else '‚ùå'} {account.username}",
                    callback_data=f"post_to_{account.id}"
                )])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="publish_type")])
            query.edit_message_text(
                "üì∏ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    elif data == "publish_story":
        from .keyboards import get_publications_menu_keyboard
        query.edit_message_text("üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_publications_menu_keyboard())
    
    elif data == "publish_igtv":
        from .keyboards import get_publications_menu_keyboard
        query.edit_message_text("üé¨ –ü—É–±–ª–∏–∫–∞—Ü–∏—è IGTV –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_publications_menu_keyboard())
    
    elif data == "publish_igtv_blocked":
        from .keyboards import get_publications_menu_keyboard
        query.edit_message_text(
            "üîí *IGTV –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n"
            "üöß –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.\n\n"
            "üì± –ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "‚Ä¢ üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤\n"
            "‚Ä¢ üì± –ò—Å—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ üé• Reels\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôè",
            reply_markup=get_publications_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    elif data == "publish_reels":
        # –í—ã–±–∏—Ä–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels
        from .keyboards import get_publications_menu_keyboard
        accounts = get_instagram_accounts()
        if not accounts:
            query.edit_message_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                reply_markup=get_publications_menu_keyboard()
            )
        else:
            keyboard = []
            for account in accounts:
                keyboard.append([InlineKeyboardButton(
                    f"{'‚úÖ' if account.is_active else '‚ùå'} {account.username}",
                    callback_data=f"reel_to_{account.id}"
                )])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="publish_type")])
            query.edit_message_text(
                "üé• –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    elif data == "set_limits":
        from .keyboards import get_publications_menu_keyboard
        query.edit_message_text("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_publications_menu_keyboard())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞
    elif data == "quick_warmup":
        from .keyboards import get_warmup_mode_keyboard
        query.edit_message_text("‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_warmup_mode_keyboard())
    
    elif data == "smart_warmup":
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É Advanced Warmup 2.0
        from telegram_bot.handlers.automation_handlers import smart_warm_command
        smart_warm_command(update, context)
    
    elif data == "warmup_status":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        from .keyboards import get_warmup_mode_keyboard
        query.edit_message_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞...")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞
        query.edit_message_text("üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ–≤–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_warmup_mode_keyboard())
    
    elif data == "warmup_settings":
        from .keyboards import get_warmup_mode_keyboard
        query.edit_message_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_warmup_mode_keyboard())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    elif data == "active_tasks":
        from .keyboards import get_tasks_by_status_keyboard
        query.edit_message_text("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_tasks_by_status_keyboard())
    
    elif data == "paused_tasks":
        from .keyboards import get_tasks_by_status_keyboard
        query.edit_message_text("‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_tasks_by_status_keyboard())
    
    elif data == "completed_tasks":
        from .keyboards import get_tasks_by_status_keyboard
        query.edit_message_text("‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_tasks_by_status_keyboard())
    
    elif data == "error_tasks":
        from .keyboards import get_tasks_by_status_keyboard
        query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∏ —Å –æ—à–∏–±–∫–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_tasks_by_status_keyboard())
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    elif data == "accounts_statistics":
        accounts = get_instagram_accounts()
        active_count = sum(1 for acc in accounts if acc.is_active)
        inactive_count = len(accounts) - active_count
        
        stats_text = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n\n"
            f"üë• –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
            f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_count}\n"
        )
        
        from .keyboards import get_messages_actions_keyboard
        query.edit_message_text(
            stats_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_messages_actions_keyboard()
            )

    # –ó–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    elif data == "publish_now":
        query.edit_message_text(
            "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=get_publish_type_keyboard()
        )

    elif data == "schedule_publish":
        query.edit_message_text(
            "‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n\n"
            "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=get_tasks_menu_keyboard()
        )

    # –ü—Ä–æ–∫—Å–∏
    elif data == "add_proxy":
        query.edit_message_text(
            "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ø—Ä–æ—Ç–æ–∫–æ–ª://–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å@—Ö–æ—Å—Ç:–ø–æ—Ä—Ç\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: http://user:pass@1.2.3.4:8080"
        )
        return WAITING_PROXY_INFO

    elif data == "distribute_proxies":
        query.edit_message_text("üîÑ –†–∞—Å–ø—Ä–µ–¥–µ–ª—è—é –ø—Ä–æ–∫—Å–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º...")
        success, message = distribute_proxies()
        
        if success:
            query.edit_message_text(
                f"‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã:\n{message}",
                reply_markup=get_proxy_menu_keyboard()
            )
        else:
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏:\n{message}",
                reply_markup=get_proxy_menu_keyboard()
            )

    elif data == "list_proxies" or data.startswith("list_proxies_page_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page = 1
        if data.startswith("list_proxies_page_"):
            try:
                page = int(data.split("_")[-1])
            except (ValueError, IndexError):
                page = 1
        
        proxies = get_proxies()
        if not proxies:
            query.edit_message_text(
                "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏'",
                reply_markup=get_proxy_menu_keyboard()
            )
        else:
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 10 –ø—Ä–æ–∫—Å–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            proxies_per_page = 10
            total_pages = (len(proxies) + proxies_per_page - 1) // proxies_per_page
            start_idx = (page - 1) * proxies_per_page
            end_idx = start_idx + proxies_per_page
            page_proxies = proxies[start_idx:end_idx]
            
            proxy_list = f"üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):\n\n"
            for proxy in page_proxies:
                status = "‚úÖ" if proxy.is_active else "‚ùå"
                auth_info = " üîê" if proxy.username else ""
                proxy_list += f"{status} {proxy.protocol}://{proxy.host}:{proxy.port}{auth_info}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            nav_buttons = []
            if page > 1:
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥", callback_data=f"list_proxies_page_{page-1}"))
            if page < total_pages:
                nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥ ‚û°Ô∏è", callback_data=f"list_proxies_page_{page+1}"))
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard.append([InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ", callback_data="check_all_proxies")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="proxy_menu")])
            
            query.edit_message_text(
                proxy_list,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

    # –î–µ—Ç–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    elif data.startswith("account_"):
        try:
            account_id = int(data.replace("account_", ""))
            account = get_instagram_account(account_id)
            
            if account:
                account_info = (
                    f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {account.username}\n"
                    f"üìß Email: {account.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if account.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                    f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {account.created_at.strftime('%d.%m.%Y %H:%M')}"
                )
                
                query.edit_message_text(
                    account_info,
                    reply_markup=get_account_actions_keyboard(account_id)
                )
            else:
                query.edit_message_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_accounts_menu_keyboard()
                )
        except ValueError:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                reply_markup=get_accounts_menu_keyboard()
            )

    # –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
    elif data.startswith("publish_to_"):
        try:
            account_id = int(data.replace("publish_to_", ""))
            user_data_store[user_id]['selected_account_id'] = account_id
            
            query.edit_message_text(
                "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=get_publish_type_keyboard()
            )
        except ValueError:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                reply_markup=get_accounts_menu_keyboard()
            )

    elif data.startswith("change_password_"):
        try:
            account_id = int(data.replace("change_password_", ""))
            user_data_store[user_id]['selected_account_id'] = account_id
            
            query.edit_message_text(
                "üîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:"
            )
            return WAITING_NEW_PASSWORD
        except ValueError:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                reply_markup=get_accounts_menu_keyboard()
            )

    elif data.startswith("assign_proxy_"):
        try:
            account_id = int(data.replace("assign_proxy_", ""))
            proxies = get_proxies()
            
            if not proxies:
                query.edit_message_text(
                    "üåê –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º",
                    reply_markup=get_account_actions_keyboard(account_id)
                )
            else:
                keyboard = []
                for proxy in proxies:
                    status = "‚úÖ" if proxy.is_active else "‚ùå"
                    keyboard.append([InlineKeyboardButton(
                        f"{status} {proxy.host}:{proxy.port}",
                        callback_data=f"set_proxy_{account_id}_{proxy.id}"
                    )])
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"account_{account_id}")])
                
                query.edit_message_text(
                    "üåê –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        except ValueError:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                reply_markup=get_accounts_menu_keyboard()
            )

    elif data.startswith("delete_account_"):
        try:
            account_id = int(data.replace("delete_account_", ""))
            account = get_instagram_account(account_id)
            
            if account:
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{account_id}")],
                    [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"account_{account_id}")]
                ]
                
                query.edit_message_text(
                    f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account.username}?\n\n"
                    "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                query.edit_message_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_accounts_menu_keyboard()
                )
        except ValueError:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                reply_markup=get_accounts_menu_keyboard()
            )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    elif data.startswith("confirm_delete_"):
        try:
            account_id = int(data.replace("confirm_delete_", ""))
            account = get_instagram_account(account_id)
            
            if account:
                username = account.username
                success = delete_instagram_account(account_id)
                
                if success:
                    query.edit_message_text(
                        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                        reply_markup=get_accounts_menu_keyboard()
                    )
                else:
                    query.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {username}",
                        reply_markup=get_accounts_menu_keyboard()
                    )
            else:
                query.edit_message_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_accounts_menu_keyboard()
                )
        except ValueError:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                reply_markup=get_accounts_menu_keyboard()
            )

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
    elif data.startswith("set_proxy_"):
        try:
            parts = data.replace("set_proxy_", "").split("_")
            account_id = int(parts[0])
            proxy_id = int(parts[1])
            
            success = assign_proxy_to_account(account_id, proxy_id)
            account = get_instagram_account(account_id)
            proxy = next((p for p in get_proxies() if p.id == proxy_id), None)
            
            if success and account and proxy:
                query.edit_message_text(
                    f"‚úÖ –ü—Ä–æ–∫—Å–∏ {proxy.host}:{proxy.port} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç—É {account.username}",
                    reply_markup=get_account_actions_keyboard(account_id)
                )
            else:
                query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏",
                    reply_markup=get_account_actions_keyboard(account_id)
                )
        except (ValueError, IndexError):
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=get_accounts_menu_keyboard()
            )

    # –ú–µ–Ω—é –ø—Ä–æ–∫—Å–∏
    elif data == "proxy_menu":
        query.edit_message_text(
            "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_proxy_menu_keyboard()
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö callback_data –∏–∑ bot.py

    elif data == "menu_accounts":
        query.edit_message_text(
            "üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_accounts_menu_keyboard()
        )

    elif data == "menu_tasks":
        query.edit_message_text(
            "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_tasks_menu_keyboard()
        )

    elif data == "menu_proxy":
        query.edit_message_text(
            "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_proxy_menu_keyboard()
        )

    elif data == "menu_help":
        help_text = (
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            
            "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:*\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç Instagram\n"
            "‚Ä¢ –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
            
            "*–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:*\n"
            "‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å\n"
            "‚Ä¢ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n\n"
            
            "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:*\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏\n"
            "‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏\n"
            "‚Ä¢ –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏\n\n"
            
            "*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
        )
        
        from telegram import InlineKeyboardMarkup, InlineKeyboardButton
        back_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        query.edit_message_text(
            help_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=back_keyboard
        )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ callback_data –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è
    elif data == "publication_stats":
        query.edit_message_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
            "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_tasks")]
            ])
        )

    elif data == "check_proxies":
        query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–æ–∫—Å–∏...")
        results = check_all_proxies()
        
        report = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏:\n\n"
        for proxy_id, result in results.items():
            proxy = next((p for p in get_proxies() if p.id == proxy_id), None)
            if proxy:
                status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if result['working'] else f"‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result['error']}"
                report += f"ID: {proxy.id}, {proxy.host}:{proxy.port} - {status}\n"
        
        query.edit_message_text(
            report,
            reply_markup=get_proxy_menu_keyboard()
        )

    elif data == "import_proxies":
        query.edit_message_text(
            "üì§ –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏\n\n"
            "–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=get_proxy_menu_keyboard()
        )

    # –û—Ç–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    elif data == "cancel_publish":
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in user_data_store:
            del user_data_store[user_id]
        
        query.edit_message_text(
            "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_tasks_menu_keyboard()
        )

    # –î–µ—Ç–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    elif data.startswith("account_details_"):
        try:
            account_id = int(data.replace("account_details_", ""))
            account = get_instagram_account(account_id)
            
            if account:
                account_info = (
                    f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {account.username}\n"
                    f"üìß Email: {account.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if account.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                    f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {account.created_at.strftime('%d.%m.%Y %H:%M')}"
                )
                
                query.edit_message_text(
                    account_info,
                    reply_markup=get_account_actions_keyboard(account_id)
                )
            else:
                query.edit_message_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_accounts_menu_keyboard()
                )
        except ValueError:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                reply_markup=get_accounts_menu_keyboard()
            )

    # –ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
    elif data.startswith("profile_account_"):
        try:
            account_id = int(data.replace("profile_account_", ""))
            account = get_instagram_account(account_id)
            
            if account:
                from telegram import InlineKeyboardMarkup, InlineKeyboardButton
                keyboard = [
                    [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_name_{account_id}")],
                    [InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å username", callback_data=f"edit_username_{account_id}")],
                    [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_bio_{account_id}")],
                    [InlineKeyboardButton("üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photo_{account_id}")],
                    [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç—ã", callback_data="profile_delete_posts")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"account_{account_id}")]
                ]
                
                query.edit_message_text(
                    f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è {account.username}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                query.edit_message_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_accounts_menu_keyboard()
                )
        except ValueError:
                         query.edit_message_text(
                 "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                 reply_markup=get_accounts_menu_keyboard()
             )

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è
    elif data.startswith("edit_name_"):
        try:
            account_id = int(data.replace("edit_name_", ""))
            user_data_store[user_id]['editing_profile'] = {'account_id': account_id, 'field': 'name'}
            
            query.edit_message_text(
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è:"
            )
            return WAITING_ACCOUNT_INFO
        except ValueError:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                reply_markup=get_accounts_menu_keyboard()
            )

    elif data.startswith("edit_username_"):
        try:
            account_id = int(data.replace("edit_username_", ""))
            user_data_store[user_id]['editing_profile'] = {'account_id': account_id, 'field': 'username'}
            
            query.edit_message_text(
                "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π username (–±–µ–∑ @):"
            )
            return WAITING_ACCOUNT_INFO
        except ValueError:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                reply_markup=get_accounts_menu_keyboard()
            )

    elif data.startswith("edit_bio_"):
        try:
            account_id = int(data.replace("edit_bio_", ""))
            user_data_store[user_id]['editing_profile'] = {'account_id': account_id, 'field': 'bio'}
            
            query.edit_message_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:"
            )
            return WAITING_ACCOUNT_INFO
        except ValueError:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                reply_markup=get_accounts_menu_keyboard()
            )

    elif data.startswith("edit_photo_"):
        try:
            account_id = int(data.replace("edit_photo_", ""))
            user_data_store[user_id]['editing_profile'] = {'account_id': account_id, 'field': 'photo'}
            
            query.edit_message_text(
                "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:"
            )
            return WAITING_PROFILE_PHOTO
        except ValueError:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞",
                reply_markup=get_accounts_menu_keyboard()
            )

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    elif data.startswith("publish_type_"):
        publish_type = data.replace("publish_type_", "")
        user_data_store[user_id]['publish_type'] = publish_type

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
        accounts = get_instagram_accounts()

        if not accounts:
            query.edit_message_text(
                "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_account"
            )
            return ConversationHandler.END

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        keyboard = []
        for account in accounts:
            keyboard.append([InlineKeyboardButton(account.username, callback_data=f"publish_account_{account.id}")])

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è Reels
        if publish_type == 'reel':
            keyboard.append([InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–æ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="publish_account_all")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            text=f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {publish_type}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:",
            reply_markup=reply_markup
        )

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    elif data.startswith("publish_account_"):
        account_id = data.replace("publish_account_", "")
        user_data_store[user_id]['selected_account_id'] = account_id

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
        if user_data_store[user_id]['publish_type'] in ['post', 'mosaic']:
            query.edit_message_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
            )
        else:  # 'reel'
            query.edit_message_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Reels:"
            )

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    elif data.startswith("profile_setup_"):
        account_id = data.replace("profile_setup_", "")
        user_data_store[user_id]['selected_account_id'] = account_id

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ):"
        )

    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
    elif data == "profile_delete_posts":
        account_id = user_data_store[user_id].get('selected_account_id')
        if account_id:
            query.edit_message_text("‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤...")
            success, result = delete_all_posts(account_id)
            if success:
                query.edit_message_text(
                    "‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"profile_account_{account_id}")]
                    ])
                )
            else:
                query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {result}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"profile_account_{account_id}")]
                    ])
                )

    # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    elif data == "profile_delete_bio":
        account_id = user_data_store[user_id].get('selected_account_id')
        if account_id:
            query.edit_message_text("‚è≥ –û—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è...")
            success, result = clear_biography(account_id)
            if success:
                query.edit_message_text(
                    "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ!",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"profile_account_{account_id}")]
                    ])
                )
            else:
                query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è: {result}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"profile_account_{account_id}")]
                    ])
                )

    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏
    elif data == "check_all_proxies":
        query.edit_message_text(
            "–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–∫—Å–∏
        results = check_all_proxies()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏:\n\n"

        for proxy_id, result in results.items():
            proxy = next((p for p in get_proxies() if p.id == proxy_id), None)
            if proxy:
                status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if result['working'] else f"‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result['error']}"
                report += f"ID: {proxy.id}, {proxy.host}:{proxy.port} - {status}\n"

        query.edit_message_text(
            report,
            reply_markup=get_proxy_menu_keyboard()
        )

    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–∏—Å—Ç–µ–º
    elif data == "advanced_systems":
        keyboard = [
            [InlineKeyboardButton("üîç Health Monitor", callback_data="health_monitor")],
            [InlineKeyboardButton("‚ö° Activity Limiter", callback_data="activity_limiter")],
            [InlineKeyboardButton("üöÄ Improved Warmer", callback_data="improved_warmer")],
            [InlineKeyboardButton("üìä System Status", callback_data="system_status")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            "üéõÔ∏è *–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    elif data == "health_monitor":
        query.edit_message_text("üîç –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
        
        try:
            health_monitor = AdvancedHealthMonitor()
            accounts = get_instagram_accounts()
            
            if not accounts:
                query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            report = "üìä *–û—Ç—á–µ—Ç Health Monitor*\n\n"
            
            for account in accounts:
                score = health_monitor.calculate_comprehensive_health_score(account.id)
                recommendations = health_monitor.get_health_recommendations(account.id)
                
                status = "üü¢" if score >= 80 else "üü°" if score >= 60 else "üî¥"
                report += f"{status} *{account.username}*: {score}/100\n"
                
                if recommendations:
                    report += f"   üí° {recommendations[0]}\n"
                report += "\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="advanced_systems")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                report, 
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Health Monitor: {e}")
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")

    elif data == "activity_limiter":
        query.edit_message_text("‚ö° –ü—Ä–æ–≤–µ—Ä—è—é –ª–∏–º–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...")
        
        try:
            activity_limiter = ActivityLimiter()
            accounts = get_instagram_accounts()
            
            if not accounts:
                query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            report = "‚ö° *–û—Ç—á–µ—Ç Activity Limiter*\n\n"
            
            for account in accounts:
                restrictions = activity_limiter.check_current_restrictions(account.id)
                limits = activity_limiter.get_dynamic_limits(account.id)
                
                status = "üî¥" if restrictions else "üü¢"
                report += f"{status} *{account.username}*\n"
                
                if restrictions:
                    report += f"   ‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {', '.join(restrictions)}\n"
                else:
                    report += f"   ‚úÖ –õ–∏–º–∏—Ç—ã: follows: {limits.get('follows_per_day', 0)}/–¥–µ–Ω—å\n"
                
                report += "\n"
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="advanced_systems")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                report,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Activity Limiter: {e}")
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–æ–≤: {e}")

    elif data == "improved_warmer":
        accounts = get_instagram_accounts()
        
        if not accounts:
            query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        keyboard = []
        for account in accounts:
            keyboard.append([InlineKeyboardButton(
                f"üî• {account.username}", 
                callback_data=f"improved_warm_{account.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="advanced_systems")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            "üöÄ *–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

    elif data.startswith("improved_warm_"):
        try:
            account_id = int(data.replace("improved_warm_", ""))
            account = get_instagram_account(account_id)
            
            if not account:
                query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            query.edit_message_text(f"üî• –ó–∞–ø—É—Å–∫–∞—é —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è {account.username}...")
            
            success, result = warm_account_improved(account_id)
            
            if success:
                query.edit_message_text(
                    f"‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                    f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="improved_warmer")]
                    ])
                )
            else:
                query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ {account.username}: {result}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="improved_warmer")]
                    ])
                )
                
        except ValueError:
            query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ: {e}")

    elif data == "system_status":
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
            health_monitor = AdvancedHealthMonitor()
            activity_limiter = ActivityLimiter()
            lifecycle_manager = AccountLifecycleManager()
            predictive_monitor = PredictiveMonitor()
            
            accounts = get_instagram_accounts()
            total_accounts = len(accounts)
            
            # Health Monitor Status
            healthy_accounts = 0
            for account in accounts:
                score = health_monitor.calculate_comprehensive_health_score(account.id)
                if score >= 80:
                    healthy_accounts += 1
            
            # Activity Limiter Status
            restricted_accounts = 0
            for account in accounts:
                restrictions = activity_limiter.check_current_restrictions(account.id)
                if restrictions:
                    restricted_accounts += 1
            
            status_report = (
                f"üìä *–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º*\n\n"
                f"üë• *–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
                f"   –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}\n\n"
                
                f"üîç *Health Monitor:*\n"
                f"   ‚úÖ –ó–¥–æ—Ä–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {healthy_accounts}/{total_accounts}\n"
                f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è: {int(healthy_accounts/total_accounts*100) if total_accounts > 0 else 0}%\n\n"
                
                f"‚ö° *Activity Limiter:*\n"
                f"   üö´ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏: {restricted_accounts}/{total_accounts}\n"
                f"   ‚úÖ –°–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts - restricted_accounts}\n\n"
                
                f"üîÑ *Lifecycle Manager:*\n"
                f"   üÜï –°—Ç–∞—Ç—É—Å: –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è\n\n"
                
                f"üõ°Ô∏è *Predictive Monitor:*\n"
                f"   üéØ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤: –ê–∫—Ç–∏–≤–Ω–∞\n"
                f"   üìä ML –º–æ–¥–µ–ª—å: –ì–æ—Ç–æ–≤–∞ –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º\n\n"
                
                f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}"
            )
            
            keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_status")],
                       [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="advanced_systems")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                status_report, 
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ System Status: {e}")
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º: {e}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback_data
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        query.edit_message_text(
            f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}\n\n"
            "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                    reply_markup=get_main_menu_keyboard()
        )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    query.answer()

def cancel_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = update.effective_user.id

    if user_id not in ADMIN_USER_IDS:
        return

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data_store:
        del user_data_store[user_id]

    update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_menu_keyboard()
    )

    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"
def process_add_profile_photo(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    user_id = query.from_user.id

    if user_id not in ADMIN_USER_IDS:
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
    account_id = int(query.data.split('_')[-1])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user_id in user_data_store:
        user_data_store[user_id] = {}

    user_data_store[user_id]['selected_account_id'] = account_id

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    query.edit_message_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:"
    )

    return WAITING_PROFILE_PHOTO

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
def handle_profile_photo(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = update.effective_user.id

    if user_id not in ADMIN_USER_IDS:
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data_store or 'selected_account_id' not in user_data_store[user_id]:
        update.message.reply_text(
            "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_accounts_menu_keyboard()
        )
        return ConversationHandler.END

    account_id = user_data_store[user_id]['selected_account_id']

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    photo_file = update.message.photo[-1].get_file()

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    avatar_dir = Path(MEDIA_DIR) / "avatars"
    os.makedirs(avatar_dir, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    avatar_path = avatar_dir / f"avatar_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
    photo_file.download(avatar_path)

    update.message.reply_text(
        "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è..."
    )

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤–º–µ—Å—Ç–æ ProfileManager
        success, result = update_profile_picture(account_id, str(avatar_path))

        if success:
            account = get_instagram_account(account_id)
            update.message.reply_text(
                f"‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=get_accounts_menu_keyboard()
            )
        else:
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {result}",
                reply_markup=get_accounts_menu_keyboard()
            )
    except Exception as e:
        update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_accounts_menu_keyboard()
        )
    finally:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_data_store:
            del user_data_store[user_id]

    return ConversationHandler.END