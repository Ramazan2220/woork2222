import logging
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler
from telegram import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup

from config import TELEGRAM_TOKEN, ADMIN_USER_IDS
from telegram_bot.handlers import get_all_handlers
from telegram_bot.handlers.account_handlers import (
    add_account, enter_username, enter_password, enter_email, enter_email_password,
    confirm_add_account, enter_verification_code, cancel_add_account,
    ENTER_USERNAME, ENTER_PASSWORD, ENTER_EMAIL, ENTER_EMAIL_PASSWORD, CONFIRM_ACCOUNT, ENTER_VERIFICATION_CODE,
    bulk_add_accounts_command, bulk_upload_accounts_file, list_accounts_handler
)
from telegram_bot.states import BULK_ADD_ACCOUNTS, WAITING_ACCOUNTS_FILE
from telegram_bot.handlers.task_handlers import retry_task_callback
from database.models import InstagramAccount
from database.db_manager import add_instagram_account, get_session
from telegram_bot.handlers.profile_handlers import get_profile_handlers, profile_setup_menu
from profile_setup import EDIT_NAME, EDIT_USERNAME, EDIT_BIO, EDIT_LINKS, ADD_PHOTO, ADD_POST


logger = logging.getLogger(__name__)

def is_admin(user_id):
    return user_id in ADMIN_USER_IDS

def start_handler(update, context):
    user = update.effective_user

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –∏–∑ keyboards.py
    from telegram_bot.keyboards import get_main_menu_keyboard

    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Instagram.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=get_main_menu_keyboard()
    )

def help_handler(update, context):
    help_text = """
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

*–ê–∫–∫–∞—É–Ω—Ç—ã:*
/accounts - –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
/add_account - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç Instagram
/upload_accounts - –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
/list_accounts - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
/profile_setup - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞

*–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:*
/status - –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∑–¥–æ—Ä–æ–≤—å–µ, —Ä–∏—Å–∫–∏)
/smart_warm - –£–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
/limits - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤

*–ó–∞–¥–∞—á–∏:*
/tasks - –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
/publish_now - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å–µ–π—á–∞—Å
/schedule_publish - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é

*–ü—Ä–æ–∫—Å–∏:*
/proxy - –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
/add_proxy - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
/distribute_proxies - –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
/list_proxies - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏

/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    """

    from telegram_bot.keyboards import get_main_menu_keyboard
    reply_markup = get_main_menu_keyboard()

    update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

def cancel_handler(update, context):
    keyboard = [[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

def handle_bulk_accounts_text(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –º–∞—Å—Å–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
    if not context.user_data.get('waiting_for_bulk_accounts'):
        return ConversationHandler.END
    
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ—Ä–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ account_handlers)
    from telegram_bot.handlers.account_handlers import is_admin
    if not is_admin(user_id):
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END
    
    accounts_text = update.message.text.strip()
    
    if not accounts_text:
        update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return BULK_ADD_ACCOUNTS
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    accounts_lines = accounts_text.split("\n")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_accounts = len([line for line in accounts_lines if line.strip()])
    added_accounts = 0
    failed_accounts = 0
    already_exists = 0
    failed_accounts_list = []
    
    progress_message = update.message.reply_text(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for line_num, line in enumerate(accounts_lines, 1):
        line = line.strip()
        if not line:
            continue
        
        parts = line.split(":")
        if len(parts) != 4:
            failed_accounts += 1
            failed_accounts_list.append(f"–°—Ç—Ä–æ–∫–∞ {line_num}: {line} - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            continue
        
        username, password, email, email_password = [part.strip() for part in parts]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        session = get_session()
        existing_account = session.query(InstagramAccount).filter_by(username=username).first()
        session.close()
        
        if existing_account:
            already_exists += 1
            failed_accounts_list.append(f"–°—Ç—Ä–æ–∫–∞ {line_num}: @{username} - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å –ü–û–õ–ù–û–ô –ü–†–û–í–ï–†–ö–û–ô (–∫–∞–∫ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏)
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            if line_num % 5 == 0:
                try:
                    progress_message.edit_text(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç {line_num}/{total_accounts}: @{username}")
                except:
                    pass
            
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ
            print(f"[BULK] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –¥–ª—è {username}")
            from instagram.email_utils import test_email_connection
            email_success, email_msg = test_email_connection(email, email_password)
            
            if not email_success:
                failed_accounts += 1
                failed_accounts_list.append(f"–°—Ç—Ä–æ–∫–∞ {line_num}: @{username} - –æ—à–∏–±–∫–∞ –ø–æ—á—Ç—ã: {email_msg}")
                continue
            
            # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É (—Å–Ω–∞—á–∞–ª–∞ –ë–ï–ó –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)
            from database.db_manager import add_instagram_account_without_login
            account = add_instagram_account_without_login(username, password, email, email_password)
            
            if not account:
                failed_accounts += 1
                failed_accounts_list.append(f"–°—Ç—Ä–æ–∫–∞ {line_num}: @{username} - –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É")
                continue
                
            account_id = account.id
            print(f"[BULK] –ê–∫–∫–∞—É–Ω—Ç @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É (ID: {account_id})")
            
            # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –≤—Ö–æ–¥ —Å –ø—Ä–æ–∫—Å–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
            print(f"[BULK] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø—Ä–æ–∫—Å–∏ –¥–ª—è {username}")
            from instagram.client import test_instagram_login_with_proxy
            
            login_success = test_instagram_login_with_proxy(
                account_id=account_id,
                username=username,
                password=password,
                email=email,
                email_password=email_password
            )
            
            if login_success:
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç –µ—Å–ª–∏ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω
                from database.db_manager import activate_instagram_account
                activate_instagram_account(account_id)
                added_accounts += 1
                print(f"[BULK] ‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            else:
                # –ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ –ø—Ä–æ–±–ª–µ–º–µ
                failed_accounts += 1
                failed_accounts_list.append(f"–°—Ç—Ä–æ–∫–∞ {line_num}: @{username} - –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ (–≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)")
                print(f"[BULK] ‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username} –≤ –±–∞–∑–µ –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            failed_accounts += 1
            failed_accounts_list.append(f"–°—Ç—Ä–æ–∫–∞ {line_num}: @{username} - {str(e)}")
            print(f"[BULK] ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {username}: {e}")
    
    # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    result_text = f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ê–°–°–û–í–û–ô –ó–ê–ì–†–£–ó–ö–ò:\n\n"
    result_text += f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {added_accounts}\n"
    result_text += f"‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {already_exists}\n" 
    result_text += f"‚ùå –û—à–∏–±–∫–∏: {failed_accounts}\n"
    result_text += f"üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_accounts}\n\n"
    result_text += f"üîê –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:\n"
    result_text += f"‚Ä¢ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—á—Ç—ã\n"
    result_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç—ã —Å —É—Å–ø–µ—à–Ω—ã–º –≤—Ö–æ–¥–æ–º\n"
    result_text += f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é\n"
    result_text += f"‚Ä¢ –ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –ø—Ä–æ–∫—Å–∏\n\n"
    
    if failed_accounts_list:
        result_text += "‚ùå –û–®–ò–ë–ö–ò:\n"
        for error in failed_accounts_list[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
            result_text += f"‚Ä¢ {error}\n"
        
        if len(failed_accounts_list) > 10:
            result_text += f"... –∏ –µ—â–µ {len(failed_accounts_list) - 10} –æ—à–∏–±–æ–∫\n"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        progress_message.edit_text(result_text, parse_mode=None)
    except:
        update.message.reply_text(result_text, parse_mode=None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    from telegram_bot.keyboards import get_accounts_menu_keyboard
    keyboard = get_accounts_menu_keyboard()
    
    update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop('waiting_for_bulk_accounts', None)
    return ConversationHandler.END


def callback_handler(update, context):
    query = update.callback_query
    query.answer()

    if query.data == 'menu_accounts':
        from telegram_bot.keyboards import get_accounts_menu_keyboard
        query.edit_message_text(
            text="üë§ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=get_accounts_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )

    elif query.data == 'menu_tasks':
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        from telegram_bot.keyboards import get_publications_menu_keyboard
        query.edit_message_text(
            "üì§ *–ú–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=get_publications_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )

    elif query.data == 'menu_proxy':
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='add_proxy')],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏", callback_data='list_proxies')],
            [InlineKeyboardButton("üîÑ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='distribute_proxies')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            text="üîÑ *–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

    elif query.data == 'menu_help':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –∏–∑ handlers.py
        from telegram_bot.handlers import help_handler as main_help_handler
        return main_help_handler(update, context)

    elif query.data == 'main_menu':
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é –∏–∑ keyboards.py
        from telegram_bot.keyboards import get_main_menu_keyboard

        query.edit_message_text(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_main_menu_keyboard()
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∞–∫–∫–∞—É–Ω—Ç–∞
    elif query.data.startswith('account_details_'):
        try:
            account_id = int(query.data.replace("account_details_", ""))
            from database.db_manager import get_instagram_account
            account = get_instagram_account(account_id)
            
            if account:
                keyboard = [
                    [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"profile_setup_{account_id}")],
                    [InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_to_{account_id}")],
                    [InlineKeyboardButton("üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data=f"change_password_{account_id}")],
                    [InlineKeyboardButton("üåê –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data=f"assign_proxy_{account_id}")],
                    [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data=f"delete_account_{account_id}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_accounts")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                status_emoji = "‚úÖ" if account.is_active else "‚ùå"
                query.edit_message_text(
                    text=f"*–ê–∫–∫–∞—É–Ω—Ç:* {account.username} {status_emoji}\n"
                         f"*Email:* {account.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                         f"*–°—Ç–∞—Ç—É—Å:* {'–ê–∫—Ç–∏–≤–µ–Ω' if account.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                         f"*–°–æ–∑–¥–∞–Ω:* {account.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                query.edit_message_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_accounts")]])
                )
        except (ValueError, Exception) as e:
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_accounts")]])
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    elif query.data.startswith('change_password_'):
        try:
            account_id = int(query.data.replace("change_password_", ""))
            query.edit_message_text(
                "üîë –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"account_details_{account_id}")]])
            )
        except (ValueError, Exception):
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_accounts")]])
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
    elif query.data.startswith('assign_proxy_'):
        try:
            account_id = int(query.data.replace("assign_proxy_", ""))
            query.edit_message_text(
                "üåê –§—É–Ω–∫—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"account_details_{account_id}")]])
            )
        except (ValueError, Exception):
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_accounts")]])
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    elif query.data.startswith('delete_account_'):
        try:
            account_id = int(query.data.replace("delete_account_", ""))
            from database.db_manager import get_instagram_account
            account = get_instagram_account(account_id)
            
            if account:
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{account_id}")],
                    [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"account_details_{account_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                query.edit_message_text(
                    f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
                    f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç *{account.username}*?\n\n"
                    f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                query.edit_message_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_accounts")]])
                )
        except (ValueError, Exception):
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_accounts")]])
            )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    elif query.data.startswith('confirm_delete_'):
        try:
            account_id = int(query.data.replace("confirm_delete_", ""))
            from database.db_manager import get_instagram_account, delete_instagram_account
            account = get_instagram_account(account_id)
            
            if account:
                success, message = delete_instagram_account(account_id)
                if success:
                    query.edit_message_text(
                        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç *{account.username}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="list_accounts")]]),
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    query.edit_message_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {message}",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"account_details_{account_id}")]])
                    )
            else:
                query.edit_message_text(
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_accounts")]])
                )
        except (ValueError, Exception):
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_accounts")]])
            )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
    elif query.data.startswith('publish_to_'):
        try:
            account_id = int(query.data.replace("publish_to_", ""))
            query.edit_message_text(
                "üåê –§—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"account_details_{account_id}")]])
            )
        except (ValueError, Exception):
            query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_accounts")]])
            )

    elif query.data == 'upload_accounts':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ TXT —Ñ–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Instagram.\n\n"
            "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
            "username:password\n"
            "username:password\n"
            "...\n\n"
            "–ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ username:password",
            reply_markup=reply_markup
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        context.user_data['waiting_for_accounts_file'] = True
        return WAITING_ACCOUNTS_FILE

    elif query.data == 'list_accounts':
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        list_accounts_handler(update, context)

    # bulk_add_accounts —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ ConversationHandler

    elif query.data == 'profile_setup':
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        query.data = 'profile_select_start'
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∏–∑ profile_handlers
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –º–µ–Ω—é
    elif query.data == 'menu_publications':
        from telegram_bot.keyboards import get_publications_menu_keyboard
        query.edit_message_text(
            text="üì§ *–ú–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            reply_markup=get_publications_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif query.data == "menu_scheduled":
        from telegram_bot.keyboards import get_scheduled_menu_keyboard
        query.edit_message_text(
            "üóìÔ∏è *–ú–µ–Ω—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=get_scheduled_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    elif query.data == "schedule_post":
        from telegram_bot.handlers.publish import start_schedule_post
        return start_schedule_post(update, context)
    
    elif query.data == "schedule_story":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        context.user_data['is_scheduled_post'] = True
        from telegram_bot.handlers.publish import start_story_publish
        return start_story_publish(update, context)
    
    elif query.data == "schedule_reels":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        context.user_data['is_scheduled_post'] = True
        from telegram_bot.handlers.publish import start_reels_publish
        return start_reels_publish(update, context)
    
    elif query.data == "schedule_igtv_blocked":
        from telegram_bot.keyboards import get_scheduled_menu_keyboard
        query.edit_message_text(
            "üîí *IGTV –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ*\n\n"
            "üöß –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.\n\n"
            "üì± –ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôè",
            reply_markup=get_scheduled_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    elif query.data == "view_schedule":
        from telegram_bot.keyboards import get_scheduled_menu_keyboard
        query.edit_message_text(
            "üóìÔ∏è *–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è*\n\n"
            "üöß –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.\n\n"
            "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôè",
            reply_markup=get_scheduled_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    elif query.data == "scheduled_history":
        from telegram_bot.keyboards import get_scheduled_menu_keyboard
        query.edit_message_text(
            "üìä *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π*\n\n"
            "üöß –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.\n\n"
            "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôè",
            reply_markup=get_scheduled_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    elif query.data == 'menu_warmup':
        from telegram_bot.keyboards import get_warmup_menu_keyboard
        query.edit_message_text(
            text="üî• *–ú–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_warmup_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif query.data == 'menu_statistics':
        from telegram_bot.keyboards import get_statistics_menu_keyboard
        query.edit_message_text(
            text="üìä *–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_statistics_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif query.data == 'menu_settings':
        from telegram_bot.keyboards import get_settings_menu_keyboard
        query.edit_message_text(
            text="‚öôÔ∏è *–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_settings_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )

    elif query.data in ['publication_stats', 'publish_now', 'schedule_publish']:
        query.edit_message_text(
            text=f"–§—É–Ω–∫—Ü–∏—è '{query.data}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]])
        )

    elif query.data == 'folders_menu':
        from telegram_bot.keyboards import get_folders_menu_keyboard
        query.edit_message_text(
            text="üìÅ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_folders_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–ø–æ–∫
    elif query.data == 'list_folders':
        from telegram_bot.handlers.group_handlers import list_groups_handler
        return list_groups_handler(update, context)
    
    elif query.data == 'create_folder':
        from telegram_bot.handlers.group_handlers import create_group_handler
        return create_group_handler(update, context)
    
    elif query.data == 'rename_folder':
        query.edit_message_text(
            text="‚úèÔ∏è –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='folders_menu')]])
        )
    
    elif query.data == 'delete_folder':
        query.edit_message_text(
            text="‚ùå –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='folders_menu')]])
        )
    
    elif query.data == 'view_folder_accounts':
        query.edit_message_text(
            text="üëÅÔ∏è –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='folders_menu')]])
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–ø–∫–∞–º–∏
    elif query.data.startswith('view_group_'):
        from telegram_bot.handlers.group_handlers import view_group_handler
        return view_group_handler(update, context)
    
    elif query.data.startswith('list_folders_page_'):
        from telegram_bot.handlers.group_handlers import list_groups_handler
        return list_groups_handler(update, context)
    
    elif query.data.startswith('icon_'):
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ –∏–∫–æ–Ω–∫–∏ –≤ group_handlers
        from telegram_bot.handlers.group_handlers import process_group_icon
        return process_group_icon(update, context)
    
    elif query.data == 'skip_group_description':
        from telegram_bot.handlers.group_handlers import process_group_description
        return process_group_description(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
    elif query.data == 'bulk_edit_name':
        from telegram_bot.handlers.profile_handlers import bulk_edit_name
        return bulk_edit_name(update, context)
    
    elif query.data == 'bulk_edit_username':
        from telegram_bot.handlers.profile_handlers import bulk_edit_username
        return bulk_edit_username(update, context)
    
    elif query.data == 'bulk_edit_bio':
        from telegram_bot.handlers.profile_handlers import bulk_edit_bio
        return bulk_edit_bio(update, context)
    
    elif query.data == 'bulk_add_link':
        from telegram_bot.handlers.profile_handlers import bulk_add_link
        return bulk_add_link(update, context)
    
    elif query.data == 'bulk_set_avatar':
        from telegram_bot.handlers.profile_handlers import bulk_set_avatar
        return bulk_set_avatar(update, context)
    
    elif query.data == 'bulk_delete_avatar':
        from telegram_bot.handlers.profile_handlers import bulk_delete_avatar
        return bulk_delete_avatar(update, context)
    
    elif query.data == 'noop':
        # –î–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∏–ø–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    elif query.data == "publish_post":
        from telegram_bot.handlers.publish import start_post_publish
        return start_post_publish(update, context)
    
    elif query.data == "publish_story":
        from telegram_bot.handlers.publish import start_story_publish
        return start_story_publish(update, context)
    
    elif query.data == "publish_igtv":
        from telegram_bot.handlers.publish import start_igtv_publish
        return start_igtv_publish(update, context)
    
    elif query.data == "publish_igtv_blocked":
        from telegram_bot.keyboards import get_publications_menu_keyboard
        query.edit_message_text(
            "üîí *IGTV –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n"
            "üöß –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.\n\n"
            "üì± –ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "‚Ä¢ üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤\n"
            "‚Ä¢ üì± –ò—Å—Ç–æ—Ä–∏–∏\n"
            "‚Ä¢ üé• Reels\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôè",
            reply_markup=get_publications_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    elif query.data == "scheduled_posts":
        from telegram_bot.handlers.publish import show_scheduled_posts
        return show_scheduled_posts(update, context)
    
    elif query.data == "publication_history":
        from telegram_bot.handlers.publish import show_publication_history
        return show_publication_history(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    elif query.data.startswith('post_account_'):
        from telegram_bot.handlers.publish import handle_post_account_selection
        return handle_post_account_selection(update, context)
    
    elif query.data.startswith('story_account_'):
        from telegram_bot.handlers.publish import handle_story_account_selection
        return handle_story_account_selection(update, context)
    
    elif query.data.startswith('igtv_account_'):
        from telegram_bot.handlers.publish import handle_igtv_account_selection
        return handle_igtv_account_selection(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è Reels
    elif query.data.startswith('reels_'):
        from telegram_bot.handlers.publish import handle_reels_callbacks
        return handle_reels_callbacks(update, context)
    
    elif query.data == "publish_reels":
        from telegram_bot.handlers.publish import start_reels_publish
        return start_reels_publish(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    elif query.data == "general_stats":
        from telegram_bot.handlers.analytics_handlers import start_general_analytics
        start_general_analytics(update, context)
    
    elif query.data == "accounts_stats":
        from telegram_bot.handlers.analytics_handlers import start_accounts_analytics
        start_accounts_analytics(update, context)
    
    elif query.data == "publications_stats":
        from telegram_bot.handlers.analytics_handlers import start_publications_analytics
        start_publications_analytics(update, context)
    
    elif query.data == "warmup_stats":
        from telegram_bot.keyboards import get_statistics_menu_keyboard
        query.edit_message_text("üî• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–µ–≤—É –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_statistics_menu_keyboard())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
    elif query.data == "quick_warmup":
        query.edit_message_text("‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                               reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_warmup")]]))
    
    elif query.data == "smart_warmup":
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É Advanced Warmup 2.0
        from telegram_bot.handlers.automation_handlers import smart_warm_command
        smart_warm_command(update, context)
    
    elif query.data == "warmup_status":
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É /status
        from telegram_bot.handlers.automation_handlers import status_command
        status_command(update, context)
    
    elif query.data == "warmup_settings":
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É /limits
        from telegram_bot.handlers.automation_handlers import limits_command
        limits_command(update, context)
    
    elif query.data == "warmup_analytics":
        query.edit_message_text("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                               reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_warmup")]]))
    
    # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Advanced Warmup 2.0  
    elif query.data == "smart_warm_menu":
        from telegram_bot.handlers.automation_handlers import smart_warm_command
        smart_warm_command(update, context)
    
    elif query.data == "status":
        from telegram_bot.handlers.automation_handlers import status_command
        status_command(update, context)
    
    elif query.data == "limits":
        from telegram_bot.handlers.automation_handlers import limits_command
        limits_command(update, context)
    
    elif query.data == "interest_warmup_menu":
        from telegram_bot.handlers.warmup_interest_handlers import show_interest_warmup_menu
        show_interest_warmup_menu(update, context)
    
    elif query.data == "charts":
        from telegram_bot.keyboards import get_statistics_menu_keyboard
        query.edit_message_text("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=get_statistics_menu_keyboard())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    elif query.data in ["analytics_recent_posts", "analytics_top_likes", "analytics_top_comments", "analytics_detailed", "analytics_stories"]:
        from telegram_bot.handlers.analytics_handlers import handle_analytics_action
        handle_analytics_action(update, context, query.data)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    elif query.data in ["analytics_comparison", "analytics_summary", "analytics_top_all", "analytics_detailed_all"]:
        from telegram_bot.handlers.analytics_handlers import handle_multiple_analytics_action
        handle_multiple_analytics_action(update, context, query.data)
    
    elif query.data == "analytics_menu":
        from telegram_bot.keyboards import get_statistics_menu_keyboard
        query.edit_message_text(
            text="üìä –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=get_statistics_menu_keyboard()
        )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç
    elif query.data.startswith('convert_business_'):
        from profile_setup.links_manager import convert_to_business_account
        convert_to_business_account(update, context)
    
    else:
        # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback_data –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback_data: {query.data}")
        # –ù–µ –∏–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å callback
        pass

def text_handler(update, context):
    from telegram_bot.keyboards import get_main_menu_keyboard

    update.message.reply_text(
        "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_keyboard()
    )

def error_handler(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "Query is too old"
    if "Query is too old" in str(context.error):
        logger.warning(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∑–∞–ø—Ä–æ—Å: {update}")
        return  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç—É –æ—à–∏–±–∫—É
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º entities
    if "Can't parse entities" in str(context.error) or "can't find end of the entity" in str(context.error):
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ entities: {context.error}")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ entities, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Ö –∏—Å–ø—Ä–∞–≤–∏–ª–∏

    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")

    if update and update.effective_chat:
        try:
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ entities
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")

def setup_bot(updater):
    dp = updater.dispatcher

    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler("start", start_handler))
    dp.add_handler(CommandHandler("help", help_handler))
    dp.add_handler(CommandHandler("cancel", cancel_handler))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    add_account_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("add_account", add_account),
            CallbackQueryHandler(add_account, pattern='^add_account$')
        ],
        states={
            ENTER_USERNAME: [MessageHandler(Filters.text & ~Filters.command, enter_username)],
            ENTER_PASSWORD: [MessageHandler(Filters.text & ~Filters.command, enter_password)],
            ENTER_EMAIL: [MessageHandler(Filters.text & ~Filters.command, enter_email)],
            ENTER_EMAIL_PASSWORD: [MessageHandler(Filters.text & ~Filters.command, enter_email_password)],
            CONFIRM_ACCOUNT: [CallbackQueryHandler(confirm_add_account, pattern='^confirm_add_account$')],
            ENTER_VERIFICATION_CODE: [MessageHandler(Filters.text & ~Filters.command, enter_verification_code)]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_add_account, pattern='^cancel_add_account$'),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern='^menu_accounts$'),
            CommandHandler("cancel", cancel_handler)
        ]
    )

    dp.add_handler(add_account_conv_handler)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    def start_bulk_add_accounts(update, context):
        query = update.callback_query
        query.answer()
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            "üì• –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ TXT —Ñ–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "username:password\n\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Ç–µ–∫—Å—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "username:password:email:email_password\n\n"
            "–ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.",
            reply_markup=reply_markup
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
        context.user_data['waiting_for_accounts_file'] = True
        return WAITING_ACCOUNTS_FILE

    # ConversationHandler –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    bulk_add_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_bulk_add_accounts, pattern='^bulk_add_accounts$')],
        states={
            WAITING_ACCOUNTS_FILE: [
                MessageHandler(Filters.document.file_extension("txt"), bulk_upload_accounts_file),
                MessageHandler(Filters.text & ~Filters.command, handle_bulk_accounts_text)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", cancel_handler),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern='menu_accounts')
        ],
        name="bulk_add_accounts_conversation",
        persistent=False,
    )
    dp.add_handler(bulk_add_conv_handler)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    dp.add_handler(CommandHandler("bulk_add_accounts", bulk_add_accounts_command, pass_args=True))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ConversationHandler –≤ account_handlers.py
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤

    # –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –º–æ–¥—É–ª–µ–π
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –º–æ–¥—É–ª–µ–π
    try:
        for handler in get_all_handlers():
            dp.add_handler(handler)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        import traceback
        traceback.print_exc()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è (—Å—Ç–∞—Ä—ã–µ)
    for handler in get_profile_handlers():
        dp.add_handler(handler)
        
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ profile_setup handlers

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ profile_setup –º–æ–¥—É–ª–µ–π
    from profile_setup import get_profile_handlers as get_profile_setup_handlers_real
    for handler in get_profile_setup_handlers_real():
        dp.add_handler(handler)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    from telegram_bot.handlers.automation_handlers import register_automation_handlers
    register_automation_handlers(dp)

    # ConversationHandler –¥–ª—è Reels —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ get_publish_handlers()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ü–û–°–õ–ï–î–ù–ò–ú
    # —á—Ç–æ–±—ã –æ–Ω –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª callback'–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –≤ –º–æ–¥—É–ª—è—Ö
    dp.add_handler(CallbackQueryHandler(callback_handler))
    
    # –î–æ–±–∞–≤–ª—è–µ–º fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback
    def fallback_callback_handler(update, context):
        query = update.callback_query
        query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.")
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")

    dp.add_handler(CallbackQueryHandler(fallback_callback_handler))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from telegram_bot.handlers.account_handlers import verification_code_handler
    dp.add_handler(MessageHandler(
        Filters.regex(r'^\d{6}$') & ~Filters.command,
        verification_code_handler
    ))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –∑–∞–¥–∞—á
    dp.add_handler(CallbackQueryHandler(retry_task_callback, pattern=r'^retry_task_\d+$'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–¥–æ–≤)
    dp.add_handler(MessageHandler(
        Filters.text & ~Filters.command,
        text_handler
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    dp.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

def get_profile_setup_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –º–æ–¥—É–ª–µ–π profile_setup"""
    from telegram_bot.handlers.profile_handlers import (
        edit_profile_name, save_profile_name,
        edit_profile_username, save_profile_username,
        edit_profile_bio, save_profile_bio,
        edit_profile_links, save_profile_links,
        add_profile_photo, save_profile_photo,
        add_post, save_post,
        delete_all_posts,
        setup_profile_menu,
        handle_bulk_profile_action
    )
    
    # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
    name_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_profile_name, pattern=r'^edit_name_\d+$')],
        states={
            EDIT_NAME: [MessageHandler(Filters.text & ~Filters.command, save_profile_name)],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=r'^profile_account_\d+$'),
            CommandHandler("cancel", cancel_handler)
        ]
    )
    
    # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è username
    username_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_profile_username, pattern=r'^edit_username_\d+$')],
        states={
            EDIT_USERNAME: [MessageHandler(Filters.text & ~Filters.command, save_profile_username)],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=r'^profile_account_\d+$'),
            CommandHandler("cancel", cancel_handler)
        ]
    )
    
    # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–æ
    bio_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_profile_bio, pattern=r'^edit_bio_\d+$')],
        states={
            EDIT_BIO: [MessageHandler(Filters.text & ~Filters.command, save_profile_bio)],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=r'^profile_account_\d+$'),
            CommandHandler("cancel", cancel_handler)
        ]
    )
    
    # ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
    links_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_profile_links, pattern=r'^edit_links_\d+$')],
        states={
            EDIT_LINKS: [MessageHandler(Filters.text & ~Filters.command, save_profile_links)],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=r'^profile_account_\d+$'),
            CommandHandler("cancel", cancel_handler)
        ]
    )
    
    # ConversationHandler –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
    avatar_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_profile_photo, pattern=r'^edit_avatar_\d+$')],
        states={
            ADD_PHOTO: [MessageHandler(Filters.photo | Filters.document, save_profile_photo)],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=r'^profile_account_\d+$'),
            CommandHandler("cancel", cancel_handler)
        ]
    )
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
    post_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_post, pattern=r'^add_post_\d+$')],
        states={
            ADD_POST: [MessageHandler(Filters.photo | Filters.video | Filters.document, save_post)],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern=r'^profile_account_\d+$'),
            CommandHandler("cancel", cancel_handler)
        ]
    )
    
    # ConversationHandler –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    bulk_actions_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(lambda u, c: EDIT_NAME, pattern='^bulk_edit_name$'),
            CallbackQueryHandler(lambda u, c: EDIT_USERNAME, pattern='^bulk_edit_username$'),
            CallbackQueryHandler(lambda u, c: EDIT_BIO, pattern='^bulk_edit_bio$'),
            CallbackQueryHandler(lambda u, c: EDIT_LINKS, pattern='^bulk_add_link$'),
            CallbackQueryHandler(lambda u, c: ADD_PHOTO, pattern='^bulk_set_avatar$'),
        ],
        states={
            EDIT_NAME: [MessageHandler(Filters.text & ~Filters.command, handle_bulk_profile_action)],
            EDIT_USERNAME: [MessageHandler(Filters.text & ~Filters.command, handle_bulk_profile_action)],
            EDIT_BIO: [MessageHandler(Filters.text & ~Filters.command, handle_bulk_profile_action)],
            EDIT_LINKS: [MessageHandler(Filters.text & ~Filters.command, handle_bulk_profile_action)],
            ADD_PHOTO: [MessageHandler(Filters.photo | Filters.document, handle_bulk_profile_action)],
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern='^profile_setup$'),
            CommandHandler("cancel", cancel_handler)
        ]
    )
    
    return [
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        CallbackQueryHandler(setup_profile_menu, pattern=r'^profile_account_\d+$'),
        # ConversationHandlers –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        name_conv_handler,
        username_conv_handler,
        bio_conv_handler,
        links_conv_handler,
        avatar_conv_handler,
        post_conv_handler,
        bulk_actions_handler,
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        CallbackQueryHandler(delete_all_posts, pattern=r'^delete_all_posts_\d+$'),
    ]
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
    from telegram_bot.handlers.warmup_interest_handlers import INTEREST_WARMUP_HANDLERS
    handlers.extend(INTEREST_WARMUP_HANDLERS)