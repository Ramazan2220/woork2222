import json
import os
import time
import shutil
import logging
import asyncio
import concurrent.futures
from datetime import datetime  
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import ConversationHandler, CommandHandler, MessageHandler, Filters

logger = logging.getLogger(__name__)

from config import ACCOUNTS_DIR, ADMIN_USER_IDS, MEDIA_DIR
from database.db_manager import (
    get_session, get_instagram_accounts, bulk_add_instagram_accounts, 
    delete_instagram_account, get_instagram_account, get_account_groups,
    update_instagram_account, activate_instagram_account
)
from database.models import InstagramAccount, PublishTask, Proxy
from instagrapi import Client
from instagrapi.exceptions import LoginRequired, BadPassword, ChallengeRequired
from instagram.client import check_login_challenge, submit_challenge_code
from instagram.email_utils import test_email_connection
import random
from database.models import Proxy
from utils.proxy_manager import assign_proxy_to_account
from instagram.client import check_login_challenge, submit_challenge_code, test_instagram_login_with_proxy
from utils.system_monitor import get_adaptive_limits, get_system_status

# –ò–º–ø–æ—Ä—Ç middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
from telegram_bot.middleware import subscription_required, trial_allowed, premium_only
from utils.subscription_middleware import get_user_subscription_info

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
challenge_handlers = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
ENTER_USERNAME, ENTER_PASSWORD, ENTER_EMAIL, ENTER_EMAIL_PASSWORD, CONFIRM_ACCOUNT, ENTER_VERIFICATION_CODE = range(6)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
WAITING_ACCOUNTS_FILE = 10

@trial_allowed
def save_account_from_telegram(update, context):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç Instagram –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram-–±–æ—Ç–∞"""
    user_data = context.user_data

    username = user_data.get('instagram_username')
    password = user_data.get('instagram_password')
    email = user_data.get('email')
    email_password = user_data.get('email_password')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not all([username, password, email, email_password]):
        missing_fields = []
        if not username: missing_fields.append("–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if not password: missing_fields.append("–ø–∞—Ä–æ–ª—å")
        if not email: missing_fields.append("email")
        if not email_password: missing_fields.append("–ø–∞—Ä–æ–ª—å –æ—Ç email")

        update.message.reply_text(
            f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ: {', '.join(missing_fields)}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ."
        )
        user_data.clear()
        return ConversationHandler.END

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        from database.db_manager import add_instagram_account

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é
        success, result = add_instagram_account(username, password, email, email_password)

        if success:
            # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, result —Å–æ–¥–µ—Ä–∂–∏—Ç ID –∞–∫–∫–∞—É–Ω—Ç–∞
            account_id = result
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            from utils.proxy_manager import assign_proxy_to_account
            proxy_success, proxy_message = assign_proxy_to_account(account_id)

            update.message.reply_text(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"{'üì°' if proxy_success else '‚ö†Ô∏è'} {proxy_message}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
            )
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, result —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {username}: {result}")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data.clear()
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
        update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
        user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return ConversationHandler.END

def is_admin(user_id):
    return user_id in ADMIN_USER_IDS

def accounts_handler(update, context):
    from telegram_bot.keyboards import get_accounts_menu_keyboard
    
    update.message.reply_text(
        "üë§ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=get_accounts_menu_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )

def add_account(update, context):
    if update.callback_query:
        query = update.callback_query
        query.answer()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞
        session = get_session()
        proxies_count = session.query(Proxy).filter_by(is_active=True).count()
        session.close()

        if proxies_count == 0:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                "‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!\n\n"
                "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Instagram –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_proxy –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏.",
                reply_markup=reply_markup
            )
            return ConversationHandler.END

        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω) –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram:\n\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å:email:–ø–∞—Ä–æ–ª—å_email`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `username:password123:user@example.com:emailpass456`\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return ENTER_USERNAME
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞
        session = get_session()
        proxies_count = session.query(Proxy).filter_by(is_active=True).count()
        session.close()

        if proxies_count == 0:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            update.message.reply_text(
                "‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!\n\n"
                "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Instagram –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_proxy –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏.",
                reply_markup=reply_markup
            )
            return ConversationHandler.END

        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω) –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram:\n\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–ª–æ–≥–∏–Ω:–ø–∞—Ä–æ–ª—å:email:–ø–∞—Ä–æ–ª—å_email`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `username:password123:user@example.com:emailpass456`\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return ENTER_USERNAME

def enter_username(update, context):
    text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≤–≤–æ–¥ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ login:password:email:email_password
    parts = text.split(':')

    if len(parts) == 4:
        # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç login:password:email:email_password
        username, password, email, email_password = parts

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        session = get_session()
        existing_account = session.query(InstagramAccount).filter_by(username=username).first()
        session.close()

        if existing_account:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            update.message.reply_text(
                f"–ê–∫–∫–∞—É–Ω—Ç —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
                reply_markup=reply_markup
            )
            return ConversationHandler.END

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
        update.message.reply_text(f"–ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}. –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è...")

        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞
        try:
            from database.db_manager import add_instagram_account_without_login

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞
            account = add_instagram_account_without_login(
                username=username,
                password=password,
                email=email,
                email_password=email_password
            )

            if not account:
                update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
                return ConversationHandler.END

            update.message.reply_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏...")

            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            from utils.proxy_manager import assign_proxy_to_account
            proxy_success, proxy_message = assign_proxy_to_account(account.id)

            if not proxy_success:
                update.message.reply_text(f"‚ö†Ô∏è {proxy_message}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
            else:
                update.message.reply_text(f"‚úÖ {proxy_message}")

            # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ
            update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ...")
            print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ {email}")

            from instagram.email_utils import test_email_connection
            success, message = test_email_connection(email, email_password)

            if not success:
                update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ: {message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return ConversationHandler.END

            update.message.reply_text("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

            # –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ Instagram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏
            update.message.reply_text("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ Instagram...")

            from instagram.client import test_instagram_login_with_proxy
            login_success = test_instagram_login_with_proxy(
                account_id=account.id,
                username=username,
                password=password,
                email=email,
                email_password=email_password
            )

            if login_success:
                # –ï—Å–ª–∏ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
                from database.db_manager import activate_instagram_account
                activate_instagram_account(account.id)

                update.message.reply_text(
                    f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
                )
            else:
                update.message.reply_text(
                    f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Instagram.\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ–π—Ç–∏ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏."
                )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data.clear()
            return ConversationHandler.END

        except Exception as e:
            update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}")
            return ConversationHandler.END

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
    username = text

    session = get_session()
    existing_account = session.query(InstagramAccount).filter_by(username=username).first()
    session.close()

    if existing_account:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            f"–ê–∫–∫–∞—É–Ω—Ç —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    context.user_data['instagram_username'] = username

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram.\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ*: –í–∞—à –ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Instagram.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )
    return ENTER_PASSWORD

def enter_password(update, context):
    password = update.message.text.strip()

    context.user_data['instagram_password'] = password

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Instagram.\n\n"
        "–≠—Ç–æ—Ç –∞–¥—Ä–µ—Å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=reply_markup
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    update.message.delete()

    return ENTER_EMAIL

def enter_email(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã"""
    user_data = context.user_data
    email = update.message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
    user_data['email'] = email

    update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.\n\n"
        "‚ö†Ô∏è –í–∞–∂–Ω–æ: –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )

    return ENTER_EMAIL_PASSWORD

def enter_email_password(update, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –æ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
    """
    user_id = update.effective_user.id
    email_password = update.message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã
    context.user_data['email_password'] = email_password

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
    email = context.user_data.get('email')
    instagram_username = context.user_data.get('instagram_username')
    instagram_password = context.user_data.get('instagram_password')

    if not email:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return ConversationHandler.END

    if not instagram_username or not instagram_password:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Instagram –Ω–µ —É–∫–∞–∑–∞–Ω—ã.")
        return ConversationHandler.END

    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞
    try:
        from database.db_manager import add_instagram_account_without_login

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞
        account = add_instagram_account_without_login(
            username=instagram_username,
            password=instagram_password,
            email=email,
            email_password=email_password
        )

        if not account:
            update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            return ConversationHandler.END

        update.message.reply_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏...")

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        from utils.proxy_manager import assign_proxy_to_account
        proxy_success, proxy_message = assign_proxy_to_account(account.id)

        if not proxy_success:
            update.message.reply_text(f"‚ö†Ô∏è {proxy_message}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
        else:
            update.message.reply_text(f"‚úÖ {proxy_message}")

        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ
        update.message.reply_text("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ...")
        print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ {email}")

        from instagram.email_utils import test_email_connection
        success, message = test_email_connection(email, email_password)

        if not success:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ: {message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return ENTER_EMAIL_PASSWORD

        update.message.reply_text("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

        # –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ Instagram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏
        update.message.reply_text("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ Instagram...")

        from instagram.client import test_instagram_login_with_proxy
        login_success = test_instagram_login_with_proxy(
            account_id=account.id,
            username=instagram_username,
            password=instagram_password,
            email=email,
            email_password=email_password
        )

        if login_success:
            # –ï—Å–ª–∏ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
            from database.db_manager import activate_instagram_account
            activate_instagram_account(account.id)

            update.message.reply_text(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {instagram_username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
            )
        else:
            update.message.reply_text(
                f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {instagram_username} –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Instagram.\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ–π—Ç–∏ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏."
            )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        return ConversationHandler.END

    except Exception as e:
        update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ—á—Ç—ã: {str(e)}")
        return ConversationHandler.END

def confirm_add_account(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()

    user_id = update.effective_user.id
    username = context.user_data.get('instagram_username')
    password = context.user_data.get('instagram_password')
    email = context.user_data.get('instagram_email')
    email_password = context.user_data.get('instagram_email_password')

    print(f"[DEBUG] confirm_add_account –≤—ã–∑–≤–∞–Ω –¥–ª—è {username}")

    query.edit_message_text(
        text=f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç {username}...\n\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        challenge_required, challenge_info = check_login_challenge(username, password, email, email_password)

        if not challenge_required:
            # –ï—Å–ª–∏ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
            success, result = add_instagram_account(username, password, email, email_password)

            if success:
                print(f"[DEBUG] –ê–∫–∫–∞—É–Ω—Ç {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
                query.edit_message_text(
                    text=f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
                )
                return ConversationHandler.END
            else:
                print(f"[DEBUG] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {username}: {result}")
                query.edit_message_text(
                    text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {username}.\n\n"
                    f"–û—à–∏–±–∫–∞: {result}\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç."
                )
                return ConversationHandler.END
        else:
            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            print(f"[DEBUG] –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è {username}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
            context.user_data['challenge_info'] = challenge_info

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–¥–∞
            query.edit_message_text(
                text=f"üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ *{username}*\n\n"
                f"Instagram –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É.\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (6 —Ü–∏—Ñ—Ä):",
                parse_mode='Markdown'
            )

            return ENTER_VERIFICATION_CODE

    except Exception as e:
        print(f"[DEBUG] –û—à–∏–±–∫–∞ –≤ confirm_add_account –¥–ª—è {username}: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_add_account –¥–ª—è {username}: {str(e)}")

        query.edit_message_text(
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç {username}.\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç."
        )
        return ConversationHandler.END

def enter_verification_code(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_data = context.user_data
    verification_code = update.message.text.strip()

    print(f"[DEBUG] enter_verification_code –≤—ã–∑–≤–∞–Ω —Å –∫–æ–¥–æ–º {verification_code}")

    username = user_data.get('instagram_username')  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    password = user_data.get('instagram_password')  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    challenge_info = user_data.get('challenge_info')

    print(f"[DEBUG] –î–∞–Ω–Ω—ã–µ –¥–ª—è {username}: challenge_info={bool(challenge_info)}")

    if not challenge_info:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return ConversationHandler.END

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from instagram.client import submit_challenge_code

    print(f"[DEBUG] –í—ã–∑—ã–≤–∞–µ–º submit_challenge_code –¥–ª—è {username} —Å –∫–æ–¥–æ–º {verification_code}")
    success, result = submit_challenge_code(username, password, verification_code, challenge_info)

    print(f"[DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç submit_challenge_code: success={success}, result={result}")

    if not success:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {result}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ENTER_VERIFICATION_CODE

    # –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
    return save_account_from_telegram(update, context)

def verification_code_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    code = update.message.text.strip()

    print(f"[VERIFICATION_HANDLER] –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ (6 —Ü–∏—Ñ—Ä)
    if not code.isdigit() or len(code) != 6:
        print(f"[VERIFICATION_HANDLER] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞: {code}")
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (6 —Ü–∏—Ñ—Ä).")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–¥–∞
    from instagram.auth_manager import TelegramChallengeHandler
    if TelegramChallengeHandler.set_code(user_id, code):
        update.message.reply_text("‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Ö–æ–¥...")
    else:
        update.message.reply_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è.")

def cancel_add_account(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if 'instagram_username' in context.user_data:
        del context.user_data['instagram_username']
    if 'instagram_password' in context.user_data:
        del context.user_data['instagram_password']
    if 'instagram_client' in context.user_data:
        del context.user_data['instagram_client']
    if 'challenge_handler' in context.user_data:
        del context.user_data['challenge_handler']

    keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='menu_accounts')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=reply_markup
    )

    return ConversationHandler.END

def list_accounts_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º UI"""
    session = get_session()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback_data
    page = 1
    if update.callback_query:
        query = update.callback_query
        query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ callback_data
        if query.data.startswith("list_accounts_page_"):
            page = int(query.data.replace("list_accounts_page_", ""))
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å –∏—Ö –≥—Ä—É–ø–ø–∞–º–∏ (eager loading)
    from sqlalchemy.orm import joinedload
    all_accounts = session.query(InstagramAccount).options(joinedload(InstagramAccount.groups)).all()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å–µ—Å—Å–∏–∏
    accounts_data = []
    for acc in all_accounts:
        accounts_data.append({
            'id': acc.id,
            'username': acc.username,
            'is_active': acc.is_active,
            'groups': [{'name': g.name, 'icon': g.icon} for g in acc.groups]
        })
    
    session.close()
    
    if not accounts_data:
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='add_account')],
            [InlineKeyboardButton("üì• –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", callback_data='bulk_add_accounts')],
            [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='menu_accounts')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram.\n\n" \
               "–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        
        if update.callback_query:
            query.edit_message_text(text, reply_markup=reply_markup)
        else:
            update.message.reply_text(text, reply_markup=reply_markup)
        return
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    accounts_per_page = 8
    total_pages = (len(accounts_data) + accounts_per_page - 1) // accounts_per_page
    start_idx = (page - 1) * accounts_per_page
    end_idx = min(start_idx + accounts_per_page, len(accounts_data))
    
    # –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    page_accounts = accounts_data[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    active_count = sum(1 for acc in accounts_data if acc['is_active'])
    inactive_count = len(accounts_data) - active_count
    groups_count = len(get_account_groups())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += f"üë• –í—Å–µ–≥–æ: {len(accounts_data)}\n"
    text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
    text += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {inactive_count}\n"
    text += f"üìÅ –ü–∞–ø–æ–∫: {groups_count}\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    text += f"üìã *–ê–∫–∫–∞—É–Ω—Ç—ã (—Å—Ç—Ä. {page}/{total_pages}):*\n\n"
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    for i, account in enumerate(page_accounts, start=start_idx+1):
        status = "‚úÖ" if account['is_active'] else "‚ùå"
        groups = account['groups']
        group_info = f" [{groups[0]['icon']}]" if groups else ""
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
        username = account['username'].replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
        
        # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        text += f"{i}. {status} @{username}{group_info}\n"
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
        keyboard.append([InlineKeyboardButton(
            f"{status} @{account['username']}",
            callback_data=f"account_details_{account['id']}"
        )])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"list_accounts_page_{page-1}"))
    
    nav_buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
    
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"list_accounts_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_row1 = []
    action_row1.append(InlineKeyboardButton("üìÅ –ü–∞–ø–∫–∏", callback_data="folders_menu"))
    action_row1.append(InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_accounts"))
    keyboard.append(action_row1)
    
    action_row2 = []
    action_row2.append(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='check_accounts_validity'))
    action_row2.append(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data='add_account'))
    keyboard.append(action_row2)
    
    keyboard.append([InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='menu_accounts')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    else:
        update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)

def account_details_handler(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("account_details_", ""))
    account = get_instagram_account(account_id)
    
    if not account:
        query.edit_message_text(
            "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_accounts")]])
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    status_emoji = "‚úÖ" if account.is_active else "‚ùå"
    status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if account.is_active else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
    detailed_status = "–ê–∫—Ç–∏–≤–µ–Ω"
    if not account.is_active:
        if hasattr(account, 'status') and account.status:
            status_mapping = {
                'challenge_required': 'üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è',
                'login_required': 'üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥',
                'email_code_failed': 'üìß –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –∏–∑ email',
                'recovery_login_failed': 'üîÑ –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏',
                'recovery_verify_failed': '‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å',
                'no_email_data': 'üìß –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
                'email_error': 'üìß –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å email',
                'recovery_error': 'üîÑ –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è',
                'invalid_password': 'üîë –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å',
                'login_error': '‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞',
                'problematic': '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç'
            }
            detailed_status = status_mapping.get(account.status, f"‚ùå {account.status}")
        else:
            detailed_status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
    username = account.username.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
    email = (account.email or '–ù–µ —É–∫–∞–∑–∞–Ω').replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
    
    text = f"üë§ *–ê–∫–∫–∞—É–Ω—Ç: @{username}*\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += f"üÜî ID: `{account.id}`\n"
    text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {detailed_status}\n"
    text += f"üìß Email: {email}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
    if account.email and account.email_password:
        text += f"üîÑ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: ‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ\n"
    else:
        text += f"üîÑ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    text += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {account.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if hasattr(account, 'last_check') and account.last_check:
        text += f"üîç –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {account.last_check.strftime('%d.%m.%Y %H:%M')}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö
    if account.groups:
        text += f"\nüìÅ *–ì—Ä—É–ø–ø—ã:*\n"
        for group in account.groups:
            text += f"  ‚Ä¢ {group.icon} {group.name}\n"
    else:
        text += f"\nüìÅ *–ì—Ä—É–ø–ø—ã:* –ù–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∫—Å–∏
    if account.proxy:
        text += f"\nüåê *–ü—Ä–æ–∫—Å–∏:* {account.proxy.host}:{account.proxy.port}\n"
    else:
        text += f"\nüåê *–ü—Ä–æ–∫—Å–∏:* –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
    
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞
    if account.last_error:
        error_text = account.last_error[:150]
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        error_text = error_text.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('~', '\\~').replace('`', '\\`').replace('>', '\\>').replace('#', '\\#').replace('+', '\\+').replace('-', '\\-').replace('=', '\\=').replace('|', '\\|').replace('{', '\\{').replace('}', '\\}').replace('.', '\\.').replace('!', '\\!')
        text += f"\n‚ö†Ô∏è *–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:*\n`{error_text}`\n"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = []
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    row1 = []
    if account.is_active:
        row1.append(InlineKeyboardButton("‚è∏Ô∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"deactivate_account_{account_id}"))
    else:
        row1.append(InlineKeyboardButton("‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"activate_account_{account_id}"))
    row1.append(InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_account_{account_id}"))
    keyboard.append(row1)
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)
    if not account.is_active:
        row_recovery = []
        if account.email and account.email_password:
            row_recovery.append(InlineKeyboardButton("üîß IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data=f"imap_recover_{account_id}"))
        row_recovery.append(InlineKeyboardButton("üö´ –°–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫–∏", callback_data=f"reset_errors_{account_id}"))
        keyboard.append(row_recovery)
    
    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    row3 = []
    row3.append(InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"account_settings_{account_id}"))
    row3.append(InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"account_stats_{account_id}"))
    keyboard.append(row3)
    
    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–æ–∫—Å–∏
    row4 = []
    row4.append(InlineKeyboardButton("üìÅ –ì—Ä—É–ø–ø—ã", callback_data=f"manage_account_groups_{account_id}"))
    row4.append(InlineKeyboardButton("üåê –ü—Ä–æ–∫—Å–∏", callback_data=f"manage_account_proxy_{account_id}"))
    keyboard.append(row4)
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    keyboard.append([
        InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_to_{account_id}"),
        InlineKeyboardButton("üî• –ü—Ä–æ–≥—Ä–µ—Ç—å", callback_data=f"warm_account_{account_id}")
    ])
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç
    keyboard.append([
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_account_{account_id}"),
        InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É", callback_data="list_accounts")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)

def delete_account_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
    account_id = int(query.data.split('_')[2])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
    account = get_instagram_account(account_id)

    if not account:
        keyboard = [[InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='list_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=reply_markup
        )
        return

    try:
        session = get_session()

        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        session.query(PublishTask).filter_by(account_id=account_id).delete()

        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        account = session.query(InstagramAccount).filter_by(id=account_id).first()
        if account:
            session.delete(account)
            session.commit()

            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            session_dir = os.path.join(ACCOUNTS_DIR, str(account_id))
            if os.path.exists(session_dir):
                shutil.rmtree(session_dir)

            keyboard = [[InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='list_accounts')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                reply_markup=reply_markup
            )
        else:
            keyboard = [[InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='list_accounts')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=reply_markup
            )
    except Exception as e:
        session.rollback()

        keyboard = [[InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='list_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}",
            reply_markup=reply_markup
        )
    finally:
        session.close()

def delete_all_accounts_handler(update, context):
    query = update.callback_query
    query.answer()

    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data='confirm_delete_all_accounts'),
            InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='list_accounts')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∞–∫–∫–∞—É–Ω—Ç—ã?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
        reply_markup=reply_markup
    )

def confirm_delete_all_accounts_handler(update, context):
    query = update.callback_query
    query.answer()

    try:
        session = get_session()
        accounts = session.query(InstagramAccount).all()
        session.close()

        # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–π –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        from instagram.client import remove_instagram_account
        success_count = 0
        failed_count = 0

        for account in accounts:
            try:
                if remove_instagram_account(account.id):
                    success_count += 1
                else:
                    failed_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}: {e}")
                failed_count += 1

        keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='menu_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if failed_count == 0:
            query.edit_message_text(
                f"‚úÖ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã ({success_count}).",
                reply_markup=reply_markup
            )
        else:
            query.edit_message_text(
                f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ {success_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {failed_count} –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
                reply_markup=reply_markup
            )
    except Exception as e:
        keyboard = [[InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='list_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}",
            reply_markup=reply_markup
        )

def check_accounts_validity_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –Ω–æ–≤—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º"""
    from telegram_bot.utils.account_selection import create_account_selector
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    selector = create_account_selector(
        callback_prefix="validity_select",
        title="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
        allow_multiple=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        show_status=True,
        show_folders=True,
        back_callback="menu_accounts"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def on_accounts_selected(account_ids: list, update_inner, context_inner):
        if account_ids:
            query = update_inner.callback_query
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞–≥—Ä—É–∑–∫–∏
            limits = get_adaptive_limits()
            system_status = get_system_status()
            
            # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            query.edit_message_text(
                f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...\n\n"
                f"{system_status['emoji']} –°–∏—Å—Ç–µ–º–∞: {system_status['status'].upper()}\n"
                f"‚öôÔ∏è –ü–æ—Ç–æ–∫–æ–≤: {limits.max_workers}\n"
                f"üì¶ –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã: {limits.batch_size}\n"
                f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {limits.delay_between_batches}—Å"
            )
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            def check_single_account(account_id):
                local_session = get_session()
                try:
                    account = local_session.query(InstagramAccount).filter_by(id=account_id).first()
                    if not account:
                        local_session.close()
                        return (f"ID {account_id}", False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–æ–¥–æ–≤
                    from instagram.client import test_instagram_login_with_proxy
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã
                    email = getattr(account, 'email', None)
                    email_password = getattr(account, 'email_password', None)
                    
                    if email and email_password:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–æ–¥–æ–≤
                        login_success = test_instagram_login_with_proxy(
                            account_id=account.id,
                            username=account.username,
                            password=account.password,
                            email=email,
                            email_password=email_password
                        )
                        
                        # ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
                        from database.db_manager import update_instagram_account
                        if login_success:
                            update_instagram_account(account.id, is_active=True, last_check=datetime.now())
                            local_session.close()
                            return (account.username, True, "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–æ–¥–æ–≤")
                        else:
                            update_instagram_account(account.id, is_active=False, last_check=datetime.now())
                            local_session.close()
                            return (account.username, False, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –¥–∞–∂–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–æ–¥–æ–≤")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—á—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                        client = Client()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏
                        session_file = os.path.join(ACCOUNTS_DIR, str(account.id), 'session.json')
                        if os.path.exists(session_file):
                            try:
                                with open(session_file, 'r') as f:
                                    session_data = json.load(f)

                                if 'settings' in session_data:
                                    client.set_settings(session_data['settings'])

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
                                try:
                                    client.get_timeline_feed()
                                    # ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
                                    from database.db_manager import update_instagram_account
                                    update_instagram_account(account.id, is_active=True, last_check=datetime.now())
                                    local_session.close()
                                    return (account.username, True, "–°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞")
                                except:
                                    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º
                                    pass
                            except:
                                pass

                        # –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º
                        try:
                            client.login(account.username, account.password)

                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                            os.makedirs(os.path.join(ACCOUNTS_DIR, str(account.id)), exist_ok=True)
                            session_data = {
                                'username': account.username,
                                'account_id': account.id,
                                'updated_at': time.strftime('%Y-%m-%d %H:%M:%S'),
                                'settings': client.get_settings()
                            }
                            with open(session_file, 'w') as f:
                                json.dump(session_data, f)

                            # ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
                            from database.db_manager import update_instagram_account
                            update_instagram_account(account.id, is_active=True, last_check=datetime.now())
                            local_session.close()
                            return (account.username, True, "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥")
                        except Exception as e:
                            # ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
                            from database.db_manager import update_instagram_account
                            update_instagram_account(account.id, is_active=False, last_check=datetime.now())
                            local_session.close()
                            return (account.username, False, str(e))
                        
                except Exception as e:
                    account_name = account.username if 'account' in locals() and account else f"ID {account_id}"
                    # ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –í –ë–ê–ó–ï –î–ê–ù–ù–´–• –ü–†–ò –û–®–ò–ë–ö–ï
                    try:
                        from database.db_manager import update_instagram_account
                        update_instagram_account(account_id, is_active=False, last_check=datetime.now())
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±—â–∏—Ö –æ—à–∏–±–∫–∞—Ö
                    local_session.close()
                    return (account_name, False, str(e))
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –≥—Ä—É–ø–ø—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ª–∏–º–∏—Ç–∞–º
            account_batches = [account_ids[i:i + limits.batch_size] for i in range(0, len(account_ids), limits.batch_size)]
            results = []
            
            for batch_num, batch in enumerate(account_batches, 1):
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                query.edit_message_text(
                    f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã {batch_num}/{len(account_batches)}...\n\n"
                    f"{system_status['emoji']} –°–∏—Å—Ç–µ–º–∞: {system_status['status'].upper()}\n"
                    f"‚öôÔ∏è –ü–æ—Ç–æ–∫–æ–≤: {limits.max_workers}\n"
                    f"üì¶ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {len(batch)}\n"
                    f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏: {limits.delay_between_batches}—Å"
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                with concurrent.futures.ThreadPoolExecutor(max_workers=limits.max_workers) as executor:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
                    future_to_account = {
                        executor.submit(check_single_account, account_id): account_id 
                        for account_id in batch
                    }
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    timeout = 60 * limits.timeout_multiplier
                    done, not_done = concurrent.futures.wait(future_to_account, timeout=timeout)
                    
                    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for future in done:
                        try:
                            result = future.result()
                            results.append(result)
                        except Exception as e:
                            account_id = future_to_account[future]
                            results.append((f"ID {account_id}", False, f"–û—à–∏–±–∫–∞: {e}"))
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                    for future in not_done:
                        account_id = future_to_account[future]
                        results.append((f"ID {account_id}", False, "–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç"))
                        future.cancel()
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
                if batch_num < len(account_batches):
                    time.sleep(limits.delay_between_batches)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:*\n\n"

            for username, is_valid, message in results:
                status = "‚úÖ –í–∞–ª–∏–¥–µ–Ω" if is_valid else "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω"
                report += f"üë§ *{username}*: {status}\n"
                if not is_valid:
                    report += f"üìù –ü—Ä–∏—á–∏–Ω–∞: {message}\n"
                report += "\n"

            keyboard = [[InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='list_accounts')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                report,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞
    return selector.start_selection(update, context, on_accounts_selected)

@trial_allowed
def bulk_upload_accounts_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–ö–°–ò –ü–ï–†–ï–î –ù–ê–ß–ê–õ–û–ú
    session = get_session()
    proxies_count = session.query(Proxy).filter_by(is_active=True).count()
    session.close()
    
    if proxies_count == 0:
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data='menu_proxy')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = (
            "‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏!\n\n"
            "‚ùå –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏.\n"
            "–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Instagram –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏."
        )
        
        if update.callback_query:
            update.callback_query.answer()
            update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
        else:
            update.message.reply_text(message_text, reply_markup=reply_markup)
        
        return ConversationHandler.END

    # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º", callback_data='menu_accounts')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message_text = (
        "üì§ –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram\n\n"
        "üìß –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
        "username:password:email:email_password\n\n"
        "üîπ –°–ø–æ—Å–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∏:\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ TXT —Ñ–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n"
        "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Ç–µ–∫—Å—Ç–æ–º –ø—Ä—è–º–æ –≤ —á–∞—Ç\n\n"
        "üìù –ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.\n"
        "üîÑ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç –ø—Ä–æ–∫—Å–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç IMAP –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é."
    )

    if update.callback_query:
        query = update.callback_query
        query.answer()
        query.edit_message_text(message_text, reply_markup=reply_markup)
    else:
        update.message.reply_text(message_text, reply_markup=reply_markup)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
    context.user_data['waiting_for_accounts_file'] = True
    return WAITING_ACCOUNTS_FILE

@trial_allowed
def bulk_upload_accounts_file(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    print("[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.message.document:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        file = update.message.document
        file_name = file.file_name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not file_name.endswith('.txt'):
            keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='menu_accounts')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .txt",
                reply_markup=reply_markup
            )
            return ConversationHandler.END

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_path = f"temp_{file_name}"
        file_obj = context.bot.get_file(file.file_id)
        file_obj.download(file_path)
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
        except Exception as e:
            keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='menu_accounts')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(file_path)
            except:
                pass
    
    elif update.message.text:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        lines = update.message.text.strip().split('\n')
    
    else:
        keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='menu_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ TXT —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Ç–µ–∫—Å—Ç–æ–º",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    # –ü–∞—Ä—Å–∏–º –∞–∫–∫–∞—É–Ω—Ç—ã - –¢–û–õ–¨–ö–û –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    accounts_for_init = []
    invalid_lines = []
    
    for i, line in enumerate(lines, 1):
        line = line.strip()
        if not line:
            continue

        parts = line.split(':')
        if len(parts) != 4:
            invalid_lines.append(f"–°—Ç—Ä–æ–∫–∞ {i}: {line[:50]}... (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)")
            continue

        username, password, email, email_password = [part.strip() for part in parts]
        
        if not all([username, password, email, email_password]):
            invalid_lines.append(f"–°—Ç—Ä–æ–∫–∞ {i}: –ø—É—Å—Ç—ã–µ –ø–æ–ª—è")
            continue
            
        accounts_for_init.append((username, password, email, email_password))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
    if not accounts_for_init:
        keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='menu_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        error_message = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!\n\n"
        error_message += "–¢—Ä–µ–±—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: username:password:email:email_password\n\n"
        
        if invalid_lines:
            error_message += "–û—à–∏–±–∫–∏:\n"
            for error in invalid_lines[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                error_message += f"‚Ä¢ {error}\n"
            if len(invalid_lines) > 5:
                error_message += f"... –∏ –µ—â–µ {len(invalid_lines) - 5} –æ—à–∏–±–æ–∫"

        update.message.reply_text(error_message, reply_markup=reply_markup)
        return ConversationHandler.END

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    if invalid_lines:
        error_message = f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(invalid_lines)} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫:\n"
        for error in invalid_lines[:3]:
            error_message += f"‚Ä¢ {error}\n"
        if len(invalid_lines) > 3:
            error_message += f"... –∏ –µ—â–µ {len(invalid_lines) - 3}"
        error_message += f"\n\n‚úÖ –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(accounts_for_init)} –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
        update.message.reply_text(error_message)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ø–æ–ª–Ω–æ–π IMAP –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
    update.message.reply_text(
        f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é {len(accounts_for_init)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å IMAP...\n"
        "–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    asyncio.run(async_bulk_add_accounts(update, context, accounts_for_init))

    return ConversationHandler.END

def profile_setup_handler(update, context):
    if update.callback_query:
        query = update.callback_query
        query.answer()

        keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='menu_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            "‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=reply_markup
        )
    else:
        keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='menu_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            "‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=reply_markup
        )

# –ù–æ–≤—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
def process_account_sync(account_data):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    username, password, email, email_password = account_data
    result = {
        "username": username,
        "status": "failed", 
        "message": ""
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        session = get_session()
        existing_account = session.query(InstagramAccount).filter_by(username=username).first()
        session.close()

        if existing_account:
            result["status"] = "skipped"
            result["message"] = "–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            return result

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞
        from database.db_manager import add_instagram_account_without_login
        account = add_instagram_account_without_login(
            username=username,
            password=password,
            email=email,
            email_password=email_password
        )

        if not account:
            result["message"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
            return result

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        from utils.proxy_manager import assign_proxy_to_account
        proxy_success, proxy_message = assign_proxy_to_account(account.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ
        from instagram.email_utils import test_email_connection
        email_success, email_message = test_email_connection(email, email_password)
        
        if not email_success:
            result["message"] = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ: {email_message}"
            return result

        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ Instagram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏
        from instagram.client import test_instagram_login_with_proxy
        
        # –î–µ–ª–∞–µ–º –¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ (—É—á–∏—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—É—é –∑–∞–º–µ–Ω—É –ø—Ä–æ–∫—Å–∏)
        max_attempts = 3
        login_success = False
        
        for attempt in range(1, max_attempts + 1):
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ {attempt}/{max_attempts} –¥–ª—è {username}")
            
            login_success = test_instagram_login_with_proxy(
                account_id=account.id,
                username=username,
                password=password,
                email=email,
                email_password=email_password
            )
            
            if login_success:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è {username} —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt}")
                break
            elif attempt < max_attempts:
                logger.info(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt} –Ω–µ—É–¥–∞—á–Ω–∞ –¥–ª—è {username}, –∂–¥–µ–º 5 —Å–µ–∫—É–Ω–¥...")
                import time
                time.sleep(5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

        if login_success:
            # –ï—Å–ª–∏ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
            from database.db_manager import activate_instagram_account
            activate_instagram_account(account.id)
            result["status"] = "success"
            result["message"] = "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        else:
            result["status"] = "partial"
            result["message"] = "–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Instagram –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
            
        return result
    except Exception as e:
        result["message"] = str(e)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {username}: {str(e)}")
        return result

async def process_account_async(account_data):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    loop = asyncio.get_event_loop()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:
        result = await loop.run_in_executor(executor, process_account_sync, account_data)
    return result

async def async_bulk_add_accounts(update, context, accounts_data):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    update.message.reply_text(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–£–Æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é {len(accounts_data)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—É–ª –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    tasks = []
    for account_data in accounts_data:
        tasks.append(process_account_async(account_data))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –∂–¥–µ–º –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    results = await asyncio.gather(*tasks)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    success_count = sum(1 for r in results if r["status"] == "success")
    partial_count = sum(1 for r in results if r["status"] == "partial")
    skipped_count = sum(1 for r in results if r["status"] == "skipped")
    failed_count = sum(1 for r in results if r["status"] == "failed")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:*\n\n"
    report += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {success_count}\n"
    report += f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {partial_count}\n"
    report += f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {skipped_count}\n"
    report += f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {failed_count}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –Ω–µ—É–¥–∞—á–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º
    failed_accounts = [r for r in results if r["status"] == "failed"]
    if failed_accounts:
        report += "*–û—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:*\n"
        for account in failed_accounts:
            report += f"üë§ *{account['username']}*: {account['message']}\n"
    
    keyboard = [[InlineKeyboardButton("üìä –ö —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='list_accounts')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        report,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

    return ConversationHandler.END

def async_upload_accounts_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    if update.callback_query:
        query = update.callback_query
        query.answer()

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        query.edit_message_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ TXT —Ñ–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Instagram –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.\n\n"
            "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
            "username:password:email:email_password\n"
            "username:password:email:email_password\n"
            "...\n\n"
            "–ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
            reply_markup=reply_markup
        )
        context.user_data['waiting_for_async_accounts_file'] = True
        return WAITING_ACCOUNTS_FILE
    else:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ TXT —Ñ–∞–π–ª —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Instagram –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.\n\n"
            "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
            "username:password:email:email_password\n"
            "username:password:email:email_password\n"
            "...\n\n"
            "–ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
            reply_markup=reply_markup
        )
        context.user_data['waiting_for_async_accounts_file'] = True
        return WAITING_ACCOUNTS_FILE

def async_upload_accounts_file(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    context.user_data['waiting_for_async_accounts_file'] = False

    file = update.message.document

    if not file.file_name.endswith('.txt'):
        keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='menu_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_path = os.path.join(MEDIA_DIR, file.file_name)
    file_obj = context.bot.get_file(file.file_id)
    file_obj.download(file_path)

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        accounts_data = []
        for line in lines:
            line = line.strip()
            if not line:
                continue

            parts = line.split(':')
            if len(parts) != 4:
                continue

            username, password, email, email_password = parts
            accounts_data.append((username.strip(), password.strip(), email.strip(), email_password.strip()))

        if not accounts_data:
            keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='menu_accounts')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            update.message.reply_text(
                "‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
                reply_markup=reply_markup
            )
            return ConversationHandler.END

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        asyncio.run(async_bulk_add_accounts(update, context, accounts_data))

    except Exception as e:
        keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='menu_accounts')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}",
            reply_markup=reply_markup
        )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(file_path)
    except:
        pass

    return ConversationHandler.END

def get_account_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, Filters
    from telegram_bot.utils.account_selection import create_account_selector

    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
    validity_selector = create_account_selector(
        callback_prefix="validity_select",
        title="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
        allow_multiple=True,
        show_status=True,
        show_folders=True,
        back_callback="menu_accounts"
    )

    # –ù–æ–≤—ã–π ConversationHandler –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    bulk_upload_conversation = ConversationHandler(
        entry_points=[
            CommandHandler("upload_accounts", bulk_upload_accounts_command),
            CallbackQueryHandler(bulk_upload_accounts_command, pattern='^upload_accounts$')
        ],
        states={
            WAITING_ACCOUNTS_FILE: [
                MessageHandler(Filters.document.file_extension("txt"), bulk_upload_accounts_file),
                CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern='^menu_accounts$')
            ]
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: ConversationHandler.END)]
    )
    
    # –ù–æ–≤—ã–π ConversationHandler –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    async_upload_conversation = ConversationHandler(
        entry_points=[
            CommandHandler("async_upload_accounts", async_upload_accounts_command),
            CallbackQueryHandler(async_upload_accounts_command, pattern='^async_upload_accounts$')
        ],
        states={
            WAITING_ACCOUNTS_FILE: [
                MessageHandler(Filters.document.file_extension("txt"), async_upload_accounts_file),
                CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern='^menu_accounts$')
            ]
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: ConversationHandler.END)]
    )

    return [
        CommandHandler("accounts", accounts_handler),
        # –£–¥–∞–ª—è–µ–º account_conversation, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ç–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ bot.py
        bulk_upload_conversation,
        async_upload_conversation,
        CommandHandler("list_accounts", list_accounts_handler),
        CommandHandler("profile_setup", profile_setup_handler),
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        CallbackQueryHandler(list_accounts_handler, pattern='^list_accounts$'),
        CallbackQueryHandler(list_accounts_handler, pattern='^list_accounts_page_\\d+$'),
        validity_selector.get_conversation_handler(),  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π –∞–∫–∫–∞—É–Ω—Ç–∞
        CallbackQueryHandler(account_details_handler, pattern='^account_details_\\d+$'),
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º
        CallbackQueryHandler(delete_account_handler, pattern='^delete_account_\\d+$'),
        CallbackQueryHandler(delete_all_accounts_handler, pattern='^delete_all_accounts$'),
        # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å–±—Ä–æ—Å–∞ –æ—à–∏–±–æ–∫
        CallbackQueryHandler(imap_recover_handler, pattern='^imap_recover_\\d+$'),
        CallbackQueryHandler(reset_errors_handler, pattern='^reset_errors_\\d+$'),
        CallbackQueryHandler(confirm_delete_all_accounts_handler, pattern='^confirm_delete_all_accounts$'),
        CallbackQueryHandler(check_accounts_validity_handler, pattern='^check_accounts_validity$'),
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        CallbackQueryHandler(activate_account_handler, pattern='^activate_account_\\d+$'),
        CallbackQueryHandler(deactivate_account_handler, pattern='^deactivate_account_\\d+$'),
        CallbackQueryHandler(check_single_account_handler, pattern='^check_account_\\d+$'),
        CallbackQueryHandler(account_settings_handler, pattern='^account_settings_\\d+$'),
        CallbackQueryHandler(account_stats_handler, pattern='^account_stats_\\d+$'),
        CallbackQueryHandler(manage_account_groups_handler, pattern='^manage_account_groups_\\d+$'),
        CallbackQueryHandler(manage_account_proxy_handler, pattern='^manage_account_proxy_\\d+$'),
        CallbackQueryHandler(publish_to_account_handler, pattern='^publish_to_\\d+$'),
        CallbackQueryHandler(warm_account_handler, pattern='^warm_account_\\d+$'),
        CallbackQueryHandler(quick_warmup_handler, pattern='^quick_warmup_\\d+$'),
        CallbackQueryHandler(smart_warmup_handler, pattern='^smart_warmup_\\d+$'),
        CallbackQueryHandler(warmup_settings_handler, pattern='^warmup_settings_\\d+$'),
        CallbackQueryHandler(lambda u, c: u.callback_query.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"), pattern='^search_accounts$'),
    ]

def bulk_add_accounts_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bulk_add_accounts –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if not context.args:
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "/bulk_add_accounts\n"
            "username1:password1:email1:email_password1\n"
            "username2:password2:email2:email_password2\n"
            "...\n\n"
            "–ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    accounts_text = " ".join(context.args)

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    accounts_lines = accounts_text.strip().split("\n")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_accounts = len(accounts_lines)
    added_accounts = 0
    failed_accounts = 0
    already_exists = 0
    failed_accounts_list = []

    update.message.reply_text(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
    for line in accounts_lines:
        line = line.strip()
        if not line:
            continue

        parts = line.split(":")
        if len(parts) != 4:
            update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line}")
            failed_accounts += 1
            failed_accounts_list.append(f"{line} - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            continue

        username, password, email, email_password = parts

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        session = get_session()
        existing_account = session.query(InstagramAccount).filter_by(username=username).first()
        session.close()

        if existing_account:
            update.message.reply_text(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            already_exists += 1
            continue

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞
            from database.db_manager import add_instagram_account_without_login

            account = add_instagram_account_without_login(
                username=username,
                password=password,
                email=email,
                email_password=email_password
            )

            if not account:
                update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {username} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
                failed_accounts += 1
                failed_accounts_list.append(f"{username} - –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î")
                continue

            # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
            from utils.proxy_manager import assign_proxy_to_account
            proxy_success, proxy_message = assign_proxy_to_account(account.id)

            if not proxy_success:
                update.message.reply_text(f"‚ö†Ô∏è {username}: {proxy_message}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ
            from instagram.email_utils import test_email_connection
            email_success, email_message = test_email_connection(email, email_password)

            if not email_success:
                update.message.reply_text(f"‚ö†Ô∏è {username}: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ: {email_message}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—á—Ç–µ

            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ Instagram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏
            from instagram.client import test_instagram_login_with_proxy
            login_success = test_instagram_login_with_proxy(
                account_id=account.id,
                username=username,
                password=password,
                email=email,
                email_password=email_password
            )

            if login_success:
                # –ï—Å–ª–∏ –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
                from database.db_manager import activate_instagram_account
                activate_instagram_account(account.id)
                update.message.reply_text(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            else:
                update.message.reply_text(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Instagram.")

            added_accounts += 1

        except Exception as e:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {username}: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {username}: {str(e)}")
            failed_accounts += 1
            failed_accounts_list.append(f"{username} - {str(e)}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    summary = (
        f"üìä –ò—Ç–æ–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n"
        f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_accounts}\n"
        f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {added_accounts}\n"
        f"–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {already_exists}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {failed_accounts}"
    )

    update.message.reply_text(summary)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö —Å–ø–∏—Å–æ–∫
    if failed_accounts_list:
        failed_list = "‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n" + "\n".join(failed_accounts_list)
        update.message.reply_text(failed_list)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data='add_account')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data='list_accounts')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    context.user_data['waiting_for_bulk_accounts'] = False

    return ConversationHandler.END

def imap_recover_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("imap_recover_", ""))
    account = get_instagram_account(account_id)
    
    if not account:
        query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not account.email or not account.email_password:
        query.edit_message_text(
            f"‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ @{account.username} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"account_details_{account_id}")]])
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    query.edit_message_text(
        f"üîÑ –ù–∞—á–∏–Ω–∞—é IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è @{account.username}...\n\n"
        f"üìß Email: {account.email}\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 2 –º–∏–Ω—É—Ç"
    )
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        from instagram.email_utils_optimized import get_verification_code_from_email
        from instagram.client import InstagramClient
        from database.db_manager import update_instagram_account
        from datetime import datetime
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        instagram_client = InstagramClient(account_id)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –ø–æ—á—Ç—ã
        verification_code = get_verification_code_from_email(
            account.email, 
            account.email_password, 
            max_attempts=3, 
            delay_between_attempts=15
        )
        
        if verification_code:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            login_success = instagram_client.login_with_challenge_code(verification_code)
            if login_success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                try:
                    instagram_client.client.get_timeline_feed()
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
                    update_instagram_account(
                        account_id,
                        is_active=True,
                        status="active",
                        last_error=None,
                        last_check=datetime.now()
                    )
                    
                    query.edit_message_text(
                        f"‚úÖ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!\n\n"
                        f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account.username}\n"
                        f"üìß –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑: {account.email}\n"
                        f"‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]])
                    )
                except Exception as verify_error:
                    update_instagram_account(
                        account_id,
                        is_active=False,
                        status="recovery_verify_failed",
                        last_error=f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}",
                        last_check=datetime.now()
                    )
                    
                    query.edit_message_text(
                        f"‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å\n\n"
                        f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account.username}\n"
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(verify_error)[:100]}",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]])
                    )
            else:
                update_instagram_account(
                    account_id,
                    is_active=False,
                    status="recovery_login_failed",
                    last_error="–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                    last_check=datetime.now()
                )
                
                query.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏\n\n"
                    f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account.username}\n"
                    f"üìß Email: {account.email}\n"
                    f"üîê –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]])
                )
        else:
            update_instagram_account(
                account_id,
                is_active=False,
                status="email_code_failed",
                last_error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ email",
                last_check=datetime.now()
            )
            
            query.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ email\n\n"
                f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account.username}\n"
                f"üìß Email: {account.email}\n"
                f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]])
            )
            
    except Exception as e:
        error_msg = str(e) if e else "Unknown error"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if error_msg and "challenge_required" in error_msg.lower():
            error_type = "challenge_required"
        elif error_msg and "login_required" in error_msg.lower():
            error_type = "login_required"
        elif error_msg and "email" in error_msg.lower():
            error_type = "email_error"
        else:
            error_type = "recovery_error"
        
        update_instagram_account(
            account_id,
            is_active=False,
            status=error_type,
            last_error=error_msg,
            last_check=datetime.now()
        )
        
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏\n\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account.username}\n"
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_msg[:100]}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]])
        )

def reset_errors_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ –æ—à–∏–±–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("reset_errors_", ""))
    account = get_instagram_account(account_id)
    
    if not account:
        query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        from database.db_manager import update_instagram_account
        from datetime import datetime
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å
        update_instagram_account(
            account_id,
            status="active",
            last_error=None,
            last_check=datetime.now()
        )
        
        query.edit_message_text(
            f"‚úÖ –û—à–∏–±–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã\n\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account.username}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω –Ω–∞ 'active'\n"
            f"üö´ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –æ—á–∏—â–µ–Ω–∞\n\n"
            f"‚ÑπÔ∏è –ê–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]])
        )
        
    except Exception as e:
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ\n\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account.username}\n"
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)[:100]}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]])
        )


def activate_account_handler(update, context):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("activate_account_", ""))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    query.edit_message_text(
        f"üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É—é –∞–∫–∫–∞—É–Ω—Ç...\n\n"
        f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏.\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )
    
    try:
        account = get_instagram_account(account_id)
        if not account:
            query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
        from instagram.client import test_instagram_login_with_proxy
        
        success = test_instagram_login_with_proxy(
            account_id=account_id,
            username=account.username,
            password=account.password,
            email=account.email,
            email_password=account.email_password
        )
        
        if success:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
            activate_instagram_account(account_id)
            
            keyboard = [[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{account.username} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                f"üîê –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n"
                f"üì° –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
                f"‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
                reply_markup=reply_markup
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üîß IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data=f"imap_recover_{account_id}")],
                [InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç @{account.username}\n\n"
                f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞\n"
                f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:",
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:\n{str(e)}",
            reply_markup=reply_markup
        )

def deactivate_account_handler(update, context):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("deactivate_account_", ""))
    
    try:
        account = get_instagram_account(account_id)
        if not account:
            query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
        from database.db_manager import update_instagram_account
        update_instagram_account(account_id, is_active=False, status='manually_deactivated')
        
        keyboard = [[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            f"‚è∏Ô∏è –ê–∫–∫–∞—É–Ω—Ç @{account.username} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n"
            f"–ê–∫–∫–∞—É–Ω—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è:\n"
            f"‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
            f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ–≤–∞\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def check_single_account_handler(update, context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("check_account_", ""))
    
    query.edit_message_text(
        f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...\n\n"
        f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è:\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Instagram\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏\n"
        f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ email –¥–æ—Å—Ç—É–ø–∞\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫"
    )
    
    try:
        account = get_instagram_account(account_id)
        if not account:
            query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        report = []
        overall_status = "‚úÖ"
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Instagram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        from instagram.client import test_instagram_login_with_proxy
        instagram_ok = test_instagram_login_with_proxy(
            account_id=account_id,
            username=account.username,
            password=account.password,
            email=account.email,
            email_password=account.email_password
        )
        
        if instagram_ok:
            report.append("‚úÖ Instagram: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            report.append("‚ùå Instagram: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            overall_status = "‚ùå"
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ email
        if account.email and account.email_password:
            from instagram.email_utils import test_email_connection
            email_ok, email_msg = test_email_connection(account.email, account.email_password)
            if email_ok:
                report.append("‚úÖ Email: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                report.append(f"‚ùå Email: {email_msg}")
                overall_status = "‚ö†Ô∏è"
        else:
            report.append("‚ö†Ô∏è Email: –î–∞–Ω–Ω—ã–µ –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
            
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏
        if account.proxy:
            report.append(f"‚úÖ –ü—Ä–æ–∫—Å–∏: {account.proxy.host}:{account.proxy.port}")
        else:
            report.append("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω")
            overall_status = "‚ö†Ô∏è"
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        from database.db_manager import update_instagram_account
        from datetime import datetime
        update_instagram_account(account_id, last_check=datetime.now())
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        status_text = {
            "‚úÖ": "–ò—Å–ø—Ä–∞–≤–µ–Ω",
            "‚ö†Ô∏è": "–ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", 
            "‚ùå": "–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"
        }
        
        text = f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò\n\n"
        text += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account.username}\n"
        text += f"üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {overall_status} {status_text[overall_status]}\n\n"
        text += f"üìã –î–µ—Ç–∞–ª–∏:\n"
        for item in report:
            text += f"  {item}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"check_account_{account_id}")],
            [InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞:\n{str(e)}",
            reply_markup=reply_markup
        )

def account_settings_handler(update, context):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("account_settings_", ""))
    account = get_instagram_account(account_id)
    
    if not account:
        query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = f"‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ê–ö–ö–ê–£–ù–¢–ê\n\n"
    text += f"üë§ @{account.username}\n\n"
    text += f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    
    keyboard = [
        [InlineKeyboardButton("üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data=f"change_password_{account_id}")],
        [InlineKeyboardButton("üìß –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data=f"change_email_{account_id}")],
        [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data=f"change_proxy_{account_id}")],
        [InlineKeyboardButton("üì± –°–±—Ä–æ—Å–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", callback_data=f"reset_device_{account_id}")],
        [InlineKeyboardButton("üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏", callback_data=f"manage_account_groups_{account_id}")],
        [InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(text, reply_markup=reply_markup)

def account_stats_handler(update, context):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("account_stats_", ""))
    account = get_instagram_account(account_id)
    
    if not account:
        query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏–∑ –±–∞–∑—ã
        session = get_session()
        from database.models import PublishTask
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        total_posts = session.query(PublishTask).filter_by(account_id=account_id).count()
        completed_posts = session.query(PublishTask).filter_by(account_id=account_id, status='completed').count()
        failed_posts = session.query(PublishTask).filter_by(account_id=account_id, status='failed').count()
        pending_posts = session.query(PublishTask).filter_by(account_id=account_id, status='pending').count()
        
        session.close()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞
        success_rate = (completed_posts / total_posts * 100) if total_posts > 0 else 0
        
        text = f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–ö–ê–£–ù–¢–ê\n\n"
        text += f"üë§ @{account.username}\n"
        text += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {account.created_at.strftime('%d.%m.%Y')}\n\n"
        
        text += f"üìà –ü–£–ë–õ–ò–ö–ê–¶–ò–ò:\n"
        text += f"  üì§ –í—Å–µ–≥–æ: {total_posts}\n"
        text += f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ: {completed_posts}\n"
        text += f"  ‚ùå –û—à–∏–±–æ–∫: {failed_posts}\n"
        text += f"  ‚è≥ –û–∂–∏–¥–∞–µ—Ç: {pending_posts}\n"
        text += f"  üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n\n"
        
        if account.last_check:
            text += f"üîç –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {account.last_check.strftime('%d.%m.%Y %H:%M')}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö
        if account.groups:
            text += f"\nüìÅ –ì—Ä—É–ø–ø—ã: {', '.join([g.name for g in account.groups])}\n"
        
        keyboard = [
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data=f"detailed_analytics_{account_id}")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"account_stats_{account_id}")],
            [InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

def manage_account_groups_handler(update, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("manage_account_groups_", ""))
    account = get_instagram_account(account_id)
    
    if not account:
        query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    session = get_session()
    from database.models import AccountGroup
    all_groups = session.query(AccountGroup).all()
    current_groups = account.groups
    session.close()
    
    text = f"üìÅ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–†–£–ü–ü–ê–ú–ò\n\n"
    text += f"üë§ @{account.username}\n\n"
    
    if current_groups:
        text += f"üìå –¢–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã:\n"
        for group in current_groups:
            text += f"  {group.icon} {group.name}\n"
        text += "\n"
    else:
        text += f"üìå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö\n\n"
    
    text += f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã
    if all_groups:
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", callback_data=f"add_to_group_{account_id}")])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø
    if current_groups:
        keyboard.append([InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã", callback_data=f"remove_from_group_{account_id}")])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
    keyboard.append([InlineKeyboardButton("üìÇ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É", callback_data=f"create_group_{account_id}")])
    keyboard.append([InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup)

def manage_account_proxy_handler(update, context):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("manage_account_proxy_", ""))
    account = get_instagram_account(account_id)
    
    if not account:
        query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    text = f"üåê –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ö–°–ò\n\n"
    text += f"üë§ @{account.username}\n\n"
    
    if account.proxy:
        text += f"üì° –¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏:\n"
        text += f"  üåê {account.proxy.host}:{account.proxy.port}\n"
        text += f"  üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if account.proxy.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
    else:
        text += f"üì° –ü—Ä–æ–∫—Å–∏: –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω\n\n"
    
    text += f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data=f"change_proxy_{account_id}")],
        [InlineKeyboardButton("üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∫—Å–∏", callback_data=f"test_proxy_{account_id}")],
    ]
    
    if account.proxy:
        keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏", callback_data=f"proxy_stats_{account_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(text, reply_markup=reply_markup)

def publish_to_account_handler(update, context):
    """–ë—ã—Å—Ç—Ä–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("publish_to_", ""))
    account = get_instagram_account(account_id)
    
    if not account:
        query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['publish_account_id'] = account_id
    context.user_data['publish_account_username'] = account.username
    context.user_data['selected_accounts'] = [account_id]
    
    text = f"üì§ –ë–´–°–¢–†–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø\n\n"
    text += f"üë§ –í—ã–±—Ä–∞–Ω: @{account.username}\n\n"
    text += f"üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
    
    keyboard = [
        [InlineKeyboardButton("üì∏ –ü–æ—Å—Ç", callback_data="start_post_publish")],
        [InlineKeyboardButton("üì± Story", callback_data="start_story_publish")],
        [InlineKeyboardButton("üé• Reels", callback_data="start_reels_publish")],
        [InlineKeyboardButton("üé¨ IGTV", callback_data="start_igtv_publish")],
        [InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(text, reply_markup=reply_markup)

def warm_account_handler(update, context):
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("warm_account_", ""))
    account = get_instagram_account(account_id)
    
    if not account:
        query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if not account.is_active:
        keyboard = [[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç @{account.username} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω\n\n"
            f"–î–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç.",
            reply_markup=reply_markup
        )
        return
    
    text = f"üî• –ü–†–û–ì–†–ï–í –ê–ö–ö–ê–£–ù–¢–ê\n\n"
    text += f"üë§ @{account.username}\n\n"
    text += f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≥—Ä–µ–≤–∞:"
    
    keyboard = [
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤", callback_data=f"quick_warmup_{account_id}")],
        [InlineKeyboardButton("üéØ –£–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤", callback_data=f"smart_warmup_{account_id}")],
        [InlineKeyboardButton("üé® –ü—Ä–æ–≥—Ä–µ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º", callback_data=f"interest_warmup_{account_id}")],
        [InlineKeyboardButton("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data=f"warmup_settings_{account_id}")],
        [InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"account_details_{account_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(text, reply_markup=reply_markup)


def quick_warmup_handler(update, context):
    """–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer("‚ö° –ó–∞–ø—É—Å–∫–∞—é –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤...")
    
    account_id = int(query.data.replace("quick_warmup_", ""))
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≥—Ä–µ–≤–∞
    from services.advanced_warmup import advanced_warmup
    
    keyboard = [[InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"warm_account_{account_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        "‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∑–∞–ø—É—â–µ–Ω!\n\n"
        "‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 5-15 –º–∏–Ω—É—Ç\n"
        "üì± –ê–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –≤ Instagram\n\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
        reply_markup=reply_markup
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –≤ —Ñ–æ–Ω–µ
    from threading import Thread
    def run_warmup():
        try:
            success, report = advanced_warmup.start_warmup(
                account_id=account_id,
                duration_minutes=10
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if success:
                context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n{report}"
                )
            else:
                context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞: {report}"
                )
        except Exception as e:
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            )
        
    thread = Thread(target=run_warmup)
    thread.start()
    
    
def smart_warmup_handler(update, context):
    """–£–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer("üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞–∫–∫–∞—É–Ω—Ç...")
    
    account_id = int(query.data.replace("smart_warmup_", ""))
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º AccountAutomationService –¥–ª—è —É–º–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞
    from services.account_automation import automation_service
    
    keyboard = [[InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"warm_account_{account_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
    status = automation_service.get_account_status(account_id)
    
    text = "üéØ –£–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∑–∞–ø—É—â–µ–Ω!\n\n"
    text += f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {status.get('overall_status', 'N/A')}\n"
    text += f"üíö –ó–¥–æ—Ä–æ–≤—å–µ: {status.get('health_score', 0)}%\n"
    text += f"‚ö†Ô∏è –†–∏—Å–∫ –±–∞–Ω–∞: {status.get('ban_risk_score', 0)}%\n\n"
    text += "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–µ—Ä–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n\n"
    text += "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏."
    
    query.edit_message_text(text, reply_markup=reply_markup)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –≤ —Ñ–æ–Ω–µ
    from threading import Thread
    def run_smart_warmup():
        try:
            success, message = automation_service.smart_warm_account(account_id)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if success:
                context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"‚úÖ –£–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n{message}"
                )
            else:
                context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞: {message}"
                )
        except Exception as e:
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            )
        
    thread = Thread(target=run_smart_warmup)
    thread.start()


def warmup_settings_handler(update, context):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("warmup_settings_", ""))
    account = get_instagram_account(account_id)
    
    if not account:
        query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞
    from services.advanced_warmup import advanced_warmup
    strategy = advanced_warmup.determine_strategy(account_id)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
    if account.created_at:
        age_days = (datetime.now() - account.created_at).days
        age_text = f"{age_days} –¥–Ω–µ–π"
    else:
        age_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    text = f"üìä –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–ì–†–ï–í–ê\n\n"
    text += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account.username}\n"
    text += f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {age_text}\n"
    text += f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy.value}\n\n"
    
    if strategy.value == "baby":
        text += "üë∂ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n"
        text += "‚Ä¢ 10-20 –¥–µ–π—Å—Ç–≤–∏–π –≤ —á–∞—Å\n"
        text += "‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–µ—Å—Å–∏–∏ (5-15 –º–∏–Ω)\n"
        text += "‚Ä¢ –ë–æ–ª—å—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, –º–µ–Ω—å—à–µ –¥–µ–π—Å—Ç–≤–∏–π\n"
    elif strategy.value == "child":
        text += "üßí –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –º–æ–ª–æ–¥—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n"
        text += "‚Ä¢ 20-40 –¥–µ–π—Å—Ç–≤–∏–π –≤ —á–∞—Å\n"
        text += "‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (10-30 –º–∏–Ω)\n"
        text += "‚Ä¢ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å\n"
    elif strategy.value == "teen":
        text += "üë¶ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤:\n"
        text += "‚Ä¢ 40-80 –¥–µ–π—Å—Ç–≤–∏–π –≤ —á–∞—Å\n"
        text += "‚Ä¢ –î–ª–∏–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (20-45 –º–∏–Ω)\n"
        text += "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç—ã\n"
    else:
        text += "üë® –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö:\n"
        text += "‚Ä¢ 80-150 –¥–µ–π—Å—Ç–≤–∏–π –≤ —á–∞—Å\n"
        text += "‚Ä¢ –ü–æ–ª–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (30-60 –º–∏–Ω)\n"
        text += "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–æ–≤
    if hasattr(account, 'last_warmup') and account.last_warmup:
        last_warmup = account.last_warmup.strftime("%d.%m.%Y %H:%M")
        text += f"\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ–≤: {last_warmup}"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", callback_data=f"change_warmup_strategy_{account_id}")],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–æ–≤", callback_data=f"warmup_stats_{account_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"warm_account_{account_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(text, reply_markup=reply_markup)

def start_command_with_subscription(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞ –∏ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –î–ï–ë–ê–ì: –ª–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    logger.info(f"üîß –î–ï–ë–ê–ì: start_command_with_subscription –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ (–ë–ï–ó –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è)
    from utils.subscription_service import subscription_service
    subscription_info = subscription_service.check_user_access(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
    if subscription_info['user'] and subscription_info['user'].subscription_plan:
        from admin_bot.models.user import PLAN_INFO
        plan_info = PLAN_INFO.get(subscription_info['user'].subscription_plan, {})
        subscription_info['plan_name'] = plan_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω')
        subscription_info['plan_price'] = plan_info.get('price', 0)
    else:
        subscription_info['plan_name'] = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω'
        subscription_info['plan_price'] = 0
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ù–ï —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    # –ü—É—Å—Ç—å –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    logger.info(f"üîß –î–ï–ë–ê–ì: subscription_info = {subscription_info}")
    
    if subscription_info['has_access']:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ï–°–¢–¨ –¥–æ—Å—Ç—É–ø - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_text = f"–ü—Ä–∏–≤–µ—Ç, @{username}! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Instagram.\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
        plan_name = subscription_info.get('plan_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω')
        days_remaining = subscription_info.get('days_remaining', 0)
        
        if subscription_info['is_trial']:
            welcome_text += f"üÜì **–í–∞—à —Å—Ç–∞—Ç—É—Å:** {plan_name}\n"
            welcome_text += f"‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:** {days_remaining}\n\n"
            welcome_text += "üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–ª–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–∏–∞–ª–∞!\n\n"
        else:
            welcome_text += f"üíé **–í–∞—à —Å—Ç–∞—Ç—É—Å:** {plan_name}\n"
            if days_remaining != float('inf'):
                welcome_text += f"‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:** {days_remaining}\n\n"
            else:
                welcome_text += "‚ôæÔ∏è **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø**\n\n"
        
        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        
        # –ü–æ–ª–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º
        keyboard = [
            [InlineKeyboardButton("üë• –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="accounts_menu")],
            [InlineKeyboardButton("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="publish_menu")],
            [InlineKeyboardButton("üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="scheduled_menu")],
            [InlineKeyboardButton("üî• –ü—Ä–æ–≥—Ä–µ–≤", callback_data="warmup_menu")],
            [InlineKeyboardButton("üåê –ü—Ä–æ–∫—Å–∏", callback_data="proxy_menu")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="analytics_menu")],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")]
        ]
        
    else:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï–¢ –¥–æ—Å—Ç—É–ø–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å—Ä–∞–∑—É
        status = subscription_info.get('status', 'unknown')
        
        welcome_text = f"üîí **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
        welcome_text += f"üë§ @{username} (ID: `{user_id}`)\n"
        welcome_text += f"üìä –°—Ç–∞—Ç—É—Å: ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
        
        if status == 'not_registered':
            welcome_text += "üí≥ **–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞:**\n"
            welcome_text += "‚Ä¢ üÜì –¢—Ä–∏–∞–ª 1-7 –¥–Ω–µ–π - –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
            welcome_text += "‚Ä¢ üí≥ 1 –º–µ—Å—è—Ü - $200\n"
            welcome_text += "‚Ä¢ üí≥ 3 –º–µ—Å—è—Ü–∞ - $400\n"
            welcome_text += "‚Ä¢ üíé –ù–∞–≤—Å–µ–≥–¥–∞ - $500\n\n"
            welcome_text += f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin\n"
            welcome_text += f"üì® –°–æ–æ–±—â–∏—Ç–µ –≤–∞—à ID: `{user_id}`\n\n"
            welcome_text += "–ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø\" –Ω–∏–∂–µ."
            
        elif status == 'expired':
            welcome_text += "‚è∞ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞**\n\n"
            welcome_text += "üí≥ **–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:**\n"
            welcome_text += "‚Ä¢ 1 –º–µ—Å—è—Ü - $200\n"
            welcome_text += "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - $400\n" 
            welcome_text += "‚Ä¢ –ù–∞–≤—Å–µ–≥–¥–∞ - $500\n\n"
            welcome_text += f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin\n"
            welcome_text += f"üì® –°–æ–æ–±—â–∏—Ç–µ –≤–∞—à ID: `{user_id}`\n\n"
            welcome_text += "–ü–æ—Å–ª–µ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø\" –Ω–∏–∂–µ."
            
        elif status == 'blocked':
            welcome_text += "üö´ **–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**\n\n"
            welcome_text += f"üìû –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin\n"
            welcome_text += f"üì® –°–æ–æ–±—â–∏—Ç–µ –≤–∞—à ID: `{user_id}`\n\n"
            welcome_text += "–ü–æ—Å–ª–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø\" –Ω–∏–∂–µ."
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="refresh_access")],
            [InlineKeyboardButton("üîí –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://t.me/admin")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="subscription_info")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

def refresh_access_callback(update, context):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    query.answer()
    
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    from utils.subscription_service import subscription_service
    subscription_service.ensure_user_exists(user_id, username)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription_info = get_user_subscription_info(user_id)
    
    if subscription_info['has_access']:
        # –î–æ—Å—Ç—É–ø –ø–æ—è–≤–∏–ª—Å—è! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        success_text = f"‚úÖ **–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
        success_text += f"üë§ @{username}\n"
        
        plan_name = subscription_info.get('plan_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω')
        days_remaining = subscription_info.get('days_remaining', 0)
        
        if subscription_info['is_trial']:
            success_text += f"üÜì **–í–∞—à —Å—Ç–∞—Ç—É—Å:** {plan_name}\n"
            success_text += f"‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:** {days_remaining}\n\n"
            success_text += "üí° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n\n"
        else:
            success_text += f"üíé **–í–∞—à —Å—Ç–∞—Ç—É—Å:** {plan_name}\n"
            if days_remaining != float('inf'):
                success_text += f"‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:** {days_remaining}\n\n"
            else:
                success_text += "‚ôæÔ∏è **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø**\n\n"
        
        success_text += "–ù–∞–∂–º–∏—Ç–µ \"–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É\" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!"
        
        keyboard = [[InlineKeyboardButton("üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            success_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –î–æ—Å—Ç—É–ø –≤—Å–µ –µ—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        status = subscription_info.get('status', 'unknown')
        
        blocked_text = f"üîí **–î–æ—Å—Ç—É–ø –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
        blocked_text += f"üë§ @{username} (ID: `{user_id}`)\n"
        
        if status == 'not_registered':
            blocked_text += f"üìä –°—Ç–∞—Ç—É—Å: ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ\n\n"
            blocked_text += "üí≥ **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:**\n"
            blocked_text += "1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin\n"
            blocked_text += f"2. –°–æ–æ–±—â–∏—Ç–µ –≤–∞—à ID: `{user_id}`\n"
            blocked_text += "3. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ\n"
            blocked_text += "4. –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ \"–û–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø\"\n\n"
        elif status == 'expired':
            blocked_text += f"üìä –°—Ç–∞—Ç—É—Å: ‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\n\n"
            blocked_text += "üí≥ **–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:**\n"
            blocked_text += "1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin\n"
            blocked_text += f"2. –°–æ–æ–±—â–∏—Ç–µ –≤–∞—à ID: `{user_id}`\n"
            blocked_text += "3. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\n\n"
        elif status == 'blocked':
            blocked_text += f"üìä –°—Ç–∞—Ç—É—Å: üö´ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n\n"
            blocked_text += "üìû –î–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin\n\n"
        
        blocked_text += "üîÑ –ù–∞–∂–º–∏—Ç–µ \"–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞\" –ø–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã."
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="refresh_access")],
            [InlineKeyboardButton("üîí –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://t.me/admin")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="subscription_info")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            blocked_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

def subscription_info_callback(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    query = update.callback_query
    query.answer()
    
    user_id = update.effective_user.id
    subscription_info = get_user_subscription_info(user_id)
    
    info_text = "üìä **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–î–ü–ò–°–ö–ï**\n\n"
    
    if subscription_info['has_access']:
        plan_name = subscription_info.get('plan_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω')
        plan_price = subscription_info.get('plan_price', 0)
        start_date = subscription_info.get('subscription_start')
        end_date = subscription_info.get('subscription_end')
        last_activity = subscription_info.get('last_activity')
        
        info_text += f"üíé **–ü–ª–∞–Ω:** {plan_name}\n"
        info_text += f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${plan_price}\n"
        
        if start_date:
            info_text += f"üìÖ **–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** {start_date}\n"
        if end_date:
            info_text += f"üìÖ **–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:** {end_date}\n"
        else:
            info_text += "‚ôæÔ∏è **–ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n"
        
        if last_activity:
            info_text += f"üïê **–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {last_activity}\n"
        
        days_remaining = subscription_info.get('days_remaining', 0)
        if days_remaining != float('inf'):
            info_text += f"\n‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:** {days_remaining}\n"
        
        info_text += f"\nüì± **–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ:** {subscription_info.get('accounts_count', 0)}\n"
        
    else:
        info_text += "‚ùå **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞**\n\n"
        info_text += "üõí **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**\n"
        info_text += "üÜì –¢—Ä–∏–∞–ª 1 –¥–µ–Ω—å - –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        info_text += "üÜì –¢—Ä–∏–∞–ª 3 –¥–Ω—è - –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        info_text += "üÜì –¢—Ä–∏–∞–ª 7 –¥–Ω–µ–π - –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
        info_text += "üí≥ 1 –º–µ—Å—è—Ü - $200\n"
        info_text += "üí≥ 3 –º–µ—Å—è—Ü–∞ - $400\n"
        info_text += "üíé –ù–∞–≤—Å–µ–≥–¥–∞ - $500\n\n"
        info_text += "üìû –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin\n"
    
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        info_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

