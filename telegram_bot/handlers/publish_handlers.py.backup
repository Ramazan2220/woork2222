import os
import tempfile
import json
import logging
import threading
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import ConversationHandler

from database.db_manager import get_instagram_account, get_instagram_accounts, create_publish_task
from instagram_api.publisher import publish_video
from database.models import TaskType, TaskStatus
from instagram.reels_manager import publish_reels_in_parallel
from utils.task_queue import add_task_to_queue, get_task_status
from telegram_bot.utils.account_selection import create_account_selector

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è uuid
import uuid

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
CHOOSE_ACCOUNT, UPLOAD_MEDIA, ENTER_CAPTION, ENTER_HASHTAGS, CONFIRM_PUBLISH, CHOOSE_SCHEDULE, CHOOSE_HIDE_FROM_FEED = range(10, 17)

def is_admin(user_id):
    from telegram_bot.bot import is_admin
    return is_admin(user_id)

def publish_now_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        if update.message:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        else:
            update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    selector = create_account_selector(
        callback_prefix="publish_select",
        title="üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        allow_multiple=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        show_status=True,
        show_folders=True,
        back_callback="menu_publish"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def on_accounts_selected(account_ids: list, update_inner, context_inner):
        if account_ids:
            context_inner.user_data['selected_accounts'] = account_ids
            context_inner.user_data['publish_account_ids'] = account_ids
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç
            if len(account_ids) == 1:
                account = get_instagram_account(account_ids[0])
                context_inner.user_data['publish_account_id'] = account_ids[0]
                context_inner.user_data['publish_account_username'] = account.username
                context_inner.user_data['publish_to_all_accounts'] = False
            else:
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                context_inner.user_data['publish_to_all_accounts'] = True
                accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
                context_inner.user_data['publish_account_usernames'] = [acc.username for acc in accounts]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª
            if 'publish_media_path' in context_inner.user_data:
                # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–¥–ø–∏—Å–∏
                query = update_inner.callback_query
                publish_type = context_inner.user_data.get('publish_type', 'post')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ç–∏–ø –º–µ–¥–∏–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å
                if publish_type == 'story':
                    media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"
                elif publish_type == 'reels':
                    media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è Reels"
                elif publish_type == 'igtv':
                    media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è IGTV"
                else:  # post
                    media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞"
                
                if len(account_ids) == 1:
                    account = get_instagram_account(account_ids[0])
        query.edit_message_text(
                        f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{account.username}*\n\n"
                        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {media_prompt}:",
                        parse_mode=ParseMode.MARKDOWN
        )
    else:
                    accounts_str = ", ".join(context_inner.user_data['publish_account_usernames'])
                    query.edit_message_text(
                        f"–í—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã ({len(account_ids)}):\n{accounts_str}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {media_prompt}:"
                    )
                return UPLOAD_MEDIA
            else:
                # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
                query = update_inner.callback_query
                publish_type = context_inner.user_data.get('publish_type', 'post')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ç–∏–ø –º–µ–¥–∏–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å
                if publish_type == 'story':
                    media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"
                elif publish_type == 'reels':
                    media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è Reels"
                elif publish_type == 'igtv':
                    media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è IGTV"
                else:  # post
                    media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞"
                
                if len(account_ids) == 1:
                    account = get_instagram_account(account_ids[0])
                    query.edit_message_text(
                        f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{account.username}*\n\n"
                        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {media_prompt}:",
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    accounts_str = ", ".join(context_inner.user_data['publish_account_usernames'])
                    query.edit_message_text(
                        f"–í—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã ({len(account_ids)}):\n{accounts_str}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {media_prompt}:"
                    )
                return ConversationHandler.END
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞
    return selector.start_selection(update, context, on_accounts_selected)

def choose_account_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
    account_id = int(query.data.split('_')[-1])
    context.user_data['publish_account_id'] = account_id

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if 'selected_accounts' not in context.user_data:
        context.user_data['selected_accounts'] = []
    context.user_data['selected_accounts'].append(account_id)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    account = get_instagram_account(account_id)
    context.user_data['publish_account_username'] = account.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª
    if 'publish_media_path' in context.user_data:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–¥–ø–∏—Å–∏
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{account.username}*\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):",
            parse_mode=ParseMode.MARKDOWN
        )
        return ENTER_CAPTION
    else:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
        publish_type = context.user_data.get('publish_type', 'post')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ç–∏–ø –º–µ–¥–∏–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å
        if publish_type == 'story':
            media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"
        elif publish_type == 'reels':
            media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è Reels"
        elif publish_type == 'igtv':
            media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è IGTV"
        else:  # post
            media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞"
        
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{account.username}*\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {media_prompt}:",
            parse_mode=ParseMode.MARKDOWN
        )
        return UPLOAD_MEDIA

def choose_all_accounts_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    accounts = get_instagram_accounts()
    active_accounts = [account for account in accounts if account.is_active]

    if not active_accounts:
        query.edit_message_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    account_ids = [account.id for account in active_accounts]
    context.user_data['publish_account_ids'] = account_ids
    context.user_data['publish_to_all_accounts'] = True

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    account_usernames = [account.username for account in active_accounts]
    context.user_data['publish_account_usernames'] = account_usernames

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    account_names = [account.username for account in active_accounts]
    accounts_str = ", ".join(account_names)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª
    if 'publish_media_path' in context.user_data:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–¥–ø–∏—Å–∏
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã ({len(active_accounts)}):\n{accounts_str}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
        )
        return ENTER_CAPTION
    else:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
        publish_type = context.user_data.get('publish_type', 'post')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ç–∏–ø –º–µ–¥–∏–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å
        if publish_type == 'story':
            media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"
        elif publish_type == 'reels':
            media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è Reels"
        elif publish_type == 'igtv':
            media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è IGTV"
        else:  # post
            media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞"
            
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã ({len(active_accounts)}):\n{accounts_str}\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {media_prompt}:"
        )
        return ConversationHandler.END  # –ó–¥–µ—Å—å –º—ã –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ

def choose_category_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "üöß –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã."
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞
    return publish_now_handler(update, context)

def media_upload_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ç–∞—Ä—ã—Ö conversation handlers)"""
    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∏–ø–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (story, reels, igtv)
    publish_type = context.user_data.get('publish_type', 'post')
    
    if publish_type == 'post':
        # –î–ª—è –ø–æ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        return handle_media_upload(update, context)
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        return old_media_upload_handler(update, context)

def old_media_upload_handler(update, context):
    """–°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ (–¥–ª—è story, reels, igtv)"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã
    if 'publish_account_id' not in context.user_data and 'publish_account_ids' not in context.user_data:
        # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        # Store the media file information for later use
        if update.message.photo:
            context.user_data['pending_media'] = update.message.photo[-1]
            context.user_data['pending_media_type'] = 'PHOTO'
        elif update.message.video:
            context.user_data['pending_media'] = update.message.video
            context.user_data['pending_media_type'] = 'VIDEO'
        elif update.message.document:
            context.user_data['pending_media'] = update.message.document
            context.user_data['pending_media_type'] = 'VIDEO' if update.message.document.mime_type.startswith('video/') else 'PHOTO'
        
        return publish_now_handler(update, context)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    media_file = None
    media_type = None
    file_extension = '.jpg'
    
    if update.message.photo:
        media_file = update.message.photo[-1]
        media_type = 'PHOTO'
        file_extension = '.jpg'
    elif update.message.video:
        media_file = update.message.video
        media_type = 'VIDEO'
        file_extension = '.mp4'
    elif update.message.document:
        media_file = update.message.document
        if media_file.mime_type.startswith('video/'):
            media_type = 'VIDEO'
            file_extension = '.mp4'
        else:
            media_type = 'PHOTO'
            file_extension = '.jpg'
    
    if not media_file:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        return

    file_id = media_file.file_id

    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞
    media = context.bot.get_file(file_id)

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞
    with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as temp_file:
        media_path = temp_file.name

    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    media.download(media_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –º–µ–¥–∏–∞ –∏ —Ç–∏–ø –º–µ–¥–∏–∞
    context.user_data['publish_media_path'] = media_path
    context.user_data['publish_media_type'] = media_type

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    publish_type = context.user_data.get('publish_type', 'post')
    
    if publish_type == 'story':
        update.message.reply_text(
            "üì± –ú–µ–¥–∏–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –∏—Å—Ç–æ—Ä–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
        )
    elif publish_type == 'reels':
        update.message.reply_text(
            "üé• –í–∏–¥–µ–æ –¥–ª—è Reels —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ Reels (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
        )
    elif publish_type == 'igtv':
        update.message.reply_text(
            "üé¨ –í–∏–¥–µ–æ –¥–ª—è IGTV —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ IGTV (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
        )
    else:
        update.message.reply_text(
            "üì∏ –ú–µ–¥–∏–∞ –¥–ª—è –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
        )

    return ENTER_CAPTION

def enter_caption(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    if update.message.text == '/skip':
        context.user_data['publish_caption'] = ""
    else:
        context.user_data['publish_caption'] = update.message.text

    publish_type = context.user_data.get('publish_type', 'post')
    media_type = context.user_data.get('publish_media_type')

    # –î–ª—è —Ä–∏–ª—Å–æ–≤ (–≤–∏–¥–µ–æ) —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ
    if publish_type == 'reels' and media_type == 'VIDEO':
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ", callback_data='keep_in_feed'),
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏", callback_data='hide_from_feed')
            ],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç—å —Ä–∏–ª—Å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è?\n"
            "(–†–∏–ª—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ Reels, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)",
            reply_markup=reply_markup
        )
        return CHOOSE_HIDE_FROM_FEED
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        return show_publish_confirmation(update, context)

def choose_hide_from_feed(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ä–∏–ª—Å–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ"""
    query = update.callback_query
    query.answer()

    if query.data == 'hide_from_feed':
        context.user_data['hide_from_feed'] = True
        query.edit_message_text("–†–∏–ª—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
    else:  # keep_in_feed
        context.user_data['hide_from_feed'] = False
        query.edit_message_text("–†–∏–ª—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    return show_publish_confirmation(update, context, is_callback=True)

def show_publish_confirmation(update, context, is_callback=False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    media_type = context.user_data.get('publish_media_type')
    publish_type = context.user_data.get('publish_type', 'post')
    caption = context.user_data.get('publish_caption')
    hide_from_feed = context.user_data.get('hide_from_feed', False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ
    if context.user_data.get('publish_to_all_accounts'):
        account_ids = context.user_data.get('publish_account_ids', [])
        accounts = [get_instagram_account(account_id) for account_id in account_ids]
        account_usernames = [account.username for account in accounts]
        account_info = f"üë• *–ê–∫–∫–∞—É–Ω—Ç—ã:* {len(account_usernames)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    else:
        account_id = context.user_data.get('publish_account_id')
        account_username = context.user_data.get('publish_account_username')
        account_info = f"üë§ *–ê–∫–∫–∞—É–Ω—Ç:* {account_username}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data='confirm_publish_now'),
            InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='schedule_publish')
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    type_emojis = {
        'post': 'üì∏',
        'story': 'üì±',
        'reels': 'üé•',
        'igtv': 'üé¨'
    }
    
    type_names = {
        'post': '–ü–æ—Å—Ç',
        'story': '–ò—Å—Ç–æ—Ä–∏—è',
        'reels': 'Reels',
        'igtv': 'IGTV'
    }

    message_text = (
        f"*–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*\n\n"
        f"{account_info}\n"
        f"{type_emojis.get(publish_type, 'üì∏')} *–¢–∏–ø:* {type_names.get(publish_type, '–ü–æ—Å—Ç')}\n"
        f"üì± *–ú–µ–¥–∏–∞:* {media_type}\n"
        f"‚úèÔ∏è *–ü–æ–¥–ø–∏—Å—å:* {caption or '(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)'}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∏–ª—Å–æ–≤
    if publish_type == 'reels':
        message_text += f"üîç *–í–∏–¥–∏–º–æ—Å—Ç—å:* {'–°–∫—Ä—ã—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏' if hide_from_feed else '–í –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ'}\n"

    message_text += "\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"

    if is_callback:
        query = update.callback_query
        query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

    return CONFIRM_PUBLISH

def confirm_publish_now(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    media_path = context.user_data.get('publish_media_path')
    media_type = context.user_data.get('publish_media_type')
    publish_type = context.user_data.get('publish_type', 'post')
    caption = context.user_data.get('publish_caption', '')
    hide_from_feed = context.user_data.get('hide_from_feed', False)
    user_id = query.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º TaskType –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if publish_type == 'story':
        task_type = TaskType.STORY
    elif publish_type == 'reels':
        task_type = TaskType.VIDEO  # Reels –∏—Å–ø–æ–ª—å–∑—É—é—Ç VIDEO —Ç–∏–ø
    elif publish_type == 'igtv':
        task_type = TaskType.VIDEO  # IGTV —Ç–æ–∂–µ –≤–∏–¥–µ–æ
    else:  # post
        task_type = TaskType.PHOTO if media_type == 'PHOTO' else TaskType.VIDEO

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    status_message = query.edit_message_text(
        f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é {publish_type}... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ
    if 'publish_account_ids' in context.user_data:
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        account_ids = context.user_data.get('publish_account_ids')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        context.bot.edit_message_text(
            f"‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {publish_type} –Ω–∞ {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–∞—Ö...",
            chat_id=status_message.chat_id,
            message_id=status_message.message_id
        )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        task_ids = []
        for account_id in account_ids:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            additional_data = {
                'hide_from_feed': hide_from_feed,
                'publish_type': publish_type
            }

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            success, task_id = create_publish_task(
                account_id=account_id,
                task_type=task_type,
                media_path=media_path,
                caption=caption,
                additional_data=json.dumps(additional_data)
            )

            if success:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
                from utils.task_queue import add_task_to_queue
                if add_task_to_queue(task_id, update.effective_chat.id, context.bot):
                    account = get_instagram_account(account_id)
                    task_ids.append((task_id, account.username))

        if task_ids:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            from utils.task_queue import register_task_batch
            just_task_ids = [task_id for task_id, _ in task_ids]
            register_task_batch(just_task_ids, update.effective_chat.id, context.bot)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
            message = f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é {publish_type}:\n\n"
            for task_id, username in task_ids:
                message += f"‚Ä¢ –ó–∞–¥–∞—á–∞ #{task_id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}\n"

            message += "\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            context.bot.send_message(
                chat_id=status_message.chat_id,
                text=message
            )
        else:
            context.bot.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é {publish_type}.",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )
    else:
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç
        account_id = context.user_data.get('publish_account_id')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        context.bot.edit_message_text(
            f"‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {publish_type}...",
            chat_id=status_message.chat_id,
            message_id=status_message.message_id
        )

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        additional_data = {
            'hide_from_feed': hide_from_feed,
            'publish_type': publish_type
        }

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        success, task_id = create_publish_task(
            account_id=account_id,
            task_type=task_type,
            media_path=media_path,
            caption=caption,
            additional_data=json.dumps(additional_data)
        )

        if not success:
            context.bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_id}",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )
            return ConversationHandler.END

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        from utils.task_queue import add_task_to_queue
        if add_task_to_queue(task_id, update.effective_chat.id, context.bot):
            account = get_instagram_account(account_id)
            context.bot.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é {publish_type} –≤ –∞–∫–∫–∞—É–Ω—Ç {account.username} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.\n"
                f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )
        else:
            context.bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å.",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cleanup_user_data(context)

    return ConversationHandler.END

def cleanup_user_data(context):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    keys_to_remove = [
        'publish_account_id', 'publish_account_username', 'publish_account_ids',
        'publish_to_all_accounts', 'publish_account_usernames', 'publish_media_path',
        'publish_media_type', 'publish_caption', 'hide_from_feed', 'publish_type'
    ]
    
    for key in keys_to_remove:
        if key in context.user_data:
            del context.user_data[key]

def schedule_publish_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 15:30"
    )

    return CHOOSE_SCHEDULE

def choose_schedule(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        scheduled_time = datetime.strptime(update.message.text, "%d.%m.%Y %H:%M")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        account_id = context.user_data.get('publish_account_id')
        media_path = context.user_data.get('publish_media_path')
        media_type = context.user_data.get('publish_media_type')
        caption = context.user_data.get('publish_caption', '')
        hide_from_feed = context.user_data.get('hide_from_feed', False)
        user_id = update.effective_user.id

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø –≤ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ TaskType
        try:
            # –ï—Å–ª–∏ media_type - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'VIDEO')
            task_type = TaskType[media_type]
        except (KeyError, TypeError):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –≤—ã–¥–∞–µ–º –æ—à–∏–±–∫—É
            update.message.reply_text(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}")
            return ConversationHandler.END

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        additional_data = {
            'hide_from_feed': hide_from_feed
        }

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        success, task_id = create_publish_task(
            account_id=account_id,
            task_type=task_type,  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
            media_path=media_path,
            caption=caption,
            scheduled_time=scheduled_time,
            additional_data=json.dumps(additional_data)
        )

        if not success:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_id}")
            return ConversationHandler.END

        keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∑–∞–¥–∞—á", callback_data='menu_tasks')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=reply_markup
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if 'publish_account_id' in context.user_data:
            del context.user_data['publish_account_id']
        if 'publish_account_username' in context.user_data:
            del context.user_data['publish_account_username']
        if 'publish_media_path' in context.user_data:
            del context.user_data['publish_media_path']
        if 'publish_media_type' in context.user_data:
            del context.user_data['publish_media_type']
        if 'publish_caption' in context.user_data:
            del context.user_data['publish_caption']
        if 'hide_from_feed' in context.user_data:
            del context.user_data['hide_from_feed']
        if 'selected_accounts' in context.user_data:
            del context.user_data['selected_accounts']

    except ValueError:
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 15:30"
        )
        return CHOOSE_SCHEDULE

    return ConversationHandler.END

def cancel_publish(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if 'publish_account_id' in context.user_data:
        del context.user_data['publish_account_id']
    if 'publish_account_username' in context.user_data:
        del context.user_data['publish_account_username']
    if 'publish_account_ids' in context.user_data:
        del context.user_data['publish_account_ids']
    if 'publish_to_all_accounts' in context.user_data:
        del context.user_data['publish_to_all_accounts']
    if 'selected_accounts' in context.user_data:
        del context.user_data['selected_accounts']
    if 'publish_media_path' in context.user_data:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(context.user_data['publish_media_path'])
        except:
            pass
        del context.user_data['publish_media_path']
    if 'publish_media_type' in context.user_data:
        del context.user_data['publish_media_type']
    if 'publish_caption' in context.user_data:
        del context.user_data['publish_caption']
    if 'hide_from_feed' in context.user_data:
        del context.user_data['hide_from_feed']

    keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∑–∞–¥–∞—á", callback_data='menu_tasks')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(
        "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=reply_markup
    )

    return ConversationHandler.END

def check_task_status_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ ID –∑–∞–¥–∞—á–∏
    if not context.args or not context.args[0].isdigit():
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: /task_status 123"
        )
        return

    task_id = int(context.args[0])

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    status = get_task_status(task_id)

    if not status:
        update.message.reply_text(
            f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    if status['success']:
        message = f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n"
        if 'result' in status and status['result']:
            message += f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {status['result']}\n"
    else:
        message = f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:\n{status['result']}\n"

    if 'completed_at' in status and status['completed_at']:
        message += f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {status['completed_at'].strftime('%d.%m.%Y %H:%M:%S')}"

    update.message.reply_text(message)

def get_publish_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, Filters

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ ConversationHandler –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    post_conversation = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_post_publish, pattern='^publish_post$')
        ],
        states={
            CHOOSE_ACCOUNT: [
                CallbackQueryHandler(handle_post_source_selection, pattern='^post_source_'),
                CallbackQueryHandler(handle_post_folder_selection, pattern='^post_folder_'),
                CallbackQueryHandler(handle_post_account_toggle, pattern='^post_account_'),
                CallbackQueryHandler(handle_post_confirm_selection, pattern='^post_confirm$'),
                CallbackQueryHandler(handle_post_source_selection, pattern="^post_from_folders$"),
                CallbackQueryHandler(handle_post_source_selection, pattern="^post_all_accounts$"),
                CallbackQueryHandler(handle_post_source_selection, pattern="^post_back_to_menu$"),
                CallbackQueryHandler(handle_post_folder_selection, pattern="^post_folder_"),
                CallbackQueryHandler(handle_post_folder_selection, pattern="^post_back_to_source$"),
                CallbackQueryHandler(handle_post_account_toggle, pattern="^post_toggle_"),
                CallbackQueryHandler(handle_post_account_toggle, pattern="^post_select_all$"),
                CallbackQueryHandler(handle_post_account_toggle, pattern="^post_deselect_all$"),
                CallbackQueryHandler(handle_post_account_toggle, pattern="^post_page_"),
                CallbackQueryHandler(handle_post_confirm_selection, pattern="^post_confirm_selection$"),
            ],
            UPLOAD_MEDIA: [
                MessageHandler(Filters.photo | Filters.video | Filters.document, handle_media_upload),
                CallbackQueryHandler(handle_media_actions, pattern="^continue_to_caption$"),
                CallbackQueryHandler(handle_media_actions, pattern="^clear_media_files$"),
                CallbackQueryHandler(handle_media_actions, pattern="^cancel_publish$"),
                CallbackQueryHandler(handle_media_actions, pattern="^back_to_accounts$"),
            ],
            ENTER_CAPTION: [
                MessageHandler(Filters.text & ~Filters.command, handle_caption_input),
                CallbackQueryHandler(handle_caption_actions, pattern="^no_caption$"),
                CallbackQueryHandler(handle_caption_actions, pattern="^back_to_media$"),
            ],
            ENTER_HASHTAGS: [
                MessageHandler(Filters.text & ~Filters.command, handle_hashtags_input),
                CallbackQueryHandler(handle_hashtags_actions, pattern="^no_hashtags$"),
                CallbackQueryHandler(handle_hashtags_actions, pattern="^back_to_caption_from_hashtags$"),
            ],
            CHOOSE_HIDE_FROM_FEED: [
                CallbackQueryHandler(choose_hide_from_feed, pattern='^(hide_from_feed|keep_in_feed)$'),
                CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
            ],
            CONFIRM_PUBLISH: [
                CallbackQueryHandler(handle_final_confirmation, pattern="^confirm_publish$"),
                CallbackQueryHandler(handle_final_confirmation, pattern="^back_to_caption$"),
                CallbackQueryHandler(handle_final_confirmation, pattern="^back_to_hashtags$"),
                CallbackQueryHandler(handle_final_confirmation, pattern="^back_to_media$"),
                CallbackQueryHandler(handle_final_confirmation, pattern="^cancel_publish$"),
            ],
            CHOOSE_SCHEDULE: [
                MessageHandler(Filters.text & ~Filters.command, choose_schedule)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", lambda update, context: ConversationHandler.END),
            CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
        ],
        per_message=False
    )

    story_conversation = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_story_publish, pattern='^publish_story$')
        ],
        states={
            CHOOSE_ACCOUNT: [
                MessageHandler(Filters.photo | Filters.video | Filters.document, media_upload_handler)
            ],
            ENTER_CAPTION: [
                MessageHandler(Filters.text & ~Filters.command, enter_caption),
                CommandHandler("skip", enter_caption)
            ],
            CONFIRM_PUBLISH: [
                CallbackQueryHandler(confirm_publish_now, pattern='^confirm_publish_now$'),
                CallbackQueryHandler(schedule_publish_callback, pattern='^schedule_publish$'),
                CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
            ],
            CHOOSE_SCHEDULE: [
                MessageHandler(Filters.text & ~Filters.command, choose_schedule)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", lambda update, context: ConversationHandler.END),
            CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
        ]
    )

    reels_conversation = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_reels_publish, pattern='^publish_reels$')
        ],
        states={
            CHOOSE_ACCOUNT: [
                MessageHandler(Filters.photo | Filters.video | Filters.document, media_upload_handler)
            ],
            ENTER_CAPTION: [
                MessageHandler(Filters.text & ~Filters.command, enter_caption),
                CommandHandler("skip", enter_caption)
            ],
            CHOOSE_HIDE_FROM_FEED: [
                CallbackQueryHandler(choose_hide_from_feed, pattern='^(hide_from_feed|keep_in_feed)$'),
                CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
            ],
            CONFIRM_PUBLISH: [
                CallbackQueryHandler(confirm_publish_now, pattern='^confirm_publish_now$'),
                CallbackQueryHandler(schedule_publish_callback, pattern='^schedule_publish$'),
                CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
            ],
            CHOOSE_SCHEDULE: [
                MessageHandler(Filters.text & ~Filters.command, choose_schedule)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", lambda update, context: ConversationHandler.END),
            CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
        ]
    )

    igtv_conversation = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_igtv_publish, pattern='^publish_igtv$')
        ],
        states={
            CHOOSE_ACCOUNT: [
                MessageHandler(Filters.photo | Filters.video | Filters.document, media_upload_handler)
            ],
            ENTER_CAPTION: [
                MessageHandler(Filters.text & ~Filters.command, enter_caption),
                CommandHandler("skip", enter_caption)
            ],
            CONFIRM_PUBLISH: [
                CallbackQueryHandler(confirm_publish_now, pattern='^confirm_publish_now$'),
                CallbackQueryHandler(schedule_publish_callback, pattern='^schedule_publish$'),
                CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
            ],
            CHOOSE_SCHEDULE: [
                MessageHandler(Filters.text & ~Filters.command, choose_schedule)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", lambda update, context: ConversationHandler.END),
            CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
        ]
    )

    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    publish_selector = create_account_selector(
        callback_prefix="publish_select",
        title="üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        allow_multiple=True,
        show_status=True,
        show_folders=True,
        back_callback="menu_publications"
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
    video_handler = MessageHandler(Filters.video | Filters.document.video, media_upload_handler)
    photo_handler = MessageHandler(Filters.photo, media_upload_handler)
    task_status_handler = CommandHandler("task_status", check_task_status_handler)

    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    post_selector = create_account_selector(
        callback_prefix="post_select",
        title="üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞",
        allow_multiple=True,
        show_status=True,
        show_folders=True,
        back_callback="menu_publications"
    )
    
    story_selector = create_account_selector(
        callback_prefix="story_select",
        title="üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏",
        allow_multiple=True,
        show_status=True,
        show_folders=True,
        back_callback="menu_publications"
    )
    
    reels_selector = create_account_selector(
        callback_prefix="reels_select",
        title="üé• –ü—É–±–ª–∏–∫–∞—Ü–∏—è Reels",
        allow_multiple=True,
        show_status=True,
        show_folders=True,
        back_callback="menu_publications"
    )
    
    igtv_selector = create_account_selector(
        callback_prefix="igtv_select",
        title="üé¨ –ü—É–±–ª–∏–∫–∞—Ü–∏—è IGTV",
        allow_multiple=True,
        show_status=True,
        show_folders=True,
        back_callback="menu_publications"
    )

    return [
        post_conversation,
        story_conversation, 
        reels_conversation,
        igtv_conversation,
        video_handler,
        photo_handler,
        task_status_handler,
        publish_selector.get_conversation_handler(),  # –û–±—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        post_selector.get_conversation_handler(),     # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ—Å—Ç–æ–≤
        story_selector.get_conversation_handler(),    # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π
        reels_selector.get_conversation_handler(),    # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è Reels
        igtv_selector.get_conversation_handler()      # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è IGTV
    ]

# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–π

def start_post_publish(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    query.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['publish_type'] = 'post'
    context.user_data['publish_media_type'] = 'PHOTO'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    keyboard = []
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫–∏
    from database.db_manager import get_account_groups
    folders = get_account_groups()
    if folders:
        keyboard.append([InlineKeyboardButton("üìÅ –í—ã–±—Ä–∞—Ç—å –∏–∑ –ø–∞–ø–∫–∏", callback_data="post_from_folders")])
    
    keyboard.append([InlineKeyboardButton("üìã –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="post_all_accounts")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")])
    
    query.edit_message_text(
        "üì∏ **–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CHOOSE_ACCOUNT

def start_story_publish(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º"""
    from telegram_bot.utils.account_selection import AccountSelector
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['publish_type'] = 'story'
    context.user_data['publish_media_type'] = 'STORY'
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–π
    selector = AccountSelector(
        callback_prefix="story_select",
        title="üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏",
        allow_multiple=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        show_status=True,     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        show_folders=True,    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
        back_callback="menu_publications"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def on_accounts_selected(account_ids: list, update_inner, context_inner):
        if account_ids:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            context_inner.user_data['publish_account_ids'] = account_ids
            context_inner.user_data['publish_type'] = 'story'
            context_inner.user_data['publish_to_all_accounts'] = len(account_ids) > 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            from database.db_manager import get_instagram_account
            accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
            usernames = [acc.username for acc in accounts if acc]
            context_inner.user_data['publish_account_usernames'] = usernames
            
            if len(account_ids) == 1:
                text = f"üì± –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{usernames[0]}*\n\n"
                context_inner.user_data['publish_account_id'] = account_ids[0]
                context_inner.user_data['publish_account_username'] = usernames[0]
            else:
                text = f"üì± –í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
                text += f"–ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join(usernames[:5])}"
                if len(usernames) > 5:
                    text += f" –∏ –µ—â—ë {len(usernames) - 5}..."
                text += "\n\n"
            
            text += "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏:"
            
            update_inner.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–¥–∏–∞
            return CHOOSE_ACCOUNT
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞
    return selector.start_selection(update, context, on_accounts_selected)

def start_reels_publish(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º"""
    from telegram_bot.utils.account_selection import AccountSelector
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['publish_type'] = 'reels'
    context.user_data['publish_media_type'] = 'VIDEO'
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels
    selector = AccountSelector(
        callback_prefix="reels_select",
        title="üé• –ü—É–±–ª–∏–∫–∞—Ü–∏—è Reels",
        allow_multiple=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        show_status=True,     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        show_folders=True,    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
        back_callback="menu_publications"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def on_accounts_selected(account_ids: list, update_inner, context_inner):
        if account_ids:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            context_inner.user_data['publish_account_ids'] = account_ids
            context_inner.user_data['publish_type'] = 'reels'
            context_inner.user_data['publish_to_all_accounts'] = len(account_ids) > 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            from database.db_manager import get_instagram_account
            accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
            usernames = [acc.username for acc in accounts if acc]
            context_inner.user_data['publish_account_usernames'] = usernames
            
            if len(account_ids) == 1:
                text = f"üé• –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{usernames[0]}*\n\n"
                context_inner.user_data['publish_account_id'] = account_ids[0]
                context_inner.user_data['publish_account_username'] = usernames[0]
            else:
                text = f"üé• –í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
                text += f"–ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join(usernames[:5])}"
                if len(usernames) > 5:
                    text += f" –∏ –µ—â—ë {len(usernames) - 5}..."
                text += "\n\n"
            
            text += "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è Reels:"
            
            update_inner.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–¥–∏–∞
            return CHOOSE_ACCOUNT
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞
    return selector.start_selection(update, context, on_accounts_selected)

def start_igtv_publish(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ IGTV —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º"""
    from telegram_bot.utils.account_selection import AccountSelector
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['publish_type'] = 'igtv'
    context.user_data['publish_media_type'] = 'VIDEO'
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ IGTV
    selector = AccountSelector(
        callback_prefix="igtv_select",
        title="üé¨ –ü—É–±–ª–∏–∫–∞—Ü–∏—è IGTV",
        allow_multiple=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        show_status=True,     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        show_folders=True,    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
        back_callback="menu_publications"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def on_accounts_selected(account_ids: list, update_inner, context_inner):
        if account_ids:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            context_inner.user_data['publish_account_ids'] = account_ids
            context_inner.user_data['publish_type'] = 'igtv'
            context_inner.user_data['publish_to_all_accounts'] = len(account_ids) > 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            from database.db_manager import get_instagram_account
            accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
            usernames = [acc.username for acc in accounts if acc]
            context_inner.user_data['publish_account_usernames'] = usernames
            
            if len(account_ids) == 1:
                text = f"üé¨ –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{usernames[0]}*\n\n"
                context_inner.user_data['publish_account_id'] = account_ids[0]
                context_inner.user_data['publish_account_username'] = usernames[0]
            else:
                text = f"üé¨ –í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
                text += f"–ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join(usernames[:5])}"
                if len(usernames) > 5:
                    text += f" –∏ –µ—â—ë {len(usernames) - 5}..."
                text += "\n\n"
            
            text += "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è IGTV:"
            
            update_inner.callback_query.edit_message_text(
                text,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–¥–∏–∞
            return CHOOSE_ACCOUNT
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞
    return selector.start_selection(update, context, on_accounts_selected)

def show_scheduled_posts(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()
    
    from database.db_manager import get_session
    from database.models import PublishTask, TaskStatus
    
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        scheduled_tasks = session.query(PublishTask).filter(
            PublishTask.status == TaskStatus.SCHEDULED
        ).order_by(PublishTask.scheduled_time).limit(10).all()
        
        if not scheduled_tasks:
            query.edit_message_text(
                "üìÖ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
                ])
            )
            return
        
        message = "üìÖ *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*\n\n"
        
        for task in scheduled_tasks:
            from database.db_manager import get_instagram_account
            account = get_instagram_account(task.account_id)
            
            scheduled_time = task.scheduled_time.strftime("%d.%m.%Y %H:%M")
            task_type = task.task_type.value if hasattr(task.task_type, 'value') else str(task.task_type)
            
            message += f"‚Ä¢ *{task_type.upper()}* –≤ @{account.username if account else 'Unknown'}\n"
            message += f"  üìÖ {scheduled_time}\n"
            message += f"  üìù {task.caption[:50]}{'...' if len(task.caption or '') > 50 else ''}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="scheduled_posts")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
        ]
        
        query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
        query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
            ])
        )
    finally:
        session.close()

def show_publication_history(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    query = update.callback_query
    query.answer()
    
    from database.db_manager import get_session
    from database.models import PublishTask, TaskStatus
    
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        completed_tasks = session.query(PublishTask).filter(
            PublishTask.status.in_([TaskStatus.COMPLETED, TaskStatus.FAILED])
        ).order_by(PublishTask.completed_time.desc()).limit(10).all()
        
        if not completed_tasks:
            query.edit_message_text(
                "üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
                ])
            )
            return
        
        message = "üìä *–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π:*\n\n"
        
        for task in completed_tasks:
            from database.db_manager import get_instagram_account
            account = get_instagram_account(task.account_id)
            
            completed_time = task.completed_time.strftime("%d.%m.%Y %H:%M") if task.completed_time else "–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            task_type = task.task_type.value if hasattr(task.task_type, 'value') else str(task.task_type)
            status_emoji = "‚úÖ" if task.status == TaskStatus.COMPLETED else "‚ùå"
            
            message += f"{status_emoji} *{task_type.upper()}* –≤ @{account.username if account else 'Unknown'}\n"
            message += f"  üìÖ {completed_time}\n"
            
            if task.status == TaskStatus.FAILED and task.error_message:
                message += f"  ‚ùå {task.error_message[:50]}{'...' if len(task.error_message) > 50 else ''}\n"
            elif task.media_id:
                message += f"  üîó ID: {task.media_id}\n"
            
            message += "\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="publication_history")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
        ]
        
        query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
        query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
            ])
        )
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤

def handle_post_source_selection(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    if query.data == "post_from_folders":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        return show_post_folders(update, context)
    
    elif query.data == "post_all_accounts":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        return show_post_accounts_list(update, context, "all")
    
    elif query.data == "post_back_to_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        from telegram_bot.handlers.system_handlers import show_publish_menu
        return show_publish_menu(update, context)

def handle_post_folder_selection(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    if query.data.startswith("post_folder_"):
        folder_id = query.data.replace("post_folder_", "")
        return show_post_accounts_list(update, context, folder_id)
    elif query.data == "post_back_to_source":
        return handle_post_source_selection(update, context)

def show_post_accounts_list(update, context, folder_name_or_accounts, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω folder_name (—Å—Ç—Ä–æ–∫–∞), –ø–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        if isinstance(folder_name_or_accounts, str):
            folder_name = folder_name_or_accounts
            if folder_name == "all":
                accounts = get_instagram_accounts()
            else:
                accounts = get_accounts_by_folder(folder_name)
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            accounts = folder_name_or_accounts
            folder_name = "unknown"
        
        if not accounts:
            query = update.callback_query
            query.edit_message_text(
                f"‚ùå –í –ø–∞–ø–∫–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_back_to_source")
                ]])
            )
            return CHOOSE_ACCOUNT
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if 'selected_post_accounts' not in context.user_data:
            context.user_data['selected_post_accounts'] = []
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        accounts_per_page = 8
        total_pages = (len(accounts) + accounts_per_page - 1) // accounts_per_page
        page = max(0, min(page, total_pages - 1))
        
        start_idx = page * accounts_per_page
        end_idx = start_idx + accounts_per_page
        page_accounts = accounts[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for account in page_accounts:
            selected = account.id in context.user_data['selected_post_accounts']
            checkbox = "‚úÖ" if selected else "‚òê"
            status = "‚úÖ" if account.is_active else "‚ùå"
            
            keyboard.append([InlineKeyboardButton(
                f"{checkbox} {status} @{account.username}",
                callback_data=f"post_toggle_{account.id}"
            )])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_buttons = []
        if len(context.user_data['selected_post_accounts']) > 0:
            control_buttons.append(InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", callback_data="post_deselect_all"))
        
        if len(context.user_data['selected_post_accounts']) < len(accounts):
            control_buttons.append(InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="post_select_all"))
        
        if control_buttons:
            keyboard.append(control_buttons)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if total_pages > 1:
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"post_page_{page-1}"))
            
            nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="post_page_info"))
            
            if page < total_pages - 1:
                nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"post_page_{page+1}"))
            
            keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = []
        if len(context.user_data['selected_post_accounts']) > 0:
            action_buttons.append(InlineKeyboardButton(
                f"üì§ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ({len(context.user_data['selected_post_accounts'])})",
                callback_data="post_confirm_selection"
            ))
        
        action_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_back_to_source"))
        keyboard.append(action_buttons)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        folder_text = f"üìÅ {folder_name}" if folder_name != "all" else "üìÅ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"
        selected_count = len(context.user_data['selected_post_accounts'])
        
        text = f"üéØ –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞\n\n"
        text += f"{folder_text}\n"
        text += f"–í—ã–±—Ä–∞–Ω–æ: {selected_count} –∏–∑ {len(accounts)}\n\n"
        
        if selected_count > 1:
            text += "‚ö†Ô∏è –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n\n"
        
        text += "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã:"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        context.user_data['post_folder_name'] = folder_name
        context.user_data['post_current_page'] = page
        context.user_data['post_total_accounts'] = len(accounts)
        context.user_data['post_all_accounts'] = [acc.id for acc in accounts]
        
        query = update.callback_query
        query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return CHOOSE_ACCOUNT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        query = update.callback_query
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_back_to_source")
            ]])
        )
        return CHOOSE_ACCOUNT

def handle_post_account_toggle(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä/–æ—Ç–º–µ–Ω—É –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    try:
        if query.data.startswith("post_toggle_"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞
            account_id = int(query.data.replace("post_toggle_", ""))
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if 'selected_post_accounts' not in context.user_data:
                context.user_data['selected_post_accounts'] = []
            
            selected = context.user_data['selected_post_accounts']
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
            if account_id in selected:
                selected.remove(account_id)
            else:
                selected.append(account_id)
            
            context.user_data['selected_post_accounts'] = selected
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            folder_name = context.user_data.get('post_folder_name', 'all')
            current_page = context.user_data.get('post_current_page', 0)
            
            return show_post_accounts_list(update, context, folder_name, current_page)
            
        elif query.data == "post_select_all":
            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            all_account_ids = context.user_data.get('post_all_accounts', [])
            context.user_data['selected_post_accounts'] = all_account_ids.copy()
            
            folder_name = context.user_data.get('post_folder_name', 'all')
            current_page = context.user_data.get('post_current_page', 0)
            
            return show_post_accounts_list(update, context, folder_name, current_page)
            
        elif query.data == "post_deselect_all":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã
            context.user_data['selected_post_accounts'] = []
            
            folder_name = context.user_data.get('post_folder_name', 'all')
            current_page = context.user_data.get('post_current_page', 0)
            
            return show_post_accounts_list(update, context, folder_name, current_page)
            
        elif query.data.startswith("post_page_"):
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            page_part = query.data.replace("post_page_", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            if page_part == "info":
                return CHOOSE_ACCOUNT
            
            try:
                page_num = int(page_part)
                folder_name = context.user_data.get('post_folder_name', 'all')
                return show_post_accounts_list(update, context, folder_name, page_num)
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                return CHOOSE_ACCOUNT
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_back_to_source")
            ]])
        )
        return CHOOSE_ACCOUNT

def handle_post_confirm_selection(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    selected = context.user_data.get('selected_post_accounts', [])
    
    if not selected:
        query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç", show_alert=True)
        return CHOOSE_ACCOUNT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    context.user_data['selected_accounts'] = selected
    context.user_data['publish_account_ids'] = selected
    context.user_data['publish_to_all_accounts'] = len(selected) > 1
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    from database.db_manager import get_instagram_account
    accounts = [get_instagram_account(acc_id) for acc_id in selected]
    usernames = [acc.username for acc in accounts if acc]
    context.user_data['publish_account_usernames'] = usernames
    
    if len(selected) == 1:
        text = f"üì∏ *–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç:* @{usernames[0]}\n\n"
        context.user_data['publish_account_id'] = selected[0]
        context.user_data['publish_account_username'] = usernames[0]
    else:
        text = f"üì∏ *–í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:* {len(selected)}\n"
        text += f"*–ê–∫–∫–∞—É–Ω—Ç—ã:* {', '.join(usernames[:5])}"
        if len(usernames) > 5:
            text += f" –∏ –µ—â—ë {len(usernames) - 5}..."
        text += "\n\n"
    
    text += "üìé *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*\n"
    text += "‚Ä¢ –§–æ—Ç–æ (JPG, PNG)\n"
    text += "‚Ä¢ –í–∏–¥–µ–æ (MP4, MOV)\n"
    text += "‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ (–¥–æ 10 —à—Ç—É–∫)\n\n"
    
    if len(selected) > 1:
        text += "üé® *–ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞*"
    
    query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if 'selected_post_accounts' in context.user_data:
        del context.user_data['selected_post_accounts']
    if 'available_post_accounts' in context.user_data:
        del context.user_data['available_post_accounts']
    
    return UPLOAD_MEDIA

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

def show_post_folders(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    try:
        from database.db_manager import get_account_groups
        folders = get_account_groups()
        
        if not folders:
            query = update.callback_query
            query.edit_message_text(
                "üìÇ –ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_back_to_source")
                ]])
            )
            return CHOOSE_ACCOUNT
        
        keyboard = []
        for folder in folders:
            from database.db_manager import get_accounts_in_group
            accounts_count = len(get_accounts_in_group(folder.id))
            button_text = f"{folder.icon} {folder.name} ({accounts_count} –∞–∫–∫.)"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"post_folder_{folder.id}")])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_back_to_source")])
        
        query = update.callback_query
        query.edit_message_text(
            "üìÅ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:*",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        return CHOOSE_ACCOUNT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–∞–ø–æ–∫: {e}")
        query = update.callback_query
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return CHOOSE_ACCOUNT

def get_accounts_by_folder(folder_name):
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏"""
    try:
        if folder_name == "all":
            return get_instagram_accounts()
        
        # –ï—Å–ª–∏ —ç—Ç–æ ID –ø–∞–ø–∫–∏
        if folder_name.isdigit():
            from database.db_manager import get_accounts_in_group
            return get_accounts_in_group(int(folder_name))
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∏–º—è –ø–∞–ø–∫–∏
        from database.db_manager import get_account_groups, get_accounts_in_group
        folders = get_account_groups()
        for folder in folders:
            if folder.name == folder_name:
                return get_accounts_in_group(folder.id)
        
        return []
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞–ø–∫–∏ {folder_name}: {e}")
        return []

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–π

def handle_media_upload(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if 'media_files' not in context.user_data:
            context.user_data['media_files'] = []
        
        media_files = context.user_data['media_files']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.message.photo:
            # –§–æ—Ç–æ
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            file_obj = context.bot.get_file(photo.file_id)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            import uuid
            filename = f"photo_{uuid.uuid4().hex[:8]}.jpg"
            file_path = os.path.join("media", filename)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs("media", exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_obj.download(file_path)
            
            media_files.append({
                'type': 'photo',
                'path': file_path,
                'original_filename': filename
            })
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ: {file_path}")
            
        elif update.message.video:
            # –í–∏–¥–µ–æ
            video = update.message.video
            file_obj = context.bot.get_file(video.file_id)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            import uuid
            filename = f"video_{uuid.uuid4().hex[:8]}.mp4"
            file_path = os.path.join("media", filename)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs("media", exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_obj.download(file_path)
            
            media_files.append({
                'type': 'video',
                'path': file_path,
                'original_filename': filename
            })
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ: {file_path}")
            
        elif update.message.document:
            # –î–æ–∫—É–º–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–º)
            document = update.message.document
            file_name = document.file_name or "unknown"
            file_ext = os.path.splitext(file_name)[1].lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª
            if file_ext in ['.jpg', '.jpeg', '.png', '.webp', '.mp4', '.mov', '.avi', '.mkv']:
                file_obj = context.bot.get_file(document.file_id)
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                import uuid
                filename = f"media_{uuid.uuid4().hex[:8]}{file_ext}"
                file_path = os.path.join("media", filename)
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                os.makedirs("media", exist_ok=True)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                file_obj.download(file_path)
                
                media_type = 'photo' if file_ext in ['.jpg', '.jpeg', '.png', '.webp'] else 'video'
                media_files.append({
                    'type': media_type,
                    'path': file_path,
                    'original_filename': file_name
                })
                
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –º–µ–¥–∏–∞ —Ñ–∞–π–ª: {file_path}")
            else:
                update.message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, MP4, MOV")
                return UPLOAD_MEDIA
        else:
            update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª")
            return UPLOAD_MEDIA
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
        context.user_data['media_files'] = media_files
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        total_files = len(media_files)
        current_file = media_files[-1]
        
        text = f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        for i, file_info in enumerate(media_files, 1):
            file_type = "üì∑ –§–æ—Ç–æ" if file_info['type'] == 'photo' else "üé• –í–∏–¥–µ–æ"
            # –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            text += f"{i}. {file_type} - {file_info['original_filename']}\n"
        
        text += "\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if total_files == 1:
            if current_file['type'] == 'photo':
                text += "üì§ –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –û–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ\n"
            else:
                text += "üì§ –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –í–∏–¥–µ–æ\n"
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã - —Ñ–æ—Ç–æ
            all_photos = all(f['type'] == 'photo' for f in media_files)
            if all_photos and total_files <= 10:
                text += f"üé† –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –ö–∞—Ä—É—Å–µ–ª—å ({total_files} —Ñ–æ—Ç–æ)\n"
            elif not all_photos:
                text += "‚ùå –û—à–∏–±–∫–∞: –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ\n"
                text += "–£–¥–∞–ª–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ\n"
            else:
                text += f"‚ùå –û—à–∏–±–∫–∞: –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ –≤ –∫–∞—Ä—É—Å–µ–ª–∏ (–∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_files})\n"
        
        text += "\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = [
            [InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_to_caption")],
            [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_media_files")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
        ]
        
        update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return UPLOAD_MEDIA
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return UPLOAD_MEDIA

def handle_media_actions(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏"""
    query = update.callback_query
    query.answer()
    
    try:
        if query.data == "continue_to_caption":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
            media_files = context.user_data.get('media_files', [])
            
            if not media_files:
                query.edit_message_text(
                    "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_accounts")
                    ]])
                )
                return UPLOAD_MEDIA
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
            if len(media_files) > 1:
                all_photos = all(f['type'] == 'photo' for f in media_files)
                if not all_photos:
                    query.edit_message_text(
                        "‚ùå –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_media_files"),
                            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")
                        ]])
                    )
                    return UPLOAD_MEDIA
                
                if len(media_files) > 10:
                    query.edit_message_text(
                        f"‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ –≤ –∫–∞—Ä—É—Å–µ–ª–∏ (–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(media_files)})",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_media_files"),
                            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")
                        ]])
                    )
                    return UPLOAD_MEDIA
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
            selected_accounts = context.user_data.get('selected_accounts', [])
            total_files = len(media_files)
            
            text = f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
            text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
            text += f"üìÅ –§–∞–π–ª–æ–≤: {total_files}\n"
            
            if total_files > 1:
                text += f"üé† –¢–∏–ø: –ö–∞—Ä—É—Å–µ–ª—å\n"
            elif media_files[0]['type'] == 'photo':
                text += f"üì∑ –¢–∏–ø: –§–æ—Ç–æ\n"
            else:
                text += f"üé• –¢–∏–ø: –í–∏–¥–µ–æ\n"
            
            if len(selected_accounts) > 1:
                text += "\nüé® –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            
            text += "\n‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è':"
            
            keyboard = [
                [InlineKeyboardButton("üìù –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="no_caption")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="back_to_media")]
            ]
            
            query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            return ENTER_CAPTION
            
        elif query.data == "clear_media_files":
            # –û—á–∏—â–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
            media_files = context.user_data.get('media_files', [])
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞
            for file_info in media_files:
                try:
                    if os.path.exists(file_info['path']):
                        os.remove(file_info['path'])
                except:
                    pass
            
            # –û—á–∏—â–∞–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data['media_files'] = []
            
            query.edit_message_text(
                "üóë –í—Å–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã\n\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
            )
            
            return UPLOAD_MEDIA
            
        elif query.data == "cancel_publish":
            # –û—Ç–º–µ–Ω—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            media_files = context.user_data.get('media_files', [])
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞
            for file_info in media_files:
                try:
                    if os.path.exists(file_info['path']):
                        os.remove(file_info['path'])
                except:
                    pass
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.clear()
            
            query.edit_message_text("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return ConversationHandler.END
            
        elif query.data == "back_to_accounts":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            return handle_post_source_selection(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –º–µ–¥–∏–∞: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return UPLOAD_MEDIA

def handle_caption_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        caption = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        context.user_data['caption'] = caption
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ö–µ—à—Ç–µ–≥–æ–≤
        return show_hashtags_input(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ENTER_CAPTION

def handle_caption_actions(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    query = update.callback_query
    query.answer()
    
    try:
        if query.data == "no_caption":
            # –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            context.user_data['caption'] = ""
            return show_hashtags_input(update, context)
            
        elif query.data == "back_to_media":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–¥–∏–∞
            media_files = context.user_data.get('media_files', [])
            
            if not media_files:
                query.edit_message_text("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
                return UPLOAD_MEDIA
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
            text = f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(media_files)}\n\n"
            
            for i, file_info in enumerate(media_files, 1):
                file_type = "üì∑ –§–æ—Ç–æ" if file_info['type'] == 'photo' else "üé• –í–∏–¥–µ–æ"
                text += f"{i}. {file_type} - {file_info['original_filename']}\n"
            
            text += "\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'"
            
            keyboard = [
                [InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_to_caption")],
                [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_media_files")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
            ]
            
            query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
            return UPLOAD_MEDIA
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ENTER_CAPTION

def show_hashtags_input(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    try:
        selected_accounts = context.user_data.get('selected_accounts', [])
        media_files = context.user_data.get('media_files', [])
        caption = context.user_data.get('caption', "")
        
        text = f"üè∑ –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
        text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
        text += f"üìÅ –§–∞–π–ª–æ–≤: {len(media_files)}\n"
        
        if caption:
            preview = caption[:50] + "..." if len(caption) > 50 else caption
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {preview}\n"
        else:
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è\n"
        
        text += "\nüè∑ –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #nature #beautiful #photo)\n"
        text += "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤':"
        
        keyboard = [
            [InlineKeyboardButton("üè∑ –ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤", callback_data="no_hashtags")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="back_to_caption_from_hashtags")]
        ]
        
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        return ENTER_HASHTAGS
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤: {e}")
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ENTER_HASHTAGS

def handle_hashtags_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    try:
        hashtags = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
        context.user_data['hashtags'] = hashtags
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        return show_final_confirmation(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–µ—à—Ç–µ–≥–æ–≤: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ENTER_HASHTAGS

def handle_hashtags_actions(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏"""
    query = update.callback_query
    query.answer()
    
    try:
        if query.data == "no_hashtags":
            # –ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤
            context.user_data['hashtags'] = ""
            return show_final_confirmation(update, context)
            
        elif query.data == "back_to_caption_from_hashtags":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é
            text = f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
            text += f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è':"
            
            keyboard = [
                [InlineKeyboardButton("üìù –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="no_caption")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="back_to_media")]
            ]
            
            query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return ENTER_CAPTION
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ENTER_HASHTAGS

def show_final_confirmation(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        selected_accounts = context.user_data.get('selected_accounts', [])
        media_files = context.user_data.get('media_files', [])
        caption = context.user_data.get('caption', "")
        hashtags = context.user_data.get('hashtags', "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        accounts = []
        for account_id in selected_accounts:
            account = get_instagram_account(account_id)
            if account:
                accounts.append(account)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        text = f"üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞
        if len(media_files) == 1:
            if media_files[0]['type'] == 'photo':
                text += f"üì∑ –¢–∏–ø: –§–æ—Ç–æ\n"
            else:
                text += f"üé• –¢–∏–ø: –í–∏–¥–µ–æ\n"
        else:
            text += f"üé† –¢–∏–ø: –ö–∞—Ä—É—Å–µ–ª—å ({len(media_files)} —Ñ–æ—Ç–æ)\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        text += f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã:\n"
        for i, account in enumerate(accounts[:5]):
            status = "‚úÖ" if account.is_active else "‚ùå"
            text += f"   {i+1}. {status} @{account.username}\n"
        
        if len(accounts) > 5:
            text += f"   ... –∏ –µ—â–µ {len(accounts) - 5} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–∏—Å–∞–Ω–∏–∏
        if caption:
            preview = caption[:100] + "..." if len(caption) > 100 else caption
            text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {preview}\n"
        else:
            text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–µ—à—Ç–µ–≥–∞—Ö
        if hashtags:
            hashtags_preview = hashtags[:100] + "..." if len(hashtags) > 100 else hashtags
            text += f"üè∑ –•–µ—à—Ç–µ–≥–∏: {hashtags_preview}\n"
        else:
            text += f"üè∑ –•–µ—à—Ç–µ–≥–∏: –ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤\n"
        
        # –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è
        if len(accounts) > 1:
            text += f"\nüé® –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞ (–∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)\n"
        
        text += f"\n‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = [
            [InlineKeyboardButton("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_publish")],
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="back_to_caption")],
            [InlineKeyboardButton("üè∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", callback_data="back_to_hashtags")],
            [InlineKeyboardButton("üìÅ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data="back_to_media")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
        ]
        
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        return CONFIRM_PUBLISH
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return CONFIRM_PUBLISH

def handle_final_confirmation(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    query = update.callback_query
    query.answer()
    
    try:
        if query.data == "confirm_publish":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            return execute_publish_task(update, context)
            
        elif query.data == "back_to_caption":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é
            text = f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
            text += f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è':"
            
            keyboard = [
                [InlineKeyboardButton("üìù –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="no_caption")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="back_to_media")]
            ]
            
            query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return ENTER_CAPTION
            
        elif query.data == "back_to_hashtags":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ö–µ—à—Ç–µ–≥–∞–º
            return show_hashtags_input(update, context)
            
        elif query.data == "back_to_media":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–¥–∏–∞
            return handle_caption_actions(update, context)
            
        elif query.data == "cancel_publish":
            # –û—Ç–º–µ–Ω—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            return handle_media_actions(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return CONFIRM_PUBLISH

def execute_publish_task(update, context):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    
    try:
        selected_accounts = context.user_data.get('selected_accounts', [])
        media_files = context.user_data.get('media_files', [])
        caption = context.user_data.get('caption', "")
        hashtags = context.user_data.get('hashtags', "")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö–µ—à—Ç–µ–≥–∏
        full_caption = caption
        if hashtags:
            if full_caption:
                full_caption += "\n\n" + hashtags
            else:
                full_caption = hashtags
        
        if not selected_accounts or not media_files:
            query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return ConversationHandler.END
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        query.edit_message_text("üöÄ –ù–∞—á–∏–Ω–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é...\n\n‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞—á...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        if len(media_files) == 1:
            if media_files[0]['type'] == 'photo':
                task_type = TaskType.PHOTO
            else:
                task_type = TaskType.VIDEO
        else:
            task_type = TaskType.CAROUSEL
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø—É—Ç–∏
        if task_type == TaskType.CAROUSEL:
            media_paths = [f['path'] for f in media_files]
            media_path_json = json.dumps(media_paths)
        else:
            media_path_json = media_files[0]['path']
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        task_ids = []
        need_uniquification = len(selected_accounts) > 1
        
        for account_id in selected_accounts:
            account = get_instagram_account(account_id)
            if not account:
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            success, task_id = create_publish_task(
                account_id=account_id,
                task_type=task_type,
                media_path=media_path_json,
                caption=full_caption,
                additional_data=json.dumps({
                    'uniquify_content': need_uniquification,
                    'is_carousel': task_type == TaskType.CAROUSEL,
                    'account_username': account.username,
                    'account_email': account.email,
                    'account_email_password': account.email_password
                })
            )
            
            if success and task_id:
                task_ids.append(task_id)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ #{task_id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ @{account.username}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                from utils.task_queue import add_task_to_queue
                add_task_to_queue(task_id, query.message.chat_id, context.bot)
                logger.info(f"–ó–∞–¥–∞—á–∞ #{task_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if task_ids:
            text = f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
            text += f"üéØ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {len(task_ids)}\n"
            text += f"üìÅ –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: "
            
            if task_type == TaskType.CAROUSEL:
                text += f"–ö–∞—Ä—É—Å–µ–ª—å ({len(media_files)} —Ñ–æ—Ç–æ)\n"
            elif task_type == TaskType.PHOTO:
                text += "–§–æ—Ç–æ\n"
            else:
                text += "–í–∏–¥–µ–æ\n"
            
            if need_uniquification:
                text += f"üé® –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞\n"
            
            text += f"\nüìã –ó–∞–¥–∞—á–∏: {', '.join([f'#{tid}' for tid in task_ids])}\n"
            text += f"\n‚è≥ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è..."
            
            query.edit_message_text(text)
        else:
            query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∞–Ω–Ω—ã–µ
        for file_info in media_files:
            try:
                if os.path.exists(file_info['path']):
                    # –ù–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ä–∞–∑—É - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    pass
            except:
                pass
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.clear()
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        return ConversationHandler.END