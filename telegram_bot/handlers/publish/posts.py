"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
"""

import os
import tempfile
import json
import logging
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import ConversationHandler, CallbackQueryHandler, MessageHandler, Filters, CommandHandler

from .common import (
    is_admin, cleanup_user_data, cancel_publish, logger, get_accounts_by_folder,
    show_publish_confirmation, format_scheduled_time,
    CHOOSE_ACCOUNT, UPLOAD_MEDIA, ENTER_CAPTION, ENTER_HASHTAGS, CONFIRM_PUBLISH, CHOOSE_SCHEDULE
)

from database.db_manager import get_instagram_account, get_instagram_accounts, create_publish_task
from database.models import TaskType, TaskStatus
from utils.task_queue import add_task_to_queue
from telegram_bot.utils.account_selection import create_account_selector, AccountSelector

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–æ–≤
POST_SOURCE_SELECTION = 100
POST_FOLDER_SELECTION = 101
POST_ACCOUNTS_LIST = 102
POST_CONFIRM_SELECTION = 103
POST_MEDIA_UPLOAD = 104
POST_MEDIA_ACTIONS = 105
POST_CAPTION_INPUT = 106
POST_CAPTION_ACTIONS = 107
POST_HASHTAGS_INPUT = 108
POST_HASHTAGS_ACTIONS = 109
POST_FINAL_CONFIRMATION = 110

# –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤
post_selector = AccountSelector(
    callback_prefix="post_select",
    title="üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞",
    allow_multiple=True,
    show_status=True,
    show_folders=True,
    back_callback="menu_publish"
)

def start_post_publish(update, context):
    """–ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        if update.message:
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        else:
            update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return ConversationHandler.END
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['publish_type'] = 'post'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    is_scheduled = context.user_data.get('is_scheduled_post', False)
    if is_scheduled:
        context.user_data['publish_type'] = 'scheduled_post'
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def on_accounts_selected(account_ids: list, update_inner, context_inner):
        if account_ids:
            context_inner.user_data['publish_account_ids'] = account_ids
            context_inner.user_data['publish_to_all_accounts'] = len(account_ids) > 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
            usernames = [acc.username for acc in accounts if acc]
            context_inner.user_data['publish_account_usernames'] = usernames
            
            if len(account_ids) == 1:
                context_inner.user_data['publish_account_id'] = account_ids[0]
                context_inner.user_data['publish_account_username'] = usernames[0]
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞
            if len(account_ids) == 1:
                text = f"üì∏ –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: @{usernames[0]}\n\n"
                context_inner.user_data['publish_account_id'] = account_ids[0]
                context_inner.user_data['publish_account_username'] = usernames[0]
            else:
                text = f"üì∏ –í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
                text += f"–ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join([f'@{u}' for u in usernames[:3]])}"
                if len(usernames) > 3:
                    text += f" –∏ –µ—â—ë {len(usernames) - 3}..."
                text += "\n\n"
            
            text += "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞:"
            
            update_inner.callback_query.edit_message_text(text)
            return POST_MEDIA_UPLOAD
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    return post_selector.start_selection(update, context, on_accounts_selected)

def handle_post_source_selection(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    source = query.data.split('_')[-1]
    
    if source == 'all':
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = get_instagram_accounts()
        active_accounts = [acc for acc in accounts if acc.is_active]
        
        if not active_accounts:
            query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            return ConversationHandler.END
        
        account_ids = [acc.id for acc in active_accounts]
        usernames = [acc.username for acc in active_accounts]
        
        context.user_data['publish_account_ids'] = account_ids
        context.user_data['publish_account_usernames'] = usernames
        context.user_data['publish_to_all_accounts'] = True
        
        query.edit_message_text(
            f"üì∏ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã ({len(active_accounts)}):\n"
            f"{', '.join(usernames)}\n\n"
            f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞:"
        )
        return POST_MEDIA_UPLOAD
        
    elif source == 'folder':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        return show_post_folders(update, context)
    
    elif source == 'select':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        return show_post_accounts_list(update, context, "select")

def show_post_folders(update, context):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    query = update.callback_query
    accounts = get_instagram_accounts()
    
    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
    folders = set()
    for account in accounts:
        if account.is_active and account.folder:
            folders.add(account.folder)
    
    if not folders:
        query.edit_message_text("‚ùå –ù–µ—Ç –ø–∞–ø–æ–∫ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.")
        return ConversationHandler.END
    
    keyboard = []
    for folder in sorted(folders):
        keyboard.append([InlineKeyboardButton(
            f"üìÅ {folder}", 
            callback_data=f"post_folder_{folder}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="post_back_to_source")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:",
        reply_markup=reply_markup
    )
    return POST_FOLDER_SELECTION

def handle_post_folder_selection(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏"""
    query = update.callback_query
    query.answer()
    
    folder_name = query.data.replace('post_folder_', '')
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –ø–∞–ø–∫–∏
    folder_accounts = get_accounts_by_folder(folder_name)
    
    if not folder_accounts:
        query.edit_message_text(f"‚ùå –í –ø–∞–ø–∫–µ '{folder_name}' –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.")
        return ConversationHandler.END
    
    account_ids = [acc.id for acc in folder_accounts]
    usernames = [acc.username for acc in folder_accounts]
    
    context.user_data['publish_account_ids'] = account_ids
    context.user_data['publish_account_usernames'] = usernames
    context.user_data['publish_to_all_accounts'] = len(account_ids) > 1
    
    query.edit_message_text(
        f"üìÅ –í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ '{folder_name}' ({len(folder_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤):\n"
        f"{', '.join(usernames)}\n\n"
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞:"
    )
    return POST_MEDIA_UPLOAD

def show_post_accounts_list(update, context, folder_name_or_accounts, page=0):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    query = update.callback_query
    
    if folder_name_or_accounts == "select":
        accounts = get_instagram_accounts()
        active_accounts = [acc for acc in accounts if acc.is_active]
    else:
        active_accounts = get_accounts_by_folder(folder_name_or_accounts)
    
    if not active_accounts:
        query.edit_message_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return ConversationHandler.END
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    per_page = 10
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_accounts = active_accounts[start_idx:end_idx]
    
    # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    selected_accounts = context.user_data.get('selected_post_accounts', [])
    
    keyboard = []
    for account in page_accounts:
        status = "‚úÖ" if account.id in selected_accounts else "‚ö™"
        keyboard.append([InlineKeyboardButton(
            f"{status} {account.username}",
            callback_data=f"post_toggle_{account.id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"post_page_{page-1}"))
    if end_idx < len(active_accounts):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"post_page_{page+1}"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if selected_accounts:
        keyboard.append([InlineKeyboardButton(
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä ({len(selected_accounts)})",
            callback_data="post_confirm_selection"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="post_back_to_source")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"üì∏ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:\n\n"
    text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {(len(active_accounts) - 1) // per_page + 1}\n"
    text += f"–í—ã–±—Ä–∞–Ω–æ: {len(selected_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    
    query.edit_message_text(text, reply_markup=reply_markup)
    return POST_ACCOUNTS_LIST

def handle_post_account_toggle(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.split('_')[-1])
    selected_accounts = context.user_data.get('selected_post_accounts', [])
    
    if account_id in selected_accounts:
        selected_accounts.remove(account_id)
    else:
        selected_accounts.append(account_id)
    
    context.user_data['selected_post_accounts'] = selected_accounts
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    return show_post_accounts_list(update, context, "select")

def handle_post_confirm_selection(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    selected_accounts = context.user_data.get('selected_post_accounts', [])
    
    if not selected_accounts:
        query.answer("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!", show_alert=True)
        return POST_ACCOUNTS_LIST
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    accounts = [get_instagram_account(acc_id) for acc_id in selected_accounts]
    usernames = [acc.username for acc in accounts if acc]
    
    context.user_data['publish_account_ids'] = selected_accounts
    context.user_data['publish_account_usernames'] = usernames
    context.user_data['publish_to_all_accounts'] = len(selected_accounts) > 1
    
    if len(selected_accounts) == 1:
        context.user_data['publish_account_id'] = selected_accounts[0]
        context.user_data['publish_account_username'] = usernames[0]
    
    query.edit_message_text(
        f"üì∏ –í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
        f"–ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join(usernames)}\n\n"
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞:"
    )
    return POST_MEDIA_UPLOAD

def handle_media_upload(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã
    publish_type = context.user_data.get('publish_type')
    account_ids = context.user_data.get('publish_account_ids', [])
    
    if publish_type not in ['post', 'scheduled_post'] or not account_ids:
        logger.info(f"üì∏ POST: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º - publish_type={publish_type}, account_ids={len(account_ids)}")
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    media_files = []
    media_type = None
    
    if update.message.photo:
        media_files = [update.message.photo[-1]]
        media_type = 'PHOTO'
    elif update.message.video:
        media_files = [update.message.video]
        media_type = 'VIDEO'
    elif update.message.document:
        media_file = update.message.document
        if media_file.mime_type.startswith('video/'):
            media_files = [media_file]
            media_type = 'VIDEO'
        elif media_file.mime_type.startswith('image/'):
            media_files = [media_file]
            media_type = 'PHOTO'
    elif update.message.media_group:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã (–∫–∞—Ä—É—Å–µ–ª—å)
        media_files = []
        for media in update.message.media_group:
            if media.photo:
                media_files.append(media.photo[-1])
            elif media.video:
                media_files.append(media.video)
        media_type = 'CAROUSEL'
    
    if not media_files:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        return POST_MEDIA_UPLOAD
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
    media_paths = []
    for media_file in media_files:
        file_id = media_file.file_id
        media = context.bot.get_file(file_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if media_type == 'VIDEO':
            file_extension = '.mp4'
        else:
            file_extension = '.jpg'
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as temp_file:
            media_path = temp_file.name
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞
        media.download(media_path)
        media_paths.append(media_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –∫ –º–µ–¥–∏–∞
    if len(media_paths) == 1:
        context.user_data['publish_media_path'] = media_paths[0]
    else:
        context.user_data['publish_media_paths'] = media_paths
    
    context.user_data['publish_media_type'] = media_type
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –º–µ–¥–∏–∞
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å", callback_data="post_add_caption")],
        [InlineKeyboardButton("#Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", callback_data="post_add_hashtags")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏", callback_data="post_skip_caption")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –º–µ–¥–∏–∞
    if media_type == 'CAROUSEL':
        media_info = f"üì∏ –ö–∞—Ä—É—Å–µ–ª—å ({len(media_paths)} —Ñ–∞–π–ª–æ–≤)"
    else:
        media_info = f"üì∏ {media_type}"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    account_ids = context.user_data.get('publish_account_ids', [])
    if len(account_ids) == 1:
        account_username = context.user_data.get('publish_account_username')
        account_info = f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account_username}"
    else:
        account_info = f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã: {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    
    update.message.reply_text(
        f"‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
        f"{account_info}\n"
        f"{media_info}\n\n"
        f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )
    
    return POST_MEDIA_ACTIONS

def handle_media_actions(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –º–µ–¥–∏–∞"""
    query = update.callback_query
    query.answer()
    
    action = query.data.split('_')[-1]
    
    if action == 'caption':
        return show_caption_input(update, context)
    elif action == 'hashtags':
        return show_hashtags_input(update, context)
    elif action == 'skip_caption':
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        context.user_data['publish_caption'] = ""
        return show_final_confirmation(update, context)

def show_caption_input(update, context):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–≤–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∏"""
    query = update.callback_query
    
    current_caption = context.user_data.get('publish_caption', '')
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="post_back_to_media")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
    if current_caption:
        text += f"\n\n–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å—å:\n{current_caption}"
    
    query.edit_message_text(text, reply_markup=reply_markup)
    return POST_CAPTION_INPUT

def handle_caption_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∏"""
    caption = update.message.text
    context.user_data['publish_caption'] = caption
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å", callback_data="post_save_caption")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å", callback_data="post_edit_caption")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="post_back_to_media")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f"‚úÖ –ü–æ–¥–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n\n{caption}\n\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )
    return POST_CAPTION_ACTIONS

def handle_caption_actions(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é"""
    query = update.callback_query
    query.answer()
    
    action = query.data.split('_')[-1]
    
    if action == 'save_caption':
        return show_final_confirmation(update, context)
    elif action == 'edit_caption':
        return show_caption_input(update, context)
    elif action == 'media':
        return show_media_actions_menu(update, context)

def show_media_actions_menu(update, context):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –º–µ–¥–∏–∞"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –∏ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    media_type = context.user_data.get('publish_media_type')
    caption = context.user_data.get('publish_caption', '')
    hashtags = context.user_data.get('publish_hashtags', '')
    
    account_ids = context.user_data.get('publish_account_ids', [])
    if len(account_ids) == 1:
        account_username = context.user_data.get('publish_account_username')
        account_info = f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account_username}"
    else:
        account_info = f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã: {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å", callback_data="post_add_caption")],
        [InlineKeyboardButton("#Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", callback_data="post_add_hashtags")],
        [InlineKeyboardButton("‚úÖ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="post_to_confirmation")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"üì∏ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
    text += f"{account_info}\n"
    text += f"üì± –ú–µ–¥–∏–∞: {media_type}\n"
    text += f"‚úèÔ∏è –ü–æ–¥–ø–∏—Å—å: {caption or '(–Ω–µ –∑–∞–¥–∞–Ω–∞)'}\n"
    text += f"#Ô∏è‚É£ –•–µ—à—Ç–µ–≥–∏: {hashtags or '(–Ω–µ –∑–∞–¥–∞–Ω—ã)'}\n\n"
    text += "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    
    query.edit_message_text(text, reply_markup=reply_markup)
    return POST_MEDIA_ACTIONS

def show_hashtags_input(update, context):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    query = update.callback_query
    
    current_hashtags = context.user_data.get('publish_hashtags', '')
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="post_back_to_media")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "#Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
    if current_hashtags:
        text += f"\n\n–¢–µ–∫—É—â–∏–µ —Ö–µ—à—Ç–µ–≥–∏:\n{current_hashtags}"
    
    query.edit_message_text(text, reply_markup=reply_markup)
    return POST_HASHTAGS_INPUT

def handle_hashtags_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    hashtags = update.message.text
    context.user_data['publish_hashtags'] = hashtags
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", callback_data="post_save_hashtags")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", callback_data="post_edit_hashtags")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="post_back_to_media")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f"‚úÖ –•–µ—à—Ç–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n{hashtags}\n\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )
    return POST_HASHTAGS_ACTIONS

def handle_hashtags_actions(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏"""
    query = update.callback_query
    query.answer()
    
    action = query.data.split('_')[-1]
    
    if action == 'save_hashtags':
        return show_final_confirmation(update, context)
    elif action == 'edit_hashtags':
        return show_hashtags_input(update, context)
    elif action == 'media':
        return show_media_actions_menu(update, context)

def show_final_confirmation(update, context):
    """–ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    media_type = context.user_data.get('publish_media_type')
    caption = context.user_data.get('publish_caption', '')
    hashtags = context.user_data.get('publish_hashtags', '')
    is_scheduled = context.user_data.get('is_scheduled_post', False)
    
    account_ids = context.user_data.get('publish_account_ids', [])
    if len(account_ids) == 1:
        account_username = context.user_data.get('publish_account_username')
        account_info = f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account_username}"
    else:
        account_info = f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã: {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —Ö–µ—à—Ç–µ–≥–∏
    full_caption = caption
    if hashtags:
        if full_caption:
            full_caption += f"\n\n{hashtags}"
        else:
            full_caption = hashtags
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if is_scheduled:
        keyboard = [
            [InlineKeyboardButton("üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="schedule_publish")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="post_back_to_media")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
        ]
        title_prefix = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"
    else:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="confirm_publish_now"),
                InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_publish")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="post_back_to_media")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
        ]
        title_prefix = "üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"*{title_prefix}*\n\n"
    text += f"{account_info}\n"
    text += f"üì± –ú–µ–¥–∏–∞: {media_type}\n"
    text += f"‚úèÔ∏è –ü–æ–¥–ø–∏—Å—å: {full_caption or '(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)'}\n\n"
    text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:"
    
    query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    return POST_FINAL_CONFIRMATION

def handle_final_confirmation(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    query = update.callback_query
    query.answer()
    
    action = query.data
    
    if action == 'confirm_publish_now':
        return execute_publish_task(update, context)
    elif action == 'schedule_publish':
        return schedule_publish_callback(update, context)
    elif action == 'post_back_to_media':
        return show_media_actions_menu(update, context)
    elif action == 'cancel_publish':
        return cancel_publish(update, context)

def execute_publish_task(update, context):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        media_path = context.user_data.get('publish_media_path')
        media_paths = context.user_data.get('publish_media_paths', [])
        media_type = context.user_data.get('publish_media_type')
        caption = context.user_data.get('publish_caption', '')
        hashtags = context.user_data.get('publish_hashtags', '')
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —Ö–µ—à—Ç–µ–≥–∏
        full_caption = caption
        if hashtags:
            if full_caption:
                full_caption += f"\n\n{hashtags}"
            else:
                full_caption = hashtags
        
        account_ids = context.user_data.get('publish_account_ids', [])
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        task_ids = []
        for account_id in account_ids:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏
            task_data = {
                'media_path': media_path,
                'media_paths': media_paths,
                'media_type': media_type,
                'caption': full_caption,
                'account_id': account_id
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            task_id = create_publish_task(
                user_id=user_id,
                task_type=TaskType.POST,
                account_id=account_id,
                media_path=media_path or json.dumps(media_paths),
                caption=full_caption,
                status=TaskStatus.PENDING
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
            add_task_to_queue(task_id, task_data)
            task_ids.append(task_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if len(account_ids) == 1:
            account_username = context.user_data.get('publish_account_username')
            message = f"‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n\n"
            message += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account_username}\n"
            message += f"üì± –ú–µ–¥–∏–∞: {media_type}\n"
            message += f"üÜî ID –∑–∞–¥–∞—á–∏: {task_ids[0]}"
        else:
            message = f"‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n\n"
            message += f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã: {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
            message += f"üì± –ú–µ–¥–∏–∞: {media_type}\n"
            message += f"üÜî ID –∑–∞–¥–∞—á: {', '.join(map(str, task_ids))}"
        
        query.edit_message_text(message)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cleanup_user_data(context)
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
        return ConversationHandler.END

def schedule_publish_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    from .scheduler import choose_schedule
    return choose_schedule(update, context)

def get_post_conversation():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_post_publish, pattern='^publish_post$'),
            CallbackQueryHandler(start_post_publish, pattern='^schedule_post$')
        ],
        states={
            POST_SOURCE_SELECTION: [
                CallbackQueryHandler(handle_post_source_selection, pattern='^post_source_')
            ],
            POST_FOLDER_SELECTION: [
                CallbackQueryHandler(handle_post_folder_selection, pattern='^post_folder_'),
                CallbackQueryHandler(handle_post_source_selection, pattern='^post_back_to_source$')
            ],
            POST_ACCOUNTS_LIST: [
                CallbackQueryHandler(handle_post_account_toggle, pattern='^post_toggle_'),
                CallbackQueryHandler(show_post_accounts_list, pattern='^post_page_'),
                CallbackQueryHandler(handle_post_confirm_selection, pattern='^post_confirm_selection$'),
                CallbackQueryHandler(handle_post_source_selection, pattern='^post_back_to_source$')
            ],
            POST_MEDIA_UPLOAD: [
                MessageHandler(Filters.photo | Filters.video | Filters.document, handle_media_upload)
            ],
            POST_MEDIA_ACTIONS: [
                CallbackQueryHandler(handle_media_actions, pattern='^post_add_'),
                CallbackQueryHandler(handle_media_actions, pattern='^post_skip_'),
                CallbackQueryHandler(show_final_confirmation, pattern='^post_to_confirmation$'),
                CallbackQueryHandler(show_media_actions_menu, pattern='^post_back_to_media$')
            ],
            POST_CAPTION_INPUT: [
                MessageHandler(Filters.text & ~Filters.command, handle_caption_input),
                CallbackQueryHandler(show_media_actions_menu, pattern='^post_back_to_media$')
            ],
            POST_CAPTION_ACTIONS: [
                CallbackQueryHandler(handle_caption_actions, pattern='^post_save_'),
                CallbackQueryHandler(handle_caption_actions, pattern='^post_edit_'),
                CallbackQueryHandler(show_media_actions_menu, pattern='^post_back_to_media$')
            ],
            POST_HASHTAGS_INPUT: [
                MessageHandler(Filters.text & ~Filters.command, handle_hashtags_input),
                CallbackQueryHandler(show_media_actions_menu, pattern='^post_back_to_media$')
            ],
            POST_HASHTAGS_ACTIONS: [
                CallbackQueryHandler(handle_hashtags_actions, pattern='^post_save_'),
                CallbackQueryHandler(handle_hashtags_actions, pattern='^post_edit_'),
                CallbackQueryHandler(show_media_actions_menu, pattern='^post_back_to_media$')
            ],
            POST_FINAL_CONFIRMATION: [
                CallbackQueryHandler(handle_final_confirmation, pattern='^confirm_publish_now$'),
                CallbackQueryHandler(handle_final_confirmation, pattern='^schedule_publish$'),
                CallbackQueryHandler(show_media_actions_menu, pattern='^post_back_to_media$')
            ]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$'),
            CommandHandler('cancel', cancel_publish)
        ]
    )

def get_post_selector():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    return post_selector 