"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)
"""

import os
import tempfile
import json
import logging
import threading
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import ConversationHandler, CallbackQueryHandler, MessageHandler, Filters

from database.db_manager import get_instagram_account, get_instagram_accounts, create_publish_task
from database.models import TaskType, TaskStatus
from utils.task_queue import add_task_to_queue, get_task_status
from telegram_bot.utils.account_selection import create_account_selector

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è uuid
import uuid

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
CHOOSE_ACCOUNT, UPLOAD_MEDIA, ENTER_CAPTION, ENTER_HASHTAGS, CONFIRM_PUBLISH, CHOOSE_SCHEDULE, CHOOSE_HIDE_FROM_FEED = range(10, 17)

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return True  # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def start_post_publish(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['publish_type'] = 'post'
    context.user_data['publish_media_type'] = 'PHOTO'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    keyboard = []
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫–∏
    from database.db_manager import get_account_groups
    folders = get_account_groups()
    if folders:
        keyboard.append([InlineKeyboardButton("üìÅ –í—ã–±—Ä–∞—Ç—å –∏–∑ –ø–∞–ø–∫–∏", callback_data="post_from_folders")])
    
    keyboard.append([InlineKeyboardButton("üìã –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="post_all_accounts")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")])
    
    query.edit_message_text(
        "üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return PostStates.CHOOSE_ACCOUNT

def handle_post_source_selection(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    if query.data == "post_from_folders":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        return show_post_folders(update, context)
    
    elif query.data == "post_all_accounts":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        return show_post_accounts_list(update, context, "all")
    
    elif query.data == "post_back_to_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        from telegram_bot.handlers.system_handlers import show_publish_menu
        return show_publish_menu(update, context)

def show_post_folders(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    query = update.callback_query
    
    from database.db_manager import get_account_groups
    folders = get_account_groups()
    
    if not folders:
        query.edit_message_text(
            "‚ùå –ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="post_back_to_menu")]
            ])
        )
        return PostStates.CHOOSE_ACCOUNT
    
    keyboard = []
    for folder in folders:
        keyboard.append([InlineKeyboardButton(
            f"üìÅ {folder.name}",
            callback_data=f"post_folder_{folder.id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="post_back_to_menu")])
    
    query.edit_message_text(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return PostStates.CHOOSE_ACCOUNT

def show_post_accounts_list(update, context, folder_id_or_all, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    query = update.callback_query
    
    from database.db_manager import get_instagram_accounts
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    if folder_id_or_all == "all":
        accounts = get_instagram_accounts()
        folder_name = "–í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –ø–∞–ø–∫–∏
        from database.db_manager import get_accounts_by_group
        accounts = get_accounts_by_group(folder_id_or_all)
        folder_name = f"–ü–∞–ø–∫–∞ {folder_id_or_all}"
    
    if not accounts:
        query.edit_message_text(
            "‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="post_back_to_menu")]
            ])
        )
        return PostStates.CHOOSE_ACCOUNT
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    if 'selected_post_accounts' not in context.user_data:
        context.user_data['selected_post_accounts'] = []
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    accounts_per_page = 8
    total_pages = (len(accounts) + accounts_per_page - 1) // accounts_per_page
    page = max(0, min(page, total_pages - 1))
    
    start_idx = page * accounts_per_page
    end_idx = start_idx + accounts_per_page
    page_accounts = accounts[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    for account in page_accounts:
        selected = account.id in context.user_data['selected_post_accounts']
        checkbox = "‚úÖ" if selected else "‚òê"
        status = "‚úÖ" if account.is_active else "‚ùå"
        
        keyboard.append([InlineKeyboardButton(
            f"{checkbox} {status} @{account.username}",
            callback_data=f"post_toggle_{account.id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = []
    if len(context.user_data['selected_post_accounts']) > 0:
        control_buttons.append(InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", callback_data="post_deselect_all"))
    
    if len(context.user_data['selected_post_accounts']) < len(accounts):
        control_buttons.append(InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="post_select_all"))
    
    if control_buttons:
        keyboard.append(control_buttons)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"post_page_{page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="post_page_info"))
        
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"post_page_{page+1}"))
        
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_buttons = []
    if len(context.user_data['selected_post_accounts']) > 0:
        action_buttons.append(InlineKeyboardButton(
            f"üì§ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ({len(context.user_data['selected_post_accounts'])})",
            callback_data="post_confirm_selection"
        ))
    
    action_buttons.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="post_back_to_menu"))
    keyboard.append(action_buttons)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    selected_count = len(context.user_data['selected_post_accounts'])
    
    text = f"üéØ –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞\n\n"
    text += f"üìÅ {folder_name}\n"
    text += f"–í—ã–±—Ä–∞–Ω–æ: {selected_count} –∏–∑ {len(accounts)}\n\n"
    
    if selected_count > 1:
        text += "‚ö†Ô∏è –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    return PostStates.CHOOSE_ACCOUNT

def handle_post_account_toggle(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("post_toggle_", ""))
    
    if 'selected_post_accounts' not in context.user_data:
        context.user_data['selected_post_accounts'] = []
    
    if account_id in context.user_data['selected_post_accounts']:
        context.user_data['selected_post_accounts'].remove(account_id)
    else:
        context.user_data['selected_post_accounts'].append(account_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return show_post_accounts_list(update, context, "all")

def handle_post_confirm_selection(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞"""
    query = update.callback_query
    query.answer()
    
    selected_accounts = context.user_data.get('selected_post_accounts', [])
    
    if not selected_accounts:
        query.edit_message_text(
            "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="post_back_to_menu")]
            ])
        )
        return PostStates.CHOOSE_ACCOUNT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    context.user_data['selected_accounts'] = selected_accounts
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    from database.db_manager import get_instagram_account
    accounts = [get_instagram_account(acc_id) for acc_id in selected_accounts]
    usernames = [acc.username for acc in accounts if acc]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞
    text = f"üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞\n\n"
    text += f"üë• –í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
    text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join([f'@{u}' for u in usernames[:3]])}"
    if len(usernames) > 3:
        text += f" –∏ –µ—â—ë {len(usernames) - 3}..."
    text += "\n\n"
    
    if len(selected_accounts) > 1:
        text += "üé® –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
    
    text += "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
    
    query.edit_message_text(text)
    
    return PostStates.MEDIA_UPLOAD

def handle_post_media_upload(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞ –¥–ª—è –ø–æ—Å—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
        if 'media_files' not in context.user_data:
            context.user_data['media_files'] = []
        
        media_files = context.user_data['media_files']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.message.photo:
            # –§–æ—Ç–æ
            photo = update.message.photo[-1]
            file_obj = context.bot.get_file(photo.file_id)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            import uuid
            filename = f"photo_{uuid.uuid4().hex[:8]}.jpg"
            file_path = os.path.join("media", filename)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs("media", exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_obj.download(file_path)
            
            media_files.append({
                'type': 'photo',
                'path': file_path,
                'original_filename': filename
            })
            
        elif update.message.video:
            # –í–∏–¥–µ–æ
            video = update.message.video
            file_obj = context.bot.get_file(video.file_id)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            import uuid
            filename = f"video_{uuid.uuid4().hex[:8]}.mp4"
            file_path = os.path.join("media", filename)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs("media", exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_obj.download(file_path)
            
            media_files.append({
                'type': 'video',
                'path': file_path,
                'original_filename': filename
            })
            
        elif update.message.document:
            # –î–æ–∫—É–º–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–º)
            document = update.message.document
            file_name = document.file_name or "unknown"
            file_ext = os.path.splitext(file_name)[1].lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª
            if file_ext in ['.jpg', '.jpeg', '.png', '.webp', '.mp4', '.mov', '.avi', '.mkv']:
                file_obj = context.bot.get_file(document.file_id)
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                import uuid
                filename = f"media_{uuid.uuid4().hex[:8]}{file_ext}"
                file_path = os.path.join("media", filename)
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                os.makedirs("media", exist_ok=True)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                file_obj.download(file_path)
                
                media_type = 'photo' if file_ext in ['.jpg', '.jpeg', '.png', '.webp'] else 'video'
                media_files.append({
                    'type': media_type,
                    'path': file_path,
                    'original_filename': file_name
                })
            else:
                update.message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, MP4, MOV")
                return PostStates.MEDIA_UPLOAD
        else:
            update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª")
            return PostStates.MEDIA_UPLOAD
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
        context.user_data['media_files'] = media_files
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        total_files = len(media_files)
        
        text = f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n\n"
        
        for i, file_info in enumerate(media_files, 1):
            file_type = "üì∑ –§–æ—Ç–æ" if file_info['type'] == 'photo' else "üé• –í–∏–¥–µ–æ"
            text += f"{i}. {file_type} - {file_info['original_filename']}\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if total_files == 1:
            if media_files[0]['type'] == 'photo':
                text += "\nüì§ –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –û–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ"
            else:
                text += "\nüì§ –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –í–∏–¥–µ–æ"
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã - —Ñ–æ—Ç–æ
            all_photos = all(f['type'] == 'photo' for f in media_files)
            if all_photos and total_files <= 10:
                text += f"\nüé† –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –ö–∞—Ä—É—Å–µ–ª—å ({total_files} —Ñ–æ—Ç–æ)"
            elif not all_photos:
                text += "\n‚ùå –û—à–∏–±–∫–∞: –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ"
                text += "\n–£–¥–∞–ª–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
            else:
                text += f"\n‚ùå –û—à–∏–±–∫–∞: –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ –≤ –∫–∞—Ä—É—Å–µ–ª–∏ (–∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_files})"
        
        text += "\n\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = [
            [InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="post_continue_to_caption")],
            [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="post_clear_media")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
        ]
        
        update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return PostStates.MEDIA_UPLOAD
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return PostStates.MEDIA_UPLOAD

def handle_post_media_actions(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏"""
    query = update.callback_query
    query.answer()
    
    if query.data == "post_continue_to_caption":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        media_files = context.user_data.get('media_files', [])
        
        if not media_files:
            query.edit_message_text(
                "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_back_to_accounts")
                ]])
            )
            return PostStates.MEDIA_UPLOAD
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
        if len(media_files) > 1:
            all_photos = all(f['type'] == 'photo' for f in media_files)
            if not all_photos:
                query.edit_message_text(
                    "‚ùå –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="post_clear_media"),
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")
                    ]])
                )
                return PostStates.MEDIA_UPLOAD
            
            if len(media_files) > 10:
                query.edit_message_text(
                    f"‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ –≤ –∫–∞—Ä—É—Å–µ–ª–∏ (–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(media_files)})",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="post_clear_media"),
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")
                    ]])
                )
                return PostStates.MEDIA_UPLOAD
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
        return show_post_caption_input(update, context)
        
    elif query.data == "post_clear_media":
        # –û—á–∏—â–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        media_files = context.user_data.get('media_files', [])
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞
        for file_info in media_files:
            try:
                if os.path.exists(file_info['path']):
                    os.remove(file_info['path'])
            except:
                pass
        
        # –û—á–∏—â–∞–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data['media_files'] = []
        
        query.edit_message_text("üóë –í—Å–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã\n\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
        
        return PostStates.MEDIA_UPLOAD

def show_post_caption_input(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    
    selected_accounts = context.user_data.get('selected_accounts', [])
    media_files = context.user_data.get('media_files', [])
    
    text = f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
    text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
    text += f"üìÅ –§–∞–π–ª–æ–≤: {len(media_files)}\n"
    
    if len(media_files) > 1:
        text += f"üé† –¢–∏–ø: –ö–∞—Ä—É—Å–µ–ª—å\n"
    elif media_files[0]['type'] == 'photo':
        text += f"üì∑ –¢–∏–ø: –§–æ—Ç–æ\n"
    else:
        text += f"üé• –¢–∏–ø: –í–∏–¥–µ–æ\n"
    
    if len(selected_accounts) > 1:
        text += "\nüé® –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
    
    text += "\n‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è':"
    
    keyboard = [
        [InlineKeyboardButton("üìù –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="post_no_caption")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="post_back_to_media")]
    ]
    
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return PostStates.ENTER_CAPTION

def handle_post_caption_input(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        caption = update.message.text
        context.user_data['caption'] = caption
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ö–µ—à—Ç–µ–≥–æ–≤
        return show_post_hashtags_input(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return PostStates.ENTER_CAPTION

def handle_post_caption_actions(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    query = update.callback_query
    query.answer()
    
    if query.data == "post_no_caption":
        # –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        context.user_data['caption'] = ""
        return show_post_hashtags_input(update, context)
        
    elif query.data == "post_back_to_media":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–¥–∏–∞
        media_files = context.user_data.get('media_files', [])
        
        if not media_files:
            query.edit_message_text("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
            return PostStates.MEDIA_UPLOAD
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        text = f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(media_files)}\n\n"
        
        for i, file_info in enumerate(media_files, 1):
            file_type = "üì∑ –§–æ—Ç–æ" if file_info['type'] == 'photo' else "üé• –í–∏–¥–µ–æ"
            text += f"{i}. {file_type} - {file_info['original_filename']}\n"
        
        text += "\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'"
        
        keyboard = [
            [InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="post_continue_to_caption")],
            [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="post_clear_media")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
        ]
        
        query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return PostStates.MEDIA_UPLOAD

def show_post_hashtags_input(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    try:
        selected_accounts = context.user_data.get('selected_accounts', [])
        media_files = context.user_data.get('media_files', [])
        caption = context.user_data.get('caption', "")
        
        text = f"üè∑ –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
        text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
        text += f"üìÅ –§–∞–π–ª–æ–≤: {len(media_files)}\n"
        
        if caption:
            preview = caption[:50] + "..." if len(caption) > 50 else caption
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {preview}\n"
        else:
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è\n"
        
        text += "\nüè∑ –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #nature #beautiful #photo)\n"
        text += "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤':"
        
        keyboard = [
            [InlineKeyboardButton("üè∑ –ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤", callback_data="post_no_hashtags")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="post_back_to_caption")]
        ]
        
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        return PostStates.ENTER_HASHTAGS
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤: {e}")
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return PostStates.ENTER_HASHTAGS

def handle_post_hashtags_input(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    try:
        hashtags = update.message.text
        context.user_data['hashtags'] = hashtags
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        return show_post_final_confirmation(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–µ—à—Ç–µ–≥–æ–≤: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return PostStates.ENTER_HASHTAGS

def handle_post_hashtags_actions(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏"""
    query = update.callback_query
    query.answer()
    
    if query.data == "post_no_hashtags":
        # –ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤
        context.user_data['hashtags'] = ""
        return show_post_final_confirmation(update, context)
        
    elif query.data == "post_back_to_caption":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        return show_post_caption_input(update, context)

def show_post_final_confirmation(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        selected_accounts = context.user_data.get('selected_accounts', [])
        media_files = context.user_data.get('media_files', [])
        caption = context.user_data.get('caption', "")
        hashtags = context.user_data.get('hashtags', "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        from database.db_manager import get_instagram_account
        accounts = []
        for account_id in selected_accounts:
            account = get_instagram_account(account_id)
            if account:
                accounts.append(account)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        text = f"**–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞
        if len(media_files) == 1:
            if media_files[0]['type'] == 'photo':
                media_info = "PHOTO"
            else:
                media_info = "VIDEO"
        else:
            media_info = "CAROUSEL"
        
        text += f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã: {len(accounts)} —à—Ç.\n"
        text += f"üìÑ –¢–∏–ø: –ü–æ—Å—Ç\n"
        text += f"üì± –ú–µ–¥–∏–∞: {media_info}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–∏—Å–∞–Ω–∏–∏
        if caption:
            preview = caption[:100] + "..." if len(caption) > 100 else caption
            text += f"‚úèÔ∏è –ü–æ–¥–ø–∏—Å—å: {preview}\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–µ—à—Ç–µ–≥–∞—Ö
        if hashtags:
            hashtags_preview = hashtags[:50] + "..." if len(hashtags) > 50 else hashtags
            text += f"#Ô∏è‚É£ –•–µ—à—Ç–µ–≥–∏: {hashtags_preview}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏–ª–∏ –Ω–µ—Ç
        is_scheduled = context.user_data.get('is_scheduled_post', False)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if is_scheduled:
            # –î–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="post_schedule_time")],
                [InlineKeyboardButton("üîô –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å", callback_data="post_back_to_caption")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
            ]
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="post_confirm_publish"), 
                 InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="post_schedule_publish")],
                [InlineKeyboardButton("üîô –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å", callback_data="post_back_to_caption")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
            ]
        
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        return PostStates.CONFIRM_PUBLISH
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return PostStates.CONFIRM_PUBLISH

def handle_post_final_confirmation(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    query = update.callback_query
    query.answer()
    
    if query.data == "post_confirm_publish":
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–µ–π—á–∞—Å
        return execute_post_publish(update, context)
        
    elif query.data == "post_schedule_publish":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
        context.user_data['is_scheduled_post'] = True
        return show_post_schedule_time(update, context)
        
    elif query.data == "post_back_to_caption":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        return show_post_caption_input(update, context)

def show_post_schedule_time(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    
    text = "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    text += "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:30"
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é", callback_data="post_back_to_confirmation")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return PostStates.SCHEDULE_TIME

def handle_post_schedule_time(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        time_str = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        from datetime import datetime
        try:
            scheduled_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M")
        except ValueError:
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
            )
            return PostStates.SCHEDULE_TIME
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if scheduled_time <= datetime.now():
            update.message.reply_text(
                "‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º"
            )
            return PostStates.SCHEDULE_TIME
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        context.user_data['scheduled_time'] = scheduled_time
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        return execute_post_schedule(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return PostStates.SCHEDULE_TIME

def execute_post_publish(update, context):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞"""
    query = update.callback_query
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        selected_accounts = context.user_data.get('selected_accounts', [])
        media_files = context.user_data.get('media_files', [])
        caption = context.user_data.get('caption', "")
        hashtags = context.user_data.get('hashtags', "")
        
        if not selected_accounts or not media_files:
            query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return ConversationHandler.END
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        media_paths = [f['path'] for f in media_files]
        full_caption = f"{caption}\n\n{hashtags}".strip()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        from database.db_manager import create_publish_task
        from database.models import TaskType
        
        task_type = TaskType.PHOTO if media_files[0]['type'] == 'photo' else TaskType.VIDEO
        if len(media_files) > 1:
            task_type = TaskType.CAROUSEL
        
        tasks_created = 0
        for account_id in selected_accounts:
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                task = create_publish_task(
                    account_id=account_id,
                    task_type=task_type,
                    media_path=media_paths[0] if len(media_paths) == 1 else media_paths,
                    caption=full_caption,
                    hashtags=hashtags
                )
                
                if task:
                    tasks_created += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if tasks_created > 0:
            query.edit_message_text(
                f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
                f"üì§ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {tasks_created}\n"
                f"‚è≥ –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
            )
        else:
            query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cleanup_post_data(context)
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return ConversationHandler.END

def execute_post_schedule(update, context):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        selected_accounts = context.user_data.get('selected_accounts', [])
        media_files = context.user_data.get('media_files', [])
        caption = context.user_data.get('caption', "")
        hashtags = context.user_data.get('hashtags', "")
        scheduled_time = context.user_data.get('scheduled_time')
        
        if not selected_accounts or not media_files or not scheduled_time:
            update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return ConversationHandler.END
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        media_paths = [f['path'] for f in media_files]
        full_caption = f"{caption}\n\n{hashtags}".strip()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        from database.db_manager import create_publish_task
        from database.models import TaskType
        
        task_type = TaskType.PHOTO if media_files[0]['type'] == 'photo' else TaskType.VIDEO
        if len(media_files) > 1:
            task_type = TaskType.CAROUSEL
        
        tasks_created = 0
        for account_id in selected_accounts:
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                task = create_publish_task(
                    account_id=account_id,
                    task_type=task_type,
                    media_path=media_paths[0] if len(media_paths) == 1 else media_paths,
                    caption=full_caption,
                    hashtags=hashtags,
                    scheduled_time=scheduled_time
                )
                
                if task:
                    tasks_created += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if tasks_created > 0:
            time_str = scheduled_time.strftime("%d.%m.%Y %H:%M")
            update.message.reply_text(
                f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                f"üìÖ –í—Ä–µ–º—è: {time_str}\n"
                f"üì§ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {tasks_created}\n"
                f"‚è≥ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            )
        else:
            update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cleanup_post_data(context)
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return ConversationHandler.END

def cleanup_post_data(context):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        media_files = context.user_data.get('media_files', [])
        for file_info in media_files:
            try:
                if os.path.exists(file_info['path']):
                    os.remove(file_info['path'])
            except:
                pass
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        keys_to_remove = [
            'selected_accounts', 'selected_post_accounts', 'media_files',
            'caption', 'hashtags', 'scheduled_time', 'is_scheduled_post'
        ]
        
        for key in keys_to_remove:
            context.user_data.pop(key, None)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
def start_schedule_post(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data['is_scheduled_post'] = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    return start_post_publish(update, context) 