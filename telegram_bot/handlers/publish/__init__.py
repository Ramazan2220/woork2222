"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ Instagram —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π —Ñ–∞–π–ª publish_handlers.py –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
"""

import logging
from typing import List

logger = logging.getLogger(__name__)


def get_publish_handlers() -> List:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    
    Returns:
        List: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    """
    handlers = []
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ publish_handlers.py
        from .. import publish_handlers
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if hasattr(publish_handlers, 'get_publish_handlers'):
            handlers = publish_handlers.get_publish_handlers()
            logger.info(f"‚úÖ Loaded {len(handlers)} handlers from monolithic publish_handlers.py")
        else:
            logger.warning("‚ùå Function get_publish_handlers not found in publish_handlers.py")
            
    except ImportError as e:
        logger.error(f"‚ùå Failed to load publish handlers: {e}")
    except Exception as e:
        logger.error(f"‚ùå Error loading publish handlers: {e}")
    
    logger.info(f"üìä Total publish handlers loaded: {len(handlers)}")
    
    return handlers


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def start_post_publish(update, context):
    """–ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
    try:
        from .. import publish_handlers
        return publish_handlers.start_post_publish(update, context)
    except Exception as e:
        logger.error(f"Error calling start_post_publish: {e}")
        return None


def start_story_publish(update, context):
    """–ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        from .. import publish_handlers
        return publish_handlers.start_story_publish(update, context)
    except Exception as e:
        logger.error(f"Error calling start_story_publish: {e}")
        return None


def start_reels_publish(update, context):
    """–ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels"""
    try:
        from .. import publish_handlers
        return publish_handlers.start_reels_publish(update, context)
    except Exception as e:
        logger.error(f"Error calling start_reels_publish: {e}")
        return None


def start_igtv_publish(update, context):
    """–ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ IGTV"""
    try:
        from .. import publish_handlers
        return publish_handlers.start_igtv_publish(update, context)
    except Exception as e:
        logger.error(f"Error calling start_igtv_publish: {e}")
        return None


def show_scheduled_posts(update, context):
    """–ü–æ–∫–∞–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    try:
        from .. import publish_handlers
        return publish_handlers.show_scheduled_posts(update, context)
    except Exception as e:
        logger.error(f"Error calling show_scheduled_posts: {e}")
        return None


def show_publication_history(update, context):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    try:
        from .. import publish_handlers
        return publish_handlers.show_publication_history(update, context)
    except Exception as e:
        logger.error(f"Error calling show_publication_history: {e}")
        return None


__all__ = [
    'get_publish_handlers',
    'start_post_publish',
    'start_story_publish',
    'start_reels_publish',
    'start_igtv_publish',
    'show_scheduled_posts',
    'show_publication_history'
] 