"""
–ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
"""

import os
import tempfile
import logging
from typing import List, Dict, Optional, Any
from abc import ABC, abstractmethod
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram.ext import ConversationHandler, CallbackContext

from database.db_manager import get_instagram_account, create_publish_task
from database.models import TaskType, TaskStatus
from utils.task_queue import add_task_to_queue
from telegram_bot.utils.account_selection import AccountSelector
from utils.content_uniquifier import ContentUniquifier

logger = logging.getLogger(__name__)


class BasePublishHandler(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    
    def __init__(self, publish_type: str, task_type: TaskType):
        self.publish_type = publish_type
        self.task_type = task_type
        self.content_uniquifier = ContentUniquifier()
        
    @abstractmethod
    def get_media_prompt(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞"""
        pass
    
    @abstractmethod
    def get_media_types(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞"""
        pass
    
    @abstractmethod
    def validate_media(self, media_path: str, media_type: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –º–µ–¥–∏–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)"""
        pass
    
    def cleanup_user_data(self, context: CallbackContext):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        keys_to_remove = [
            'publish_type', 'publish_media_type', 'publish_account_ids', 
            'publish_account_usernames', 'publish_account_id', 'publish_account_username',
            'publish_media_path', 'publish_media_paths', 'publish_caption', 'publish_hashtags',
            'publish_to_all_accounts', 'is_scheduled_post', 'schedule_publish_type',
            'waiting_for_schedule_time', 'selected_accounts'
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–∏–ø–∞ –∫–ª—é—á–∏
        keys_to_remove.extend(self.get_specific_keys_to_cleanup())
        
        for key in keys_to_remove:
            context.user_data.pop(key, None)
    
    def get_specific_keys_to_cleanup(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)"""
        return []
    
    def create_account_selector(self, back_callback: str = "menu_publications") -> AccountSelector:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        title_map = {
            'post': "üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞",
            'story': "üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏", 
            'reels': "üé• –ü—É–±–ª–∏–∫–∞—Ü–∏—è Reels",
            'igtv': "üé¨ –ü—É–±–ª–∏–∫–∞—Ü–∏—è IGTV"
        }
        
        return AccountSelector(
            callback_prefix=f"{self.publish_type}_select",
            title=title_map.get(self.publish_type, "üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è"),
            allow_multiple=True,
            show_status=True,
            show_folders=True,
            back_callback=back_callback
        )
    
    def download_media(self, update: Update, context: CallbackContext) -> Optional[List[str]]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –∫ –Ω–∏–º"""
        media_files = []
        media_type = None
        
        if update.message.photo:
            media_files = [update.message.photo[-1]]
            media_type = 'PHOTO'
        elif update.message.video:
            media_files = [update.message.video]
            media_type = 'VIDEO'
        elif update.message.document:
            media_file = update.message.document
            if media_file.mime_type.startswith('video/'):
                media_files = [media_file]
                media_type = 'VIDEO'
            elif media_file.mime_type.startswith('image/'):
                media_files = [media_file]
                media_type = 'PHOTO'
        
        if not media_files:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã
        if media_type not in self.get_media_types():
            update.message.reply_text(
                f"‚ùå –≠—Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ: {', '.join(self.get_media_types())}"
            )
            return None
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã
        media_paths = []
        for media_file in media_files:
            file_id = media_file.file_id
            media = context.bot.get_file(file_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            file_extension = '.mp4' if media_type == 'VIDEO' else '.jpg'
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as temp_file:
                media_path = temp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–µ–º
            media.download(media_path)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
            is_valid, error_msg = self.validate_media(media_path, media_type)
            if not is_valid:
                os.unlink(media_path)
                update.message.reply_text(f"‚ùå {error_msg}")
                # –£–¥–∞–ª—è–µ–º —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for path in media_paths:
                    if os.path.exists(path):
                        os.unlink(path)
                return None
            
            media_paths.append(media_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['publish_media_type'] = media_type
        if len(media_paths) == 1:
            context.user_data['publish_media_path'] = media_paths[0]
        else:
            context.user_data['publish_media_paths'] = media_paths
        
        return media_paths
    
    def prepare_content_for_accounts(self, context: CallbackContext) -> List[Dict[str, Any]]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        account_ids = context.user_data.get('publish_account_ids', [])
        media_path = context.user_data.get('publish_media_path')
        media_paths = context.user_data.get('publish_media_paths', [])
        caption = context.user_data.get('publish_caption', '')
        hashtags = context.user_data.get('publish_hashtags', [])
        
        # –ï—Å–ª–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª
        if media_path and not media_paths:
            media_paths = [media_path]
        
        prepared_content = []
        
        for i, account_id in enumerate(account_ids):
            account = get_instagram_account(account_id)
            if not account:
                continue
            
            # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            unique_content = {
                'account_id': account_id,
                'account_username': account.username,
                'caption': caption,
                'hashtags': hashtags,
                'media_paths': []
            }
            
            # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
            for media_path in media_paths:
                if len(account_ids) > 1:
                    # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º
                    unique_path, _ = self.content_uniquifier.uniquify_content(
                        media_path, 
                        self.publish_type,
                        ""
                    )
                    # –ï—Å–ª–∏ uniquify_content –≤–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                    if isinstance(unique_path, list):
                        unique_path = unique_path[0]
                else:
                    # –î–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º
                    unique_path = media_path
                
                unique_content['media_paths'].append(unique_path)
            
            # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            if len(account_ids) > 1 and caption:
                unique_content['caption'] = self.content_uniquifier.uniquify_text(
                    caption,
                    account_index=i,
                    total_accounts=len(account_ids)
                )
            
            # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–µ—à—Ç–µ–≥–∏
            if len(account_ids) > 1 and hashtags:
                # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏
                import random
                unique_hashtags = hashtags.copy()
                random.shuffle(unique_hashtags)
                unique_content['hashtags'] = unique_hashtags
            else:
                unique_content['hashtags'] = hashtags
            
            prepared_content.append(unique_content)
        
        return prepared_content
    
    def create_publish_tasks(self, context: CallbackContext, scheduled_time: Optional[datetime] = None) -> List[int]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        prepared_content = self.prepare_content_for_accounts(context)
        task_ids = []
        
        for content in prepared_content:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
            task = create_publish_task(
                account_id=content['account_id'],
                task_type=self.task_type,
                media_paths=content['media_paths'],
                caption=content['caption'],
                hashtags=content['hashtags'],
                scheduled_time=scheduled_time,
                additional_data=self.get_additional_task_data(context)
            )
            
            if task:
                task_ids.append(task.id)
                
                # –ï—Å–ª–∏ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                if not scheduled_time:
                    add_task_to_queue(task.id)
        
        return task_ids
    
    def get_additional_task_data(self, context: CallbackContext) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏ (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)"""
        return {}
    
    def format_confirmation_message(self, context: CallbackContext) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        account_ids = context.user_data.get('publish_account_ids', [])
        caption = context.user_data.get('publish_caption', '')
        hashtags = context.user_data.get('publish_hashtags', [])
        media_type = context.user_data.get('publish_media_type', 'PHOTO')
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        if len(account_ids) == 1:
            account = get_instagram_account(account_ids[0])
            account_info = f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account.username}"
        else:
            account_info = f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã: {len(account_ids)} —à—Ç."
        
        # –¢–∏–ø—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        type_names = {
            'post': '–ü–æ—Å—Ç',
            'story': '–ò—Å—Ç–æ—Ä–∏—è', 
            'reels': 'Reels',
            'igtv': 'IGTV'
        }
        
        message = f"*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏*\n\n"
        message += f"{account_info}\n"
        message += f"üìÑ –¢–∏–ø: {type_names.get(self.publish_type, '–ü—É–±–ª–∏–∫–∞—Ü–∏—è')}\n"
        message += f"üì± –ú–µ–¥–∏–∞: {media_type}\n"
        
        if caption:
            message += f"‚úèÔ∏è –ü–æ–¥–ø–∏—Å—å: {caption[:50]}{'...' if len(caption) > 50 else ''}\n"
        
        if hashtags:
            message += f"#Ô∏è‚É£ –•–µ—à—Ç–µ–≥–∏: {' '.join(hashtags[:5])}{'...' if len(hashtags) > 5 else ''}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        message += self.format_specific_info(context)
        
        return message
    
    def format_specific_info(self, context: CallbackContext) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è —Ç–∏–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)"""
        return "" 