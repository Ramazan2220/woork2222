"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π
"""

import logging
from datetime import datetime, timedelta

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ConversationHandler

from .common import (
    logger, cleanup_user_data, cancel_publish, format_scheduled_time,
    create_time_selection_keyboard, create_minute_selection_keyboard,
    CHOOSE_SCHEDULE
)

from database.db_manager import create_publish_task
from database.models import TaskType, TaskStatus

def choose_schedule(update, context):
    """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    keyboard = []
    
    # –ë—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    now = datetime.now()
    
    # –ß–µ—Ä–µ–∑ 1 —á–∞—Å
    hour_later = now + timedelta(hours=1)
    keyboard.append([InlineKeyboardButton(
        f"‚è∞ –ß–µ—Ä–µ–∑ 1 —á–∞—Å ({hour_later.strftime('%H:%M')})",
        callback_data=f"quick_schedule_{hour_later.strftime('%Y%m%d_%H%M')}"
    )])
    
    # –ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞
    three_hours_later = now + timedelta(hours=3)
    keyboard.append([InlineKeyboardButton(
        f"‚è∞ –ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞ ({three_hours_later.strftime('%H:%M')})",
        callback_data=f"quick_schedule_{three_hours_later.strftime('%Y%m%d_%H%M')}"
    )])
    
    # –ó–∞–≤—Ç—Ä–∞ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è
    tomorrow = now + timedelta(days=1)
    keyboard.append([InlineKeyboardButton(
        f"üìÖ –ó–∞–≤—Ç—Ä–∞ –≤ {tomorrow.strftime('%H:%M')}",
        callback_data=f"quick_schedule_{tomorrow.strftime('%Y%m%d_%H%M')}"
    )])
    
    # –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    keyboard.append([InlineKeyboardButton(
        "üïê –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è",
        callback_data="custom_schedule"
    )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_confirmation")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )
    return CHOOSE_SCHEDULE

def handle_quick_schedule(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ callback_data
    time_str = query.data.split('_')[-1]
    scheduled_time = datetime.strptime(time_str, '%Y%m%d_%H%M')
    
    return schedule_publication(update, context, scheduled_time)

def handle_custom_schedule(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    query.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    keyboard = create_time_selection_keyboard()
    
    query.edit_message_text(
        "üïê –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
        reply_markup=keyboard
    )
    return CHOOSE_SCHEDULE

def handle_hour_selection(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å–∞"""
    query = update.callback_query
    query.answer()
    
    hour = int(query.data.split('_')[-1])
    context.user_data['selected_hour'] = hour
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–∏–Ω—É—Ç
    keyboard = create_minute_selection_keyboard(hour)
    
    query.edit_message_text(
        f"üïê –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã –¥–ª—è {hour:02d}:xx:",
        reply_markup=keyboard
    )
    return CHOOSE_SCHEDULE

def handle_minute_selection(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω—É—Ç"""
    query = update.callback_query
    query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å –∏ –º–∏–Ω—É—Ç—ã
    parts = query.data.split('_')
    hour = int(parts[-2])
    minute = int(parts[-1])
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
    now = datetime.now()
    scheduled_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if scheduled_time <= now:
        scheduled_time += timedelta(days=1)
    
    return schedule_publication(update, context, scheduled_time)

def schedule_publication(update, context, scheduled_time):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        publish_type = context.user_data.get('publish_type', 'post')
        media_path = context.user_data.get('publish_media_path')
        media_paths = context.user_data.get('publish_media_paths', [])
        media_type = context.user_data.get('publish_media_type')
        caption = context.user_data.get('publish_caption', '')
        hashtags = context.user_data.get('publish_hashtags', '')
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —Ö–µ—à—Ç–µ–≥–∏
        full_caption = caption
        if hashtags:
            if full_caption:
                full_caption += f"\n\n{hashtags}"
            else:
                full_caption = hashtags
        
        account_ids = context.user_data.get('publish_account_ids', [])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        task_type_map = {
            'post': TaskType.POST,
            'scheduled_post': TaskType.POST,
            'story': TaskType.STORY,
            'reels': TaskType.REELS,
            'igtv': TaskType.IGTV
        }
        
        task_type = task_type_map.get(publish_type, TaskType.POST)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        task_ids = []
        for account_id in account_ids:
            task_id = create_publish_task(
                user_id=user_id,
                task_type=task_type,
                account_id=account_id,
                media_path=media_path or str(media_paths),
                caption=full_caption,
                scheduled_time=scheduled_time,
                status=TaskStatus.SCHEDULED
            )
            task_ids.append(task_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        type_names = {
            'post': '–ü–æ—Å—Ç',
            'scheduled_post': '–ü–æ—Å—Ç', 
            'story': '–ò—Å—Ç–æ—Ä–∏—è',
            'reels': 'Reels',
            'igtv': 'IGTV'
        }
        
        type_name = type_names.get(publish_type, '–ü–æ—Å—Ç')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if len(account_ids) == 1:
            account_username = context.user_data.get('publish_account_username')
            message = f"‚úÖ {type_name} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {format_scheduled_time(scheduled_time)}!\n\n"
            message += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account_username}\n"
            message += f"üì± –ú–µ–¥–∏–∞: {media_type}\n"
            message += f"üÜî ID –∑–∞–¥–∞—á–∏: {task_ids[0]}"
        else:
            message = f"‚úÖ {type_name} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {format_scheduled_time(scheduled_time)}!\n\n"
            message += f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã: {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
            message += f"üì± –ú–µ–¥–∏–∞: {media_type}\n"
            message += f"üÜî ID –∑–∞–¥–∞—á: {', '.join(map(str, task_ids))}"
        
        query.edit_message_text(message)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cleanup_user_data(context)
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        return ConversationHandler.END

def schedule_story_publish(update, context, scheduled_time, user_id):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        media_path = context.user_data.get('publish_media_path')
        caption = context.user_data.get('publish_caption', '')
        account_ids = context.user_data.get('publish_account_ids', [])
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        task_ids = []
        for account_id in account_ids:
            task_id = create_publish_task(
                user_id=user_id,
                task_type=TaskType.STORY,
                account_id=account_id,
                media_path=media_path,
                caption=caption,
                scheduled_time=scheduled_time,
                status=TaskStatus.SCHEDULED
            )
            task_ids.append(task_id)
        
        return task_ids
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        raise

def schedule_reels_publish(update, context, scheduled_time, user_id):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        media_path = context.user_data.get('publish_media_path')
        caption = context.user_data.get('publish_caption', '')
        account_ids = context.user_data.get('publish_account_ids', [])
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        task_ids = []
        for account_id in account_ids:
            task_id = create_publish_task(
                user_id=user_id,
                task_type=TaskType.REELS,
                account_id=account_id,
                media_path=media_path,
                caption=caption,
                scheduled_time=scheduled_time,
                status=TaskStatus.SCHEDULED
            )
            task_ids.append(task_id)
        
        return task_ids
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ Reels: {e}")
        raise

def schedule_post_publish(update, context, scheduled_time, user_id):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        media_path = context.user_data.get('publish_media_path')
        media_paths = context.user_data.get('publish_media_paths', [])
        caption = context.user_data.get('publish_caption', '')
        hashtags = context.user_data.get('publish_hashtags', '')
        account_ids = context.user_data.get('publish_account_ids', [])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —Ö–µ—à—Ç–µ–≥–∏
        full_caption = caption
        if hashtags:
            if full_caption:
                full_caption += f"\n\n{hashtags}"
            else:
                full_caption = hashtags
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        task_ids = []
        for account_id in account_ids:
            task_id = create_publish_task(
                user_id=user_id,
                task_type=TaskType.POST,
                account_id=account_id,
                media_path=media_path or str(media_paths),
                caption=full_caption,
                scheduled_time=scheduled_time,
                status=TaskStatus.SCHEDULED
            )
            task_ids.append(task_id)
        
        return task_ids
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        raise

def get_schedule_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    from telegram.ext import CallbackQueryHandler
    
    return [
        CallbackQueryHandler(handle_quick_schedule, pattern='^quick_schedule_'),
        CallbackQueryHandler(handle_custom_schedule, pattern='^custom_schedule$'),
        CallbackQueryHandler(handle_hour_selection, pattern='^time_hour_'),
        CallbackQueryHandler(handle_minute_selection, pattern='^time_minute_'),
        CallbackQueryHandler(choose_schedule, pattern='^back_to_hour$')
    ] 