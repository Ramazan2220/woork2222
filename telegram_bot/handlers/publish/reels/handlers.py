"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels
"""

import os
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ConversationHandler

from database.db_manager import get_instagram_account, get_instagram_accounts
from telegram_bot.handlers.publish.states import ReelsStates
from utils.content_uniquifier import ContentUniquifier

logger = logging.getLogger(__name__)

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return True  # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def start_reels_publish(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels"""
    query = update.callback_query
    query.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['publish_type'] = 'reels'
    context.user_data['publish_media_type'] = 'VIDEO'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    keyboard = []
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫–∏
    from database.db_manager import get_account_groups
    folders = get_account_groups()
    if folders:
        keyboard.append([InlineKeyboardButton("üìÅ –í—ã–±—Ä–∞—Ç—å –∏–∑ –ø–∞–ø–∫–∏", callback_data="reels_from_folders")])
    
    keyboard.append([InlineKeyboardButton("üìã –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="reels_all_accounts")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")])
    
    query.edit_message_text(
        "üé• –ü—É–±–ª–∏–∫–∞—Ü–∏—è Reels\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return ReelsStates.CHOOSE_ACCOUNT

def handle_reels_source_selection(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    if query.data == "reels_from_folders":
        return show_reels_folders(update, context)
    elif query.data == "reels_all_accounts":
        return show_reels_accounts_list(update, context, "all")
    elif query.data == "reels_back_to_menu":
        from telegram_bot.handlers.system_handlers import show_publish_menu
        return show_publish_menu(update, context)

def show_reels_folders(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫"""
    query = update.callback_query
    
    from database.db_manager import get_account_groups
    folders = get_account_groups()
    
    if not folders:
        query.edit_message_text(
            "‚ùå –ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reels_back_to_menu")]
            ])
        )
        return ReelsStates.CHOOSE_ACCOUNT
    
    keyboard = []
    for folder in folders:
        keyboard.append([InlineKeyboardButton(
            f"üìÅ {folder.name}",
            callback_data=f"reels_folder_{folder.id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reels_back_to_menu")])
    
    query.edit_message_text(
        "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return ReelsStates.CHOOSE_ACCOUNT

def show_reels_accounts_list(update, context, folder_id_or_all, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    if folder_id_or_all == "all":
        accounts = get_instagram_accounts()
        folder_name = "–í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"
    else:
        from database.db_manager import get_accounts_by_group
        accounts = get_accounts_by_group(folder_id_or_all)
        folder_name = f"–ü–∞–ø–∫–∞ {folder_id_or_all}"
    
    if not accounts:
        query.edit_message_text(
            "‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reels_back_to_menu")]
            ])
        )
        return ReelsStates.CHOOSE_ACCOUNT
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    if 'selected_reels_accounts' not in context.user_data:
        context.user_data['selected_reels_accounts'] = []
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    accounts_per_page = 8
    total_pages = (len(accounts) + accounts_per_page - 1) // accounts_per_page
    page = max(0, min(page, total_pages - 1))
    
    start_idx = page * accounts_per_page
    end_idx = start_idx + accounts_per_page
    page_accounts = accounts[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    for account in page_accounts:
        selected = account.id in context.user_data['selected_reels_accounts']
        checkbox = "‚úÖ" if selected else "‚òê"
        status = "‚úÖ" if account.is_active else "‚ùå"
        
        keyboard.append([InlineKeyboardButton(
            f"{checkbox} {status} @{account.username}",
            callback_data=f"reels_toggle_{account.id}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = []
    if len(context.user_data['selected_reels_accounts']) > 0:
        control_buttons.append(InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", callback_data="reels_deselect_all"))
    
    if len(context.user_data['selected_reels_accounts']) < len(accounts):
        control_buttons.append(InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="reels_select_all"))
    
    if control_buttons:
        keyboard.append(control_buttons)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"reels_page_{page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="reels_page_info"))
        
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"reels_page_{page+1}"))
        
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_buttons = []
    if len(context.user_data['selected_reels_accounts']) > 0:
        action_buttons.append(InlineKeyboardButton(
            f"üì§ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ({len(context.user_data['selected_reels_accounts'])})",
            callback_data="reels_confirm_selection"
        ))
    
    action_buttons.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reels_back_to_menu"))
    keyboard.append(action_buttons)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    selected_count = len(context.user_data['selected_reels_accounts'])
    
    text = f"üéØ –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels\n\n"
    text += f"üìÅ {folder_name}\n"
    text += f"–í—ã–±—Ä–∞–Ω–æ: {selected_count} –∏–∑ {len(accounts)}\n\n"
    
    if selected_count > 1:
        text += "‚ö†Ô∏è –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    
    return ReelsStates.CHOOSE_ACCOUNT

def handle_reels_account_toggle(update, context):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    account_id = int(query.data.replace("reels_toggle_", ""))
    
    if 'selected_reels_accounts' not in context.user_data:
        context.user_data['selected_reels_accounts'] = []
    
    if account_id in context.user_data['selected_reels_accounts']:
        context.user_data['selected_reels_accounts'].remove(account_id)
    else:
        context.user_data['selected_reels_accounts'].append(account_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return show_reels_accounts_list(update, context, "all")

def handle_reels_confirm_selection(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    selected_accounts = context.user_data.get('selected_reels_accounts', [])
    
    if not selected_accounts:
        query.edit_message_text(
            "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reels_back_to_menu")]
            ])
        )
        return ReelsStates.CHOOSE_ACCOUNT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    context.user_data['selected_accounts'] = selected_accounts
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    accounts = [get_instagram_account(acc_id) for acc_id in selected_accounts]
    usernames = [acc.username for acc in accounts if acc]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ
    text = f"üé• –ü—É–±–ª–∏–∫–∞—Ü–∏—è Reels\n\n"
    text += f"üë• –í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
    text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join([f'@{u}' for u in usernames[:3]])}"
    if len(usernames) > 3:
        text += f" –∏ –µ—â—ë {len(usernames) - 3}..."
    text += "\n\n"
    
    if len(selected_accounts) > 1:
        text += "üé® –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
    
    text += "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è Reels (–¥–æ 90 —Å–µ–∫—É–Ω–¥):"
    
    query.edit_message_text(text)
    
    return ReelsStates.MEDIA_UPLOAD

def handle_reels_media_upload(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        media_file = None
        file_extension = '.mp4'
        
        if update.message.video:
            media_file = update.message.video
        elif update.message.document:
            media_file = update.message.document
            if not media_file.mime_type.startswith('video/'):
                update.message.reply_text("‚ùå –î–ª—è Reels –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")
                return ReelsStates.MEDIA_UPLOAD
        
        if not media_file:
            update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è Reels")
            return ReelsStates.MEDIA_UPLOAD
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        file_obj = context.bot.get_file(media_file.file_id)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        import uuid
        filename = f"reels_{uuid.uuid4().hex[:8]}.mp4"
        file_path = os.path.join("media", filename)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        os.makedirs("media", exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_obj.download(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
        context.user_data['media_path'] = file_path
        context.user_data['media_type'] = 'VIDEO'
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–¥–ø–∏—Å–∏
        return show_reels_caption_input(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return ReelsStates.MEDIA_UPLOAD

def show_reels_caption_input(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–¥–ø–∏—Å–∏"""
    selected_accounts = context.user_data.get('selected_accounts', [])
    
    text = f"üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è Reels\n\n"
    text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
    text += f"üé• –¢–∏–ø: VIDEO\n\n"
    
    if len(selected_accounts) > 1:
        text += "üé® –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
    
    text += "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏':"
    
    keyboard = [
        [InlineKeyboardButton("üìù –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏", callback_data="reels_no_caption")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∏–¥–µ–æ", callback_data="reels_back_to_media")]
    ]
    
    update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return ReelsStates.ENTER_CAPTION

def handle_reels_caption_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∏"""
    try:
        caption = update.message.text
        context.user_data['caption'] = caption
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        return show_reels_final_confirmation(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∏: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ReelsStates.ENTER_CAPTION

def handle_reels_caption_actions(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é"""
    query = update.callback_query
    query.answer()
    
    if query.data == "reels_no_caption":
        # –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏
        context.user_data['caption'] = ""
        return show_reels_final_confirmation(update, context)
        
    elif query.data == "reels_back_to_media":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–∏–¥–µ–æ
        query.edit_message_text("üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è Reels (–¥–æ 90 —Å–µ–∫—É–Ω–¥):")
        return ReelsStates.MEDIA_UPLOAD

def show_reels_final_confirmation(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    try:
        selected_accounts = context.user_data.get('selected_accounts', [])
        caption = context.user_data.get('caption', "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        accounts = []
        for account_id in selected_accounts:
            account = get_instagram_account(account_id)
            if account:
                accounts.append(account)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        text = f"**–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels**\n\n"
        text += f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã: {len(accounts)} —à—Ç.\n"
        text += f"üìÑ –¢–∏–ø: Reels\n"
        text += f"üé• –ú–µ–¥–∏–∞: VIDEO\n"
        
        if caption:
            preview = caption[:100] + "..." if len(caption) > 100 else caption
            text += f"‚úèÔ∏è –ü–æ–¥–ø–∏—Å—å: {preview}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏–ª–∏ –Ω–µ—Ç
        is_scheduled = context.user_data.get('is_scheduled_reels', False)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if is_scheduled:
            keyboard = [
                [InlineKeyboardButton("üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="reels_schedule_time")],
                [InlineKeyboardButton("üîô –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å", callback_data="reels_back_to_caption")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="reels_confirm_publish"), 
                 InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="reels_schedule_publish")],
                [InlineKeyboardButton("üîô –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—å", callback_data="reels_back_to_caption")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
            ]
        
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        return ReelsStates.CONFIRM_PUBLISH
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ReelsStates.CONFIRM_PUBLISH

def handle_reels_final_confirmation(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    query = update.callback_query
    query.answer()
    
    if query.data == "reels_confirm_publish":
        # –ü—É–±–ª–∏–∫—É–µ–º —Å–µ–π—á–∞—Å
        return execute_reels_publish(update, context)
        
    elif query.data == "reels_schedule_publish":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['is_scheduled_reels'] = True
        return show_reels_schedule_time(update, context)
        
    elif query.data == "reels_back_to_caption":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–¥–ø–∏—Å–∏
        return show_reels_caption_input(update, context)

def show_reels_schedule_time(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    
    text = "üóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels:\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
    text += "–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 15:30"
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é", callback_data="reels_back_to_confirmation")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    
    query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return ReelsStates.SCHEDULE_TIME

def handle_reels_schedule_time(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        time_str = update.message.text
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        from datetime import datetime
        try:
            scheduled_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M")
        except ValueError:
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"
            )
            return ReelsStates.SCHEDULE_TIME
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if scheduled_time <= datetime.now():
            update.message.reply_text(
                "‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º"
            )
            return ReelsStates.SCHEDULE_TIME
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        context.user_data['scheduled_time'] = scheduled_time
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        return execute_reels_schedule(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ReelsStates.SCHEDULE_TIME

def execute_reels_publish(update, context):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é Reels"""
    query = update.callback_query
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        selected_accounts = context.user_data.get('selected_accounts', [])
        media_path = context.user_data.get('media_path')
        caption = context.user_data.get('caption', "")
        
        if not selected_accounts or not media_path:
            query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        from database.db_manager import create_publish_task
        from database.models import TaskType
        
        tasks_created = 0
        for account_id in selected_accounts:
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                task = create_publish_task(
                    account_id=account_id,
                    task_type=TaskType.REELS,
                    media_path=media_path,
                    caption=caption
                )
                
                if task:
                    tasks_created += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if tasks_created > 0:
            query.edit_message_text(
                f"‚úÖ Reels –∑–∞–ø—É—â–µ–Ω—ã!\n\n"
                f"üì§ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {tasks_created}\n"
                f"‚è≥ –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
            )
        else:
            query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cleanup_reels_data(context)
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return ConversationHandler.END

def execute_reels_schedule(update, context):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Reels"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        selected_accounts = context.user_data.get('selected_accounts', [])
        media_path = context.user_data.get('media_path')
        caption = context.user_data.get('caption', "")
        scheduled_time = context.user_data.get('scheduled_time')
        
        if not selected_accounts or not media_path or not scheduled_time:
            update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return ConversationHandler.END
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        from database.db_manager import create_publish_task
        from database.models import TaskType
        
        tasks_created = 0
        for account_id in selected_accounts:
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                task = create_publish_task(
                    account_id=account_id,
                    task_type=TaskType.REELS,
                    media_path=media_path,
                    caption=caption,
                    scheduled_time=scheduled_time
                )
                
                if task:
                    tasks_created += 1
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if tasks_created > 0:
            time_str = scheduled_time.strftime("%d.%m.%Y %H:%M")
            update.message.reply_text(
                f"‚úÖ Reels –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                f"üìÖ –í—Ä–µ–º—è: {time_str}\n"
                f"üì§ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {tasks_created}\n"
                f"‚è≥ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            )
        else:
            update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cleanup_reels_data(context)
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return ConversationHandler.END

def cleanup_reels_data(context):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Reels"""
    try:
        # –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        media_path = context.user_data.get('media_path')
        if media_path and os.path.exists(media_path):
            try:
                os.remove(media_path)
            except:
                pass
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        keys_to_remove = [
            'selected_accounts', 'selected_reels_accounts', 'media_path',
            'media_type', 'caption', 'scheduled_time', 'is_scheduled_reels'
        ]
        
        for key in keys_to_remove:
            context.user_data.pop(key, None)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
def start_schedule_reels(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Reels"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data['is_scheduled_reels'] = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è Reels
    return start_reels_publish(update, context) 