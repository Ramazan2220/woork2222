"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories
"""

import os
import tempfile
import json
import logging
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import ConversationHandler, CallbackQueryHandler, MessageHandler, Filters

from .common import (
    is_admin, cleanup_user_data, cancel_publish, logger, show_publish_confirmation,
    CHOOSE_ACCOUNT, UPLOAD_MEDIA, ENTER_CAPTION, ENTER_HASHTAGS, CONFIRM_PUBLISH, CHOOSE_SCHEDULE,
    STORY_ADD_FEATURES, STORY_ADD_MENTIONS, STORY_ADD_LINK, STORY_ADD_LOCATION, STORY_ADD_HASHTAGS, STORY_ADD_TEXT
)

from database.db_manager import get_instagram_account, get_instagram_accounts, create_publish_task
from database.models import TaskType, TaskStatus
from utils.task_queue import add_task_to_queue
from telegram_bot.utils.account_selection import AccountSelector

# –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è Stories
story_selector = AccountSelector(
    callback_prefix="story_select",
    title="üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è Stories",
    allow_multiple=True,
    show_status=True,
    show_folders=True,
    back_callback="menu_publish"
)

def start_story_publish(update, context):
    """–ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        if update.message:
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        else:
            update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return ConversationHandler.END
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['publish_type'] = 'story'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    is_scheduled = context.user_data.get('is_scheduled_post', False)
    
    # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã (–¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π), –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞
    if is_scheduled and context.user_data.get('publish_account_ids'):
        account_ids = context.user_data.get('publish_account_ids')
        accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
        usernames = [acc.username for acc in accounts if acc]
        
        if len(account_ids) == 1:
            text = f"üì± –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: @{usernames[0]}\n\n"
        else:
            text = f"üì± –í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
            text += f"–ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join([f'@{u}' for u in usernames[:3]])}"
            if len(usernames) > 3:
                text += f" –∏ –µ—â—ë {len(usernames) - 3}..."
            text += "\n\n"
        
        text += "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏:"
        
        if update.callback_query:
            update.callback_query.edit_message_text(text)
        else:
            update.message.reply_text(text)
        
        return ConversationHandler.END
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def on_accounts_selected(account_ids: list, update_inner, context_inner):
        if account_ids:
            context_inner.user_data['publish_account_ids'] = account_ids
            context_inner.user_data['publish_type'] = 'story'
            context_inner.user_data['publish_to_all_accounts'] = len(account_ids) > 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
            usernames = [acc.username for acc in accounts if acc]
            context_inner.user_data['publish_account_usernames'] = usernames
            
            if len(account_ids) == 1:
                context_inner.user_data['publish_account_id'] = account_ids[0]
                context_inner.user_data['publish_account_username'] = usernames[0]
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞
            if len(account_ids) == 1:
                text = f"üì± –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: @{usernames[0]}\n\n"
            else:
                text = f"üì± –í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
                text += f"–ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join([f'@{u}' for u in usernames[:3]])}"
                if len(usernames) > 3:
                    text += f" –∏ –µ—â—ë {len(usernames) - 3}..."
                text += "\n\n"
            
            text += "üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏:"
            
            update_inner.callback_query.edit_message_text(text)
            return ConversationHandler.END
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    return story_selector.start_selection(update, context, on_accounts_selected)

def handle_story_media_upload(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –¥–ª—è Stories"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–ª—è Stories –∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã
    publish_type = context.user_data.get('publish_type')
    account_ids = context.user_data.get('publish_account_ids', [])
    
    if publish_type != 'story' or not account_ids:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–ª—è Stories –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        logger.info(f"üì± STORY: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º - publish_type={publish_type}, account_ids={len(account_ids)}")
        return None

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    media_file = None
    media_type = None
    file_extension = '.jpg'
    
    if update.message.photo:
        media_file = update.message.photo[-1]
        media_type = 'PHOTO'
        file_extension = '.jpg'
    elif update.message.video:
        media_file = update.message.video
        media_type = 'VIDEO'
        file_extension = '.mp4'
    elif update.message.document:
        media_file = update.message.document
        if media_file.mime_type.startswith('video/'):
            media_type = 'VIDEO'
            file_extension = '.mp4'
        else:
            media_type = 'PHOTO'
            file_extension = '.jpg'
    
    if not media_file:
        update.message.reply_text("üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏.")
        return ConversationHandler.END

    file_id = media_file.file_id

    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞
    media = context.bot.get_file(file_id)

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞
    with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as temp_file:
        media_path = temp_file.name

    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    media.download(media_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –º–µ–¥–∏–∞ –∏ —Ç–∏–ø –º–µ–¥–∏–∞
    context.user_data['publish_media_path'] = media_path
    context.user_data['publish_media_type'] = media_type

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Stories
    context.user_data['story_features'] = {}
    context.user_data['story_mentions'] = []
    context.user_data['story_link'] = ''
    context.user_data['story_location'] = ''
    context.user_data['story_hashtags'] = []
    context.user_data['story_text'] = ''

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è Stories
    return show_story_features_menu(update, context)

def show_story_features_menu(update, context):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è Stories"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    account_ids = context.user_data.get('publish_account_ids', [])
    if len(account_ids) == 1:
        account_username = context.user_data.get('publish_account_username')
        account_info = f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account_username}"
    else:
        account_info = f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã: {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    media_type = context.user_data.get('publish_media_type')
    story_text = context.user_data.get('story_text', '')
    story_mentions = context.user_data.get('story_mentions', [])
    story_link = context.user_data.get('story_link', '')
    story_location = context.user_data.get('story_location', '')
    story_hashtags = context.user_data.get('story_hashtags', [])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="story_add_text")],
        [InlineKeyboardButton("üë• –î–æ–±–∞–≤–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="story_add_mentions")],
        [InlineKeyboardButton("üîó –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="story_add_link")],
        [InlineKeyboardButton("üìç –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="story_add_location")],
        [InlineKeyboardButton("#Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", callback_data="story_add_hashtags")]
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–∏ —ç—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    is_scheduled = context.user_data.get('is_scheduled_post', False)
    
    if is_scheduled:
        keyboard.append([InlineKeyboardButton("üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="schedule_publish")])
    else:
        keyboard.append([
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="story_confirm_publish"),
            InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_publish")
        ])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    text = f"üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:\n\n"
    text += f"{account_info}\n"
    text += f"üì± –ú–µ–¥–∏–∞: {media_type}\n"
    text += f"üìù –¢–µ–∫—Å—Ç: {story_text or '(–Ω–µ –∑–∞–¥–∞–Ω)'}\n"
    text += f"üë• –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(story_mentions)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    text += f"üîó –°—Å—ã–ª–∫–∞: {story_link or '(–Ω–µ –∑–∞–¥–∞–Ω–∞)'}\n"
    text += f"üìç –õ–æ–∫–∞—Ü–∏—è: {story_location or '(–Ω–µ –∑–∞–¥–∞–Ω–∞)'}\n"
    text += f"#Ô∏è‚É£ –•–µ—à—Ç–µ–≥–∏: {len(story_hashtags)} —à—Ç—É–∫\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    if hasattr(update, 'callback_query'):
        update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    else:
        update.message.reply_text(text, reply_markup=reply_markup)
    
    return STORY_ADD_FEATURES

def story_add_text_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏"""
    query = update.callback_query
    query.answer()
    
    current_text = context.user_data.get('story_text', '')
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_story_features")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏:"
    if current_text:
        text += f"\n\n–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n{current_text}"
    
    query.edit_message_text(text, reply_markup=reply_markup)
    return STORY_ADD_TEXT

def handle_story_text_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
    story_text = update.message.text
    context.user_data['story_text'] = story_text
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="save_story_text")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="story_add_text")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_story_features")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n\n{story_text}\n\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )
    return STORY_ADD_TEXT

def story_add_mentions_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    query.answer()
    
    current_mentions = context.user_data.get('story_mentions', [])
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_story_features")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üë• –í–≤–µ–¥–∏—Ç–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ @):\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä: username1, username2, username3"
    
    if current_mentions:
        text += f"\n\n–¢–µ–∫—É—â–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{', '.join(current_mentions)}"
    
    query.edit_message_text(text, reply_markup=reply_markup)
    return STORY_ADD_MENTIONS

def handle_story_mentions_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    mentions_text = update.message.text
    mentions = [mention.strip() for mention in mentions_text.split(',') if mention.strip()]
    context.user_data['story_mentions'] = mentions
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="save_story_mentions")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="story_add_mentions")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_story_features")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f"‚úÖ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n{', '.join(mentions)}\n\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )
    return STORY_ADD_MENTIONS

def story_add_link_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    query.answer()
    
    current_link = context.user_data.get('story_link', '')
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_story_features")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏:\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä: https://example.com"
    
    if current_link:
        text += f"\n\n–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞:\n{current_link}"
    
    query.edit_message_text(text, reply_markup=reply_markup)
    return STORY_ADD_LINK

def handle_story_link_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏"""
    link = update.message.text
    context.user_data['story_link'] = link
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="save_story_link")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="story_add_link")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_story_features")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f"‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n\n{link}\n\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )
    return STORY_ADD_LINK

def story_add_location_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()
    
    current_location = context.user_data.get('story_location', '')
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_story_features")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏:\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è"
    
    if current_location:
        text += f"\n\n–¢–µ–∫—É—â–∞—è –ª–æ–∫–∞—Ü–∏—è:\n{current_location}"
    
    query.edit_message_text(text, reply_markup=reply_markup)
    return STORY_ADD_LOCATION

def handle_story_location_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    location = update.message.text
    context.user_data['story_location'] = location
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="save_story_location")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="story_add_location")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_story_features")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f"‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n\n{location}\n\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )
    return STORY_ADD_LOCATION

def story_add_hashtags_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤"""
    query = update.callback_query
    query.answer()
    
    current_hashtags = context.user_data.get('story_hashtags', [])
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_story_features")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "#Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ #):\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä: travel, moscow, russia"
    
    if current_hashtags:
        text += f"\n\n–¢–µ–∫—É—â–∏–µ —Ö–µ—à—Ç–µ–≥–∏:\n{', '.join(current_hashtags)}"
    
    query.edit_message_text(text, reply_markup=reply_markup)
    return STORY_ADD_HASHTAGS

def handle_story_hashtags_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    hashtags_text = update.message.text
    hashtags = [hashtag.strip() for hashtag in hashtags_text.split(',') if hashtag.strip()]
    context.user_data['story_hashtags'] = hashtags
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", callback_data="save_story_hashtags")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", callback_data="story_add_hashtags")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_story_features")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        f"‚úÖ –•–µ—à—Ç–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n{', '.join(hashtags)}\n\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )
    return STORY_ADD_HASHTAGS

def back_to_story_features(update, context):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–π Stories"""
    return show_story_features_menu(update, context)

def story_confirm_publish_handler(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    query = update.callback_query
    query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    media_type = context.user_data.get('publish_media_type')
    story_text = context.user_data.get('story_text', '')
    story_mentions = context.user_data.get('story_mentions', [])
    story_link = context.user_data.get('story_link', '')
    story_location = context.user_data.get('story_location', '')
    story_hashtags = context.user_data.get('story_hashtags', [])
    
    account_ids = context.user_data.get('publish_account_ids', [])
    if len(account_ids) == 1:
        account_username = context.user_data.get('publish_account_username')
        account_info = f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account_username}"
    else:
        account_info = f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã: {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏
    caption_parts = []
    if story_text:
        caption_parts.append(story_text)
    if story_hashtags:
        hashtag_text = ' '.join([f'#{tag}' for tag in story_hashtags])
        caption_parts.append(hashtag_text)
    
    full_caption = '\n\n'.join(caption_parts)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="execute_story_publish")],
        [InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="schedule_publish")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_story_features")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    text = f"üì± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:\n\n"
    text += f"{account_info}\n"
    text += f"üì± –ú–µ–¥–∏–∞: {media_type}\n"
    text += f"üìù –¢–µ–∫—Å—Ç: {story_text or '(–Ω–µ –∑–∞–¥–∞–Ω)'}\n"
    text += f"üë• –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: {', '.join(story_mentions) if story_mentions else '(–Ω–µ –∑–∞–¥–∞–Ω—ã)'}\n"
    text += f"üîó –°—Å—ã–ª–∫–∞: {story_link or '(–Ω–µ –∑–∞–¥–∞–Ω–∞)'}\n"
    text += f"üìç –õ–æ–∫–∞—Ü–∏—è: {story_location or '(–Ω–µ –∑–∞–¥–∞–Ω–∞)'}\n"
    text += f"#Ô∏è‚É£ –•–µ—à—Ç–µ–≥–∏: {', '.join(story_hashtags) if story_hashtags else '(–Ω–µ –∑–∞–¥–∞–Ω—ã)'}\n\n"
    text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é:"
    
    query.edit_message_text(text, reply_markup=reply_markup)
    return CONFIRM_PUBLISH

def execute_story_publish(update, context):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        media_path = context.user_data.get('publish_media_path')
        media_type = context.user_data.get('publish_media_type')
        story_text = context.user_data.get('story_text', '')
        story_mentions = context.user_data.get('story_mentions', [])
        story_link = context.user_data.get('story_link', '')
        story_location = context.user_data.get('story_location', '')
        story_hashtags = context.user_data.get('story_hashtags', [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        caption_parts = []
        if story_text:
            caption_parts.append(story_text)
        if story_hashtags:
            hashtag_text = ' '.join([f'#{tag}' for tag in story_hashtags])
            caption_parts.append(hashtag_text)
        
        full_caption = '\n\n'.join(caption_parts)
        
        account_ids = context.user_data.get('publish_account_ids', [])
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        task_ids = []
        for account_id in account_ids:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏
            task_data = {
                'media_path': media_path,
                'media_type': media_type,
                'caption': full_caption,
                'mentions': story_mentions,
                'link': story_link,
                'location': story_location,
                'hashtags': story_hashtags,
                'account_id': account_id
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            task_id = create_publish_task(
                user_id=user_id,
                task_type=TaskType.STORY,
                account_id=account_id,
                media_path=media_path,
                caption=full_caption,
                status=TaskStatus.PENDING
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
            add_task_to_queue(task_id, task_data)
            task_ids.append(task_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if len(account_ids) == 1:
            account_username = context.user_data.get('publish_account_username')
            message = f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n\n"
            message += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account_username}\n"
            message += f"üì± –ú–µ–¥–∏–∞: {media_type}\n"
            message += f"üÜî ID –∑–∞–¥–∞—á–∏: {task_ids[0]}"
        else:
            message = f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n\n"
            message += f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã: {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
            message += f"üì± –ú–µ–¥–∏–∞: {media_type}\n"
            message += f"üÜî ID –∑–∞–¥–∞—á: {', '.join(map(str, task_ids))}"
        
        query.edit_message_text(message)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cleanup_user_data(context)
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
        return ConversationHandler.END

def schedule_publish_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    from .scheduler import choose_schedule
    return choose_schedule(update, context)

def get_story_conversation():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler –¥–ª—è Stories"""
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_story_publish, pattern='^publish_story$'),
            CallbackQueryHandler(start_story_publish, pattern='^schedule_story$'),
            # MessageHandler —É–±—Ä–∞–Ω –∏–∑ entry_points - –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤ states
        ],
        states={
            UPLOAD_MEDIA: [
                MessageHandler(Filters.photo | Filters.video | Filters.document, handle_story_media_upload)
            ],
            STORY_ADD_FEATURES: [
                CallbackQueryHandler(story_add_text_handler, pattern='^story_add_text$'),
                CallbackQueryHandler(story_add_mentions_handler, pattern='^story_add_mentions$'),
                CallbackQueryHandler(story_add_link_handler, pattern='^story_add_link$'),
                CallbackQueryHandler(story_add_location_handler, pattern='^story_add_location$'),
                CallbackQueryHandler(story_add_hashtags_handler, pattern='^story_add_hashtags$'),
                CallbackQueryHandler(story_confirm_publish_handler, pattern='^story_confirm_publish$'),
                CallbackQueryHandler(schedule_publish_callback, pattern='^schedule_publish$')
            ],
            STORY_ADD_TEXT: [
                MessageHandler(Filters.text & ~Filters.command, handle_story_text_input),
                CallbackQueryHandler(back_to_story_features, pattern='^save_story_text$'),
                CallbackQueryHandler(story_add_text_handler, pattern='^story_add_text$'),
                CallbackQueryHandler(back_to_story_features, pattern='^back_to_story_features$')
            ],
            STORY_ADD_MENTIONS: [
                MessageHandler(Filters.text & ~Filters.command, handle_story_mentions_input),
                CallbackQueryHandler(back_to_story_features, pattern='^save_story_mentions$'),
                CallbackQueryHandler(story_add_mentions_handler, pattern='^story_add_mentions$'),
                CallbackQueryHandler(back_to_story_features, pattern='^back_to_story_features$')
            ],
            STORY_ADD_LINK: [
                MessageHandler(Filters.text & ~Filters.command, handle_story_link_input),
                CallbackQueryHandler(back_to_story_features, pattern='^save_story_link$'),
                CallbackQueryHandler(story_add_link_handler, pattern='^story_add_link$'),
                CallbackQueryHandler(back_to_story_features, pattern='^back_to_story_features$')
            ],
            STORY_ADD_LOCATION: [
                MessageHandler(Filters.text & ~Filters.command, handle_story_location_input),
                CallbackQueryHandler(back_to_story_features, pattern='^save_story_location$'),
                CallbackQueryHandler(story_add_location_handler, pattern='^story_add_location$'),
                CallbackQueryHandler(back_to_story_features, pattern='^back_to_story_features$')
            ],
            STORY_ADD_HASHTAGS: [
                MessageHandler(Filters.text & ~Filters.command, handle_story_hashtags_input),
                CallbackQueryHandler(back_to_story_features, pattern='^save_story_hashtags$'),
                CallbackQueryHandler(story_add_hashtags_handler, pattern='^story_add_hashtags$'),
                CallbackQueryHandler(back_to_story_features, pattern='^back_to_story_features$')
            ],
            CONFIRM_PUBLISH: [
                CallbackQueryHandler(execute_story_publish, pattern='^execute_story_publish$'),
                CallbackQueryHandler(schedule_publish_callback, pattern='^schedule_publish$'),
                CallbackQueryHandler(back_to_story_features, pattern='^back_to_story_features$')
            ]
        },
        fallbacks=[
            CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$'),
            CommandHandler('cancel', cancel_publish)
        ]
    )

def get_story_selector():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è Stories"""
    return story_selector

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
def story_schedule_publish_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–π"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return ConversationHandler.END
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['is_scheduled_post'] = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    if context.user_data.get('publish_account_ids'):
        # –ê–∫–∫–∞—É–Ω—Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏
        from .scheduler import choose_schedule
        return choose_schedule(update, context)
    else:
        # –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä
        return start_story_publish(update, context) 