"""
–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–æ–¥—É–ª–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
"""

import os
import tempfile
import json
import logging
import threading
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import ConversationHandler

from database.db_manager import get_instagram_account, get_instagram_accounts, create_publish_task
from database.models import TaskType, TaskStatus
from utils.task_queue import add_task_to_queue, get_task_status
from telegram_bot.utils.account_selection import create_account_selector

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è uuid
import uuid

logger = logging.getLogger(__name__)

# –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
CHOOSE_ACCOUNT = 'choose_account'
UPLOAD_MEDIA = 'upload_media'
ENTER_CAPTION = 'enter_caption'
ENTER_HASHTAGS = 'enter_hashtags'
CONFIRM_PUBLISH = 'confirm_publish'
CHOOSE_SCHEDULE = 'choose_schedule'

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    from telegram_bot.bot import is_admin as bot_is_admin
    return bot_is_admin(user_id)

def cleanup_user_data(context):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    keys_to_remove = [
        'publish_type', 'publish_media_type', 'publish_account_ids', 
        'publish_account_usernames', 'publish_account_id', 'publish_account_username',
        'publish_media_files', 'publish_caption', 'publish_hashtags',
        'publish_to_all_accounts', 'is_scheduled_post', 'schedule_publish_type',
        'waiting_for_schedule_time', 'story_text', 'story_mentions', 'story_link',
        'story_text_color', 'story_text_position', 'reels_caption', 'reels_hashtags',
        'reels_options', 'selected_post_accounts'
    ]
    
    for key in keys_to_remove:
        context.user_data.pop(key, None)

def cancel_publish(update, context):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏ –æ—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    query = update.callback_query
    if query:
        query.answer()
        query.edit_message_text(
            "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start_menu")
            ]])
        )
    else:
        update.message.reply_text("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    cleanup_user_data(context)
    return ConversationHandler.END

def show_scheduled_posts(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()
    
    from database.db_manager import get_session
    from database.models import PublishTask, TaskStatus
    
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        scheduled_tasks = session.query(PublishTask).filter(
            PublishTask.status == TaskStatus.SCHEDULED
        ).order_by(PublishTask.scheduled_time).limit(10).all()
        
        if not scheduled_tasks:
            query.edit_message_text(
                "üìÖ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
                ])
            )
            return
        
        message = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
        
        for task in scheduled_tasks:
            account = get_instagram_account(task.account_id)
            
            scheduled_time = task.scheduled_time.strftime("%d.%m.%Y %H:%M")
            task_type = task.task_type.value if hasattr(task.task_type, 'value') else str(task.task_type)
            
            message += f"‚Ä¢ *{task_type.upper()}* –≤ @{account.username if account else 'Unknown'}\n"
            message += f"  üìÖ {scheduled_time}\n"
            message += f"  üìù {task.caption[:50]}{'...' if len(task.caption or '') > 50 else ''}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="scheduled_posts")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
        ]
        
        query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
        query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
            ])
        )
    finally:
        session.close()

def show_publication_history(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    query = update.callback_query
    query.answer()
    
    from database.db_manager import get_session
    from database.models import PublishTask, TaskStatus
    
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        completed_tasks = session.query(PublishTask).filter(
            PublishTask.status.in_([TaskStatus.COMPLETED, TaskStatus.FAILED])
        ).order_by(PublishTask.completed_time.desc()).limit(10).all()
        
        if not completed_tasks:
            query.edit_message_text(
                "üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
                ])
            )
            return
        
        message = "üìä *–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π:*\n\n"
        
        for task in completed_tasks:
            account = get_instagram_account(task.account_id)
            
            completed_time = task.completed_time.strftime("%d.%m.%Y %H:%M") if task.completed_time else "–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            task_type = task.task_type.value if hasattr(task.task_type, 'value') else str(task.task_type)
            status_emoji = "‚úÖ" if task.status == TaskStatus.COMPLETED else "‚ùå"
            
            message += f"{status_emoji} *{task_type.upper()}* –≤ @{account.username if account else 'Unknown'}\n"
            message += f"  üìÖ {completed_time}\n"
            
            if task.status == TaskStatus.FAILED and task.error_message:
                message += f"  ‚ùå {task.error_message[:50]}{'...' if len(task.error_message) > 50 else ''}\n"
            elif task.media_id:
                message += f"  üîó ID: {task.media_id}\n"
            
            message += "\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="publication_history")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
        ]
        
        query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
        query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
            ])
        )
    finally:
        session.close()

def check_task_status_handler(update, context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
    # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    query.edit_message_text(
        "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á...\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
        ])
    )


def get_accounts_by_folder(folder_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
    from database.db_manager import get_instagram_accounts
    accounts = get_instagram_accounts()
    return [acc for acc in accounts if acc.is_active and acc.folder == folder_name]


def format_scheduled_time(scheduled_time):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if scheduled_time:
        return scheduled_time.strftime("%d.%m.%Y %H:%M")
    return "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"


def show_publish_confirmation(update, context, is_callback=False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    publish_type = context.user_data.get('publish_type', 'post')
    account_ids = context.user_data.get('publish_account_ids', [])
    caption = context.user_data.get('publish_caption', '')
    hashtags = context.user_data.get('publish_hashtags', [])
    is_scheduled = context.user_data.get('is_scheduled_post', False)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    if len(account_ids) == 1:
        account = get_instagram_account(account_ids[0])
        account_info = f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{account.username}"
    else:
        account_info = f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã: {len(account_ids)} —à—Ç."
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    if is_scheduled:
        keyboard = [
            [InlineKeyboardButton("üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è", callback_data='schedule_publish')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')]
        ]
    else:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data='confirm_publish_now'),
                InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='schedule_publish')
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ
    type_names = {
        'post': '–ü–æ—Å—Ç',
        'story': '–ò—Å—Ç–æ—Ä–∏—è',
        'reels': 'Reels',
        'igtv': 'IGTV'
    }
    
    message = f"*–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏*\n\n"
    message += f"{account_info}\n"
    message += f"üìÑ –¢–∏–ø: {type_names.get(publish_type, '–ü—É–±–ª–∏–∫–∞—Ü–∏—è')}\n"
    
    if caption:
        message += f"‚úèÔ∏è –ü–æ–¥–ø–∏—Å—å: {caption[:50]}{'...' if len(caption) > 50 else ''}\n"
    
    if hashtags:
        message += f"#Ô∏è‚É£ –•–µ—à—Ç–µ–≥–∏: {' '.join(hashtags[:5])}{'...' if len(hashtags) > 5 else ''}\n"
    
    message += "\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    
    if is_callback:
        update.callback_query.edit_message_text(
            message, 
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        update.message.reply_text(
            message,
            reply_markup=reply_markup, 
            parse_mode=ParseMode.MARKDOWN
    ) 