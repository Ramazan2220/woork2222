"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞
"""
import os
import logging
from datetime import datetime, timedelta
import tempfile
from typing import List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import CallbackContext, ConversationHandler

from database.db_manager import get_instagram_accounts, get_instagram_account
from telegram_bot.utils.account_selection import create_account_selector

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
analytics_selector = create_account_selector(
    callback_prefix="analytics_pub",
    title="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
    allow_multiple=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    show_status=True,
    show_folders=True,
    back_callback="analytics_menu"
)

def get_analytics_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    from telegram.ext import CallbackQueryHandler
    
    return [
        analytics_selector.get_conversation_handler(),  # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º callback_handler
    ]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
ANALYTICS_ACCOUNT_SELECT = 1
ANALYTICS_ACTION_SELECT = 2

def start_publications_analytics(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    query = update.callback_query
    query.answer()
    
    # Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def on_account_selected(account_ids: List[int], update_inner: Update, context_inner: CallbackContext):
        if account_ids:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            context_inner.user_data['analytics_account_ids'] = account_ids
            context_inner.user_data['analytics_multiple_accounts'] = len(account_ids) > 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
            usernames = [acc.username for acc in accounts if acc]
            context_inner.user_data['analytics_account_usernames'] = usernames
            
            if len(account_ids) == 1:
                # –û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                context_inner.user_data['analytics_account_id'] = account_ids[0]
                context_inner.user_data['analytics_account_username'] = usernames[0]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            show_analytics_actions_menu(update_inner, context_inner)
    
    return analytics_selector.start_selection(update, context, on_account_selected)

def show_analytics_actions_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query if hasattr(update, 'callback_query') and update.callback_query else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–æ –ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    multiple_accounts = context.user_data.get('analytics_multiple_accounts', False)
    account_ids = context.user_data.get('analytics_account_ids', [])
    usernames = context.user_data.get('analytics_account_usernames', [])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if multiple_accounts:
        text = f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        text += f"–ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join([f'@{u}' for u in usernames[:3]])}"
        if len(usernames) > 3:
            text += f" –∏ –µ—â—ë {len(usernames) - 3}..."
        text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:"
        
        # –ú–µ–Ω—é –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics_comparison")],
            [InlineKeyboardButton("üìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="analytics_summary")],
            [InlineKeyboardButton("üèÜ –õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="analytics_top_all")],
            [InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º", callback_data="analytics_detailed_all")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="publications_stats")]
        ]
    else:
        # –û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é
        account_username = context.user_data.get('analytics_account_username', 'Unknown')
        text = f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è @{account_username}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:"
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å—Ç–æ–≤", callback_data="analytics_recent_posts")],
            [InlineKeyboardButton("‚ù§Ô∏è –¢–æ–ø –ø–æ –ª–∞–π–∫–∞–º", callback_data="analytics_top_likes")],
            [InlineKeyboardButton("üí¨ –¢–æ–ø –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º", callback_data="analytics_top_comments")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="analytics_detailed")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–π", callback_data="analytics_stories")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="publications_stats")]
        ]
    
    if query:
        query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ entities —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        )
    else:
        update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ entities —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        )

def handle_analytics_action(update: Update, context: CallbackContext, action: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç), —Ç–∞–∫ –∏ –Ω–æ–≤—ã–π (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä)
    account_id = context.user_data.get('analytics_account_id')
    account_username = context.user_data.get('analytics_account_username', 'Unknown')
    
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
    if not account_id:
        account_ids = context.user_data.get('analytics_account_ids', [])
        if account_ids:
            account_id = account_ids[0]
            usernames = context.user_data.get('analytics_account_usernames', [])
            if usernames:
                account_username = usernames[0]
    
    if not account_id:
        query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    query.edit_message_text(
        f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è @{account_username}...\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
        parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ entities —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    )
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        if action == "analytics_recent_posts":
            result_text = analyze_recent_posts(account_id, account_username)
            filename = f"recent_posts_{account_username}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
        elif action == "analytics_top_likes":
            result_text = analyze_top_posts_by_likes(account_id, account_username)
            filename = f"top_likes_{account_username}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
        elif action == "analytics_top_comments":
            result_text = analyze_top_posts_by_comments(account_id, account_username)
            filename = f"top_comments_{account_username}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
        elif action == "analytics_detailed":
            result_text = analyze_detailed_statistics(account_id, account_username)
            filename = f"detailed_analysis_{account_username}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
        elif action == "analytics_stories":
            result_text = analyze_stories_statistics(account_id, account_username)
            filename = f"stories_stats_{account_username}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
        else:
            query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            f.write(result_text)
            temp_file_path = f.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(temp_file_path, 'rb') as f:
            query.message.reply_document(
                document=f,
                filename=filename,
                caption=f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è @{account_username}",
                parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ entities —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        show_analytics_actions_menu(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è @{account_username}:\n"
            f"{str(e)}\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º\n"
            f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="publications_stats")]
            ]),
            parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ entities —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        )

def handle_multiple_analytics_action(update: Update, context: CallbackContext, action: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    query = update.callback_query
    query.answer()
    
    account_ids = context.user_data.get('analytics_account_ids', [])
    usernames = context.user_data.get('analytics_account_usernames', [])
    
    if not account_ids:
        query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    query.edit_message_text(
        f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
        parse_mode=None
    )
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        if action == "analytics_comparison":
            result_text = analyze_accounts_comparison(account_ids, usernames)
            filename = f"comparison_{len(account_ids)}_accounts_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
        elif action == "analytics_summary":
            result_text = analyze_accounts_summary(account_ids, usernames)
            filename = f"summary_{len(account_ids)}_accounts_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
        elif action == "analytics_top_all":
            result_text = analyze_top_posts_all_accounts(account_ids, usernames)
            filename = f"top_posts_all_{len(account_ids)}_accounts_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
        elif action == "analytics_detailed_all":
            result_text = analyze_detailed_all_accounts(account_ids, usernames)
            filename = f"detailed_all_{len(account_ids)}_accounts_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            
        else:
            query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            f.write(result_text)
            temp_file_path = f.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(temp_file_path, 'rb') as f:
            query.message.reply_document(
                document=f,
                filename=filename,
                caption=f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                parse_mode=None
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
        show_analytics_actions_menu(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n"
            f"{str(e)}\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º\n"
            f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="publications_stats")]
            ]),
            parse_mode=None
        )

def get_authorized_client():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        from database.db_manager import get_instagram_accounts
        from instagram.client import get_instagram_client
        import os
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = get_instagram_accounts()
        active_accounts = [acc for acc in accounts if acc.is_active]
        
        if not active_accounts:
            return None, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —Ä–∞–±–æ—á–µ–π —Å–µ—Å—Å–∏–µ–π
        for account in active_accounts:
            try:
                session_path = f"data/accounts/{account.id}/session.json"
                if os.path.exists(session_path):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_instagram_client —Å skip_recovery –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    client = get_instagram_client(account.id, skip_recovery=True)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
                    if client:
                        try:
                            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
                            client.account_info()
                            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é –∞–∫–∫–∞—É–Ω—Ç {account.username} –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
                            return client, None
                        except Exception as test_error:
                            logger.warning(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è {account.username} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {test_error}")
                            continue
                        
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account.username}: {e}")
                continue
        
        return None, "‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
        
    except Exception as e:
        return None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}"

def analyze_recent_posts(account_id: int, username: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client, error = get_authorized_client()
        if not client:
            return f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è @{username}\n\n{error}"
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
            user_info = client.user_info_by_username(username)
            user_id = user_info.pk
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å—Ç–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
            medias = client.user_medias(user_id, amount=10)
            
            if not medias:
                return f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è @{username}\n\n‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"üìä –ü–û–°–õ–ï–î–ù–ò–ï {len(medias)} –ü–û–°–¢–û–í - @{username}\n"
            report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            report += "=" * 50 + "\n\n"
            
            total_likes = 0
            total_comments = 0
            total_views = 0
            
            for i, media in enumerate(medias, 1):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–≥–∏–Ω–∞
                report += f"üìù –ü–û–°–¢ #{i}\n"
                report += f"üîó URL: https://www.instagram.com/p/{media.code}/\n"
                report += f"üìÖ –î–∞—Ç–∞: {media.taken_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
                media_type_names = {1: '–§–æ—Ç–æ', 2: '–í–∏–¥–µ–æ', 8: '–ö–∞—Ä—É—Å–µ–ª—å'}
                media_type_name = media_type_names.get(media.media_type, f'–¢–∏–ø {media.media_type}')
                report += f"üìù –¢–∏–ø: {media_type_name}\n"
                
                if media.caption_text:
                    caption_preview = media.caption_text[:100] + "..." if len(media.caption_text) > 100 else media.caption_text
                    report += f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {caption_preview}\n"
                
                report += f"‚ù§Ô∏è –õ–∞–π–∫–∏: {media.like_count:,}\n"
                report += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {media.comment_count:,}\n"
                
                if hasattr(media, 'view_count') and media.view_count > 0:
                    report += f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {media.view_count:,}\n"
                    total_views += media.view_count
                
                if hasattr(media, 'resources') and media.resources:
                    report += f"üé† –°–ª–∞–π–¥–æ–≤ –≤ –∫–∞—Ä—É—Å–µ–ª–∏: {len(media.resources)}\n"
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_likes += media.like_count
                total_comments += media.comment_count
                
                report += "-" * 30 + "\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            report += f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
            report += f"‚ù§Ô∏è –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {total_likes:,}\n"
            report += f"üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments:,}\n"
            if total_views > 0:
                report += f"üëÅÔ∏è –í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {total_views:,}\n"
            
            avg_likes = total_likes // len(medias) if medias else 0
            avg_comments = total_comments // len(medias) if medias else 0
            
            report += f"‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {avg_likes:,}\n"
            report += f"üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {avg_comments:,}\n"
            
            # –í—ã—á–∏—Å–ª—è–µ–º engagement rate
            if user_info.follower_count > 0:
                engagement_rate = ((total_likes + total_comments) / len(medias)) / user_info.follower_count * 100
                report += f"üìä –°—Ä–µ–¥–Ω–∏–π ER: {engagement_rate:.2f}%\n"
            
            return report
            
        except Exception as api_error:
            return f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ @{username}: {str(api_error)}\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π\n‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Instagram\n‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è {username}: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è @{username}: {str(e)}"

def analyze_top_posts_by_likes(account_id: int, username: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ø –ø–æ—Å—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client, error = get_authorized_client()
        if not client:
            return f"‚ù§Ô∏è –¢–æ–ø –ø–æ—Å—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º –¥–ª—è @{username}\n\n{error}"
        
        try:
            user_info = client.user_info_by_username(username)
            user_id = user_info.pk
            
            # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            medias = client.user_medias(user_id, amount=30)
            
            if not medias:
                return f"üìä –¢–æ–ø –ø–æ—Å—Ç–æ–≤ –ø–æ –ª–∞–π–∫–∞–º –¥–ª—è @{username}\n\n‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª–∞–π–∫–∞–º
            medias_sorted = sorted(medias, key=lambda x: x.like_count, reverse=True)[:10]
            
            report = f"‚ù§Ô∏è –¢–û–ü-{len(medias_sorted)} –ü–û–°–¢–û–í –ü–û –õ–ê–ô–ö–ê–ú - @{username}\n"
            report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(medias)} –ø–æ—Å—Ç–æ–≤\n"
            report += "=" * 50 + "\n\n"
            
            for i, media in enumerate(medias_sorted, 1):
                report += f"üèÜ –ú–ï–°–¢–û #{i}\n"
                report += f"üîó URL: https://www.instagram.com/p/{media.code}/\n"
                report += f"üìÖ –î–∞—Ç–∞: {media.taken_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                report += f"‚ù§Ô∏è –õ–∞–π–∫–∏: {media.like_count:,}\n"
                report += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {media.comment_count:,}\n"
                
                if media.caption_text:
                    caption_preview = media.caption_text[:150] + "..." if len(media.caption_text) > 150 else media.caption_text
                    report += f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {caption_preview}\n"
                
                report += "-" * 30 + "\n"
            
            return report
            
        except Exception as api_error:
            return f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ @{username}: {str(api_error)}"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–ø –ø–æ—Å—Ç–æ–≤ –¥–ª—è @{username}: {str(e)}"

def analyze_top_posts_by_comments(account_id: int, username: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ø –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client, error = get_authorized_client()
        if not client:
            return f"üí¨ –¢–æ–ø –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –¥–ª—è @{username}\n\n{error}"
        
        try:
            user_info = client.user_info_by_username(username)
            user_id = user_info.pk
            
            medias = client.user_medias(user_id, amount=30)
            
            if not medias:
                return f"üìä –¢–æ–ø –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º –¥–ª—è @{username}\n\n‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º
            medias_sorted = sorted(medias, key=lambda x: x.comment_count, reverse=True)[:10]
            
            report = f"üí¨ –¢–û–ü-{len(medias_sorted)} –ü–û–°–¢–û–í –ü–û –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–ú - @{username}\n"
            report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(medias)} –ø–æ—Å—Ç–æ–≤\n"
            report += "=" * 50 + "\n\n"
            
            for i, media in enumerate(medias_sorted, 1):
                report += f"üèÜ –ú–ï–°–¢–û #{i}\n"
                report += f"üîó URL: https://www.instagram.com/p/{media.code}/\n"
                report += f"üìÖ –î–∞—Ç–∞: {media.taken_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                report += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {media.comment_count:,}\n"
                report += f"‚ù§Ô∏è –õ–∞–π–∫–∏: {media.like_count:,}\n"
                
                if media.caption_text:
                    caption_preview = media.caption_text[:150] + "..." if len(media.caption_text) > 150 else media.caption_text
                    report += f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {caption_preview}\n"
                
                report += "-" * 30 + "\n"
            
            return report
            
        except Exception as api_error:
            return f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ @{username}: {str(api_error)}"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–ø –ø–æ—Å—Ç–æ–≤ –¥–ª—è @{username}: {str(e)}"

def analyze_detailed_statistics(account_id: int, username: str) -> str:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client, error = get_authorized_client()
        if not client:
            return f"üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è @{username}\n\n{error}"
        
        try:
            user_info = client.user_info_by_username(username)
            user_id = user_info.pk
            
            # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            medias = client.user_medias(user_id, amount=50)
            
            if not medias:
                return f"üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è @{username}\n\n‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
            report = f"üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê - @{username}\n"
            report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(medias)}\n"
            report += "=" * 50 + "\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
            report += f"üë§ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–§–ò–õ–ï:\n"
            report += f"üìõ –ò–º—è: {user_info.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            report += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_info.follower_count:,}\n"
            report += f"üë§ –ü–æ–¥–ø–∏—Å–∫–∏: {user_info.following_count:,}\n"
            report += f"üìù –ü–æ—Å—Ç–æ–≤: {user_info.media_count:,}\n\n"
            
            # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            # –í instagrapi: 1 = PHOTO, 2 = VIDEO, 8 = ALBUM/CAROUSEL
            photos = sum(1 for m in medias if m.media_type == 1)
            videos = sum(1 for m in medias if m.media_type == 2) 
            carousels = sum(1 for m in medias if m.media_type == 8)
            
            report += f"üìä –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ù–¢–ê:\n"
            report += f"üì∑ –§–æ—Ç–æ: {photos} ({photos/len(medias)*100:.1f}%)\n"
            report += f"üé• –í–∏–¥–µ–æ: {videos} ({videos/len(medias)*100:.1f}%)\n"
            report += f"üé† –ö–∞—Ä—É—Å–µ–ª–∏: {carousels} ({carousels/len(medias)*100:.1f}%)\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
            total_likes = sum(m.like_count for m in medias)
            total_comments = sum(m.comment_count for m in medias)
            
            avg_likes = total_likes // len(medias)
            avg_comments = total_comments // len(medias)
            
            # –õ—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –ø–æ—Å—Ç
            best_post = max(medias, key=lambda x: x.like_count + x.comment_count * 5)
            worst_post = min(medias, key=lambda x: x.like_count + x.comment_count * 5)
            
            report += f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–û–í–õ–ï–ß–ï–ù–ù–û–°–¢–ò:\n"
            report += f"‚ù§Ô∏è –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {total_likes:,}\n"
            report += f"üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments:,}\n"
            report += f"‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {avg_likes:,}\n"
            report += f"üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {avg_comments:,}\n"
            
            if user_info.follower_count > 0:
                engagement_rate = ((total_likes + total_comments) / len(medias)) / user_info.follower_count * 100
                report += f"üìä –°—Ä–µ–¥–Ω–∏–π ER: {engagement_rate:.2f}%\n"
            
            report += f"\nüèÜ –õ–£–ß–®–ò–ô –ü–û–°–¢: {best_post.like_count:,} –ª–∞–π–∫–æ–≤, {best_post.comment_count:,} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
            report += f"üîó URL: https://www.instagram.com/p/{best_post.code}/\n"
            
            report += f"\nüìâ –•–£–î–®–ò–ô –ü–û–°–¢: {worst_post.like_count:,} –ª–∞–π–∫–æ–≤, {worst_post.comment_count:,} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
            report += f"üîó URL: https://www.instagram.com/p/{worst_post.code}/\n"
            
            return report
            
        except Exception as api_error:
            return f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ @{username}: {str(api_error)}"
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ –¥–ª—è @{username}: {str(e)}"

def analyze_stories_statistics(account_id: int, username: str) -> str:
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        client, error = get_authorized_client()
        
        report = f"üì± –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–°–¢–û–†–ò–ô - @{username}\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += "=" * 50 + "\n\n"
        
        if not client:
            report += f"{error}\n"
            return report
        
        try:
            user_info = client.user_info_by_username(username)
            user_id = user_info.pk
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω)
            stories = client.user_stories(user_id)
            
            if not stories:
                report += "‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
                report += "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                report += "‚Ä¢ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)\n"
                report += "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç\n" 
                report += "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
            else:
                report += f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π: {len(stories)}\n\n"
                
                for i, story in enumerate(stories, 1):
                    report += f"üì± –ò–°–¢–û–†–ò–Ø #{i}\n"
                    report += f"üìÖ –î–∞—Ç–∞: {story.taken_at.strftime('%d.%m.%Y %H:%M')}\n"
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏—Å—Ç–æ—Ä–∏–∏
                    story_type_names = {1: '–§–æ—Ç–æ', 2: '–í–∏–¥–µ–æ'}
                    story_type_name = story_type_names.get(story.media_type, f'–¢–∏–ø {story.media_type}')
                    report += f"üìù –¢–∏–ø: {story_type_name}\n"
                    report += f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –±—ã—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º)\n"
                    report += "-" * 30 + "\n"
            
        except Exception as api_error:
            report += f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ç–æ—Ä–∏—è–º: {str(api_error)}\n"
            report += "üí° –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–π —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏—Å—Ç–æ—Ä–∏–π –¥–ª—è @{username}: {str(e)}"

def start_accounts_analytics(update: Update, context: CallbackContext):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
    query = update.callback_query
    query.answer()
    
    try:
        accounts = get_instagram_accounts()
        
        report = f"üë§ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += "=" * 50 + "\n\n"
        
        if not accounts:
            report += "‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        else:
            active_accounts = [acc for acc in accounts if acc.is_active]
            inactive_accounts = [acc for acc in accounts if not acc.is_active]
            
            report += f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
            report += f"üë• –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
            report += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_accounts)}\n"
            report += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(inactive_accounts)}\n\n"
            
            if active_accounts:
                report += f"‚úÖ –ê–ö–¢–ò–í–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´ ({len(active_accounts)}):\n"
                for i, acc in enumerate(active_accounts, 1):
                    report += f"{i:2d}. @{acc.username}\n"
                    report += f"     üìß Email: {acc.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    report += f"     üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {acc.created_at.strftime('%d.%m.%Y')}\n"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Å—Å–∏–∏
                    session_path = f"data/accounts/{acc.id}/session.json"
                    if os.path.exists(session_path):
                        report += f"     üîê –°–µ—Å—Å–∏—è: ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n"
                    else:
                        report += f"     üîê –°–µ—Å—Å–∏—è: ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
                    
                    report += "\n"
            
            if inactive_accounts:
                report += f"‚ùå –ù–ï–ê–ö–¢–ò–í–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´ ({len(inactive_accounts)}):\n"
                for i, acc in enumerate(inactive_accounts, 1):
                    report += f"{i:2d}. @{acc.username}\n"
                    report += f"     üìß Email: {acc.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    report += f"     üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {acc.created_at.strftime('%d.%m.%Y')}\n"
                    report += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"accounts_statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            f.write(report)
            temp_file_path = f.name
        
        with open(temp_file_path, 'rb') as f:
            query.message.reply_document(
                document=f,
                filename=filename,
                caption="üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º"
            )
        
        os.unlink(temp_file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from telegram_bot.keyboards import get_statistics_menu_keyboard
        query.edit_message_text(
            "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∞–π–ª–æ–º",
            reply_markup=get_statistics_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="analytics_menu")]
            ])
        )

def analyze_accounts_comparison(account_ids: List[int], usernames: List[str]) -> str:
    """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        accounts_data = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        for i, username in enumerate(usernames):
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                if medias:
                    total_likes = sum(m.like_count for m in medias)
                    total_comments = sum(m.comment_count for m in medias)
                    avg_likes = total_likes // len(medias)
                    avg_comments = total_comments // len(medias)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    accounts_data.append({
                        'username': username,
                        'followers': user_info.follower_count,
                        'following': user_info.following_count,
                        'posts_count': user_info.media_count,
                        'analyzed_posts': len(medias),
                        'total_likes': total_likes,
                        'total_comments': total_comments,
                        'avg_likes': avg_likes,
                        'avg_comments': avg_comments,
                        'photos': photos,
                        'videos': videos,
                        'carousels': carousels,
                        'engagement_rate': (avg_likes + avg_comments) / user_info.follower_count * 100 if user_info.follower_count > 0 else 0
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {username}: {e}")
                accounts_data.append({
                    'username': username,
                    'error': str(e)
                })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        if accounts_data:
            report += "üìä –°–†–ê–í–ù–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–û–í:\n\n"
            
            for i, data in enumerate(accounts_data, 1):
                if 'error' in data:
                    report += f"{i:2d}. @{data['username']} - ‚ùå –û—à–∏–±–∫–∞: {data['error']}\n"
                    continue
                
                report += f"{i:2d}. @{data['username']}\n"
                report += f"    üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {data['followers']:,}\n"
                report += f"    üìù –ü–æ—Å—Ç–æ–≤: {data['posts_count']:,}\n"
                report += f"    ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {data['avg_likes']:,}\n"
                report += f"    üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['avg_comments']:,}\n"
                report += f"    üìä ER: {data['engagement_rate']:.2f}%\n"
                report += f"    üì∑ –§–æ—Ç–æ: {data['photos']} | üé• –í–∏–¥–µ–æ: {data['videos']} | üé† –ö–∞—Ä—É—Å–µ–ª–∏: {data['carousels']}\n\n"
            
            # –†–µ–π—Ç–∏–Ω–≥–∏
            valid_accounts = [d for d in accounts_data if 'error' not in d]
            if len(valid_accounts) > 1:
                report += "üèÜ –†–ï–ô–¢–ò–ù–ì–ò:\n\n"
                
                # –¢–æ–ø –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                top_followers = sorted(valid_accounts, key=lambda x: x['followers'], reverse=True)
                report += "üë• –¢–æ–ø –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:\n"
                for i, acc in enumerate(top_followers[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['followers']:,}\n"
                report += "\n"
                
                # –¢–æ–ø –ø–æ engagement rate
                top_er = sorted(valid_accounts, key=lambda x: x['engagement_rate'], reverse=True)
                report += "üìä –¢–æ–ø –ø–æ Engagement Rate:\n"
                for i, acc in enumerate(top_er[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['engagement_rate']:.2f}%\n"
                report += "\n"
                
                # –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–∏–º –ª–∞–π–∫–∞–º
                top_likes = sorted(valid_accounts, key=lambda x: x['avg_likes'], reverse=True)
                report += "‚ù§Ô∏è –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–∏–º –ª–∞–π–∫–∞–º:\n"
                for i, acc in enumerate(top_likes[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['avg_likes']:,}\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}"

def analyze_accounts_summary(account_ids: List[int], usernames: List[str]) -> str:
    """–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üìà –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        total_followers = 0
        total_posts = 0
        total_likes = 0
        total_comments = 0
        total_analyzed_posts = 0
        valid_accounts = 0
        
        photos_total = 0
        videos_total = 0
        carousels_total = 0
        
        account_details = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for username in usernames:
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                if medias:
                    account_likes = sum(m.like_count for m in medias)
                    account_comments = sum(m.comment_count for m in medias)
                    
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    total_followers += user_info.follower_count
                    total_posts += user_info.media_count
                    total_likes += account_likes
                    total_comments += account_comments
                    total_analyzed_posts += len(medias)
                    valid_accounts += 1
                    
                    photos_total += photos
                    videos_total += videos
                    carousels_total += carousels
                    
                    account_details.append({
                        'username': username,
                        'followers': user_info.follower_count,
                        'posts': user_info.media_count,
                        'likes': account_likes,
                        'comments': account_comments
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {username}: {e}")
        
        if valid_accounts > 0:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report += f"üìä –û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
            report += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {valid_accounts} –∏–∑ {len(usernames)}\n"
            report += f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_followers:,}\n"
            report += f"üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {total_posts:,}\n"
            report += f"‚ù§Ô∏è –û–±—â–∏–µ –ª–∞–π–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã): {total_likes:,}\n"
            report += f"üí¨ –û–±—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã): {total_comments:,}\n"
            report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_analyzed_posts}\n\n"
            
            # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            avg_followers = total_followers // valid_accounts
            avg_posts = total_posts // valid_accounts
            avg_likes_per_account = total_likes // valid_accounts
            avg_comments_per_account = total_comments // valid_accounts
            
            report += f"üìà –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ù–ê –ê–ö–ö–ê–£–ù–¢:\n"
            report += f"üë• –°—Ä–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {avg_followers:,}\n"
            report += f"üìù –°—Ä–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã: {avg_posts:,}\n"
            report += f"‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {avg_likes_per_account:,}\n"
            report += f"üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {avg_comments_per_account:,}\n\n"
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            total_content = photos_total + videos_total + carousels_total
            if total_content > 0:
                report += f"üìä –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ù–¢–ê:\n"
                report += f"üì∑ –§–æ—Ç–æ: {photos_total} ({photos_total/total_content*100:.1f}%)\n"
                report += f"üé• –í–∏–¥–µ–æ: {videos_total} ({videos_total/total_content*100:.1f}%)\n"
                report += f"üé† –ö–∞—Ä—É—Å–µ–ª–∏: {carousels_total} ({carousels_total/total_content*100:.1f}%)\n\n"
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
            report += f"üë• –î–ï–¢–ê–õ–ò –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú:\n"
            for i, acc in enumerate(account_details, 1):
                report += f"{i:2d}. @{acc['username']} - {acc['followers']:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, {acc['likes']:,} –ª–∞–π–∫–æ–≤\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–æ–¥–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}"

def analyze_top_posts_all_accounts(account_ids: List[int], usernames: List[str]) -> str:
    """–õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üèÜ –õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üèÜ –õ–£–ß–®–ò–ï –ü–û–°–¢–´ –í–°–ï–• –ê–ö–ö–ê–£–ù–¢–û–í\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        all_posts = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç—ã –æ—Ç –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for username in usernames:
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                for media in medias:
                    all_posts.append({
                        'username': username,
                        'media': media,
                        'score': media.like_count + media.comment_count * 3  # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ {username}: {e}")
        
        if all_posts:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            top_posts = sorted(all_posts, key=lambda x: x['score'], reverse=True)[:20]
            
            report += f"üèÜ –¢–û–ü-{len(top_posts)} –ü–û–°–¢–û–í –ü–û –í–°–ï–ú –ê–ö–ö–ê–£–ù–¢–ê–ú:\n\n"
            
            for i, post_data in enumerate(top_posts, 1):
                media = post_data['media']
                username = post_data['username']
                
                media_type_names = {1: '–§–æ—Ç–æ', 2: '–í–∏–¥–µ–æ', 8: '–ö–∞—Ä—É—Å–µ–ª—å'}
                media_type_name = media_type_names.get(media.media_type, f'–¢–∏–ø {media.media_type}')
                
                report += f"üèÜ –ú–ï–°–¢–û #{i}\n"
                report += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{username}\n"
                report += f"üîó URL: https://www.instagram.com/p/{media.code}/\n"
                report += f"üìÖ –î–∞—Ç–∞: {media.taken_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                report += f"üìù –¢–∏–ø: {media_type_name}\n"
                report += f"‚ù§Ô∏è –õ–∞–π–∫–∏: {media.like_count:,}\n"
                report += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {media.comment_count:,}\n"
                report += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {post_data['score']:,}\n"
                
                if media.caption_text:
                    caption_preview = media.caption_text[:100] + "..." if len(media.caption_text) > 100 else media.caption_text
                    report += f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {caption_preview}\n"
                
                report += "-" * 40 + "\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª—É—á—à–∏—Ö –ø–æ—Å—Ç–æ–≤: {str(e)}"

def analyze_detailed_all_accounts(account_ids: List[int], usernames: List[str]) -> str:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º\n\n{error}"
        
        report = f"üìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú –ê–ö–ö–ê–£–ù–¢–ê–ú\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        for i, username in enumerate(usernames, 1):
            try:
                report += f"üë§ –ê–ö–ö–ê–£–ù–¢ #{i}: @{username}\n"
                report += "‚îÄ" * 50 + "\n"
                
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=30)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
                report += f"üìõ –ò–º—è: {user_info.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                report += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_info.follower_count:,}\n"
                report += f"üë§ –ü–æ–¥–ø–∏—Å–∫–∏: {user_info.following_count:,}\n"
                report += f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {user_info.media_count:,}\n"
                report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(medias) if medias else 0} –ø–æ—Å—Ç–æ–≤\n\n"
                
                if medias:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    report += f"üìä –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
                    report += f"  üì∑ –§–æ—Ç–æ: {photos} ({photos/len(medias)*100:.1f}%)\n"
                    report += f"  üé• –í–∏–¥–µ–æ: {videos} ({videos/len(medias)*100:.1f}%)\n"
                    report += f"  üé† –ö–∞—Ä—É—Å–µ–ª–∏: {carousels} ({carousels/len(medias)*100:.1f}%)\n\n"
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
                    total_likes = sum(m.like_count for m in medias)
                    total_comments = sum(m.comment_count for m in medias)
                    avg_likes = total_likes // len(medias)
                    avg_comments = total_comments // len(medias)
                    
                    report += f"üìà –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:\n"
                    report += f"  ‚ù§Ô∏è –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {total_likes:,}\n"
                    report += f"  üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments:,}\n"
                    report += f"  ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {avg_likes:,}\n"
                    report += f"  üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {avg_comments:,}\n"
                    
                    if user_info.follower_count > 0:
                        engagement_rate = (avg_likes + avg_comments) / user_info.follower_count * 100
                        report += f"  üìä Engagement Rate: {engagement_rate:.2f}%\n"
                    
                    # –õ—É—á—à–∏–π –ø–æ—Å—Ç
                    best_post = max(medias, key=lambda x: x.like_count + x.comment_count * 3)
                    report += f"\nüèÜ –õ—É—á—à–∏–π –ø–æ—Å—Ç:\n"
                    report += f"  üîó https://www.instagram.com/p/{best_post.code}/\n"
                    report += f"  ‚ù§Ô∏è {best_post.like_count:,} –ª–∞–π–∫–æ–≤, üí¨ {best_post.comment_count:,} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
                    
                else:
                    report += "‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç\n"
                
                report += "\n" + "=" * 60 + "\n\n"
                
            except Exception as e:
                report += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ @{username}: {str(e)}\n\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"

def start_general_analytics(update: Update, context: CallbackContext):
    """–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    query = update.callback_query
    query.answer()
    
    try:
        from database.db_manager import get_publish_tasks
        from database.models import TaskStatus, TaskType
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        accounts = get_instagram_accounts()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        week_ago = datetime.now() - timedelta(days=7)
        
        report = f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += "=" * 50 + "\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        active_accounts = [acc for acc in accounts if acc.is_active]
        report += f"üë• –ê–ö–ö–ê–£–ù–¢–´:\n"
        report += f"üìä –í—Å–µ–≥–æ: {len(accounts)}\n"
        report += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_accounts)}\n"
        report += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(accounts) - len(active_accounts)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–ø–æ–∫
        from database.db_manager import get_account_groups
        groups = get_account_groups()
        report += f"üìÅ –ü–ê–ü–ö–ò:\n"
        report += f"üìä –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {len(groups)}\n"
        for group in groups:
            from database.db_manager import get_accounts_in_group
            group_accounts = get_accounts_in_group(group.id)
            report += f"   üìÅ {group.name}: {len(group_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        report += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏
        from database.db_manager import get_proxies
        proxies = get_proxies()
        active_proxies = [p for p in proxies if p.is_active]
        report += f"üåê –ü–†–û–ö–°–ò:\n"
        report += f"üìä –í—Å–µ–≥–æ: {len(proxies)}\n"
        report += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_proxies)}\n"
        report += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(proxies) - len(active_proxies)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        import psutil
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        
        report += f"üñ•Ô∏è –°–ò–°–¢–ï–ú–ê:\n"
        report += f"‚ö° CPU: {cpu_percent:.1f}%\n"
        report += f"üíæ RAM: {memory.percent:.1f}% ({memory.used // 1024**3:.1f}GB / {memory.total // 1024**3:.1f}GB)\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        disk = psutil.disk_usage('/')
        report += f"üíΩ –î–∏—Å–∫: {disk.percent:.1f}% ({disk.used // 1024**3:.1f}GB / {disk.total // 1024**3:.1f}GB)\n\n"
        
        report += f"üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        if len(active_accounts) == 0:
            report += "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n"
        elif len(active_accounts) < 5:
            report += "üí° –ú–∞–ª–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
        
        if len(active_proxies) == 0:
            report += "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ - –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏\n"
        elif len(active_proxies) < len(active_accounts):
            report += "üí° –ü—Ä–æ–∫—Å–∏ –º–µ–Ω—å—à–µ —á–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1:1\n"
        
        if memory.percent > 80:
            report += "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM\n"
        
        if disk.percent > 90:
            report += "‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ\n"
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"general_statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            f.write(report)
            temp_file_path = f.name
        
        with open(temp_file_path, 'rb') as f:
            query.message.reply_document(
                document=f,
                filename=filename,
                caption="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
            )
        
        os.unlink(temp_file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from telegram_bot.keyboards import get_statistics_menu_keyboard
        query.edit_message_text(
            "‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∞–π–ª–æ–º",
            reply_markup=get_statistics_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {e}")
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="analytics_menu")]
            ])
        ) 
def analyze_accounts_comparison(account_ids: List[int], usernames: List[str]) -> str:
    """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        accounts_data = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        for i, username in enumerate(usernames):
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                if medias:
                    total_likes = sum(m.like_count for m in medias)
                    total_comments = sum(m.comment_count for m in medias)
                    avg_likes = total_likes // len(medias)
                    avg_comments = total_comments // len(medias)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    accounts_data.append({
                        'username': username,
                        'followers': user_info.follower_count,
                        'following': user_info.following_count,
                        'posts_count': user_info.media_count,
                        'analyzed_posts': len(medias),
                        'total_likes': total_likes,
                        'total_comments': total_comments,
                        'avg_likes': avg_likes,
                        'avg_comments': avg_comments,
                        'photos': photos,
                        'videos': videos,
                        'carousels': carousels,
                        'engagement_rate': (avg_likes + avg_comments) / user_info.follower_count * 100 if user_info.follower_count > 0 else 0
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {username}: {e}")
                accounts_data.append({
                    'username': username,
                    'error': str(e)
                })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        if accounts_data:
            report += "üìä –°–†–ê–í–ù–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–û–í:\n\n"
            
            for i, data in enumerate(accounts_data, 1):
                if 'error' in data:
                    report += f"{i:2d}. @{data['username']} - ‚ùå –û—à–∏–±–∫–∞: {data['error']}\n"
                    continue
                
                report += f"{i:2d}. @{data['username']}\n"
                report += f"    üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {data['followers']:,}\n"
                report += f"    üìù –ü–æ—Å—Ç–æ–≤: {data['posts_count']:,}\n"
                report += f"    ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {data['avg_likes']:,}\n"
                report += f"    üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['avg_comments']:,}\n"
                report += f"    üìä ER: {data['engagement_rate']:.2f}%\n"
                report += f"    üì∑ –§–æ—Ç–æ: {data['photos']} | üé• –í–∏–¥–µ–æ: {data['videos']} | üé† –ö–∞—Ä—É—Å–µ–ª–∏: {data['carousels']}\n\n"
            
            # –†–µ–π—Ç–∏–Ω–≥–∏
            valid_accounts = [d for d in accounts_data if 'error' not in d]
            if len(valid_accounts) > 1:
                report += "üèÜ –†–ï–ô–¢–ò–ù–ì–ò:\n\n"
                
                # –¢–æ–ø –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                top_followers = sorted(valid_accounts, key=lambda x: x['followers'], reverse=True)
                report += "üë• –¢–æ–ø –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:\n"
                for i, acc in enumerate(top_followers[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['followers']:,}\n"
                report += "\n"
                
                # –¢–æ–ø –ø–æ engagement rate
                top_er = sorted(valid_accounts, key=lambda x: x['engagement_rate'], reverse=True)
                report += "üìä –¢–æ–ø –ø–æ Engagement Rate:\n"
                for i, acc in enumerate(top_er[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['engagement_rate']:.2f}%\n"
                report += "\n"
                
                # –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–∏–º –ª–∞–π–∫–∞–º
                top_likes = sorted(valid_accounts, key=lambda x: x['avg_likes'], reverse=True)
                report += "‚ù§Ô∏è –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–∏–º –ª–∞–π–∫–∞–º:\n"
                for i, acc in enumerate(top_likes[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['avg_likes']:,}\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}"

def analyze_accounts_summary(account_ids: List[int], usernames: List[str]) -> str:
    """–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üìà –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        total_followers = 0
        total_posts = 0
        total_likes = 0
        total_comments = 0
        total_analyzed_posts = 0
        valid_accounts = 0
        
        photos_total = 0
        videos_total = 0
        carousels_total = 0
        
        account_details = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for username in usernames:
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                if medias:
                    account_likes = sum(m.like_count for m in medias)
                    account_comments = sum(m.comment_count for m in medias)
                    
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    total_followers += user_info.follower_count
                    total_posts += user_info.media_count
                    total_likes += account_likes
                    total_comments += account_comments
                    total_analyzed_posts += len(medias)
                    valid_accounts += 1
                    
                    photos_total += photos
                    videos_total += videos
                    carousels_total += carousels
                    
                    account_details.append({
                        'username': username,
                        'followers': user_info.follower_count,
                        'posts': user_info.media_count,
                        'likes': account_likes,
                        'comments': account_comments
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {username}: {e}")
        
        if valid_accounts > 0:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report += f"üìä –û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
            report += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {valid_accounts} –∏–∑ {len(usernames)}\n"
            report += f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_followers:,}\n"
            report += f"üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {total_posts:,}\n"
            report += f"‚ù§Ô∏è –û–±—â–∏–µ –ª–∞–π–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã): {total_likes:,}\n"
            report += f"üí¨ –û–±—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã): {total_comments:,}\n"
            report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_analyzed_posts}\n\n"
            
            # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            avg_followers = total_followers // valid_accounts
            avg_posts = total_posts // valid_accounts
            avg_likes_per_account = total_likes // valid_accounts
            avg_comments_per_account = total_comments // valid_accounts
            
            report += f"üìà –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ù–ê –ê–ö–ö–ê–£–ù–¢:\n"
            report += f"üë• –°—Ä–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {avg_followers:,}\n"
            report += f"üìù –°—Ä–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã: {avg_posts:,}\n"
            report += f"‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {avg_likes_per_account:,}\n"
            report += f"üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {avg_comments_per_account:,}\n\n"
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            total_content = photos_total + videos_total + carousels_total
            if total_content > 0:
                report += f"üìä –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ù–¢–ê:\n"
                report += f"üì∑ –§–æ—Ç–æ: {photos_total} ({photos_total/total_content*100:.1f}%)\n"
                report += f"üé• –í–∏–¥–µ–æ: {videos_total} ({videos_total/total_content*100:.1f}%)\n"
                report += f"üé† –ö–∞—Ä—É—Å–µ–ª–∏: {carousels_total} ({carousels_total/total_content*100:.1f}%)\n\n"
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
            report += f"üë• –î–ï–¢–ê–õ–ò –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú:\n"
            for i, acc in enumerate(account_details, 1):
                report += f"{i:2d}. @{acc['username']} - {acc['followers']:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, {acc['likes']:,} –ª–∞–π–∫–æ–≤\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–æ–¥–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}"

def analyze_top_posts_all_accounts(account_ids: List[int], usernames: List[str]) -> str:
    """–õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üèÜ –õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üèÜ –õ–£–ß–®–ò–ï –ü–û–°–¢–´ –í–°–ï–• –ê–ö–ö–ê–£–ù–¢–û–í\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        all_posts = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç—ã –æ—Ç –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for username in usernames:
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                for media in medias:
                    all_posts.append({
                        'username': username,
                        'media': media,
                        'score': media.like_count + media.comment_count * 3  # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ {username}: {e}")
        
        if all_posts:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            top_posts = sorted(all_posts, key=lambda x: x['score'], reverse=True)[:20]
            
            report += f"üèÜ –¢–û–ü-{len(top_posts)} –ü–û–°–¢–û–í –ü–û –í–°–ï–ú –ê–ö–ö–ê–£–ù–¢–ê–ú:\n\n"
            
            for i, post_data in enumerate(top_posts, 1):
                media = post_data['media']
                username = post_data['username']
                
                media_type_names = {1: '–§–æ—Ç–æ', 2: '–í–∏–¥–µ–æ', 8: '–ö–∞—Ä—É—Å–µ–ª—å'}
                media_type_name = media_type_names.get(media.media_type, f'–¢–∏–ø {media.media_type}')
                
                report += f"üèÜ –ú–ï–°–¢–û #{i}\n"
                report += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{username}\n"
                report += f"üîó URL: https://www.instagram.com/p/{media.code}/\n"
                report += f"üìÖ –î–∞—Ç–∞: {media.taken_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                report += f"üìù –¢–∏–ø: {media_type_name}\n"
                report += f"‚ù§Ô∏è –õ–∞–π–∫–∏: {media.like_count:,}\n"
                report += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {media.comment_count:,}\n"
                report += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {post_data['score']:,}\n"
                
                if media.caption_text:
                    caption_preview = media.caption_text[:100] + "..." if len(media.caption_text) > 100 else media.caption_text
                    report += f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {caption_preview}\n"
                
                report += "-" * 40 + "\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª—É—á—à–∏—Ö –ø–æ—Å—Ç–æ–≤: {str(e)}"

def analyze_detailed_all_accounts(account_ids: List[int], usernames: List[str]) -> str:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º\n\n{error}"
        
        report = f"üìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú –ê–ö–ö–ê–£–ù–¢–ê–ú\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        for i, username in enumerate(usernames, 1):
            try:
                report += f"üë§ –ê–ö–ö–ê–£–ù–¢ #{i}: @{username}\n"
                report += "‚îÄ" * 50 + "\n"
                
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=30)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
                report += f"üìõ –ò–º—è: {user_info.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                report += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_info.follower_count:,}\n"
                report += f"üë§ –ü–æ–¥–ø–∏—Å–∫–∏: {user_info.following_count:,}\n"
                report += f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {user_info.media_count:,}\n"
                report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(medias) if medias else 0} –ø–æ—Å—Ç–æ–≤\n\n"
                
                if medias:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    report += f"üìä –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
                    report += f"  üì∑ –§–æ—Ç–æ: {photos} ({photos/len(medias)*100:.1f}%)\n"
                    report += f"  üé• –í–∏–¥–µ–æ: {videos} ({videos/len(medias)*100:.1f}%)\n"
                    report += f"  üé† –ö–∞—Ä—É—Å–µ–ª–∏: {carousels} ({carousels/len(medias)*100:.1f}%)\n\n"
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
                    total_likes = sum(m.like_count for m in medias)
                    total_comments = sum(m.comment_count for m in medias)
                    avg_likes = total_likes // len(medias)
                    avg_comments = total_comments // len(medias)
                    
                    report += f"üìà –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:\n"
                    report += f"  ‚ù§Ô∏è –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {total_likes:,}\n"
                    report += f"  üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments:,}\n"
                    report += f"  ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {avg_likes:,}\n"
                    report += f"  üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {avg_comments:,}\n"
                    
                    if user_info.follower_count > 0:
                        engagement_rate = (avg_likes + avg_comments) / user_info.follower_count * 100
                        report += f"  üìä Engagement Rate: {engagement_rate:.2f}%\n"
                    
                    # –õ—É—á—à–∏–π –ø–æ—Å—Ç
                    best_post = max(medias, key=lambda x: x.like_count + x.comment_count * 3)
                    report += f"\nüèÜ –õ—É—á—à–∏–π –ø–æ—Å—Ç:\n"
                    report += f"  üîó https://www.instagram.com/p/{best_post.code}/\n"
                    report += f"  ‚ù§Ô∏è {best_post.like_count:,} –ª–∞–π–∫–æ–≤, üí¨ {best_post.comment_count:,} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
                    
                else:
                    report += "‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç\n"
                
                report += "\n" + "=" * 60 + "\n\n"
                
            except Exception as e:
                report += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ @{username}: {str(e)}\n\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"

def start_general_analytics(update: Update, context: CallbackContext):
    """–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    query = update.callback_query
    query.answer()
    
    try:
        from database.db_manager import get_publish_tasks
        from database.models import TaskStatus, TaskType
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        accounts = get_instagram_accounts()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        week_ago = datetime.now() - timedelta(days=7)
        
        report = f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += "=" * 50 + "\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        active_accounts = [acc for acc in accounts if acc.is_active]
        report += f"üë• –ê–ö–ö–ê–£–ù–¢–´:\n"
        report += f"üìä –í—Å–µ–≥–æ: {len(accounts)}\n"
        report += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_accounts)}\n"
        report += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(accounts) - len(active_accounts)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–ø–æ–∫
        from database.db_manager import get_account_groups
        groups = get_account_groups()
        report += f"üìÅ –ü–ê–ü–ö–ò:\n"
        report += f"üìä –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {len(groups)}\n"
        for group in groups:
            from database.db_manager import get_accounts_in_group
            group_accounts = get_accounts_in_group(group.id)
            report += f"   üìÅ {group.name}: {len(group_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        report += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏
        from database.db_manager import get_proxies
        proxies = get_proxies()
        active_proxies = [p for p in proxies if p.is_active]
        report += f"üåê –ü–†–û–ö–°–ò:\n"
        report += f"üìä –í—Å–µ–≥–æ: {len(proxies)}\n"
        report += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_proxies)}\n"
        report += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(proxies) - len(active_proxies)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        import psutil
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        
        report += f"üñ•Ô∏è –°–ò–°–¢–ï–ú–ê:\n"
        report += f"‚ö° CPU: {cpu_percent:.1f}%\n"
        report += f"üíæ RAM: {memory.percent:.1f}% ({memory.used // 1024**3:.1f}GB / {memory.total // 1024**3:.1f}GB)\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        disk = psutil.disk_usage('/')
        report += f"üíΩ –î–∏—Å–∫: {disk.percent:.1f}% ({disk.used // 1024**3:.1f}GB / {disk.total // 1024**3:.1f}GB)\n\n"
        
        report += f"üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        if len(active_accounts) == 0:
            report += "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n"
        elif len(active_accounts) < 5:
            report += "üí° –ú–∞–ª–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
        
        if len(active_proxies) == 0:
            report += "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ - –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏\n"
        elif len(active_proxies) < len(active_accounts):
            report += "üí° –ü—Ä–æ–∫—Å–∏ –º–µ–Ω—å—à–µ —á–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1:1\n"
        
        if memory.percent > 80:
            report += "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM\n"
        
        if disk.percent > 90:
            report += "‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ\n"
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"general_statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            f.write(report)
            temp_file_path = f.name
        
        with open(temp_file_path, 'rb') as f:
            query.message.reply_document(
                document=f,
                filename=filename,
                caption="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
            )
        
        os.unlink(temp_file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from telegram_bot.keyboards import get_statistics_menu_keyboard
        query.edit_message_text(
            "‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∞–π–ª–æ–º",
            reply_markup=get_statistics_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {e}")
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="analytics_menu")]
            ])
        ) 
def analyze_accounts_comparison(account_ids: List[int], usernames: List[str]) -> str:
    """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        accounts_data = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        for i, username in enumerate(usernames):
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                if medias:
                    total_likes = sum(m.like_count for m in medias)
                    total_comments = sum(m.comment_count for m in medias)
                    avg_likes = total_likes // len(medias)
                    avg_comments = total_comments // len(medias)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    accounts_data.append({
                        'username': username,
                        'followers': user_info.follower_count,
                        'following': user_info.following_count,
                        'posts_count': user_info.media_count,
                        'analyzed_posts': len(medias),
                        'total_likes': total_likes,
                        'total_comments': total_comments,
                        'avg_likes': avg_likes,
                        'avg_comments': avg_comments,
                        'photos': photos,
                        'videos': videos,
                        'carousels': carousels,
                        'engagement_rate': (avg_likes + avg_comments) / user_info.follower_count * 100 if user_info.follower_count > 0 else 0
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {username}: {e}")
                accounts_data.append({
                    'username': username,
                    'error': str(e)
                })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        if accounts_data:
            report += "üìä –°–†–ê–í–ù–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–û–í:\n\n"
            
            for i, data in enumerate(accounts_data, 1):
                if 'error' in data:
                    report += f"{i:2d}. @{data['username']} - ‚ùå –û—à–∏–±–∫–∞: {data['error']}\n"
                    continue
                
                report += f"{i:2d}. @{data['username']}\n"
                report += f"    üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {data['followers']:,}\n"
                report += f"    üìù –ü–æ—Å—Ç–æ–≤: {data['posts_count']:,}\n"
                report += f"    ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {data['avg_likes']:,}\n"
                report += f"    üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['avg_comments']:,}\n"
                report += f"    üìä ER: {data['engagement_rate']:.2f}%\n"
                report += f"    üì∑ –§–æ—Ç–æ: {data['photos']} | üé• –í–∏–¥–µ–æ: {data['videos']} | üé† –ö–∞—Ä—É—Å–µ–ª–∏: {data['carousels']}\n\n"
            
            # –†–µ–π—Ç–∏–Ω–≥–∏
            valid_accounts = [d for d in accounts_data if 'error' not in d]
            if len(valid_accounts) > 1:
                report += "üèÜ –†–ï–ô–¢–ò–ù–ì–ò:\n\n"
                
                # –¢–æ–ø –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                top_followers = sorted(valid_accounts, key=lambda x: x['followers'], reverse=True)
                report += "üë• –¢–æ–ø –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:\n"
                for i, acc in enumerate(top_followers[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['followers']:,}\n"
                report += "\n"
                
                # –¢–æ–ø –ø–æ engagement rate
                top_er = sorted(valid_accounts, key=lambda x: x['engagement_rate'], reverse=True)
                report += "üìä –¢–æ–ø –ø–æ Engagement Rate:\n"
                for i, acc in enumerate(top_er[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['engagement_rate']:.2f}%\n"
                report += "\n"
                
                # –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–∏–º –ª–∞–π–∫–∞–º
                top_likes = sorted(valid_accounts, key=lambda x: x['avg_likes'], reverse=True)
                report += "‚ù§Ô∏è –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–∏–º –ª–∞–π–∫–∞–º:\n"
                for i, acc in enumerate(top_likes[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['avg_likes']:,}\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}"

def analyze_accounts_summary(account_ids: List[int], usernames: List[str]) -> str:
    """–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üìà –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        total_followers = 0
        total_posts = 0
        total_likes = 0
        total_comments = 0
        total_analyzed_posts = 0
        valid_accounts = 0
        
        photos_total = 0
        videos_total = 0
        carousels_total = 0
        
        account_details = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for username in usernames:
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                if medias:
                    account_likes = sum(m.like_count for m in medias)
                    account_comments = sum(m.comment_count for m in medias)
                    
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    total_followers += user_info.follower_count
                    total_posts += user_info.media_count
                    total_likes += account_likes
                    total_comments += account_comments
                    total_analyzed_posts += len(medias)
                    valid_accounts += 1
                    
                    photos_total += photos
                    videos_total += videos
                    carousels_total += carousels
                    
                    account_details.append({
                        'username': username,
                        'followers': user_info.follower_count,
                        'posts': user_info.media_count,
                        'likes': account_likes,
                        'comments': account_comments
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {username}: {e}")
        
        if valid_accounts > 0:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report += f"üìä –û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
            report += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {valid_accounts} –∏–∑ {len(usernames)}\n"
            report += f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_followers:,}\n"
            report += f"üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {total_posts:,}\n"
            report += f"‚ù§Ô∏è –û–±—â–∏–µ –ª–∞–π–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã): {total_likes:,}\n"
            report += f"üí¨ –û–±—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã): {total_comments:,}\n"
            report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_analyzed_posts}\n\n"
            
            # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            avg_followers = total_followers // valid_accounts
            avg_posts = total_posts // valid_accounts
            avg_likes_per_account = total_likes // valid_accounts
            avg_comments_per_account = total_comments // valid_accounts
            
            report += f"üìà –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ù–ê –ê–ö–ö–ê–£–ù–¢:\n"
            report += f"üë• –°—Ä–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {avg_followers:,}\n"
            report += f"üìù –°—Ä–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã: {avg_posts:,}\n"
            report += f"‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {avg_likes_per_account:,}\n"
            report += f"üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {avg_comments_per_account:,}\n\n"
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            total_content = photos_total + videos_total + carousels_total
            if total_content > 0:
                report += f"üìä –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ù–¢–ê:\n"
                report += f"üì∑ –§–æ—Ç–æ: {photos_total} ({photos_total/total_content*100:.1f}%)\n"
                report += f"üé• –í–∏–¥–µ–æ: {videos_total} ({videos_total/total_content*100:.1f}%)\n"
                report += f"üé† –ö–∞—Ä—É—Å–µ–ª–∏: {carousels_total} ({carousels_total/total_content*100:.1f}%)\n\n"
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
            report += f"üë• –î–ï–¢–ê–õ–ò –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú:\n"
            for i, acc in enumerate(account_details, 1):
                report += f"{i:2d}. @{acc['username']} - {acc['followers']:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, {acc['likes']:,} –ª–∞–π–∫–æ–≤\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–æ–¥–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}"

def analyze_top_posts_all_accounts(account_ids: List[int], usernames: List[str]) -> str:
    """–õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üèÜ –õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üèÜ –õ–£–ß–®–ò–ï –ü–û–°–¢–´ –í–°–ï–• –ê–ö–ö–ê–£–ù–¢–û–í\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        all_posts = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç—ã –æ—Ç –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for username in usernames:
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                for media in medias:
                    all_posts.append({
                        'username': username,
                        'media': media,
                        'score': media.like_count + media.comment_count * 3  # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ {username}: {e}")
        
        if all_posts:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            top_posts = sorted(all_posts, key=lambda x: x['score'], reverse=True)[:20]
            
            report += f"üèÜ –¢–û–ü-{len(top_posts)} –ü–û–°–¢–û–í –ü–û –í–°–ï–ú –ê–ö–ö–ê–£–ù–¢–ê–ú:\n\n"
            
            for i, post_data in enumerate(top_posts, 1):
                media = post_data['media']
                username = post_data['username']
                
                media_type_names = {1: '–§–æ—Ç–æ', 2: '–í–∏–¥–µ–æ', 8: '–ö–∞—Ä—É—Å–µ–ª—å'}
                media_type_name = media_type_names.get(media.media_type, f'–¢–∏–ø {media.media_type}')
                
                report += f"üèÜ –ú–ï–°–¢–û #{i}\n"
                report += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{username}\n"
                report += f"üîó URL: https://www.instagram.com/p/{media.code}/\n"
                report += f"üìÖ –î–∞—Ç–∞: {media.taken_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                report += f"üìù –¢–∏–ø: {media_type_name}\n"
                report += f"‚ù§Ô∏è –õ–∞–π–∫–∏: {media.like_count:,}\n"
                report += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {media.comment_count:,}\n"
                report += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {post_data['score']:,}\n"
                
                if media.caption_text:
                    caption_preview = media.caption_text[:100] + "..." if len(media.caption_text) > 100 else media.caption_text
                    report += f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {caption_preview}\n"
                
                report += "-" * 40 + "\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª—É—á—à–∏—Ö –ø–æ—Å—Ç–æ–≤: {str(e)}"

def analyze_detailed_all_accounts(account_ids: List[int], usernames: List[str]) -> str:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º\n\n{error}"
        
        report = f"üìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú –ê–ö–ö–ê–£–ù–¢–ê–ú\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        for i, username in enumerate(usernames, 1):
            try:
                report += f"üë§ –ê–ö–ö–ê–£–ù–¢ #{i}: @{username}\n"
                report += "‚îÄ" * 50 + "\n"
                
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=30)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
                report += f"üìõ –ò–º—è: {user_info.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                report += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_info.follower_count:,}\n"
                report += f"üë§ –ü–æ–¥–ø–∏—Å–∫–∏: {user_info.following_count:,}\n"
                report += f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {user_info.media_count:,}\n"
                report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(medias) if medias else 0} –ø–æ—Å—Ç–æ–≤\n\n"
                
                if medias:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    report += f"üìä –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
                    report += f"  üì∑ –§–æ—Ç–æ: {photos} ({photos/len(medias)*100:.1f}%)\n"
                    report += f"  üé• –í–∏–¥–µ–æ: {videos} ({videos/len(medias)*100:.1f}%)\n"
                    report += f"  üé† –ö–∞—Ä—É—Å–µ–ª–∏: {carousels} ({carousels/len(medias)*100:.1f}%)\n\n"
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
                    total_likes = sum(m.like_count for m in medias)
                    total_comments = sum(m.comment_count for m in medias)
                    avg_likes = total_likes // len(medias)
                    avg_comments = total_comments // len(medias)
                    
                    report += f"üìà –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:\n"
                    report += f"  ‚ù§Ô∏è –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {total_likes:,}\n"
                    report += f"  üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments:,}\n"
                    report += f"  ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {avg_likes:,}\n"
                    report += f"  üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {avg_comments:,}\n"
                    
                    if user_info.follower_count > 0:
                        engagement_rate = (avg_likes + avg_comments) / user_info.follower_count * 100
                        report += f"  üìä Engagement Rate: {engagement_rate:.2f}%\n"
                    
                    # –õ—É—á—à–∏–π –ø–æ—Å—Ç
                    best_post = max(medias, key=lambda x: x.like_count + x.comment_count * 3)
                    report += f"\nüèÜ –õ—É—á—à–∏–π –ø–æ—Å—Ç:\n"
                    report += f"  üîó https://www.instagram.com/p/{best_post.code}/\n"
                    report += f"  ‚ù§Ô∏è {best_post.like_count:,} –ª–∞–π–∫–æ–≤, üí¨ {best_post.comment_count:,} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
                    
                else:
                    report += "‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç\n"
                
                report += "\n" + "=" * 60 + "\n\n"
                
            except Exception as e:
                report += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ @{username}: {str(e)}\n\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"

def start_general_analytics(update: Update, context: CallbackContext):
    """–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    query = update.callback_query
    query.answer()
    
    try:
        from database.db_manager import get_publish_tasks
        from database.models import TaskStatus, TaskType
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        accounts = get_instagram_accounts()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        week_ago = datetime.now() - timedelta(days=7)
        
        report = f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += "=" * 50 + "\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        active_accounts = [acc for acc in accounts if acc.is_active]
        report += f"üë• –ê–ö–ö–ê–£–ù–¢–´:\n"
        report += f"üìä –í—Å–µ–≥–æ: {len(accounts)}\n"
        report += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_accounts)}\n"
        report += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(accounts) - len(active_accounts)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–ø–æ–∫
        from database.db_manager import get_account_groups
        groups = get_account_groups()
        report += f"üìÅ –ü–ê–ü–ö–ò:\n"
        report += f"üìä –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {len(groups)}\n"
        for group in groups:
            from database.db_manager import get_accounts_in_group
            group_accounts = get_accounts_in_group(group.id)
            report += f"   üìÅ {group.name}: {len(group_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        report += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏
        from database.db_manager import get_proxies
        proxies = get_proxies()
        active_proxies = [p for p in proxies if p.is_active]
        report += f"üåê –ü–†–û–ö–°–ò:\n"
        report += f"üìä –í—Å–µ–≥–æ: {len(proxies)}\n"
        report += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_proxies)}\n"
        report += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(proxies) - len(active_proxies)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        import psutil
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        
        report += f"üñ•Ô∏è –°–ò–°–¢–ï–ú–ê:\n"
        report += f"‚ö° CPU: {cpu_percent:.1f}%\n"
        report += f"üíæ RAM: {memory.percent:.1f}% ({memory.used // 1024**3:.1f}GB / {memory.total // 1024**3:.1f}GB)\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        disk = psutil.disk_usage('/')
        report += f"üíΩ –î–∏—Å–∫: {disk.percent:.1f}% ({disk.used // 1024**3:.1f}GB / {disk.total // 1024**3:.1f}GB)\n\n"
        
        report += f"üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        if len(active_accounts) == 0:
            report += "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n"
        elif len(active_accounts) < 5:
            report += "üí° –ú–∞–ª–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
        
        if len(active_proxies) == 0:
            report += "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ - –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏\n"
        elif len(active_proxies) < len(active_accounts):
            report += "üí° –ü—Ä–æ–∫—Å–∏ –º–µ–Ω—å—à–µ —á–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1:1\n"
        
        if memory.percent > 80:
            report += "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM\n"
        
        if disk.percent > 90:
            report += "‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ\n"
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"general_statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            f.write(report)
            temp_file_path = f.name
        
        with open(temp_file_path, 'rb') as f:
            query.message.reply_document(
                document=f,
                filename=filename,
                caption="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
            )
        
        os.unlink(temp_file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from telegram_bot.keyboards import get_statistics_menu_keyboard
        query.edit_message_text(
            "‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∞–π–ª–æ–º",
            reply_markup=get_statistics_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {e}")
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="analytics_menu")]
            ])
        ) 
def analyze_accounts_comparison(account_ids: List[int], usernames: List[str]) -> str:
    """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        accounts_data = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        for i, username in enumerate(usernames):
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                if medias:
                    total_likes = sum(m.like_count for m in medias)
                    total_comments = sum(m.comment_count for m in medias)
                    avg_likes = total_likes // len(medias)
                    avg_comments = total_comments // len(medias)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    accounts_data.append({
                        'username': username,
                        'followers': user_info.follower_count,
                        'following': user_info.following_count,
                        'posts_count': user_info.media_count,
                        'analyzed_posts': len(medias),
                        'total_likes': total_likes,
                        'total_comments': total_comments,
                        'avg_likes': avg_likes,
                        'avg_comments': avg_comments,
                        'photos': photos,
                        'videos': videos,
                        'carousels': carousels,
                        'engagement_rate': (avg_likes + avg_comments) / user_info.follower_count * 100 if user_info.follower_count > 0 else 0
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {username}: {e}")
                accounts_data.append({
                    'username': username,
                    'error': str(e)
                })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        if accounts_data:
            report += "üìä –°–†–ê–í–ù–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–û–í:\n\n"
            
            for i, data in enumerate(accounts_data, 1):
                if 'error' in data:
                    report += f"{i:2d}. @{data['username']} - ‚ùå –û—à–∏–±–∫–∞: {data['error']}\n"
                    continue
                
                report += f"{i:2d}. @{data['username']}\n"
                report += f"    üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {data['followers']:,}\n"
                report += f"    üìù –ü–æ—Å—Ç–æ–≤: {data['posts_count']:,}\n"
                report += f"    ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {data['avg_likes']:,}\n"
                report += f"    üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['avg_comments']:,}\n"
                report += f"    üìä ER: {data['engagement_rate']:.2f}%\n"
                report += f"    üì∑ –§–æ—Ç–æ: {data['photos']} | üé• –í–∏–¥–µ–æ: {data['videos']} | üé† –ö–∞—Ä—É—Å–µ–ª–∏: {data['carousels']}\n\n"
            
            # –†–µ–π—Ç–∏–Ω–≥–∏
            valid_accounts = [d for d in accounts_data if 'error' not in d]
            if len(valid_accounts) > 1:
                report += "üèÜ –†–ï–ô–¢–ò–ù–ì–ò:\n\n"
                
                # –¢–æ–ø –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                top_followers = sorted(valid_accounts, key=lambda x: x['followers'], reverse=True)
                report += "üë• –¢–æ–ø –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:\n"
                for i, acc in enumerate(top_followers[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['followers']:,}\n"
                report += "\n"
                
                # –¢–æ–ø –ø–æ engagement rate
                top_er = sorted(valid_accounts, key=lambda x: x['engagement_rate'], reverse=True)
                report += "üìä –¢–æ–ø –ø–æ Engagement Rate:\n"
                for i, acc in enumerate(top_er[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['engagement_rate']:.2f}%\n"
                report += "\n"
                
                # –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–∏–º –ª–∞–π–∫–∞–º
                top_likes = sorted(valid_accounts, key=lambda x: x['avg_likes'], reverse=True)
                report += "‚ù§Ô∏è –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–∏–º –ª–∞–π–∫–∞–º:\n"
                for i, acc in enumerate(top_likes[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['avg_likes']:,}\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}"

def analyze_accounts_summary(account_ids: List[int], usernames: List[str]) -> str:
    """–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üìà –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        total_followers = 0
        total_posts = 0
        total_likes = 0
        total_comments = 0
        total_analyzed_posts = 0
        valid_accounts = 0
        
        photos_total = 0
        videos_total = 0
        carousels_total = 0
        
        account_details = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for username in usernames:
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                if medias:
                    account_likes = sum(m.like_count for m in medias)
                    account_comments = sum(m.comment_count for m in medias)
                    
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    total_followers += user_info.follower_count
                    total_posts += user_info.media_count
                    total_likes += account_likes
                    total_comments += account_comments
                    total_analyzed_posts += len(medias)
                    valid_accounts += 1
                    
                    photos_total += photos
                    videos_total += videos
                    carousels_total += carousels
                    
                    account_details.append({
                        'username': username,
                        'followers': user_info.follower_count,
                        'posts': user_info.media_count,
                        'likes': account_likes,
                        'comments': account_comments
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {username}: {e}")
        
        if valid_accounts > 0:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report += f"üìä –û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
            report += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {valid_accounts} –∏–∑ {len(usernames)}\n"
            report += f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_followers:,}\n"
            report += f"üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {total_posts:,}\n"
            report += f"‚ù§Ô∏è –û–±—â–∏–µ –ª–∞–π–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã): {total_likes:,}\n"
            report += f"üí¨ –û–±—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã): {total_comments:,}\n"
            report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_analyzed_posts}\n\n"
            
            # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            avg_followers = total_followers // valid_accounts
            avg_posts = total_posts // valid_accounts
            avg_likes_per_account = total_likes // valid_accounts
            avg_comments_per_account = total_comments // valid_accounts
            
            report += f"üìà –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ù–ê –ê–ö–ö–ê–£–ù–¢:\n"
            report += f"üë• –°—Ä–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {avg_followers:,}\n"
            report += f"üìù –°—Ä–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã: {avg_posts:,}\n"
            report += f"‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {avg_likes_per_account:,}\n"
            report += f"üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {avg_comments_per_account:,}\n\n"
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            total_content = photos_total + videos_total + carousels_total
            if total_content > 0:
                report += f"üìä –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ù–¢–ê:\n"
                report += f"üì∑ –§–æ—Ç–æ: {photos_total} ({photos_total/total_content*100:.1f}%)\n"
                report += f"üé• –í–∏–¥–µ–æ: {videos_total} ({videos_total/total_content*100:.1f}%)\n"
                report += f"üé† –ö–∞—Ä—É—Å–µ–ª–∏: {carousels_total} ({carousels_total/total_content*100:.1f}%)\n\n"
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
            report += f"üë• –î–ï–¢–ê–õ–ò –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú:\n"
            for i, acc in enumerate(account_details, 1):
                report += f"{i:2d}. @{acc['username']} - {acc['followers']:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, {acc['likes']:,} –ª–∞–π–∫–æ–≤\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–æ–¥–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}"

def analyze_top_posts_all_accounts(account_ids: List[int], usernames: List[str]) -> str:
    """–õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üèÜ –õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üèÜ –õ–£–ß–®–ò–ï –ü–û–°–¢–´ –í–°–ï–• –ê–ö–ö–ê–£–ù–¢–û–í\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        all_posts = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç—ã –æ—Ç –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for username in usernames:
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                for media in medias:
                    all_posts.append({
                        'username': username,
                        'media': media,
                        'score': media.like_count + media.comment_count * 3  # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ {username}: {e}")
        
        if all_posts:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            top_posts = sorted(all_posts, key=lambda x: x['score'], reverse=True)[:20]
            
            report += f"üèÜ –¢–û–ü-{len(top_posts)} –ü–û–°–¢–û–í –ü–û –í–°–ï–ú –ê–ö–ö–ê–£–ù–¢–ê–ú:\n\n"
            
            for i, post_data in enumerate(top_posts, 1):
                media = post_data['media']
                username = post_data['username']
                
                media_type_names = {1: '–§–æ—Ç–æ', 2: '–í–∏–¥–µ–æ', 8: '–ö–∞—Ä—É—Å–µ–ª—å'}
                media_type_name = media_type_names.get(media.media_type, f'–¢–∏–ø {media.media_type}')
                
                report += f"üèÜ –ú–ï–°–¢–û #{i}\n"
                report += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{username}\n"
                report += f"üîó URL: https://www.instagram.com/p/{media.code}/\n"
                report += f"üìÖ –î–∞—Ç–∞: {media.taken_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                report += f"üìù –¢–∏–ø: {media_type_name}\n"
                report += f"‚ù§Ô∏è –õ–∞–π–∫–∏: {media.like_count:,}\n"
                report += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {media.comment_count:,}\n"
                report += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {post_data['score']:,}\n"
                
                if media.caption_text:
                    caption_preview = media.caption_text[:100] + "..." if len(media.caption_text) > 100 else media.caption_text
                    report += f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {caption_preview}\n"
                
                report += "-" * 40 + "\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª—É—á—à–∏—Ö –ø–æ—Å—Ç–æ–≤: {str(e)}"

def analyze_detailed_all_accounts(account_ids: List[int], usernames: List[str]) -> str:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º\n\n{error}"
        
        report = f"üìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú –ê–ö–ö–ê–£–ù–¢–ê–ú\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        for i, username in enumerate(usernames, 1):
            try:
                report += f"üë§ –ê–ö–ö–ê–£–ù–¢ #{i}: @{username}\n"
                report += "‚îÄ" * 50 + "\n"
                
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=30)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
                report += f"üìõ –ò–º—è: {user_info.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                report += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_info.follower_count:,}\n"
                report += f"üë§ –ü–æ–¥–ø–∏—Å–∫–∏: {user_info.following_count:,}\n"
                report += f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {user_info.media_count:,}\n"
                report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(medias) if medias else 0} –ø–æ—Å—Ç–æ–≤\n\n"
                
                if medias:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    report += f"üìä –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
                    report += f"  üì∑ –§–æ—Ç–æ: {photos} ({photos/len(medias)*100:.1f}%)\n"
                    report += f"  üé• –í–∏–¥–µ–æ: {videos} ({videos/len(medias)*100:.1f}%)\n"
                    report += f"  üé† –ö–∞—Ä—É—Å–µ–ª–∏: {carousels} ({carousels/len(medias)*100:.1f}%)\n\n"
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
                    total_likes = sum(m.like_count for m in medias)
                    total_comments = sum(m.comment_count for m in medias)
                    avg_likes = total_likes // len(medias)
                    avg_comments = total_comments // len(medias)
                    
                    report += f"üìà –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:\n"
                    report += f"  ‚ù§Ô∏è –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {total_likes:,}\n"
                    report += f"  üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments:,}\n"
                    report += f"  ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {avg_likes:,}\n"
                    report += f"  üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {avg_comments:,}\n"
                    
                    if user_info.follower_count > 0:
                        engagement_rate = (avg_likes + avg_comments) / user_info.follower_count * 100
                        report += f"  üìä Engagement Rate: {engagement_rate:.2f}%\n"
                    
                    # –õ—É—á—à–∏–π –ø–æ—Å—Ç
                    best_post = max(medias, key=lambda x: x.like_count + x.comment_count * 3)
                    report += f"\nüèÜ –õ—É—á—à–∏–π –ø–æ—Å—Ç:\n"
                    report += f"  üîó https://www.instagram.com/p/{best_post.code}/\n"
                    report += f"  ‚ù§Ô∏è {best_post.like_count:,} –ª–∞–π–∫–æ–≤, üí¨ {best_post.comment_count:,} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
                    
                else:
                    report += "‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç\n"
                
                report += "\n" + "=" * 60 + "\n\n"
                
            except Exception as e:
                report += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ @{username}: {str(e)}\n\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"

def start_general_analytics(update: Update, context: CallbackContext):
    """–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    query = update.callback_query
    query.answer()
    
    try:
        from database.db_manager import get_publish_tasks
        from database.models import TaskStatus, TaskType
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        accounts = get_instagram_accounts()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        week_ago = datetime.now() - timedelta(days=7)
        
        report = f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += "=" * 50 + "\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        active_accounts = [acc for acc in accounts if acc.is_active]
        report += f"üë• –ê–ö–ö–ê–£–ù–¢–´:\n"
        report += f"üìä –í—Å–µ–≥–æ: {len(accounts)}\n"
        report += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_accounts)}\n"
        report += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(accounts) - len(active_accounts)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–ø–æ–∫
        from database.db_manager import get_account_groups
        groups = get_account_groups()
        report += f"üìÅ –ü–ê–ü–ö–ò:\n"
        report += f"üìä –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {len(groups)}\n"
        for group in groups:
            from database.db_manager import get_accounts_in_group
            group_accounts = get_accounts_in_group(group.id)
            report += f"   üìÅ {group.name}: {len(group_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        report += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏
        from database.db_manager import get_proxies
        proxies = get_proxies()
        active_proxies = [p for p in proxies if p.is_active]
        report += f"üåê –ü–†–û–ö–°–ò:\n"
        report += f"üìä –í—Å–µ–≥–æ: {len(proxies)}\n"
        report += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_proxies)}\n"
        report += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(proxies) - len(active_proxies)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        import psutil
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        
        report += f"üñ•Ô∏è –°–ò–°–¢–ï–ú–ê:\n"
        report += f"‚ö° CPU: {cpu_percent:.1f}%\n"
        report += f"üíæ RAM: {memory.percent:.1f}% ({memory.used // 1024**3:.1f}GB / {memory.total // 1024**3:.1f}GB)\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        disk = psutil.disk_usage('/')
        report += f"üíΩ –î–∏—Å–∫: {disk.percent:.1f}% ({disk.used // 1024**3:.1f}GB / {disk.total // 1024**3:.1f}GB)\n\n"
        
        report += f"üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        if len(active_accounts) == 0:
            report += "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n"
        elif len(active_accounts) < 5:
            report += "üí° –ú–∞–ª–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
        
        if len(active_proxies) == 0:
            report += "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ - –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏\n"
        elif len(active_proxies) < len(active_accounts):
            report += "üí° –ü—Ä–æ–∫—Å–∏ –º–µ–Ω—å—à–µ —á–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1:1\n"
        
        if memory.percent > 80:
            report += "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM\n"
        
        if disk.percent > 90:
            report += "‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ\n"
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"general_statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            f.write(report)
            temp_file_path = f.name
        
        with open(temp_file_path, 'rb') as f:
            query.message.reply_document(
                document=f,
                filename=filename,
                caption="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
            )
        
        os.unlink(temp_file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from telegram_bot.keyboards import get_statistics_menu_keyboard
        query.edit_message_text(
            "‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∞–π–ª–æ–º",
            reply_markup=get_statistics_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {e}")
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="analytics_menu")]
            ])
        ) 
def analyze_accounts_comparison(account_ids: List[int], usernames: List[str]) -> str:
    """–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        accounts_data = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        for i, username in enumerate(usernames):
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                if medias:
                    total_likes = sum(m.like_count for m in medias)
                    total_comments = sum(m.comment_count for m in medias)
                    avg_likes = total_likes // len(medias)
                    avg_comments = total_comments // len(medias)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    accounts_data.append({
                        'username': username,
                        'followers': user_info.follower_count,
                        'following': user_info.following_count,
                        'posts_count': user_info.media_count,
                        'analyzed_posts': len(medias),
                        'total_likes': total_likes,
                        'total_comments': total_comments,
                        'avg_likes': avg_likes,
                        'avg_comments': avg_comments,
                        'photos': photos,
                        'videos': videos,
                        'carousels': carousels,
                        'engagement_rate': (avg_likes + avg_comments) / user_info.follower_count * 100 if user_info.follower_count > 0 else 0
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {username}: {e}")
                accounts_data.append({
                    'username': username,
                    'error': str(e)
                })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        if accounts_data:
            report += "üìä –°–†–ê–í–ù–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–û–í:\n\n"
            
            for i, data in enumerate(accounts_data, 1):
                if 'error' in data:
                    report += f"{i:2d}. @{data['username']} - ‚ùå –û—à–∏–±–∫–∞: {data['error']}\n"
                    continue
                
                report += f"{i:2d}. @{data['username']}\n"
                report += f"    üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {data['followers']:,}\n"
                report += f"    üìù –ü–æ—Å—Ç–æ–≤: {data['posts_count']:,}\n"
                report += f"    ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {data['avg_likes']:,}\n"
                report += f"    üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['avg_comments']:,}\n"
                report += f"    üìä ER: {data['engagement_rate']:.2f}%\n"
                report += f"    üì∑ –§–æ—Ç–æ: {data['photos']} | üé• –í–∏–¥–µ–æ: {data['videos']} | üé† –ö–∞—Ä—É—Å–µ–ª–∏: {data['carousels']}\n\n"
            
            # –†–µ–π—Ç–∏–Ω–≥–∏
            valid_accounts = [d for d in accounts_data if 'error' not in d]
            if len(valid_accounts) > 1:
                report += "üèÜ –†–ï–ô–¢–ò–ù–ì–ò:\n\n"
                
                # –¢–æ–ø –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                top_followers = sorted(valid_accounts, key=lambda x: x['followers'], reverse=True)
                report += "üë• –¢–æ–ø –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:\n"
                for i, acc in enumerate(top_followers[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['followers']:,}\n"
                report += "\n"
                
                # –¢–æ–ø –ø–æ engagement rate
                top_er = sorted(valid_accounts, key=lambda x: x['engagement_rate'], reverse=True)
                report += "üìä –¢–æ–ø –ø–æ Engagement Rate:\n"
                for i, acc in enumerate(top_er[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['engagement_rate']:.2f}%\n"
                report += "\n"
                
                # –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–∏–º –ª–∞–π–∫–∞–º
                top_likes = sorted(valid_accounts, key=lambda x: x['avg_likes'], reverse=True)
                report += "‚ù§Ô∏è –¢–æ–ø –ø–æ —Å—Ä–µ–¥–Ω–∏–º –ª–∞–π–∫–∞–º:\n"
                for i, acc in enumerate(top_likes[:5], 1):
                    report += f"  {i}. @{acc['username']} - {acc['avg_likes']:,}\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}"

def analyze_accounts_summary(account_ids: List[int], usernames: List[str]) -> str:
    """–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üìà –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        total_followers = 0
        total_posts = 0
        total_likes = 0
        total_comments = 0
        total_analyzed_posts = 0
        valid_accounts = 0
        
        photos_total = 0
        videos_total = 0
        carousels_total = 0
        
        account_details = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for username in usernames:
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                if medias:
                    account_likes = sum(m.like_count for m in medias)
                    account_comments = sum(m.comment_count for m in medias)
                    
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    total_followers += user_info.follower_count
                    total_posts += user_info.media_count
                    total_likes += account_likes
                    total_comments += account_comments
                    total_analyzed_posts += len(medias)
                    valid_accounts += 1
                    
                    photos_total += photos
                    videos_total += videos
                    carousels_total += carousels
                    
                    account_details.append({
                        'username': username,
                        'followers': user_info.follower_count,
                        'posts': user_info.media_count,
                        'likes': account_likes,
                        'comments': account_comments
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {username}: {e}")
        
        if valid_accounts > 0:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            report += f"üìä –û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
            report += f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {valid_accounts} –∏–∑ {len(usernames)}\n"
            report += f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {total_followers:,}\n"
            report += f"üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {total_posts:,}\n"
            report += f"‚ù§Ô∏è –û–±—â–∏–µ –ª–∞–π–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã): {total_likes:,}\n"
            report += f"üí¨ –û–±—â–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã): {total_comments:,}\n"
            report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_analyzed_posts}\n\n"
            
            # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            avg_followers = total_followers // valid_accounts
            avg_posts = total_posts // valid_accounts
            avg_likes_per_account = total_likes // valid_accounts
            avg_comments_per_account = total_comments // valid_accounts
            
            report += f"üìà –°–†–ï–î–ù–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –ù–ê –ê–ö–ö–ê–£–ù–¢:\n"
            report += f"üë• –°—Ä–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {avg_followers:,}\n"
            report += f"üìù –°—Ä–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã: {avg_posts:,}\n"
            report += f"‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {avg_likes_per_account:,}\n"
            report += f"üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {avg_comments_per_account:,}\n\n"
            
            # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            total_content = photos_total + videos_total + carousels_total
            if total_content > 0:
                report += f"üìä –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ù–¢–ê:\n"
                report += f"üì∑ –§–æ—Ç–æ: {photos_total} ({photos_total/total_content*100:.1f}%)\n"
                report += f"üé• –í–∏–¥–µ–æ: {videos_total} ({videos_total/total_content*100:.1f}%)\n"
                report += f"üé† –ö–∞—Ä—É—Å–µ–ª–∏: {carousels_total} ({carousels_total/total_content*100:.1f}%)\n\n"
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
            report += f"üë• –î–ï–¢–ê–õ–ò –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú:\n"
            for i, acc in enumerate(account_details, 1):
                report += f"{i:2d}. @{acc['username']} - {acc['followers']:,} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, {acc['likes']:,} –ª–∞–π–∫–æ–≤\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤–æ–¥–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}"

def analyze_top_posts_all_accounts(account_ids: List[int], usernames: List[str]) -> str:
    """–õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üèÜ –õ—É—á—à–∏–µ –ø–æ—Å—Ç—ã –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n{error}"
        
        report = f"üèÜ –õ–£–ß–®–ò–ï –ü–û–°–¢–´ –í–°–ï–• –ê–ö–ö–ê–£–ù–¢–û–í\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        all_posts = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç—ã –æ—Ç –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for username in usernames:
            try:
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=20)
                
                for media in medias:
                    all_posts.append({
                        'username': username,
                        'media': media,
                        'score': media.like_count + media.comment_count * 3  # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
                    })
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ {username}: {e}")
        
        if all_posts:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            top_posts = sorted(all_posts, key=lambda x: x['score'], reverse=True)[:20]
            
            report += f"üèÜ –¢–û–ü-{len(top_posts)} –ü–û–°–¢–û–í –ü–û –í–°–ï–ú –ê–ö–ö–ê–£–ù–¢–ê–ú:\n\n"
            
            for i, post_data in enumerate(top_posts, 1):
                media = post_data['media']
                username = post_data['username']
                
                media_type_names = {1: '–§–æ—Ç–æ', 2: '–í–∏–¥–µ–æ', 8: '–ö–∞—Ä—É—Å–µ–ª—å'}
                media_type_name = media_type_names.get(media.media_type, f'–¢–∏–ø {media.media_type}')
                
                report += f"üèÜ –ú–ï–°–¢–û #{i}\n"
                report += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{username}\n"
                report += f"üîó URL: https://www.instagram.com/p/{media.code}/\n"
                report += f"üìÖ –î–∞—Ç–∞: {media.taken_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
                report += f"üìù –¢–∏–ø: {media_type_name}\n"
                report += f"‚ù§Ô∏è –õ–∞–π–∫–∏: {media.like_count:,}\n"
                report += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {media.comment_count:,}\n"
                report += f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {post_data['score']:,}\n"
                
                if media.caption_text:
                    caption_preview = media.caption_text[:100] + "..." if len(media.caption_text) > 100 else media.caption_text
                    report += f"üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: {caption_preview}\n"
                
                report += "-" * 40 + "\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª—É—á—à–∏—Ö –ø–æ—Å—Ç–æ–≤: {str(e)}"

def analyze_detailed_all_accounts(account_ids: List[int], usernames: List[str]) -> str:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
    try:
        client, error = get_authorized_client()
        if not client:
            return f"üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º\n\n{error}"
        
        report = f"üìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú –ê–ö–ö–ê–£–ù–¢–ê–ú\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
        report += "=" * 60 + "\n\n"
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        for i, username in enumerate(usernames, 1):
            try:
                report += f"üë§ –ê–ö–ö–ê–£–ù–¢ #{i}: @{username}\n"
                report += "‚îÄ" * 50 + "\n"
                
                user_info = client.user_info_by_username(username)
                medias = client.user_medias(user_info.pk, amount=30)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ
                report += f"üìõ –ò–º—è: {user_info.full_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                report += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {user_info.follower_count:,}\n"
                report += f"üë§ –ü–æ–¥–ø–∏—Å–∫–∏: {user_info.following_count:,}\n"
                report += f"üìù –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {user_info.media_count:,}\n"
                report += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(medias) if medias else 0} –ø–æ—Å—Ç–æ–≤\n\n"
                
                if medias:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    photos = sum(1 for m in medias if m.media_type == 1)
                    videos = sum(1 for m in medias if m.media_type == 2)
                    carousels = sum(1 for m in medias if m.media_type == 8)
                    
                    report += f"üìä –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
                    report += f"  üì∑ –§–æ—Ç–æ: {photos} ({photos/len(medias)*100:.1f}%)\n"
                    report += f"  üé• –í–∏–¥–µ–æ: {videos} ({videos/len(medias)*100:.1f}%)\n"
                    report += f"  üé† –ö–∞—Ä—É—Å–µ–ª–∏: {carousels} ({carousels/len(medias)*100:.1f}%)\n\n"
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
                    total_likes = sum(m.like_count for m in medias)
                    total_comments = sum(m.comment_count for m in medias)
                    avg_likes = total_likes // len(medias)
                    avg_comments = total_comments // len(medias)
                    
                    report += f"üìà –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:\n"
                    report += f"  ‚ù§Ô∏è –í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {total_likes:,}\n"
                    report += f"  üí¨ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {total_comments:,}\n"
                    report += f"  ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏: {avg_likes:,}\n"
                    report += f"  üí¨ –°—Ä–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {avg_comments:,}\n"
                    
                    if user_info.follower_count > 0:
                        engagement_rate = (avg_likes + avg_comments) / user_info.follower_count * 100
                        report += f"  üìä Engagement Rate: {engagement_rate:.2f}%\n"
                    
                    # –õ—É—á—à–∏–π –ø–æ—Å—Ç
                    best_post = max(medias, key=lambda x: x.like_count + x.comment_count * 3)
                    report += f"\nüèÜ –õ—É—á—à–∏–π –ø–æ—Å—Ç:\n"
                    report += f"  üîó https://www.instagram.com/p/{best_post.code}/\n"
                    report += f"  ‚ù§Ô∏è {best_post.like_count:,} –ª–∞–π–∫–æ–≤, üí¨ {best_post.comment_count:,} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
                    
                else:
                    report += "‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫—Ä—ã—Ç\n"
                
                report += "\n" + "=" * 60 + "\n\n"
                
            except Exception as e:
                report += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ @{username}: {str(e)}\n\n"
        
        return report
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {str(e)}"

def start_general_analytics(update: Update, context: CallbackContext):
    """–û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    query = update.callback_query
    query.answer()
    
    try:
        from database.db_manager import get_publish_tasks
        from database.models import TaskStatus, TaskType
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        accounts = get_instagram_accounts()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        week_ago = datetime.now() - timedelta(days=7)
        
        report = f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´\n"
        report += f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += "=" * 50 + "\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        active_accounts = [acc for acc in accounts if acc.is_active]
        report += f"üë• –ê–ö–ö–ê–£–ù–¢–´:\n"
        report += f"üìä –í—Å–µ–≥–æ: {len(accounts)}\n"
        report += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_accounts)}\n"
        report += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(accounts) - len(active_accounts)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–ø–æ–∫
        from database.db_manager import get_account_groups
        groups = get_account_groups()
        report += f"üìÅ –ü–ê–ü–ö–ò:\n"
        report += f"üìä –í—Å–µ–≥–æ –ø–∞–ø–æ–∫: {len(groups)}\n"
        for group in groups:
            from database.db_manager import get_accounts_in_group
            group_accounts = get_accounts_in_group(group.id)
            report += f"   üìÅ {group.name}: {len(group_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        report += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫—Å–∏
        from database.db_manager import get_proxies
        proxies = get_proxies()
        active_proxies = [p for p in proxies if p.is_active]
        report += f"üåê –ü–†–û–ö–°–ò:\n"
        report += f"üìä –í—Å–µ–≥–æ: {len(proxies)}\n"
        report += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_proxies)}\n"
        report += f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(proxies) - len(active_proxies)}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        import psutil
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        
        report += f"üñ•Ô∏è –°–ò–°–¢–ï–ú–ê:\n"
        report += f"‚ö° CPU: {cpu_percent:.1f}%\n"
        report += f"üíæ RAM: {memory.percent:.1f}% ({memory.used // 1024**3:.1f}GB / {memory.total // 1024**3:.1f}GB)\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
        disk = psutil.disk_usage('/')
        report += f"üíΩ –î–∏—Å–∫: {disk.percent:.1f}% ({disk.used // 1024**3:.1f}GB / {disk.total // 1024**3:.1f}GB)\n\n"
        
        report += f"üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        if len(active_accounts) == 0:
            report += "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã\n"
        elif len(active_accounts) < 5:
            report += "üí° –ú–∞–ª–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
        
        if len(active_proxies) == 0:
            report += "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ - –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏\n"
        elif len(active_proxies) < len(active_accounts):
            report += "üí° –ü—Ä–æ–∫—Å–∏ –º–µ–Ω—å—à–µ —á–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1:1\n"
        
        if memory.percent > 80:
            report += "‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM\n"
        
        if disk.percent > 90:
            report += "‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ\n"
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"general_statistics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            f.write(report)
            temp_file_path = f.name
        
        with open(temp_file_path, 'rb') as f:
            query.message.reply_document(
                document=f,
                filename=filename,
                caption="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
            )
        
        os.unlink(temp_file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from telegram_bot.keyboards import get_statistics_menu_keyboard
        query.edit_message_text(
            "‚úÖ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∞–π–ª–æ–º",
            reply_markup=get_statistics_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {e}")
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="analytics_menu")]
            ])
        ) 