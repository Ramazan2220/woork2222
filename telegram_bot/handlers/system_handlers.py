#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã
"""

import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import CommandHandler, CallbackQueryHandler
from config import ADMIN_USER_IDS
from utils.system_monitor import (
    get_system_status, get_adaptive_limits, get_system_load_percentage,
    set_hardware_profile, system_monitor
)

logger = logging.getLogger(__name__)

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_USER_IDS

def system_status_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /system_status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    if update.callback_query:
        query = update.callback_query
        query.answer()
        
        status = get_system_status()
        load_percentage = get_system_load_percentage()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report = f"üñ•Ô∏è *–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´*\n\n"
        report += f"üìä *–ù–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã:* {load_percentage}% ({status['level'].name})\n"
        report += f"üîß *–ü—Ä–æ—Ñ–∏–ª—å –∂–µ–ª–µ–∑–∞:* {status['hardware_profile'].upper()}\n\n"
        
        report += f"üìà *–ú–µ—Ç—Ä–∏–∫–∏:*\n"
        report += f"‚Ä¢ CPU: {status['metrics']['cpu']}\n"
        report += f"‚Ä¢ RAM: {status['metrics']['memory']}\n"
        report += f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {status['metrics']['temperature']}\n"
        report += f"‚Ä¢ Load Average: {status['metrics']['load_avg']}\n\n"
        
        report += f"‚öôÔ∏è *–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –±–æ—Ç–∞:*\n"
        report += f"‚Ä¢ –ü–æ—Ç–æ–∫–æ–≤: {status['limits']['max_workers']}\n"
        report += f"‚Ä¢ –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã: {status['limits']['batch_size']}\n"
        report += f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {status['limits']['delay_between_batches']}\n"
        report += f"‚Ä¢ –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ç–∞–π–º–∞—É—Ç–∞: {status['limits']['timeout_multiplier']}\n\n"
        
        report += f"üí° *–û–ø–∏—Å–∞–Ω–∏–µ:* {status['level'].workload.description}"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='system_status'),
             InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='system_settings')],
            [InlineKeyboardButton("üìä –í—Å–µ —É—Ä–æ–≤–Ω–∏", callback_data='system_levels'),
             InlineKeyboardButton("üñ•Ô∏è –ü—Ä–æ—Ñ–∏–ª–∏", callback_data='system_profiles')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            report,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –ö–æ–º–∞–Ω–¥–∞ –∏–∑ —á–∞—Ç–∞
        status = get_system_status()
        load_percentage = get_system_load_percentage()
        
        report = f"üñ•Ô∏è *–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´*\n\n"
        report += f"üìä –ù–∞–≥—Ä—É–∑–∫–∞: {load_percentage}% ({status['level'].name})\n"
        report += f"üîß –ü—Ä–æ—Ñ–∏–ª—å: {status['hardware_profile'].upper()}\n"
        report += f"üíª CPU: {status['metrics']['cpu']} | RAM: {status['metrics']['memory']}\n"
        report += f"‚öôÔ∏è –ü–æ—Ç–æ–∫–æ–≤: {status['limits']['max_workers']} | –ì—Ä—É–ø–ø–∞: {status['limits']['batch_size']}"
        
        update.message.reply_text(report, parse_mode=ParseMode.MARKDOWN)

def system_levels_handler(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    query = update.callback_query
    query.answer()
    
    report = f"üìä *–£–†–û–í–ù–ò –ù–ê–ì–†–£–ó–ö–ò –°–ò–°–¢–ï–ú–´*\n\n"
    
    current_load = get_system_load_percentage()
    current_level = system_monitor.get_load_level()
    
    for i, level in enumerate(system_monitor.load_levels, 1):
        # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        marker = "üî∏" if level.name == current_level.name else "‚ñ´Ô∏è"
        
        report += f"{marker} *{level.name}* ({level.min_load}-{level.max_load}%)\n"
        report += f"   {level.workload.description}\n"
        report += f"   –ü–æ—Ç–æ–∫–æ–≤: {level.workload.max_workers}, "
        report += f"–ì—Ä—É–ø–ø–∞: {level.workload.batch_size}, "
        report += f"–ó–∞–¥–µ—Ä–∂–∫–∞: {level.workload.delay_between_batches}—Å\n\n"
    
    report += f"üìç *–¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:* {current_load}% ({current_level.name})"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='system_levels')],
        [InlineKeyboardButton("üîô –ö —Å—Ç–∞—Ç—É—Å—É", callback_data='system_status')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        report,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

def system_profiles_handler(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –∂–µ–ª–µ–∑–∞"""
    query = update.callback_query
    query.answer()
    
    current_profile = system_monitor.hardware_profile
    
    report = f"üñ•Ô∏è *–ü–†–û–§–ò–õ–ò –ñ–ï–õ–ï–ó–ê*\n\n"
    
    for profile_name, profile_data in system_monitor.hardware_profiles.items():
        # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        marker = "üî∏" if profile_name == current_profile else "‚ñ´Ô∏è"
        
        report += f"{marker} *{profile_name.upper()}*\n"
        report += f"   CPU –≤–µ—Å: {profile_data['cpu_weight']:.1f} | "
        report += f"RAM –≤–µ—Å: {profile_data['memory_weight']:.1f}\n"
        report += f"   –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–µ—Å: {profile_data['temp_weight']:.1f} | "
        report += f"Load –≤–µ—Å: {profile_data['load_weight']:.1f}\n"
        report += f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {profile_data['temp_critical']}¬∞C\n\n"
    
    report += f"üìç *–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:* {current_profile.upper()}"
    
    keyboard = [
        [InlineKeyboardButton("üì± MacBook", callback_data='set_profile_macbook'),
         InlineKeyboardButton("üñ•Ô∏è Server", callback_data='set_profile_server')],
        [InlineKeyboardButton("‚òÅÔ∏è VPS", callback_data='set_profile_vps')],
        [InlineKeyboardButton("üîô –ö —Å—Ç–∞—Ç—É—Å—É", callback_data='system_status')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        report,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

def set_hardware_profile_handler(update, context):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∂–µ–ª–µ–∑–∞"""
    query = update.callback_query
    query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ callback_data
    profile = query.data.replace('set_profile_', '')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    set_hardware_profile(profile)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    status = get_system_status()
    load_percentage = get_system_load_percentage()
    
    report = f"‚úÖ *–ü—Ä–æ—Ñ–∏–ª—å –∂–µ–ª–µ–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:* {profile.upper()}\n\n"
    report += f"üìä *–ù–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞:* {load_percentage}% ({status['level'].name})\n"
    report += f"‚öôÔ∏è *–ù–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã:*\n"
    report += f"‚Ä¢ –ü–æ—Ç–æ–∫–æ–≤: {status['limits']['max_workers']}\n"
    report += f"‚Ä¢ –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã: {status['limits']['batch_size']}\n"
    report += f"‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞: {status['limits']['delay_between_batches']}\n\n"
    report += f"üí° {status['level'].workload.description}"
    
    keyboard = [
        [InlineKeyboardButton("üñ•Ô∏è –ü—Ä–æ—Ñ–∏–ª–∏", callback_data='system_profiles')],
        [InlineKeyboardButton("üîô –ö —Å—Ç–∞—Ç—É—Å—É", callback_data='system_status')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(
        report,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

def get_system_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return [
        CommandHandler("system_status", system_status_handler),
        CallbackQueryHandler(system_levels_handler, pattern='^system_levels$'),
        CallbackQueryHandler(system_profiles_handler, pattern='^system_profiles$'),
        CallbackQueryHandler(set_hardware_profile_handler, pattern='^set_profile_'),
    ] 