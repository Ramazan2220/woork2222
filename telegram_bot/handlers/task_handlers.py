import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import ConversationHandler

from database.db_manager import get_publish_task, update_publish_task_status
from database.models import TaskStatus

logger = logging.getLogger(__name__)

def tasks_handler(update, context):
    keyboard = [
        [
            InlineKeyboardButton("üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data='publish_now'),
            InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data='schedule_publish')
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data='publication_stats'),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "üìù *–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

def schedule_publish_handler(update, context):
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu_tasks')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text(
        "–§—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def handle_task_error(update, context, task_id, error_message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á"""
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
    task = get_publish_task(task_id)
    if not task:
        await update.message.reply_text(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –ø—Ä–æ–∫—Å–∏ –∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏
    from utils.proxy_manager import auto_replace_failed_proxy
    success, message = auto_replace_failed_proxy(task.account_id, error_message)

    if success:
        # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"retry_task_{task_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {error_message}\n\n"
            f"‚úÖ {message}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–¥–∞—á—É —Å –Ω–æ–≤—ã–º –ø—Ä–æ–∫—Å–∏?",
            reply_markup=reply_markup
        )
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –∑–∞–º–µ–Ω–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–æ–∫—Å–∏
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {error_message}\n\n"
            f"{message if '–û—à–∏–±–∫–∞' not in message else ''}",
            reply_markup=reply_markup
        )

async def retry_task_callback(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞ –∑–∞–¥–∞—á–∏"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = int(query.data.split('_')[-1])

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
    task = get_publish_task(task_id)
    if not task:
        await query.edit_message_text(
            "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=None
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ PENDING
    update_publish_task_status(task_id, TaskStatus.PENDING)

    await query.edit_message_text(
        f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.",
        reply_markup=None
    )

def get_task_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
    from telegram.ext import CommandHandler, CallbackQueryHandler

    return [
        CommandHandler("tasks", tasks_handler),
        CommandHandler("schedule_publish", schedule_publish_handler),
        CallbackQueryHandler(retry_task_callback, pattern=r'^retry_task_\d+$')
    ]