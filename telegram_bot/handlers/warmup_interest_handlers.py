#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
"""

import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackContext, ConversationHandler, CallbackQueryHandler, 
    MessageHandler, Filters
)
from database.db_manager import get_instagram_accounts
from utils.interest_based_warmup import InterestCategory

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ωversation handler
INTEREST_SETUP, CUSTOM_HASHTAGS, CUSTOM_ACCOUNTS = range(3)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_interest_settings = {}


def show_interest_warmup_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
    query = update.callback_query
    query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="setup_interests")],
        [InlineKeyboardButton("üìä –®–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤", callback_data="interest_templates")],
        [InlineKeyboardButton("‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="current_interest_settings")],
        [InlineKeyboardButton("üöÄ –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º", callback_data="test_interest_warmup")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥—Ä–µ–≤—É", callback_data="warmup_menu")]
    ]
    
    text = (
        "üéØ –ü–†–û–ì–†–ï–í –ü–û –ò–ù–¢–ï–†–ï–°–ê–ú\n\n"
        "–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞, –∫–æ—Ç–æ—Ä–∞—è:\n"
        "‚Ä¢ üîç –ò–∑—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
        "‚Ä¢ üë• –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π\n"
        "‚Ä¢ üéØ –§–æ—Ä–º–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ üìà –£–ª—É—á—à–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –æ—Ö–≤–∞—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)


def show_interest_templates(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    templates = {
        'fitness': {
            'name': 'üí™ –§–∏—Ç–Ω–µ—Å –∏ —Å–ø–æ—Ä—Ç',
            'description': '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
            'interests': ['fitness', 'health']
        },
        'food': {
            'name': 'üçï –ï–¥–∞ –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è',
            'description': '–†–µ—Ü–µ–ø—Ç—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
            'interests': ['food']
        },
        'travel': {
            'name': '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            'description': '–¢—É—Ä–∏–∑–º, –ø—Ä–∏—Ä–æ–¥–∞, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
            'interests': ['travel', 'photography']
        },
        'business': {
            'name': 'üíº –ë–∏–∑–Ω–µ—Å',
            'description': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Ñ–∏–Ω–∞–Ω—Å—ã',
            'interests': ['business', 'finance']
        },
        'technology': {
            'name': 'üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            'description': 'IT, –≥–∞–¥–∂–µ—Ç—ã, –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏',
            'interests': ['technology']
        },
        'lifestyle': {
            'name': 'üåü –õ–∞–π—Ñ—Å—Ç–∞–π–ª',
            'description': '–ú–æ–¥–∞, –∫—Ä–∞—Å–æ—Ç–∞, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
            'interests': ['lifestyle', 'fashion', 'beauty']
        }
    }
    
    keyboard = []
    for template_key, template_data in templates.items():
        keyboard.append([InlineKeyboardButton(
            template_data['name'], 
            callback_data=f"select_template_{template_key}"
        )])
    
    keyboard.append([InlineKeyboardButton("üõ† –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="manual_interests")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="interest_warmup_menu")])
    
    text = (
        "üìä –®–ê–ë–õ–û–ù–´ –ò–ù–¢–ï–†–ï–°–û–í\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é:\n\n"
    )
    
    for template_data in templates.values():
        text += f"{template_data['name']}\n{template_data['description']}\n\n"
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)


def select_interest_template(update: Update, context: CallbackContext) -> None:
    """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    template_name = query.data.replace('select_template_', '')
    user_id = query.from_user.id
    
    # –®–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    templates = {
        'fitness': {
            'primary_interests': ['fitness'],
            'secondary_interests': ['health', 'motivation'],
            'custom_hashtags': ['gym', 'workout', 'training', 'bodybuilding'],
            'custom_accounts': ['therock', 'nike', 'underarmour']
        },
        'food': {
            'primary_interests': ['food'],
            'secondary_interests': ['lifestyle'],
            'custom_hashtags': ['recipe', 'cooking', 'chef', 'delicious'],
            'custom_accounts': ['gordongram', 'jamieoliver', 'buzzfeedtasty']
        },
        'travel': {
            'primary_interests': ['travel'],
            'secondary_interests': ['photography', 'lifestyle'],
            'custom_hashtags': ['wanderlust', 'adventure', 'explore', 'nature'],
            'custom_accounts': ['natgeo', 'beautifuldestinations', 'lonelyplanet']
        },
        'business': {
            'primary_interests': ['business'],
            'secondary_interests': ['finance', 'motivation'],
            'custom_hashtags': ['entrepreneur', 'startup', 'success', 'leadership'],
            'custom_accounts': ['garyvee', 'forbes', 'entrepreneur']
        },
        'technology': {
            'primary_interests': ['technology'],
            'secondary_interests': ['business'],
            'custom_hashtags': ['innovation', 'ai', 'startup', 'coding'],
            'custom_accounts': ['elonmusk', 'apple', 'techcrunch']
        },
        'lifestyle': {
            'primary_interests': ['lifestyle'],
            'secondary_interests': ['fashion', 'beauty'],
            'custom_hashtags': ['style', 'trend', 'inspiration', 'mood'],
            'custom_accounts': ['voguemagazine', 'harpersbazaar']
        }
    }
    
    if template_name in templates:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞
        user_interest_settings[user_id] = templates[template_name].copy()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        settings = user_interest_settings[user_id]
        
        text = (
            f"‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {template_name.upper()}\n\n"
            f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(settings['primary_interests'])}\n"
            f"üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {', '.join(settings['secondary_interests'])}\n"
            f"üè∑ –•–µ—à—Ç–µ–≥–∏: {', '.join(settings['custom_hashtags'][:5])}{'...' if len(settings['custom_hashtags']) > 5 else ''}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join(settings['custom_accounts'])}\n\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_interest_settings")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_interest_settings")],
            [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data="interest_templates")]
        ]
        
        query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)


def show_manual_interests_setup(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    all_interests = [category.value for category in InterestCategory]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    keyboard = []
    for i in range(0, len(all_interests), 2):
        row = []
        for j in range(i, min(i + 2, len(all_interests))):
            interest = all_interests[j]
            row.append(InlineKeyboardButton(
                f"üî∏ {interest.replace('_', ' ').title()}", 
                callback_data=f"toggle_interest_{interest}"
            ))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚úÖ –î–∞–ª–µ–µ", callback_data="interests_next_step")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="interest_templates")])
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = query.from_user.id
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {
            'primary_interests': [],
            'secondary_interests': [],
            'custom_hashtags': [],
            'custom_accounts': []
        }
    
    text = (
        "üõ† –†–£–ß–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–ï–°–û–í\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ 2-3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞:\n\n"
        "–í—ã–±—Ä–∞–Ω–æ: –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ\n\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞/—Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞:"
    )
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    return INTEREST_SETUP


def toggle_interest_selection(update: Update, context: CallbackContext) -> int:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–∞"""
    query = update.callback_query
    query.answer()
    
    interest = query.data.replace('toggle_interest_', '')
    user_id = query.from_user.id
    
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {
            'primary_interests': [],
            'secondary_interests': [],
            'custom_hashtags': [],
            'custom_accounts': []
        }
    
    settings = user_interest_settings[user_id]
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å
    if interest in settings['primary_interests']:
        settings['primary_interests'].remove(interest)
    elif interest in settings['secondary_interests']:
        settings['secondary_interests'].remove(interest)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ–Ω—å—à–µ 3
        if len(settings['primary_interests']) < 3:
            settings['primary_interests'].append(interest)
        else:
            # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π
            if len(settings['secondary_interests']) < 5:
                settings['secondary_interests'].append(interest)
            else:
                query.answer("–ú–∞–∫—Å–∏–º—É–º 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤!", show_alert=True)
                return INTEREST_SETUP
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    all_interests = [category.value for category in InterestCategory]
    keyboard = []
    
    for i in range(0, len(all_interests), 2):
        row = []
        for j in range(i, min(i + 2, len(all_interests))):
            current_interest = all_interests[j]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–µ—Å–∞
            if current_interest in settings['primary_interests']:
                prefix = "üü¢"  # –û—Å–Ω–æ–≤–Ω–æ–π
            elif current_interest in settings['secondary_interests']:
                prefix = "üü°"  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π
            else:
                prefix = "‚ö™"  # –ù–µ –≤—ã–±—Ä–∞–Ω
            
            row.append(InlineKeyboardButton(
                f"{prefix} {current_interest.replace('_', ' ').title()}", 
                callback_data=f"toggle_interest_{current_interest}"
            ))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚úÖ –î–∞–ª–µ–µ", callback_data="interests_next_step")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="interest_templates")])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    primary_text = ", ".join(settings['primary_interests']) if settings['primary_interests'] else "–Ω–µ—Ç"
    secondary_text = ", ".join(settings['secondary_interests']) if settings['secondary_interests'] else "–Ω–µ—Ç"
    
    text = (
        "üõ† –†–£–ß–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–ï–°–û–í\n\n"
        "üü¢ - –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–∞–∫—Å. 3)\n"
        "üü° - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–∞–∫—Å. 5)\n"
        "‚ö™ - –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n\n"
        f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ: {primary_text}\n"
        f"üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {secondary_text}\n\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞/—Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞:"
    )
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    return INTEREST_SETUP


def interests_next_step(update: Update, context: CallbackContext) -> int:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    settings = user_interest_settings.get(user_id, {})
    
    if not settings.get('primary_interests'):
        query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–µ—Å!", show_alert=True)
        return INTEREST_SETUP
    
    text = (
        "üè∑ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –•–ï–®–¢–ï–ì–ò\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
        "–ö–∞–∂–¥—ã–π —Ö–µ—à—Ç–µ–≥ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ #:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "motivation\n"
        "success\n"
        "goals\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_hashtags")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manual_interests")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    return CUSTOM_HASHTAGS


def process_custom_hashtags(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ö–µ—à—Ç–µ–≥–æ–≤"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == '/skip':
        return ask_custom_accounts(update, context)
    
    # –ü–∞—Ä—Å–∏–º —Ö–µ—à—Ç–µ–≥–∏
    hashtags = [tag.strip().replace('#', '') for tag in text.split('\n') if tag.strip()]
    
    if not hashtags:
        update.message.reply_text("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip")
        return CUSTOM_HASHTAGS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {}
    
    user_interest_settings[user_id]['custom_hashtags'] = hashtags[:20]  # –ú–∞–∫—Å–∏–º—É–º 20
    
    update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(hashtags)} —Ö–µ—à—Ç–µ–≥–æ–≤")
    
    return ask_custom_accounts(update, context)


def ask_custom_accounts(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
    text = (
        "üë§ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
        "–ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "elonmusk\n"
        "garyvee\n"
        "motivation\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_accounts")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_hashtags")]
    ]
    
    if hasattr(update, 'callback_query') and update.callback_query:
        update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    else:
        update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    
    return CUSTOM_ACCOUNTS


def process_custom_accounts(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == '/skip':
        return finish_interest_setup(update, context)
    
    # –ü–∞—Ä—Å–∏–º –∞–∫–∫–∞—É–Ω—Ç—ã
    accounts = [acc.strip().replace('@', '') for acc in text.split('\n') if acc.strip()]
    
    if not accounts:
        update.message.reply_text("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip")
        return CUSTOM_ACCOUNTS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {}
    
    user_interest_settings[user_id]['custom_accounts'] = accounts[:10]  # –ú–∞–∫—Å–∏–º—É–º 10
    
    update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    return finish_interest_setup(update, context)


def finish_interest_setup(update: Update, context: CallbackContext) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    user_id = update.effective_user.id
    settings = user_interest_settings.get(user_id, {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    text = (
        "‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê\n\n"
        f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(settings.get('primary_interests', []))}\n"
        f"üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {', '.join(settings.get('secondary_interests', []))}\n"
        f"üè∑ –•–µ—à—Ç–µ–≥–∏: {len(settings.get('custom_hashtags', []))}\n"
        f"üë§ –ê–∫–∫–∞—É–Ω—Ç—ã: {len(settings.get('custom_accounts', []))}\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_interest_settings")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_interest_settings")],
        [InlineKeyboardButton("üîô –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="manual_interests")]
    ]
    
    if hasattr(update, 'callback_query') and update.callback_query:
        update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    else:
        update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    
    return ConversationHandler.END


def save_interest_settings(update: Update, context: CallbackContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    settings = user_interest_settings.get(user_id, {})
    
    if not settings:
        query.edit_message_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", parse_mode=None)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            with open('interest_warmup_settings.json', 'r', encoding='utf-8') as f:
                all_settings = json.load(f)
        except FileNotFoundError:
            all_settings = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_settings[str(user_id)] = settings
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open('interest_warmup_settings.json', 'w', encoding='utf-8') as f:
            json.dump(all_settings, f, ensure_ascii=False, indent=2)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if user_id in user_interest_settings:
            del user_interest_settings[user_id]
        
        text = (
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–µ–≤–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è "
            "—É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n\n"
            "üéØ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç:\n"
            "‚Ä¢ –ò–∑—É—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
            "‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π\n"
            "‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n"
            "‚Ä¢ –£–ª—É—á—à–∞—Ç—å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –æ—Ö–≤–∞—Ç"
        )
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="test_interest_warmup")],
            [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="warmup_menu")]
        ]
        
        query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
        query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=None
        )


def get_interest_conversation_handler():
    """–ü–æ–ª—É—á–∏—Ç—å ConversationHandler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(show_manual_interests_setup, pattern='^manual_interests$')
        ],
        states={
            INTEREST_SETUP: [
                CallbackQueryHandler(toggle_interest_selection, pattern='^toggle_interest_'),
                CallbackQueryHandler(interests_next_step, pattern='^interests_next_step$'),
            ],
            CUSTOM_HASHTAGS: [
                MessageHandler(Filters.text & ~Filters.command, process_custom_hashtags),
                CallbackQueryHandler(ask_custom_accounts, pattern='^skip_hashtags$'),
            ],
            CUSTOM_ACCOUNTS: [
                MessageHandler(Filters.text & ~Filters.command, process_custom_accounts),
                CallbackQueryHandler(finish_interest_setup, pattern='^skip_accounts$'),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(show_interest_warmup_menu, pattern='^interest_warmup_menu$'),
        ],
        name="interest_warmup_conversation",
        persistent=False,
    )


# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –±–æ—Ç–µ
INTEREST_WARMUP_HANDLERS = [
    CallbackQueryHandler(show_interest_warmup_menu, pattern='^interest_warmup_menu$'),
    CallbackQueryHandler(show_interest_templates, pattern='^interest_templates$'),
    CallbackQueryHandler(select_interest_template, pattern='^select_template_'),
    CallbackQueryHandler(save_interest_settings, pattern='^save_interest_settings$'),
    get_interest_conversation_handler(),
] 
 
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
"""

import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackContext, ConversationHandler, CallbackQueryHandler, 
    MessageHandler, Filters
)
from database.db_manager import get_instagram_accounts
from utils.interest_based_warmup import InterestCategory

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ωversation handler
INTEREST_SETUP, CUSTOM_HASHTAGS, CUSTOM_ACCOUNTS = range(3)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_interest_settings = {}


def show_interest_warmup_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
    query = update.callback_query
    query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="setup_interests")],
        [InlineKeyboardButton("üìä –®–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤", callback_data="interest_templates")],
        [InlineKeyboardButton("‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="current_interest_settings")],
        [InlineKeyboardButton("üöÄ –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º", callback_data="test_interest_warmup")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥—Ä–µ–≤—É", callback_data="warmup_menu")]
    ]
    
    text = (
        "üéØ –ü–†–û–ì–†–ï–í –ü–û –ò–ù–¢–ï–†–ï–°–ê–ú\n\n"
        "–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞, –∫–æ—Ç–æ—Ä–∞—è:\n"
        "‚Ä¢ üîç –ò–∑—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
        "‚Ä¢ üë• –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π\n"
        "‚Ä¢ üéØ –§–æ—Ä–º–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ üìà –£–ª—É—á—à–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –æ—Ö–≤–∞—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)


def show_interest_templates(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    templates = {
        'fitness': {
            'name': 'üí™ –§–∏—Ç–Ω–µ—Å –∏ —Å–ø–æ—Ä—Ç',
            'description': '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
            'interests': ['fitness', 'health']
        },
        'food': {
            'name': 'üçï –ï–¥–∞ –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è',
            'description': '–†–µ—Ü–µ–ø—Ç—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
            'interests': ['food']
        },
        'travel': {
            'name': '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            'description': '–¢—É—Ä–∏–∑–º, –ø—Ä–∏—Ä–æ–¥–∞, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
            'interests': ['travel', 'photography']
        },
        'business': {
            'name': 'üíº –ë–∏–∑–Ω–µ—Å',
            'description': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Ñ–∏–Ω–∞–Ω—Å—ã',
            'interests': ['business', 'finance']
        },
        'technology': {
            'name': 'üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            'description': 'IT, –≥–∞–¥–∂–µ—Ç—ã, –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏',
            'interests': ['technology']
        },
        'lifestyle': {
            'name': 'üåü –õ–∞–π—Ñ—Å—Ç–∞–π–ª',
            'description': '–ú–æ–¥–∞, –∫—Ä–∞—Å–æ—Ç–∞, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
            'interests': ['lifestyle', 'fashion', 'beauty']
        }
    }
    
    keyboard = []
    for template_key, template_data in templates.items():
        keyboard.append([InlineKeyboardButton(
            template_data['name'], 
            callback_data=f"select_template_{template_key}"
        )])
    
    keyboard.append([InlineKeyboardButton("üõ† –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="manual_interests")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="interest_warmup_menu")])
    
    text = (
        "üìä –®–ê–ë–õ–û–ù–´ –ò–ù–¢–ï–†–ï–°–û–í\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é:\n\n"
    )
    
    for template_data in templates.values():
        text += f"{template_data['name']}\n{template_data['description']}\n\n"
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)


def select_interest_template(update: Update, context: CallbackContext) -> None:
    """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    template_name = query.data.replace('select_template_', '')
    user_id = query.from_user.id
    
    # –®–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    templates = {
        'fitness': {
            'primary_interests': ['fitness'],
            'secondary_interests': ['health', 'motivation'],
            'custom_hashtags': ['gym', 'workout', 'training', 'bodybuilding'],
            'custom_accounts': ['therock', 'nike', 'underarmour']
        },
        'food': {
            'primary_interests': ['food'],
            'secondary_interests': ['lifestyle'],
            'custom_hashtags': ['recipe', 'cooking', 'chef', 'delicious'],
            'custom_accounts': ['gordongram', 'jamieoliver', 'buzzfeedtasty']
        },
        'travel': {
            'primary_interests': ['travel'],
            'secondary_interests': ['photography', 'lifestyle'],
            'custom_hashtags': ['wanderlust', 'adventure', 'explore', 'nature'],
            'custom_accounts': ['natgeo', 'beautifuldestinations', 'lonelyplanet']
        },
        'business': {
            'primary_interests': ['business'],
            'secondary_interests': ['finance', 'motivation'],
            'custom_hashtags': ['entrepreneur', 'startup', 'success', 'leadership'],
            'custom_accounts': ['garyvee', 'forbes', 'entrepreneur']
        },
        'technology': {
            'primary_interests': ['technology'],
            'secondary_interests': ['business'],
            'custom_hashtags': ['innovation', 'ai', 'startup', 'coding'],
            'custom_accounts': ['elonmusk', 'apple', 'techcrunch']
        },
        'lifestyle': {
            'primary_interests': ['lifestyle'],
            'secondary_interests': ['fashion', 'beauty'],
            'custom_hashtags': ['style', 'trend', 'inspiration', 'mood'],
            'custom_accounts': ['voguemagazine', 'harpersbazaar']
        }
    }
    
    if template_name in templates:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞
        user_interest_settings[user_id] = templates[template_name].copy()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        settings = user_interest_settings[user_id]
        
        text = (
            f"‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {template_name.upper()}\n\n"
            f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(settings['primary_interests'])}\n"
            f"üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {', '.join(settings['secondary_interests'])}\n"
            f"üè∑ –•–µ—à—Ç–µ–≥–∏: {', '.join(settings['custom_hashtags'][:5])}{'...' if len(settings['custom_hashtags']) > 5 else ''}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join(settings['custom_accounts'])}\n\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_interest_settings")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_interest_settings")],
            [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data="interest_templates")]
        ]
        
        query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)


def show_manual_interests_setup(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    all_interests = [category.value for category in InterestCategory]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    keyboard = []
    for i in range(0, len(all_interests), 2):
        row = []
        for j in range(i, min(i + 2, len(all_interests))):
            interest = all_interests[j]
            row.append(InlineKeyboardButton(
                f"üî∏ {interest.replace('_', ' ').title()}", 
                callback_data=f"toggle_interest_{interest}"
            ))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚úÖ –î–∞–ª–µ–µ", callback_data="interests_next_step")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="interest_templates")])
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = query.from_user.id
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {
            'primary_interests': [],
            'secondary_interests': [],
            'custom_hashtags': [],
            'custom_accounts': []
        }
    
    text = (
        "üõ† –†–£–ß–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–ï–°–û–í\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ 2-3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞:\n\n"
        "–í—ã–±—Ä–∞–Ω–æ: –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ\n\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞/—Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞:"
    )
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    return INTEREST_SETUP


def toggle_interest_selection(update: Update, context: CallbackContext) -> int:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–∞"""
    query = update.callback_query
    query.answer()
    
    interest = query.data.replace('toggle_interest_', '')
    user_id = query.from_user.id
    
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {
            'primary_interests': [],
            'secondary_interests': [],
            'custom_hashtags': [],
            'custom_accounts': []
        }
    
    settings = user_interest_settings[user_id]
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å
    if interest in settings['primary_interests']:
        settings['primary_interests'].remove(interest)
    elif interest in settings['secondary_interests']:
        settings['secondary_interests'].remove(interest)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ–Ω—å—à–µ 3
        if len(settings['primary_interests']) < 3:
            settings['primary_interests'].append(interest)
        else:
            # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π
            if len(settings['secondary_interests']) < 5:
                settings['secondary_interests'].append(interest)
            else:
                query.answer("–ú–∞–∫—Å–∏–º—É–º 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤!", show_alert=True)
                return INTEREST_SETUP
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    all_interests = [category.value for category in InterestCategory]
    keyboard = []
    
    for i in range(0, len(all_interests), 2):
        row = []
        for j in range(i, min(i + 2, len(all_interests))):
            current_interest = all_interests[j]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–µ—Å–∞
            if current_interest in settings['primary_interests']:
                prefix = "üü¢"  # –û—Å–Ω–æ–≤–Ω–æ–π
            elif current_interest in settings['secondary_interests']:
                prefix = "üü°"  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π
            else:
                prefix = "‚ö™"  # –ù–µ –≤—ã–±—Ä–∞–Ω
            
            row.append(InlineKeyboardButton(
                f"{prefix} {current_interest.replace('_', ' ').title()}", 
                callback_data=f"toggle_interest_{current_interest}"
            ))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚úÖ –î–∞–ª–µ–µ", callback_data="interests_next_step")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="interest_templates")])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    primary_text = ", ".join(settings['primary_interests']) if settings['primary_interests'] else "–Ω–µ—Ç"
    secondary_text = ", ".join(settings['secondary_interests']) if settings['secondary_interests'] else "–Ω–µ—Ç"
    
    text = (
        "üõ† –†–£–ß–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–ï–°–û–í\n\n"
        "üü¢ - –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–∞–∫—Å. 3)\n"
        "üü° - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–∞–∫—Å. 5)\n"
        "‚ö™ - –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n\n"
        f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ: {primary_text}\n"
        f"üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {secondary_text}\n\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞/—Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞:"
    )
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    return INTEREST_SETUP


def interests_next_step(update: Update, context: CallbackContext) -> int:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    settings = user_interest_settings.get(user_id, {})
    
    if not settings.get('primary_interests'):
        query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–µ—Å!", show_alert=True)
        return INTEREST_SETUP
    
    text = (
        "üè∑ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –•–ï–®–¢–ï–ì–ò\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
        "–ö–∞–∂–¥—ã–π —Ö–µ—à—Ç–µ–≥ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ #:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "motivation\n"
        "success\n"
        "goals\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_hashtags")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manual_interests")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    return CUSTOM_HASHTAGS


def process_custom_hashtags(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ö–µ—à—Ç–µ–≥–æ–≤"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == '/skip':
        return ask_custom_accounts(update, context)
    
    # –ü–∞—Ä—Å–∏–º —Ö–µ—à—Ç–µ–≥–∏
    hashtags = [tag.strip().replace('#', '') for tag in text.split('\n') if tag.strip()]
    
    if not hashtags:
        update.message.reply_text("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip")
        return CUSTOM_HASHTAGS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {}
    
    user_interest_settings[user_id]['custom_hashtags'] = hashtags[:20]  # –ú–∞–∫—Å–∏–º—É–º 20
    
    update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(hashtags)} —Ö–µ—à—Ç–µ–≥–æ–≤")
    
    return ask_custom_accounts(update, context)


def ask_custom_accounts(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
    text = (
        "üë§ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
        "–ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "elonmusk\n"
        "garyvee\n"
        "motivation\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_accounts")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_hashtags")]
    ]
    
    if hasattr(update, 'callback_query') and update.callback_query:
        update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    else:
        update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    
    return CUSTOM_ACCOUNTS


def process_custom_accounts(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == '/skip':
        return finish_interest_setup(update, context)
    
    # –ü–∞—Ä—Å–∏–º –∞–∫–∫–∞—É–Ω—Ç—ã
    accounts = [acc.strip().replace('@', '') for acc in text.split('\n') if acc.strip()]
    
    if not accounts:
        update.message.reply_text("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip")
        return CUSTOM_ACCOUNTS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {}
    
    user_interest_settings[user_id]['custom_accounts'] = accounts[:10]  # –ú–∞–∫—Å–∏–º—É–º 10
    
    update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    return finish_interest_setup(update, context)


def finish_interest_setup(update: Update, context: CallbackContext) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    user_id = update.effective_user.id
    settings = user_interest_settings.get(user_id, {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    text = (
        "‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê\n\n"
        f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(settings.get('primary_interests', []))}\n"
        f"üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {', '.join(settings.get('secondary_interests', []))}\n"
        f"üè∑ –•–µ—à—Ç–µ–≥–∏: {len(settings.get('custom_hashtags', []))}\n"
        f"üë§ –ê–∫–∫–∞—É–Ω—Ç—ã: {len(settings.get('custom_accounts', []))}\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_interest_settings")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_interest_settings")],
        [InlineKeyboardButton("üîô –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="manual_interests")]
    ]
    
    if hasattr(update, 'callback_query') and update.callback_query:
        update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    else:
        update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    
    return ConversationHandler.END


def save_interest_settings(update: Update, context: CallbackContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    settings = user_interest_settings.get(user_id, {})
    
    if not settings:
        query.edit_message_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", parse_mode=None)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            with open('interest_warmup_settings.json', 'r', encoding='utf-8') as f:
                all_settings = json.load(f)
        except FileNotFoundError:
            all_settings = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_settings[str(user_id)] = settings
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open('interest_warmup_settings.json', 'w', encoding='utf-8') as f:
            json.dump(all_settings, f, ensure_ascii=False, indent=2)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if user_id in user_interest_settings:
            del user_interest_settings[user_id]
        
        text = (
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–µ–≤–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è "
            "—É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n\n"
            "üéØ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç:\n"
            "‚Ä¢ –ò–∑—É—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
            "‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π\n"
            "‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n"
            "‚Ä¢ –£–ª—É—á—à–∞—Ç—å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –æ—Ö–≤–∞—Ç"
        )
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="test_interest_warmup")],
            [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="warmup_menu")]
        ]
        
        query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
        query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=None
        )


def get_interest_conversation_handler():
    """–ü–æ–ª—É—á–∏—Ç—å ConversationHandler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(show_manual_interests_setup, pattern='^manual_interests$')
        ],
        states={
            INTEREST_SETUP: [
                CallbackQueryHandler(toggle_interest_selection, pattern='^toggle_interest_'),
                CallbackQueryHandler(interests_next_step, pattern='^interests_next_step$'),
            ],
            CUSTOM_HASHTAGS: [
                MessageHandler(Filters.text & ~Filters.command, process_custom_hashtags),
                CallbackQueryHandler(ask_custom_accounts, pattern='^skip_hashtags$'),
            ],
            CUSTOM_ACCOUNTS: [
                MessageHandler(Filters.text & ~Filters.command, process_custom_accounts),
                CallbackQueryHandler(finish_interest_setup, pattern='^skip_accounts$'),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(show_interest_warmup_menu, pattern='^interest_warmup_menu$'),
        ],
        name="interest_warmup_conversation",
        persistent=False,
    )


# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –±–æ—Ç–µ
INTEREST_WARMUP_HANDLERS = [
    CallbackQueryHandler(show_interest_warmup_menu, pattern='^interest_warmup_menu$'),
    CallbackQueryHandler(show_interest_templates, pattern='^interest_templates$'),
    CallbackQueryHandler(select_interest_template, pattern='^select_template_'),
    CallbackQueryHandler(save_interest_settings, pattern='^save_interest_settings$'),
    get_interest_conversation_handler(),
] 
 
 
 
 
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
"""

import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackContext, ConversationHandler, CallbackQueryHandler, 
    MessageHandler, Filters
)
from database.db_manager import get_instagram_accounts
from utils.interest_based_warmup import InterestCategory

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ωversation handler
INTEREST_SETUP, CUSTOM_HASHTAGS, CUSTOM_ACCOUNTS = range(3)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_interest_settings = {}


def show_interest_warmup_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
    query = update.callback_query
    query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="setup_interests")],
        [InlineKeyboardButton("üìä –®–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤", callback_data="interest_templates")],
        [InlineKeyboardButton("‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="current_interest_settings")],
        [InlineKeyboardButton("üöÄ –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º", callback_data="test_interest_warmup")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥—Ä–µ–≤—É", callback_data="warmup_menu")]
    ]
    
    text = (
        "üéØ –ü–†–û–ì–†–ï–í –ü–û –ò–ù–¢–ï–†–ï–°–ê–ú\n\n"
        "–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞, –∫–æ—Ç–æ—Ä–∞—è:\n"
        "‚Ä¢ üîç –ò–∑—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
        "‚Ä¢ üë• –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π\n"
        "‚Ä¢ üéØ –§–æ—Ä–º–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ üìà –£–ª—É—á—à–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –æ—Ö–≤–∞—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)


def show_interest_templates(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    templates = {
        'fitness': {
            'name': 'üí™ –§–∏—Ç–Ω–µ—Å –∏ —Å–ø–æ—Ä—Ç',
            'description': '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
            'interests': ['fitness', 'health']
        },
        'food': {
            'name': 'üçï –ï–¥–∞ –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è',
            'description': '–†–µ—Ü–µ–ø—Ç—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
            'interests': ['food']
        },
        'travel': {
            'name': '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            'description': '–¢—É—Ä–∏–∑–º, –ø—Ä–∏—Ä–æ–¥–∞, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
            'interests': ['travel', 'photography']
        },
        'business': {
            'name': 'üíº –ë–∏–∑–Ω–µ—Å',
            'description': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Ñ–∏–Ω–∞–Ω—Å—ã',
            'interests': ['business', 'finance']
        },
        'technology': {
            'name': 'üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            'description': 'IT, –≥–∞–¥–∂–µ—Ç—ã, –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏',
            'interests': ['technology']
        },
        'lifestyle': {
            'name': 'üåü –õ–∞–π—Ñ—Å—Ç–∞–π–ª',
            'description': '–ú–æ–¥–∞, –∫—Ä–∞—Å–æ—Ç–∞, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
            'interests': ['lifestyle', 'fashion', 'beauty']
        }
    }
    
    keyboard = []
    for template_key, template_data in templates.items():
        keyboard.append([InlineKeyboardButton(
            template_data['name'], 
            callback_data=f"select_template_{template_key}"
        )])
    
    keyboard.append([InlineKeyboardButton("üõ† –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="manual_interests")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="interest_warmup_menu")])
    
    text = (
        "üìä –®–ê–ë–õ–û–ù–´ –ò–ù–¢–ï–†–ï–°–û–í\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é:\n\n"
    )
    
    for template_data in templates.values():
        text += f"{template_data['name']}\n{template_data['description']}\n\n"
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)


def select_interest_template(update: Update, context: CallbackContext) -> None:
    """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    template_name = query.data.replace('select_template_', '')
    user_id = query.from_user.id
    
    # –®–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    templates = {
        'fitness': {
            'primary_interests': ['fitness'],
            'secondary_interests': ['health', 'motivation'],
            'custom_hashtags': ['gym', 'workout', 'training', 'bodybuilding'],
            'custom_accounts': ['therock', 'nike', 'underarmour']
        },
        'food': {
            'primary_interests': ['food'],
            'secondary_interests': ['lifestyle'],
            'custom_hashtags': ['recipe', 'cooking', 'chef', 'delicious'],
            'custom_accounts': ['gordongram', 'jamieoliver', 'buzzfeedtasty']
        },
        'travel': {
            'primary_interests': ['travel'],
            'secondary_interests': ['photography', 'lifestyle'],
            'custom_hashtags': ['wanderlust', 'adventure', 'explore', 'nature'],
            'custom_accounts': ['natgeo', 'beautifuldestinations', 'lonelyplanet']
        },
        'business': {
            'primary_interests': ['business'],
            'secondary_interests': ['finance', 'motivation'],
            'custom_hashtags': ['entrepreneur', 'startup', 'success', 'leadership'],
            'custom_accounts': ['garyvee', 'forbes', 'entrepreneur']
        },
        'technology': {
            'primary_interests': ['technology'],
            'secondary_interests': ['business'],
            'custom_hashtags': ['innovation', 'ai', 'startup', 'coding'],
            'custom_accounts': ['elonmusk', 'apple', 'techcrunch']
        },
        'lifestyle': {
            'primary_interests': ['lifestyle'],
            'secondary_interests': ['fashion', 'beauty'],
            'custom_hashtags': ['style', 'trend', 'inspiration', 'mood'],
            'custom_accounts': ['voguemagazine', 'harpersbazaar']
        }
    }
    
    if template_name in templates:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞
        user_interest_settings[user_id] = templates[template_name].copy()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        settings = user_interest_settings[user_id]
        
        text = (
            f"‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {template_name.upper()}\n\n"
            f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(settings['primary_interests'])}\n"
            f"üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {', '.join(settings['secondary_interests'])}\n"
            f"üè∑ –•–µ—à—Ç–µ–≥–∏: {', '.join(settings['custom_hashtags'][:5])}{'...' if len(settings['custom_hashtags']) > 5 else ''}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join(settings['custom_accounts'])}\n\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_interest_settings")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_interest_settings")],
            [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data="interest_templates")]
        ]
        
        query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)


def show_manual_interests_setup(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    all_interests = [category.value for category in InterestCategory]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    keyboard = []
    for i in range(0, len(all_interests), 2):
        row = []
        for j in range(i, min(i + 2, len(all_interests))):
            interest = all_interests[j]
            row.append(InlineKeyboardButton(
                f"üî∏ {interest.replace('_', ' ').title()}", 
                callback_data=f"toggle_interest_{interest}"
            ))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚úÖ –î–∞–ª–µ–µ", callback_data="interests_next_step")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="interest_templates")])
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = query.from_user.id
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {
            'primary_interests': [],
            'secondary_interests': [],
            'custom_hashtags': [],
            'custom_accounts': []
        }
    
    text = (
        "üõ† –†–£–ß–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–ï–°–û–í\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ 2-3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞:\n\n"
        "–í—ã–±—Ä–∞–Ω–æ: –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ\n\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞/—Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞:"
    )
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    return INTEREST_SETUP


def toggle_interest_selection(update: Update, context: CallbackContext) -> int:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–∞"""
    query = update.callback_query
    query.answer()
    
    interest = query.data.replace('toggle_interest_', '')
    user_id = query.from_user.id
    
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {
            'primary_interests': [],
            'secondary_interests': [],
            'custom_hashtags': [],
            'custom_accounts': []
        }
    
    settings = user_interest_settings[user_id]
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å
    if interest in settings['primary_interests']:
        settings['primary_interests'].remove(interest)
    elif interest in settings['secondary_interests']:
        settings['secondary_interests'].remove(interest)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ–Ω—å—à–µ 3
        if len(settings['primary_interests']) < 3:
            settings['primary_interests'].append(interest)
        else:
            # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π
            if len(settings['secondary_interests']) < 5:
                settings['secondary_interests'].append(interest)
            else:
                query.answer("–ú–∞–∫—Å–∏–º—É–º 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤!", show_alert=True)
                return INTEREST_SETUP
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    all_interests = [category.value for category in InterestCategory]
    keyboard = []
    
    for i in range(0, len(all_interests), 2):
        row = []
        for j in range(i, min(i + 2, len(all_interests))):
            current_interest = all_interests[j]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–µ—Å–∞
            if current_interest in settings['primary_interests']:
                prefix = "üü¢"  # –û—Å–Ω–æ–≤–Ω–æ–π
            elif current_interest in settings['secondary_interests']:
                prefix = "üü°"  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π
            else:
                prefix = "‚ö™"  # –ù–µ –≤—ã–±—Ä–∞–Ω
            
            row.append(InlineKeyboardButton(
                f"{prefix} {current_interest.replace('_', ' ').title()}", 
                callback_data=f"toggle_interest_{current_interest}"
            ))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚úÖ –î–∞–ª–µ–µ", callback_data="interests_next_step")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="interest_templates")])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    primary_text = ", ".join(settings['primary_interests']) if settings['primary_interests'] else "–Ω–µ—Ç"
    secondary_text = ", ".join(settings['secondary_interests']) if settings['secondary_interests'] else "–Ω–µ—Ç"
    
    text = (
        "üõ† –†–£–ß–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–ï–°–û–í\n\n"
        "üü¢ - –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–∞–∫—Å. 3)\n"
        "üü° - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–∞–∫—Å. 5)\n"
        "‚ö™ - –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n\n"
        f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ: {primary_text}\n"
        f"üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {secondary_text}\n\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞/—Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞:"
    )
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    return INTEREST_SETUP


def interests_next_step(update: Update, context: CallbackContext) -> int:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    settings = user_interest_settings.get(user_id, {})
    
    if not settings.get('primary_interests'):
        query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–µ—Å!", show_alert=True)
        return INTEREST_SETUP
    
    text = (
        "üè∑ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –•–ï–®–¢–ï–ì–ò\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
        "–ö–∞–∂–¥—ã–π —Ö–µ—à—Ç–µ–≥ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ #:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "motivation\n"
        "success\n"
        "goals\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_hashtags")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manual_interests")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    return CUSTOM_HASHTAGS


def process_custom_hashtags(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ö–µ—à—Ç–µ–≥–æ–≤"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == '/skip':
        return ask_custom_accounts(update, context)
    
    # –ü–∞—Ä—Å–∏–º —Ö–µ—à—Ç–µ–≥–∏
    hashtags = [tag.strip().replace('#', '') for tag in text.split('\n') if tag.strip()]
    
    if not hashtags:
        update.message.reply_text("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip")
        return CUSTOM_HASHTAGS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {}
    
    user_interest_settings[user_id]['custom_hashtags'] = hashtags[:20]  # –ú–∞–∫—Å–∏–º—É–º 20
    
    update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(hashtags)} —Ö–µ—à—Ç–µ–≥–æ–≤")
    
    return ask_custom_accounts(update, context)


def ask_custom_accounts(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
    text = (
        "üë§ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
        "–ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "elonmusk\n"
        "garyvee\n"
        "motivation\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_accounts")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_hashtags")]
    ]
    
    if hasattr(update, 'callback_query') and update.callback_query:
        update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    else:
        update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    
    return CUSTOM_ACCOUNTS


def process_custom_accounts(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == '/skip':
        return finish_interest_setup(update, context)
    
    # –ü–∞—Ä—Å–∏–º –∞–∫–∫–∞—É–Ω—Ç—ã
    accounts = [acc.strip().replace('@', '') for acc in text.split('\n') if acc.strip()]
    
    if not accounts:
        update.message.reply_text("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip")
        return CUSTOM_ACCOUNTS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {}
    
    user_interest_settings[user_id]['custom_accounts'] = accounts[:10]  # –ú–∞–∫—Å–∏–º—É–º 10
    
    update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    return finish_interest_setup(update, context)


def finish_interest_setup(update: Update, context: CallbackContext) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    user_id = update.effective_user.id
    settings = user_interest_settings.get(user_id, {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    text = (
        "‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê\n\n"
        f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(settings.get('primary_interests', []))}\n"
        f"üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {', '.join(settings.get('secondary_interests', []))}\n"
        f"üè∑ –•–µ—à—Ç–µ–≥–∏: {len(settings.get('custom_hashtags', []))}\n"
        f"üë§ –ê–∫–∫–∞—É–Ω—Ç—ã: {len(settings.get('custom_accounts', []))}\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_interest_settings")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_interest_settings")],
        [InlineKeyboardButton("üîô –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="manual_interests")]
    ]
    
    if hasattr(update, 'callback_query') and update.callback_query:
        update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    else:
        update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    
    return ConversationHandler.END


def save_interest_settings(update: Update, context: CallbackContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    settings = user_interest_settings.get(user_id, {})
    
    if not settings:
        query.edit_message_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", parse_mode=None)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            with open('interest_warmup_settings.json', 'r', encoding='utf-8') as f:
                all_settings = json.load(f)
        except FileNotFoundError:
            all_settings = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_settings[str(user_id)] = settings
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open('interest_warmup_settings.json', 'w', encoding='utf-8') as f:
            json.dump(all_settings, f, ensure_ascii=False, indent=2)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if user_id in user_interest_settings:
            del user_interest_settings[user_id]
        
        text = (
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–µ–≤–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è "
            "—É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n\n"
            "üéØ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç:\n"
            "‚Ä¢ –ò–∑—É—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
            "‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π\n"
            "‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n"
            "‚Ä¢ –£–ª—É—á—à–∞—Ç—å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –æ—Ö–≤–∞—Ç"
        )
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="test_interest_warmup")],
            [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="warmup_menu")]
        ]
        
        query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
        query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=None
        )


def get_interest_conversation_handler():
    """–ü–æ–ª—É—á–∏—Ç—å ConversationHandler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(show_manual_interests_setup, pattern='^manual_interests$')
        ],
        states={
            INTEREST_SETUP: [
                CallbackQueryHandler(toggle_interest_selection, pattern='^toggle_interest_'),
                CallbackQueryHandler(interests_next_step, pattern='^interests_next_step$'),
            ],
            CUSTOM_HASHTAGS: [
                MessageHandler(Filters.text & ~Filters.command, process_custom_hashtags),
                CallbackQueryHandler(ask_custom_accounts, pattern='^skip_hashtags$'),
            ],
            CUSTOM_ACCOUNTS: [
                MessageHandler(Filters.text & ~Filters.command, process_custom_accounts),
                CallbackQueryHandler(finish_interest_setup, pattern='^skip_accounts$'),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(show_interest_warmup_menu, pattern='^interest_warmup_menu$'),
        ],
        name="interest_warmup_conversation",
        persistent=False,
    )


# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –±–æ—Ç–µ
INTEREST_WARMUP_HANDLERS = [
    CallbackQueryHandler(show_interest_warmup_menu, pattern='^interest_warmup_menu$'),
    CallbackQueryHandler(show_interest_templates, pattern='^interest_templates$'),
    CallbackQueryHandler(select_interest_template, pattern='^select_template_'),
    CallbackQueryHandler(save_interest_settings, pattern='^save_interest_settings$'),
    get_interest_conversation_handler(),
] 
 
# -*- coding: utf-8 -*-

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
"""

import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackContext, ConversationHandler, CallbackQueryHandler, 
    MessageHandler, Filters
)
from database.db_manager import get_instagram_accounts
from utils.interest_based_warmup import InterestCategory

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ωversation handler
INTEREST_SETUP, CUSTOM_HASHTAGS, CUSTOM_ACCOUNTS = range(3)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_interest_settings = {}


def show_interest_warmup_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
    query = update.callback_query
    query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="setup_interests")],
        [InlineKeyboardButton("üìä –®–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤", callback_data="interest_templates")],
        [InlineKeyboardButton("‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="current_interest_settings")],
        [InlineKeyboardButton("üöÄ –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º", callback_data="test_interest_warmup")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥—Ä–µ–≤—É", callback_data="warmup_menu")]
    ]
    
    text = (
        "üéØ –ü–†–û–ì–†–ï–í –ü–û –ò–ù–¢–ï–†–ï–°–ê–ú\n\n"
        "–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞, –∫–æ—Ç–æ—Ä–∞—è:\n"
        "‚Ä¢ üîç –ò–∑—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
        "‚Ä¢ üë• –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π\n"
        "‚Ä¢ üéØ –§–æ—Ä–º–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ üìà –£–ª—É—á—à–∞–µ—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –æ—Ö–≤–∞—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)


def show_interest_templates(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    templates = {
        'fitness': {
            'name': 'üí™ –§–∏—Ç–Ω–µ—Å –∏ —Å–ø–æ—Ä—Ç',
            'description': '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏',
            'interests': ['fitness', 'health']
        },
        'food': {
            'name': 'üçï –ï–¥–∞ –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è',
            'description': '–†–µ—Ü–µ–ø—Ç—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
            'interests': ['food']
        },
        'travel': {
            'name': '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            'description': '–¢—É—Ä–∏–∑–º, –ø—Ä–∏—Ä–æ–¥–∞, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
            'interests': ['travel', 'photography']
        },
        'business': {
            'name': 'üíº –ë–∏–∑–Ω–µ—Å',
            'description': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ, –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Ñ–∏–Ω–∞–Ω—Å—ã',
            'interests': ['business', 'finance']
        },
        'technology': {
            'name': 'üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
            'description': 'IT, –≥–∞–¥–∂–µ—Ç—ã, –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏',
            'interests': ['technology']
        },
        'lifestyle': {
            'name': 'üåü –õ–∞–π—Ñ—Å—Ç–∞–π–ª',
            'description': '–ú–æ–¥–∞, –∫—Ä–∞—Å–æ—Ç–∞, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
            'interests': ['lifestyle', 'fashion', 'beauty']
        }
    }
    
    keyboard = []
    for template_key, template_data in templates.items():
        keyboard.append([InlineKeyboardButton(
            template_data['name'], 
            callback_data=f"select_template_{template_key}"
        )])
    
    keyboard.append([InlineKeyboardButton("üõ† –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="manual_interests")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="interest_warmup_menu")])
    
    text = (
        "üìä –®–ê–ë–õ–û–ù–´ –ò–ù–¢–ï–†–ï–°–û–í\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é:\n\n"
    )
    
    for template_data in templates.values():
        text += f"{template_data['name']}\n{template_data['description']}\n\n"
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)


def select_interest_template(update: Update, context: CallbackContext) -> None:
    """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    template_name = query.data.replace('select_template_', '')
    user_id = query.from_user.id
    
    # –®–∞–±–ª–æ–Ω—ã –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    templates = {
        'fitness': {
            'primary_interests': ['fitness'],
            'secondary_interests': ['health', 'motivation'],
            'custom_hashtags': ['gym', 'workout', 'training', 'bodybuilding'],
            'custom_accounts': ['therock', 'nike', 'underarmour']
        },
        'food': {
            'primary_interests': ['food'],
            'secondary_interests': ['lifestyle'],
            'custom_hashtags': ['recipe', 'cooking', 'chef', 'delicious'],
            'custom_accounts': ['gordongram', 'jamieoliver', 'buzzfeedtasty']
        },
        'travel': {
            'primary_interests': ['travel'],
            'secondary_interests': ['photography', 'lifestyle'],
            'custom_hashtags': ['wanderlust', 'adventure', 'explore', 'nature'],
            'custom_accounts': ['natgeo', 'beautifuldestinations', 'lonelyplanet']
        },
        'business': {
            'primary_interests': ['business'],
            'secondary_interests': ['finance', 'motivation'],
            'custom_hashtags': ['entrepreneur', 'startup', 'success', 'leadership'],
            'custom_accounts': ['garyvee', 'forbes', 'entrepreneur']
        },
        'technology': {
            'primary_interests': ['technology'],
            'secondary_interests': ['business'],
            'custom_hashtags': ['innovation', 'ai', 'startup', 'coding'],
            'custom_accounts': ['elonmusk', 'apple', 'techcrunch']
        },
        'lifestyle': {
            'primary_interests': ['lifestyle'],
            'secondary_interests': ['fashion', 'beauty'],
            'custom_hashtags': ['style', 'trend', 'inspiration', 'mood'],
            'custom_accounts': ['voguemagazine', 'harpersbazaar']
        }
    }
    
    if template_name in templates:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞
        user_interest_settings[user_id] = templates[template_name].copy()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        settings = user_interest_settings[user_id]
        
        text = (
            f"‚úÖ –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {template_name.upper()}\n\n"
            f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(settings['primary_interests'])}\n"
            f"üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {', '.join(settings['secondary_interests'])}\n"
            f"üè∑ –•–µ—à—Ç–µ–≥–∏: {', '.join(settings['custom_hashtags'][:5])}{'...' if len(settings['custom_hashtags']) > 5 else ''}\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join(settings['custom_accounts'])}\n\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_interest_settings")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_interest_settings")],
            [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data="interest_templates")]
        ]
        
        query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)


def show_manual_interests_setup(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    all_interests = [category.value for category in InterestCategory]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    keyboard = []
    for i in range(0, len(all_interests), 2):
        row = []
        for j in range(i, min(i + 2, len(all_interests))):
            interest = all_interests[j]
            row.append(InlineKeyboardButton(
                f"üî∏ {interest.replace('_', ' ').title()}", 
                callback_data=f"toggle_interest_{interest}"
            ))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚úÖ –î–∞–ª–µ–µ", callback_data="interests_next_step")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="interest_templates")])
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = query.from_user.id
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {
            'primary_interests': [],
            'secondary_interests': [],
            'custom_hashtags': [],
            'custom_accounts': []
        }
    
    text = (
        "üõ† –†–£–ß–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–ï–°–û–í\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ 2-3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞:\n\n"
        "–í—ã–±—Ä–∞–Ω–æ: –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ\n\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞/—Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞:"
    )
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    return INTEREST_SETUP


def toggle_interest_selection(update: Update, context: CallbackContext) -> int:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–∞"""
    query = update.callback_query
    query.answer()
    
    interest = query.data.replace('toggle_interest_', '')
    user_id = query.from_user.id
    
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {
            'primary_interests': [],
            'secondary_interests': [],
            'custom_hashtags': [],
            'custom_accounts': []
        }
    
    settings = user_interest_settings[user_id]
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å
    if interest in settings['primary_interests']:
        settings['primary_interests'].remove(interest)
    elif interest in settings['secondary_interests']:
        settings['secondary_interests'].remove(interest)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ–Ω—å—à–µ 3
        if len(settings['primary_interests']) < 3:
            settings['primary_interests'].append(interest)
        else:
            # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π
            if len(settings['secondary_interests']) < 5:
                settings['secondary_interests'].append(interest)
            else:
                query.answer("–ú–∞–∫—Å–∏–º—É–º 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤!", show_alert=True)
                return INTEREST_SETUP
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    all_interests = [category.value for category in InterestCategory]
    keyboard = []
    
    for i in range(0, len(all_interests), 2):
        row = []
        for j in range(i, min(i + 2, len(all_interests))):
            current_interest = all_interests[j]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–µ—Å–∞
            if current_interest in settings['primary_interests']:
                prefix = "üü¢"  # –û—Å–Ω–æ–≤–Ω–æ–π
            elif current_interest in settings['secondary_interests']:
                prefix = "üü°"  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π
            else:
                prefix = "‚ö™"  # –ù–µ –≤—ã–±—Ä–∞–Ω
            
            row.append(InlineKeyboardButton(
                f"{prefix} {current_interest.replace('_', ' ').title()}", 
                callback_data=f"toggle_interest_{current_interest}"
            ))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚úÖ –î–∞–ª–µ–µ", callback_data="interests_next_step")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="interest_templates")])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    primary_text = ", ".join(settings['primary_interests']) if settings['primary_interests'] else "–Ω–µ—Ç"
    secondary_text = ", ".join(settings['secondary_interests']) if settings['secondary_interests'] else "–Ω–µ—Ç"
    
    text = (
        "üõ† –†–£–ß–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –ò–ù–¢–ï–†–ï–°–û–í\n\n"
        "üü¢ - –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–∞–∫—Å. 3)\n"
        "üü° - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–∞–∫—Å. 5)\n"
        "‚ö™ - –ù–µ –≤—ã–±—Ä–∞–Ω–æ\n\n"
        f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ: {primary_text}\n"
        f"üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {secondary_text}\n\n"
        "–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞/—Å–Ω—è—Ç–∏—è –≤—ã–±–æ—Ä–∞:"
    )
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    return INTEREST_SETUP


def interests_next_step(update: Update, context: CallbackContext) -> int:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    settings = user_interest_settings.get(user_id, {})
    
    if not settings.get('primary_interests'):
        query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–µ—Å!", show_alert=True)
        return INTEREST_SETUP
    
    text = (
        "üè∑ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –•–ï–®–¢–ï–ì–ò\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
        "–ö–∞–∂–¥—ã–π —Ö–µ—à—Ç–µ–≥ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ #:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "motivation\n"
        "success\n"
        "goals\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_hashtags")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manual_interests")]
    ]
    
    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    return CUSTOM_HASHTAGS


def process_custom_hashtags(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ö–µ—à—Ç–µ–≥–æ–≤"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == '/skip':
        return ask_custom_accounts(update, context)
    
    # –ü–∞—Ä—Å–∏–º —Ö–µ—à—Ç–µ–≥–∏
    hashtags = [tag.strip().replace('#', '') for tag in text.split('\n') if tag.strip()]
    
    if not hashtags:
        update.message.reply_text("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip")
        return CUSTOM_HASHTAGS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {}
    
    user_interest_settings[user_id]['custom_hashtags'] = hashtags[:20]  # –ú–∞–∫—Å–∏–º—É–º 20
    
    update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(hashtags)} —Ö–µ—à—Ç–µ–≥–æ–≤")
    
    return ask_custom_accounts(update, context)


def ask_custom_accounts(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
    text = (
        "üë§ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
        "–ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @:\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "elonmusk\n"
        "garyvee\n"
        "motivation\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_accounts")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_hashtags")]
    ]
    
    if hasattr(update, 'callback_query') and update.callback_query:
        update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    else:
        update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    
    return CUSTOM_ACCOUNTS


def process_custom_accounts(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == '/skip':
        return finish_interest_setup(update, context)
    
    # –ü–∞—Ä—Å–∏–º –∞–∫–∫–∞—É–Ω—Ç—ã
    accounts = [acc.strip().replace('@', '') for acc in text.split('\n') if acc.strip()]
    
    if not accounts:
        update.message.reply_text("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip")
        return CUSTOM_ACCOUNTS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    if user_id not in user_interest_settings:
        user_interest_settings[user_id] = {}
    
    user_interest_settings[user_id]['custom_accounts'] = accounts[:10]  # –ú–∞–∫—Å–∏–º—É–º 10
    
    update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    return finish_interest_setup(update, context)


def finish_interest_setup(update: Update, context: CallbackContext) -> int:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    user_id = update.effective_user.id
    settings = user_interest_settings.get(user_id, {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    text = (
        "‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê\n\n"
        f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(settings.get('primary_interests', []))}\n"
        f"üî∏ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ: {', '.join(settings.get('secondary_interests', []))}\n"
        f"üè∑ –•–µ—à—Ç–µ–≥–∏: {len(settings.get('custom_hashtags', []))}\n"
        f"üë§ –ê–∫–∫–∞—É–Ω—Ç—ã: {len(settings.get('custom_accounts', []))}\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_interest_settings")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_interest_settings")],
        [InlineKeyboardButton("üîô –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="manual_interests")]
    ]
    
    if hasattr(update, 'callback_query') and update.callback_query:
        update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    else:
        update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
    
    return ConversationHandler.END


def save_interest_settings(update: Update, context: CallbackContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    query.answer()
    
    user_id = query.from_user.id
    settings = user_interest_settings.get(user_id, {})
    
    if not settings:
        query.edit_message_text("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", parse_mode=None)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            with open('interest_warmup_settings.json', 'r', encoding='utf-8') as f:
                all_settings = json.load(f)
        except FileNotFoundError:
            all_settings = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_settings[str(user_id)] = settings
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open('interest_warmup_settings.json', 'w', encoding='utf-8') as f:
            json.dump(all_settings, f, ensure_ascii=False, indent=2)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if user_id in user_interest_settings:
            del user_interest_settings[user_id]
        
        text = (
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–µ–≤–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è "
            "—É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.\n\n"
            "üéØ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç:\n"
            "‚Ä¢ –ò–∑—É—á–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º\n"
            "‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π\n"
            "‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n"
            "‚Ä¢ –£–ª—É—á—à–∞—Ç—å –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π –æ—Ö–≤–∞—Ç"
        )
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="test_interest_warmup")],
            [InlineKeyboardButton("üîô –ö –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞", callback_data="warmup_menu")]
        ]
        
        query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
        query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=None
        )


def get_interest_conversation_handler():
    """–ü–æ–ª—É—á–∏—Ç—å ConversationHandler –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(show_manual_interests_setup, pattern='^manual_interests$')
        ],
        states={
            INTEREST_SETUP: [
                CallbackQueryHandler(toggle_interest_selection, pattern='^toggle_interest_'),
                CallbackQueryHandler(interests_next_step, pattern='^interests_next_step$'),
            ],
            CUSTOM_HASHTAGS: [
                MessageHandler(Filters.text & ~Filters.command, process_custom_hashtags),
                CallbackQueryHandler(ask_custom_accounts, pattern='^skip_hashtags$'),
            ],
            CUSTOM_ACCOUNTS: [
                MessageHandler(Filters.text & ~Filters.command, process_custom_accounts),
                CallbackQueryHandler(finish_interest_setup, pattern='^skip_accounts$'),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(show_interest_warmup_menu, pattern='^interest_warmup_menu$'),
        ],
        name="interest_warmup_conversation",
        persistent=False,
    )


# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –±–æ—Ç–µ
INTEREST_WARMUP_HANDLERS = [
    CallbackQueryHandler(show_interest_warmup_menu, pattern='^interest_warmup_menu$'),
    CallbackQueryHandler(show_interest_templates, pattern='^interest_templates$'),
    CallbackQueryHandler(select_interest_template, pattern='^select_template_'),
    CallbackQueryHandler(save_interest_settings, pattern='^save_interest_settings$'),
    get_interest_conversation_handler(),
] 
 
 
 