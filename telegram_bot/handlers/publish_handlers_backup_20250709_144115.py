import os
import tempfile
import json
import logging
import threading
from datetime import datetime

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import ConversationHandler

from database.db_manager import get_instagram_account, get_instagram_accounts, create_publish_task
from instagram_api.publisher import publish_video
from database.models import TaskType, TaskStatus
from instagram.reels_manager import publish_reels_in_parallel
from utils.task_queue import add_task_to_queue, get_task_status
from telegram_bot.utils.account_selection import create_account_selector

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è uuid
import uuid

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
CHOOSE_ACCOUNT, UPLOAD_MEDIA, ENTER_CAPTION, ENTER_HASHTAGS, CONFIRM_PUBLISH, CHOOSE_SCHEDULE, CHOOSE_HIDE_FROM_FEED = range(10, 17)

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è Stories
from telegram_bot.states import STORY_ADD_FEATURES, STORY_ADD_MENTIONS, STORY_ADD_LINK, STORY_ADD_LOCATION, STORY_ADD_HASHTAGS, STORY_ADD_TEXT, REELS_UPLOAD_COVER, REELS_TIME_COVER, REELS_BULK_USERTAGS

def is_admin(user_id):
    from telegram_bot.bot import is_admin
    return is_admin(user_id)

def publish_now_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        if update.message:
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        else:
            update.callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    selector = create_account_selector(
        callback_prefix="publish_select",
        title="üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        allow_multiple=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        show_status=True,
        show_folders=True,
        back_callback="menu_publish"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def on_accounts_selected(account_ids: list, update_inner, context_inner):
        if account_ids:
            context_inner.user_data['selected_accounts'] = account_ids
            context_inner.user_data['publish_account_ids'] = account_ids
            
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç
            if len(account_ids) == 1:
                account = get_instagram_account(account_ids[0])
                context_inner.user_data['publish_account_id'] = account_ids[0]
                context_inner.user_data['publish_account_username'] = account.username
                context_inner.user_data['publish_to_all_accounts'] = False
            else:
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                context_inner.user_data['publish_to_all_accounts'] = True
                accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
                context_inner.user_data['publish_account_usernames'] = [acc.username for acc in accounts]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª
            if 'publish_media_path' in context_inner.user_data:
                # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–¥–ø–∏—Å–∏
                query = update_inner.callback_query
                publish_type = context_inner.user_data.get('publish_type', 'post')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ç–∏–ø –º–µ–¥–∏–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å
                if publish_type == 'story':
                    media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"
                elif publish_type == 'reels':
                    media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è Reels"
                elif publish_type == 'igtv':
                    media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è IGTV"
                else:  # post
                    media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞"
                
                if len(account_ids) == 1:
                    account = get_instagram_account(account_ids[0])
                    query.edit_message_text(
                        f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{account.username}*\n\n"
                        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {media_prompt}:",
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    accounts_str = ", ".join(context_inner.user_data['publish_account_usernames'])
                    query.edit_message_text(
                        f"–í—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã ({len(account_ids)}):\n{accounts_str}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {media_prompt}:"
                    )
                return UPLOAD_MEDIA
            else:
                # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
                query = update_inner.callback_query
                publish_type = context_inner.user_data.get('publish_type', 'post')
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ç–∏–ø –º–µ–¥–∏–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å
                if publish_type == 'story':
                    media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"
                elif publish_type == 'reels':
                    media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è Reels"
                elif publish_type == 'igtv':
                    media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è IGTV"
                else:  # post
                    media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞"
                
                if len(account_ids) == 1:
                    account = get_instagram_account(account_ids[0])
                    query.edit_message_text(
                        f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{account.username}*\n\n"
                        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {media_prompt}:",
                        
                    )
                else:
                    accounts_str = ", ".join(context_inner.user_data['publish_account_usernames'])
                    query.edit_message_text(
                        f"–í—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã ({len(account_ids)}):\n{accounts_str}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {media_prompt}:"
                    )
                return ConversationHandler.END
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞
    return selector.start_selection(update, context, on_accounts_selected)

def choose_account_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
    account_id = int(query.data.split('_')[-1])
    context.user_data['publish_account_id'] = account_id

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if 'selected_accounts' not in context.user_data:
        context.user_data['selected_accounts'] = []
    context.user_data['selected_accounts'].append(account_id)

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    account = get_instagram_account(account_id)
    context.user_data['publish_account_username'] = account.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª
    if 'publish_media_path' in context.user_data:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–¥–ø–∏—Å–∏
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{account.username}*\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):",
            parse_mode=ParseMode.MARKDOWN
        )
        return ENTER_CAPTION
    else:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
        publish_type = context.user_data.get('publish_type', 'post')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ç–∏–ø –º–µ–¥–∏–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å
        if publish_type == 'story':
            media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"
        elif publish_type == 'reels':
            media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è Reels"
        elif publish_type == 'igtv':
            media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è IGTV"
        else:  # post
            media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞"
        
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{account.username}*\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {media_prompt}:",
            
        )
        return UPLOAD_MEDIA

def choose_all_accounts_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    accounts = get_instagram_accounts()
    active_accounts = [account for account in accounts if account.is_active]

    if not active_accounts:
        query.edit_message_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    account_ids = [account.id for account in active_accounts]
    context.user_data['publish_account_ids'] = account_ids
    context.user_data['publish_to_all_accounts'] = True

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    account_usernames = [account.username for account in active_accounts]
    context.user_data['publish_account_usernames'] = account_usernames

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    account_names = [account.username for account in active_accounts]
    accounts_str = ", ".join(account_names)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª
    if 'publish_media_path' in context.user_data:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–¥–ø–∏—Å–∏
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã ({len(active_accounts)}):\n{accounts_str}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
        )
        return ENTER_CAPTION
    else:
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
        publish_type = context.user_data.get('publish_type', 'post')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Ç–∏–ø –º–µ–¥–∏–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å
        if publish_type == 'story':
            media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"
        elif publish_type == 'reels':
            media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è Reels"
        elif publish_type == 'igtv':
            media_prompt = "–≤–∏–¥–µ–æ –¥–ª—è IGTV"
        else:  # post
            media_prompt = "—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞"
            
        query.edit_message_text(
            f"–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã ({len(active_accounts)}):\n{accounts_str}\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {media_prompt}:"
        )
        return ConversationHandler.END  # –ó–¥–µ—Å—å –º—ã –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ

def choose_category_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "üöß –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã."
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–∞
    return publish_now_handler(update, context)

def media_upload_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ç–∞—Ä—ã—Ö conversation handlers)"""
    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∏–ø–∞–º–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (story, reels, igtv)
    publish_type = context.user_data.get('publish_type', 'post')
    
    if publish_type == 'post':
        # –î–ª—è –ø–æ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        return handle_media_upload(update, context)
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        return old_media_upload_handler(update, context)

def old_media_upload_handler(update, context):
    """–°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ (–¥–ª—è story, reels, igtv)"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã
    if 'publish_account_id' not in context.user_data and 'publish_account_ids' not in context.user_data:
        # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
        # Store the media file information for later use
        if update.message.photo:
            context.user_data['pending_media'] = update.message.photo[-1]
            context.user_data['pending_media_type'] = 'PHOTO'
        elif update.message.video:
            context.user_data['pending_media'] = update.message.video
            context.user_data['pending_media_type'] = 'VIDEO'
        elif update.message.document:
            context.user_data['pending_media'] = update.message.document
            context.user_data['pending_media_type'] = 'VIDEO' if update.message.document.mime_type.startswith('video/') else 'PHOTO'
        
        return publish_now_handler(update, context)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    media_file = None
    media_type = None
    file_extension = '.jpg'
    
    if update.message.photo:
        media_file = update.message.photo[-1]
        media_type = 'PHOTO'
        file_extension = '.jpg'
    elif update.message.video:
        media_file = update.message.video
        media_type = 'VIDEO'
        file_extension = '.mp4'
    elif update.message.document:
        media_file = update.message.document
        if media_file.mime_type.startswith('video/'):
            media_type = 'VIDEO'
            file_extension = '.mp4'
        else:
            media_type = 'PHOTO'
            file_extension = '.jpg'
    
    if not media_file:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        return

    file_id = media_file.file_id

    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞
    media = context.bot.get_file(file_id)

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞
    with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as temp_file:
        media_path = temp_file.name

    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    media.download(media_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –º–µ–¥–∏–∞ –∏ —Ç–∏–ø –º–µ–¥–∏–∞
    context.user_data['publish_media_path'] = media_path
    context.user_data['publish_media_type'] = media_type

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    publish_type = context.user_data.get('publish_type', 'post')
    
    if publish_type == 'story':
        update.message.reply_text(
            "üì± –ú–µ–¥–∏–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –∏—Å—Ç–æ—Ä–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
        )
    elif publish_type == 'reels':
        update.message.reply_text(
            "üé• –í–∏–¥–µ–æ –¥–ª—è Reels —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ Reels (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
        )
    elif publish_type == 'igtv':
        update.message.reply_text(
            "üé¨ –í–∏–¥–µ–æ –¥–ª—è IGTV —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ IGTV (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
        )
    elif publish_type == 'scheduled_post':
        update.message.reply_text(
            "üì∏ –ú–µ–¥–∏–∞ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
        )
    else:
        update.message.reply_text(
            "üì∏ –ú–µ–¥–∏–∞ –¥–ª—è –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏):"
        )

    return ENTER_CAPTION

def enter_caption(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∏ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    if update.message.text == '/skip':
        context.user_data['publish_caption'] = ""
    else:
        context.user_data['publish_caption'] = update.message.text

    publish_type = context.user_data.get('publish_type', 'post')
    media_type = context.user_data.get('publish_media_type')

    # –î–ª—è —Ä–∏–ª—Å–æ–≤ (–≤–∏–¥–µ–æ) —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ
    if publish_type == 'reels' and media_type == 'VIDEO':
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ", callback_data='keep_in_feed'),
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏", callback_data='hide_from_feed')
            ],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —É–¥–∞–ª–∏—Ç—å —Ä–∏–ª—Å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è?\n"
            "(–†–∏–ª—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ Reels, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)",
            reply_markup=reply_markup
        )
        return CHOOSE_HIDE_FROM_FEED
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        return show_publish_confirmation(update, context)

def choose_hide_from_feed(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ä–∏–ª—Å–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ"""
    query = update.callback_query
    query.answer()

    if query.data == 'hide_from_feed':
        context.user_data['hide_from_feed'] = True
        query.edit_message_text("–†–∏–ª—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
    else:  # keep_in_feed
        context.user_data['hide_from_feed'] = False
        query.edit_message_text("–†–∏–ª—Å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    return show_publish_confirmation(update, context, is_callback=True)

def show_publish_confirmation(update, context, is_callback=False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    media_type = context.user_data.get('publish_media_type')
    publish_type = context.user_data.get('publish_type', 'post')
    caption = context.user_data.get('publish_caption')
    hide_from_feed = context.user_data.get('hide_from_feed', False)
    is_scheduled = context.user_data.get('is_scheduled_post', False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ
    if context.user_data.get('publish_to_all_accounts'):
        account_ids = context.user_data.get('publish_account_ids', [])
        accounts = [get_instagram_account(account_id) for account_id in account_ids]
        account_usernames = [account.username for account in accounts]
        account_info = f"üë• *–ê–∫–∫–∞—É–Ω—Ç—ã:* {len(account_usernames)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    else:
        account_id = context.user_data.get('publish_account_id')
        account_username = context.user_data.get('publish_account_username')
        account_info = f"üë§ *–ê–∫–∫–∞—É–Ω—Ç:* {account_username}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if is_scheduled:
        # –î–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data='schedule_publish')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')]
        ]
        title_prefix = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π "
    else:
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data='confirm_publish_now'),
                InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='schedule_publish')
            ],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')]
        ]
        title_prefix = ""
    
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    type_emojis = {
        'post': 'üì∏',
        'story': 'üì±',
        'reels': 'üé•',
        'igtv': 'üé¨'
    }
    
    type_names = {
        'post': '–ü–æ—Å—Ç',
        'story': '–ò—Å—Ç–æ—Ä–∏—è',
        'reels': 'Reels',
        'igtv': 'IGTV'
    }

    message_text = (
        f"*{title_prefix}–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*\n\n"
        f"{account_info}\n"
        f"{type_emojis.get(publish_type, 'üì∏')} *–¢–∏–ø:* {type_names.get(publish_type, '–ü–æ—Å—Ç')}\n"
        f"üì± *–ú–µ–¥–∏–∞:* {media_type}\n"
        f"‚úèÔ∏è *–ü–æ–¥–ø–∏—Å—å:* {caption or '(–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)'}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∏–ª—Å–æ–≤
    if publish_type == 'reels':
        message_text += f"üîç *–í–∏–¥–∏–º–æ—Å—Ç—å:* {'–°–∫—Ä—ã—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–∏' if hide_from_feed else '–í –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–∫–µ'}\n"

    message_text += "\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"

    if is_callback:
        query = update.callback_query
        query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    return CONFIRM_PUBLISH

def confirm_publish_now(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    media_path = context.user_data.get('publish_media_path')
    media_type = context.user_data.get('publish_media_type')
    publish_type = context.user_data.get('publish_type', 'post')
    caption = context.user_data.get('publish_caption', '')
    hide_from_feed = context.user_data.get('hide_from_feed', False)
    user_id = query.from_user.id

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º TaskType –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if publish_type == 'story':
        task_type = TaskType.STORY
    elif publish_type == 'reels':
        task_type = TaskType.VIDEO  # Reels –∏—Å–ø–æ–ª—å–∑—É—é—Ç VIDEO —Ç–∏–ø
    elif publish_type == 'igtv':
        task_type = TaskType.VIDEO  # IGTV —Ç–æ–∂–µ –≤–∏–¥–µ–æ
    else:  # post
        task_type = TaskType.PHOTO if media_type == 'PHOTO' else TaskType.VIDEO

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    status_message = query.edit_message_text(
        f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é {publish_type}... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ
    if 'publish_account_ids' in context.user_data:
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        account_ids = context.user_data.get('publish_account_ids')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        context.bot.edit_message_text(
            f"‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {publish_type} –Ω–∞ {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–∞—Ö...",
            chat_id=status_message.chat_id,
            message_id=status_message.message_id
        )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        task_ids = []
        for account_id in account_ids:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            additional_data = {
                'hide_from_feed': hide_from_feed,
                'publish_type': publish_type
            }

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            success, task_id = create_publish_task(
                account_id=account_id,
                task_type=task_type,
                media_path=media_path,
                caption=caption,
                additional_data=json.dumps(additional_data)
            )

            if success:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
                from utils.task_queue import add_task_to_queue
                if add_task_to_queue(task_id, update.effective_chat.id, context.bot):
                    account = get_instagram_account(account_id)
                    task_ids.append((task_id, account.username))

        if task_ids:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            from utils.task_queue import register_task_batch
            just_task_ids = [task_id for task_id, _ in task_ids]
            register_task_batch(just_task_ids, update.effective_chat.id, context.bot)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
            message = f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é {publish_type}:\n\n"
            for task_id, username in task_ids:
                message += f"‚Ä¢ –ó–∞–¥–∞—á–∞ #{task_id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {username}\n"

            message += "\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            context.bot.send_message(
                chat_id=status_message.chat_id,
                text=message
            )
        else:
            context.bot.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é {publish_type}.",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )
    else:
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç
        account_id = context.user_data.get('publish_account_id')

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        context.bot.edit_message_text(
            f"‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {publish_type}...",
            chat_id=status_message.chat_id,
            message_id=status_message.message_id
        )

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        additional_data = {
            'hide_from_feed': hide_from_feed,
            'publish_type': publish_type
        }

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        success, task_id = create_publish_task(
            account_id=account_id,
            task_type=task_type,
            media_path=media_path,
            caption=caption,
            additional_data=json.dumps(additional_data)
        )

        if not success:
            context.bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_id}",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )
            return ConversationHandler.END

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        from utils.task_queue import add_task_to_queue
        if add_task_to_queue(task_id, update.effective_chat.id, context.bot):
            account = get_instagram_account(account_id)
            context.bot.edit_message_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é {publish_type} –≤ –∞–∫–∫–∞—É–Ω—Ç {account.username} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.\n"
                f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )
        else:
            context.bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å.",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cleanup_user_data(context)

    return ConversationHandler.END

def cleanup_user_data(context):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    keys_to_remove = [
        'publish_account_id', 'publish_account_username', 'publish_account_ids',
        'publish_to_all_accounts', 'publish_account_usernames', 'publish_media_path',
        'publish_media_type', 'publish_caption', 'hide_from_feed', 'publish_type',
        'is_scheduled_post'
    ]
    
    for key in keys_to_remove:
        if key in context.user_data:
            del context.user_data[key]

def schedule_publish_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 15:30"
    )

    return CHOOSE_SCHEDULE

def choose_schedule(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        scheduled_time = datetime.strptime(update.message.text, "%d.%m.%Y %H:%M")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if scheduled_time <= datetime.now():
            update.message.reply_text(
                "‚ùå –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
            )
            return CHOOSE_SCHEDULE

        publish_type = context.user_data.get('publish_type', 'post')
        user_id = update.effective_user.id

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        if publish_type == 'story':
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Stories
            return schedule_story_publish(update, context, scheduled_time, user_id)
        elif publish_type == 'reels':
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Reels
            return schedule_reels_publish(update, context, scheduled_time, user_id)
        else:
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            return schedule_post_publish(update, context, scheduled_time, user_id)

    except ValueError:
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 15:30"
        )
        return CHOOSE_SCHEDULE

def schedule_story_publish(update, context, scheduled_time, user_id):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories
    media_path = context.user_data.get('publish_media_path')
    caption = context.user_data.get('publish_caption', '')
    mentions = context.user_data.get('story_mentions', [])
    link = context.user_data.get('story_link', '')
    story_text = context.user_data.get('story_text', '')
    story_text_color = context.user_data.get('story_text_color', '#ffffff')
    story_text_position = context.user_data.get('story_text_position', {})
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    if context.user_data.get('publish_to_all_accounts'):
        account_ids = context.user_data.get('publish_account_ids', [])
    else:
        account_ids = [context.user_data.get('publish_account_id')]
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Stories
    additional_data = {
        'publish_type': 'story',
        'mentions': mentions,
        'link': link,
        'story_text': story_text,
        'story_text_color': story_text_color,
        'story_text_position': story_text_position
    }
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    task_ids = []
    for account_id in account_ids:
        if not account_id:
            continue
            
        account = get_instagram_account(account_id)
        if not account:
            continue
            
        success, task_id = create_publish_task(
            account_id=account_id,
            task_type=TaskType.STORY,
            media_path=media_path,
            caption=caption,
            scheduled_time=scheduled_time,
            additional_data=json.dumps(additional_data),
            user_id=user_id
        )
        
        if success:
            task_ids.append((task_id, account.username))
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ Stories #{task_id} –¥–ª—è @{account.username} –Ω–∞ {scheduled_time}")
    
    if task_ids:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        message = f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Stories –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}:\n\n"
        for task_id, username in task_ids:
            message += f"‚Ä¢ –ó–∞–¥–∞—á–∞ #{task_id} –¥–ª—è @{username}\n"
        
        message += f"\nüìÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {scheduled_time.strftime('%d.%m.%Y %H:%M')}"
        message += "\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
        
        keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é", callback_data='menu_scheduled')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(message, reply_markup=reply_markup)
    else:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é Stories.")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cleanup_user_data(context)
    return ConversationHandler.END

def schedule_reels_publish(update, context, scheduled_time, user_id):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels
    video_path = context.user_data.get('reels_video_path')
    caption = context.user_data.get('reels_caption', '')
    options = context.user_data.get('reels_options', {})
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
    account_ids = context.user_data.get('publish_account_ids', [])
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Reels
    music_track = options.get('music_track')
    music_track_dict = None
    if music_track:
        music_track_dict = {
            'id': getattr(music_track, 'id', None),
            'title': getattr(music_track, 'title', 'Unknown'),
            'artist': getattr(music_track, 'artist', 'Unknown'),
            'duration': getattr(music_track, 'duration', 30)
        }
    
    task_data = {
        'publish_type': 'reels',
        'hashtags': options.get('hashtags', []),
        'usertags': options.get('usertags', []),
        'distributed_usertags': options.get('distributed_usertags', []),
        'location': options.get('location'),
        'music_track': music_track_dict,
        'cover_time': options.get('cover_time', 0),
        'thumbnail_path': options.get('thumbnail_path'),
        'uniquify_content': len(account_ids) > 1  # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    }
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    task_ids = []
    for account_id in account_ids:
        account = get_instagram_account(account_id)
        if not account:
            continue
            
        success, task_id = create_publish_task(
            account_id=account_id,
            task_type=TaskType.VIDEO,  # Reels –∏—Å–ø–æ–ª—å–∑—É—é—Ç VIDEO —Ç–∏–ø
            media_path=video_path,
            caption=caption,
            scheduled_time=scheduled_time,
            additional_data=json.dumps(task_data),
            user_id=user_id
        )
        
        if success:
            task_ids.append((task_id, account.username))
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ Reels #{task_id} –¥–ª—è @{account.username} –Ω–∞ {scheduled_time}")
    
    if task_ids:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        message = f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}:\n\n"
        for task_id, username in task_ids:
            message += f"‚Ä¢ –ó–∞–¥–∞—á–∞ #{task_id} –¥–ª—è @{username}\n"
        
        message += f"\nüìÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {scheduled_time.strftime('%d.%m.%Y %H:%M')}"
        message += "\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
        
        keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é", callback_data='menu_scheduled')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(message, reply_markup=reply_markup)
    else:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é Reels.")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cleanup_reels_data(context)
    return ConversationHandler.END

def schedule_post_publish(update, context, scheduled_time, user_id):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    selected_accounts = context.user_data.get('selected_accounts', [])
    media_files = context.user_data.get('media_files', [])
    caption = context.user_data.get('caption', '')
    hashtags = context.user_data.get('hashtags', '')
    hide_from_feed = context.user_data.get('hide_from_feed', False)
    publish_type = context.user_data.get('publish_type', 'post')

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö–µ—à—Ç–µ–≥–∏
    full_caption = caption
    if hashtags:
        if full_caption:
            full_caption += "\n\n" + hashtags
        else:
            full_caption = hashtags

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –º–µ–¥–∏–∞ –ø—É—Ç—å
    if not media_files:
        update.message.reply_text("‚ùå –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    if len(media_files) == 1:
        # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª
        media_path = media_files[0]['path']
        if media_files[0]['type'] == 'photo':
            task_type = TaskType.PHOTO
        else:
            task_type = TaskType.VIDEO
    else:
        # –ö–∞—Ä—É—Å–µ–ª—å
        media_paths = [f['path'] for f in media_files]
        media_path = json.dumps(media_paths)
        task_type = TaskType.CAROUSEL

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    additional_data = {
        'hide_from_feed': hide_from_feed,
        'publish_type': publish_type,
        'uniquify_content': len(selected_accounts) > 1,
        'is_carousel': task_type == TaskType.CAROUSEL
    }

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    task_ids = []
    for account_id in selected_accounts:
        account = get_instagram_account(account_id)
        if not account:
            continue
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –≤ additional_data
        account_data = additional_data.copy()
        account_data.update({
            'account_username': account.username,
            'account_email': account.email,
            'account_email_password': account.email_password
        })
        
        success, task_id = create_publish_task(
            account_id=account_id,
            task_type=task_type,
            media_path=media_path,
            caption=full_caption,
            scheduled_time=scheduled_time,
            additional_data=json.dumps(account_data),
            user_id=user_id
        )
        
        if success:
            task_ids.append((task_id, account.username))
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ #{task_id} –¥–ª—è @{account.username} –Ω–∞ {scheduled_time}")
    
    if task_ids:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        message = f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ {scheduled_time.strftime('%d.%m.%Y %H:%M')}:\n\n"
        for task_id, username in task_ids:
            message += f"‚Ä¢ –ó–∞–¥–∞—á–∞ #{task_id} –¥–ª—è @{username}\n"
        
        message += f"\nüìÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {scheduled_time.strftime('%d.%m.%Y %H:%M')}"
        message += "\nüîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
        
        keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é", callback_data='menu_scheduled')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(message, reply_markup=reply_markup)
    else:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cleanup_user_data(context)
    return ConversationHandler.END

def cancel_publish(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if 'publish_account_id' in context.user_data:
        del context.user_data['publish_account_id']
    if 'publish_account_username' in context.user_data:
        del context.user_data['publish_account_username']
    if 'publish_account_ids' in context.user_data:
        del context.user_data['publish_account_ids']
    if 'publish_to_all_accounts' in context.user_data:
        del context.user_data['publish_to_all_accounts']
    if 'selected_accounts' in context.user_data:
        del context.user_data['selected_accounts']
    if 'publish_media_path' in context.user_data:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.remove(context.user_data['publish_media_path'])
        except:
            pass
        del context.user_data['publish_media_path']
    if 'publish_media_type' in context.user_data:
        del context.user_data['publish_media_type']
    if 'publish_caption' in context.user_data:
        del context.user_data['publish_caption']
    if 'hide_from_feed' in context.user_data:
        del context.user_data['hide_from_feed']

    keyboard = [[InlineKeyboardButton("üîô –ö –º–µ–Ω—é –∑–∞–¥–∞—á", callback_data='menu_tasks')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query.edit_message_text(
        "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=reply_markup
    )

    return ConversationHandler.END

def check_task_status_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ ID –∑–∞–¥–∞—á–∏
    if not context.args or not context.args[0].isdigit():
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: /task_status 123"
        )
        return

    task_id = int(context.args[0])

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    status = get_task_status(task_id)

    if not status:
        update.message.reply_text(
            f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
    if status['success']:
        message = f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n"
        if 'result' in status and status['result']:
            message += f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {status['result']}\n"
    else:
        message = f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:\n{status['result']}\n"

    if 'completed_at' in status and status['completed_at']:
        message += f"–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {status['completed_at'].strftime('%d.%m.%Y %H:%M:%S')}"

    update.message.reply_text(message)

def get_publish_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    from telegram.ext import CommandHandler, CallbackQueryHandler, MessageHandler, Filters

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ ConversationHandler –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    post_conversation = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_post_publish, pattern='^publish_post$'),
            CallbackQueryHandler(start_schedule_post, pattern='^schedule_post$')
        ],
        states={
            CHOOSE_ACCOUNT: [
                CallbackQueryHandler(handle_post_source_selection, pattern='^post_source_'),
                CallbackQueryHandler(handle_post_folder_selection, pattern='^post_folder_'),
                CallbackQueryHandler(handle_post_account_toggle, pattern='^post_account_'),
                CallbackQueryHandler(handle_post_confirm_selection, pattern='^post_confirm$'),
                CallbackQueryHandler(handle_post_source_selection, pattern="^post_from_folders$"),
                CallbackQueryHandler(handle_post_source_selection, pattern="^post_all_accounts$"),
                CallbackQueryHandler(handle_post_source_selection, pattern="^post_back_to_menu$"),
                CallbackQueryHandler(handle_post_folder_selection, pattern="^post_folder_"),
                CallbackQueryHandler(handle_post_folder_selection, pattern="^post_back_to_source$"),
                CallbackQueryHandler(handle_post_account_toggle, pattern="^post_toggle_"),
                CallbackQueryHandler(handle_post_account_toggle, pattern="^post_select_all$"),
                CallbackQueryHandler(handle_post_account_toggle, pattern="^post_deselect_all$"),
                CallbackQueryHandler(handle_post_account_toggle, pattern="^post_page_"),
                CallbackQueryHandler(handle_post_confirm_selection, pattern="^post_confirm_selection$"),
            ],
            UPLOAD_MEDIA: [
                MessageHandler(Filters.photo | Filters.video | Filters.document, handle_media_upload),
                CallbackQueryHandler(handle_media_actions, pattern="^continue_to_caption$"),
                CallbackQueryHandler(handle_media_actions, pattern="^clear_media_files$"),
                CallbackQueryHandler(handle_media_actions, pattern="^cancel_publish$"),
                CallbackQueryHandler(handle_media_actions, pattern="^back_to_accounts$"),
            ],
            ENTER_CAPTION: [
                MessageHandler(Filters.text & ~Filters.command, handle_caption_input),
                CallbackQueryHandler(handle_caption_actions, pattern="^no_caption$"),
                CallbackQueryHandler(handle_caption_actions, pattern="^back_to_media$"),
            ],
            ENTER_HASHTAGS: [
                MessageHandler(Filters.text & ~Filters.command, handle_hashtags_input),
                CallbackQueryHandler(handle_hashtags_actions, pattern="^no_hashtags$"),
                CallbackQueryHandler(handle_hashtags_actions, pattern="^back_to_caption_from_hashtags$"),
            ],
            CHOOSE_HIDE_FROM_FEED: [
                CallbackQueryHandler(choose_hide_from_feed, pattern='^(hide_from_feed|keep_in_feed)$'),
                CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
            ],
            CONFIRM_PUBLISH: [
                CallbackQueryHandler(handle_final_confirmation, pattern="^confirm_publish$"),
                CallbackQueryHandler(handle_final_confirmation, pattern="^back_to_caption$"),
                CallbackQueryHandler(handle_final_confirmation, pattern="^back_to_hashtags$"),
                CallbackQueryHandler(handle_final_confirmation, pattern="^back_to_media$"),
                CallbackQueryHandler(handle_final_confirmation, pattern="^cancel_publish$"),
                CallbackQueryHandler(confirm_publish_now, pattern="^confirm_publish_now$"),
                CallbackQueryHandler(schedule_publish_callback, pattern="^schedule_publish$"),
            ],
            CHOOSE_SCHEDULE: [
                MessageHandler(Filters.text & ~Filters.command, choose_schedule)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", lambda update, context: ConversationHandler.END),
            CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
        ],
        per_message=False
    )

    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π ConversationHandler –¥–ª—è Stories
    story_conversation = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.photo | Filters.video | Filters.document, handle_story_media_upload,
                          pass_user_data=True)
        ],
        states={
            STORY_ADD_FEATURES: [
                CallbackQueryHandler(story_add_caption_handler, pattern='^story_add_caption$'),
                CallbackQueryHandler(story_add_mentions_handler, pattern='^story_add_mentions$'),
                CallbackQueryHandler(story_add_link_handler, pattern='^story_add_link$'),
                CallbackQueryHandler(story_add_location_handler, pattern='^story_add_location$'),
                CallbackQueryHandler(story_add_hashtags_handler, pattern='^story_add_hashtags$'),
                CallbackQueryHandler(story_add_text_handler, pattern='^story_add_text$'),
                CallbackQueryHandler(story_confirm_publish_handler, pattern='^story_confirm_publish$'),
                CallbackQueryHandler(story_schedule_publish_handler, pattern='^story_schedule_publish$'),
                CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
            ],
            ENTER_CAPTION: [
                MessageHandler(Filters.text & ~Filters.command, handle_story_caption_input),
                CommandHandler("skip", handle_story_caption_input)
            ],
            STORY_ADD_MENTIONS: [
                MessageHandler(Filters.text & ~Filters.command, handle_story_mentions_input),
                CommandHandler("skip", handle_story_mentions_input)
            ],
            STORY_ADD_LINK: [
                MessageHandler(Filters.text & ~Filters.command, handle_story_link_input),
                CommandHandler("skip", handle_story_link_input)
            ],
            STORY_ADD_LOCATION: [
                MessageHandler(Filters.text & ~Filters.command, handle_story_location_input),
                CommandHandler("skip", handle_story_location_input)
            ],
            STORY_ADD_HASHTAGS: [
                MessageHandler(Filters.text & ~Filters.command, handle_story_hashtags_input),
                CommandHandler("skip", handle_story_hashtags_input)
            ],
            STORY_ADD_TEXT: [
                MessageHandler(Filters.text & ~Filters.command, handle_story_text_input),
                CommandHandler("skip", handle_story_text_input)
            ],
            CHOOSE_SCHEDULE: [
                MessageHandler(Filters.text & ~Filters.command, choose_schedule)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", lambda update, context: ConversationHandler.END),
            CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
        ]
    )
    
    # –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Stories
    story_start_handler = CallbackQueryHandler(start_story_publish, pattern='^publish_story$')

    # –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Reels
    reels_start_handler = CallbackQueryHandler(start_reels_publish, pattern='^publish_reels$')

    # –ù–æ–≤—ã–π ConversationHandler –¥–ª—è Reels —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    from telegram_bot.states import (
        REELS_UPLOAD_MEDIA, REELS_ADD_CAPTION, REELS_ADD_HASHTAGS, REELS_ADD_FEATURES,
        REELS_ADD_USERTAGS, REELS_ADD_LOCATION, REELS_ADD_MUSIC, REELS_CHOOSE_COVER,
        REELS_CONFIRM_PUBLISH
    )
    
    reels_conversation = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.video | Filters.document, handle_reels_media_upload)
        ],
        states={
            REELS_UPLOAD_MEDIA: [
                MessageHandler(Filters.video | Filters.document, handle_reels_media_upload)
            ],
            REELS_ADD_CAPTION: [
                MessageHandler(Filters.text & ~Filters.command, handle_reels_caption_input),
                CallbackQueryHandler(handle_reels_caption_actions, pattern='^reels_(no_caption|back_to_video)$')
            ],
            REELS_ADD_HASHTAGS: [
                MessageHandler(Filters.text & ~Filters.command, handle_reels_hashtags_input),
                CallbackQueryHandler(handle_reels_hashtags_actions, pattern='^reels_(no_hashtags|back_to_caption)$')
            ],
            REELS_ADD_FEATURES: [
                CallbackQueryHandler(handle_reels_callbacks, pattern='^reels_')
            ],
            REELS_ADD_USERTAGS: [
                MessageHandler(Filters.text & ~Filters.command, handle_reels_usertags_input)
            ],
            REELS_ADD_LOCATION: [
                MessageHandler(Filters.text & ~Filters.command, handle_reels_location_input)
            ],
            REELS_ADD_MUSIC: [
                MessageHandler(Filters.text & ~Filters.command, handle_reels_music_input),
                CallbackQueryHandler(handle_reels_callbacks, pattern='^reels_')
            ],
            REELS_CHOOSE_COVER: [
                MessageHandler(Filters.text & ~Filters.command, handle_reels_cover_input),
                CallbackQueryHandler(handle_reels_callbacks, pattern='^reels_')
            ],
            REELS_UPLOAD_COVER: [
                MessageHandler(Filters.photo, handle_reels_cover_upload)
            ],
            REELS_TIME_COVER: [
                MessageHandler(Filters.text & ~Filters.command, handle_reels_cover_input)
            ],
            REELS_BULK_USERTAGS: [
                MessageHandler(Filters.text | Filters.document, handle_reels_bulk_usertags)
            ],
            REELS_CONFIRM_PUBLISH: [
                CallbackQueryHandler(handle_reels_callbacks, pattern='^reels_')
            ],
            CHOOSE_SCHEDULE: [
                MessageHandler(Filters.text & ~Filters.command, choose_schedule)
            ]
        },
        fallbacks=[
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern='^cancel_reels$'),
            CallbackQueryHandler(lambda u, c: ConversationHandler.END, pattern='^main_menu$'),
            CommandHandler("cancel", lambda update, context: ConversationHandler.END)
        ],
        per_message=False
    )

    igtv_conversation = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(start_igtv_publish, pattern='^publish_igtv$')
        ],
        states={
            CHOOSE_ACCOUNT: [
                MessageHandler(Filters.photo | Filters.video | Filters.document, media_upload_handler)
            ],
            ENTER_CAPTION: [
                MessageHandler(Filters.text & ~Filters.command, enter_caption),
                CommandHandler("skip", enter_caption)
            ],
            CONFIRM_PUBLISH: [
                CallbackQueryHandler(confirm_publish_now, pattern='^confirm_publish_now$'),
                CallbackQueryHandler(schedule_publish_callback, pattern='^schedule_publish$'),
                CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
            ],
            CHOOSE_SCHEDULE: [
                MessageHandler(Filters.text & ~Filters.command, choose_schedule)
            ]
        },
        fallbacks=[
            CommandHandler("cancel", lambda update, context: ConversationHandler.END),
            CallbackQueryHandler(cancel_publish, pattern='^cancel_publish$')
        ]
    )

    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    publish_selector = create_account_selector(
        callback_prefix="publish_select",
        title="üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        allow_multiple=True,
        show_status=True,
        show_folders=True,
        back_callback="menu_publications"
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
    video_handler = MessageHandler(Filters.video | Filters.document.video, media_upload_handler)
    photo_handler = MessageHandler(Filters.photo, media_upload_handler)
    task_status_handler = CommandHandler("task_status", check_task_status_handler)

    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    post_selector = create_account_selector(
        callback_prefix="post_select",
        title="üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞",
        allow_multiple=True,
        show_status=True,
        show_folders=True,
        back_callback="menu_publications"
    )
    
    story_selector = create_account_selector(
        callback_prefix="story_select",
        title="üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏",
        allow_multiple=True,
        show_status=True,
        show_folders=True,
        back_callback="menu_publications"
    )
    
    reels_selector = create_account_selector(
        callback_prefix="reels_select",
        title="üé• –ü—É–±–ª–∏–∫–∞—Ü–∏—è Reels",
        allow_multiple=True,
        show_status=True,
        show_folders=True,
        back_callback="menu_publications"
    )
    
    igtv_selector = create_account_selector(
        callback_prefix="igtv_select",
        title="üé¨ –ü—É–±–ª–∏–∫–∞—Ü–∏—è IGTV",
        allow_multiple=True,
        show_status=True,
        show_folders=True,
        back_callback="menu_publications"
    )
    


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels
    reels_start_handler = CallbackQueryHandler(start_reels_publish, pattern='^publish_reels$')
    
    return [
        post_conversation,
        reels_conversation,   # ConversationHandler –¥–ª—è Reels (–ø–µ—Ä–µ–º–µ—â–µ–Ω –í–´–®–ï story_conversation)
        story_conversation,  # –ó–∞–º–µ–Ω—è–µ–º story_media_conversation –Ω–∞ story_conversation
        story_start_handler,
        igtv_conversation,
        # –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ video_handler –∏ photo_handler - –æ–Ω–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç –º–µ–¥–∏–∞!
        # –ö–∞–∂–¥—ã–π ConversationHandler —Å–∞–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ –≤ –Ω—É–∂–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
        task_status_handler,
        publish_selector.get_conversation_handler(),  # –û–±—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        post_selector.get_conversation_handler(),     # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ—Å—Ç–æ–≤
        story_selector.get_conversation_handler(),    # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π
        reels_selector.get_conversation_handler(),    # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è Reels
        igtv_selector.get_conversation_handler(),     # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è IGTV
    ]

# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–π

def start_post_publish(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    query.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['publish_type'] = 'post'
    context.user_data['publish_media_type'] = 'PHOTO'
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    keyboard = []
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫–∏
    from database.db_manager import get_account_groups
    folders = get_account_groups()
    if folders:
        keyboard.append([InlineKeyboardButton("üìÅ –í—ã–±—Ä–∞—Ç—å –∏–∑ –ø–∞–ø–∫–∏", callback_data="post_from_folders")])
    
    keyboard.append([InlineKeyboardButton("üìã –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="post_all_accounts")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")])
    
    query.edit_message_text(
        "üì∏ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CHOOSE_ACCOUNT

def start_story_publish(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º"""
    from telegram_bot.utils.account_selection import create_account_selector
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['publish_type'] = 'story'
    context.user_data['publish_media_type'] = 'STORY'
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ Stories
    context.user_data.pop('story_mentions', None)
    context.user_data.pop('story_link', None)
    context.user_data.pop('story_text', None)
    context.user_data.pop('story_text_color', None)
    context.user_data.pop('story_text_position', None)
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–π
    selector = create_account_selector(
        callback_prefix="story_select",
        title="üì± –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏",
        allow_multiple=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        show_status=True,     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        show_folders=True,    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
        back_callback="menu_publications"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def on_accounts_selected(account_ids: list, update_inner, context_inner):
        if account_ids:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            context_inner.user_data['publish_account_ids'] = account_ids
            context_inner.user_data['publish_type'] = 'story'
            context_inner.user_data['publish_to_all_accounts'] = len(account_ids) > 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            from database.db_manager import get_instagram_account
            accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
            usernames = [acc.username for acc in accounts if acc]
            context_inner.user_data['publish_account_usernames'] = usernames
            
            query = update_inner.callback_query
            
            if len(account_ids) == 1:
                account = accounts[0]
                text = f"üì± –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *@{account.username}*\n\n"
                context_inner.user_data['publish_account_id'] = account_ids[0]
                context_inner.user_data['publish_account_username'] = account.username
            else:
                text = f"üì± –í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
                text += f"–ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join([f'@{u}' for u in usernames[:3]])}"
                if len(usernames) > 3:
                    text += f" –∏ –µ—â—ë {len(usernames) - 3}..."
                text += "\n\n"
            
            text += "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏:"
            
            query.edit_message_text(text)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–¥–∏–∞
            return UPLOAD_MEDIA
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞
    # AccountSelector —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º END
    selector.start_selection(update, context, on_accounts_selected)
    return ConversationHandler.END

def start_reels_publish(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º"""
    from telegram_bot.utils.account_selection import AccountSelector
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['publish_type'] = 'reels'
    context.user_data['publish_media_type'] = 'VIDEO'
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels
    selector = AccountSelector(
        callback_prefix="reels_select",
        title="üé• –ü—É–±–ª–∏–∫–∞—Ü–∏—è Reels",
        allow_multiple=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        show_status=True,     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        show_folders=True,    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
        back_callback="menu_publications"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def on_accounts_selected(account_ids: list, update_inner, context_inner):
        if account_ids:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            context_inner.user_data['publish_account_ids'] = account_ids
            context_inner.user_data['publish_type'] = 'reels'
            context_inner.user_data['publish_to_all_accounts'] = len(account_ids) > 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            from database.db_manager import get_instagram_account
            accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
            usernames = [acc.username for acc in accounts if acc]
            context_inner.user_data['publish_account_usernames'] = usernames
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Reels
            context_inner.user_data['reels_options'] = {
                'hashtags': [],
                'usertags': [],
                'location': None,
                'hide_from_feed': False,
                'cover_time': 0
            }
            
            if len(account_ids) == 1:
                text = f"üé• –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: @{usernames[0]}\n\n"
                context_inner.user_data['publish_account_id'] = account_ids[0]
                context_inner.user_data['publish_account_username'] = usernames[0]
            else:
                text = f"üé• –í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
                text += f"–ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join([f'@{u}' for u in usernames[:3]])}"
                if len(usernames) > 3:
                    text += f" –∏ –µ—â—ë {len(usernames) - 3}..."
                text += "\n\n"
            
            text += "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è Reels (–¥–æ 90 —Å–µ–∫—É–Ω–¥):"
            
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ
            update_inner.callback_query.edit_message_text(text)
            
            # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∞ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π handler
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ handle_reels_media_upload
            return ConversationHandler.END
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    return selector.start_selection(update, context, on_accounts_selected)

def start_reels_upload(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –¥–ª—è Reels –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã
    account_ids = context.user_data.get('publish_account_ids', [])
    if not account_ids:
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        query.edit_message_text(
            "‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
            ])
        )
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ
    usernames = context.user_data.get('publish_account_usernames', [])
    
    if len(account_ids) == 1:
        text = f"üé• –ü—É–±–ª–∏–∫–∞—Ü–∏—è Reels –≤ –∞–∫–∫–∞—É–Ω—Ç: *@{usernames[0]}*\n\n"
    else:
        text = f"üé• –ü—É–±–ª–∏–∫–∞—Ü–∏—è Reels –≤ {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
        text += "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
    
    text += "üìπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è Reels (–º–∞–∫—Å–∏–º—É–º 90 —Å–µ–∫—É–Ω–¥)"
    
    query.edit_message_text(text)
    
    from telegram_bot.states import REELS_UPLOAD_MEDIA
    return REELS_UPLOAD_MEDIA

def start_igtv_publish(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ IGTV —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º"""
    from telegram_bot.utils.account_selection import AccountSelector
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    context.user_data['publish_type'] = 'igtv'
    context.user_data['publish_media_type'] = 'VIDEO'
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ IGTV
    selector = AccountSelector(
        callback_prefix="igtv_select",
        title="üé¨ –ü—É–±–ª–∏–∫–∞—Ü–∏—è IGTV",
        allow_multiple=True,  # –†–∞–∑—Ä–µ—à–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        show_status=True,     # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        show_folders=True,    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–ø–∫–∏
        back_callback="menu_publications"
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    def on_accounts_selected(account_ids: list, update_inner, context_inner):
        if account_ids:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            context_inner.user_data['publish_account_ids'] = account_ids
            context_inner.user_data['publish_type'] = 'igtv'
            context_inner.user_data['publish_to_all_accounts'] = len(account_ids) > 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            from database.db_manager import get_instagram_account
            accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
            usernames = [acc.username for acc in accounts if acc]
            context_inner.user_data['publish_account_usernames'] = usernames
            
            if len(account_ids) == 1:
                text = f"üé¨ –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: *{usernames[0]}*\n\n"
                context_inner.user_data['publish_account_id'] = account_ids[0]
                context_inner.user_data['publish_account_username'] = usernames[0]
            else:
                text = f"üé¨ –í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
                text += f"–ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join(usernames[:5])}"
                if len(usernames) > 5:
                    text += f" –∏ –µ—â—ë {len(usernames) - 5}..."
                text += "\n\n"
            
            text += "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è IGTV:"
            
            update_inner.callback_query.edit_message_text(
                text,
                
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–¥–∏–∞
            return CHOOSE_ACCOUNT
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞
    return selector.start_selection(update, context, on_accounts_selected)

def show_scheduled_posts(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()
    
    from database.db_manager import get_session
    from database.models import PublishTask, TaskStatus
    
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        scheduled_tasks = session.query(PublishTask).filter(
            PublishTask.status == TaskStatus.SCHEDULED
        ).order_by(PublishTask.scheduled_time).limit(10).all()
        
        if not scheduled_tasks:
            query.edit_message_text(
                "üìÖ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
                ])
            )
            return
        
        message = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
        
        for task in scheduled_tasks:
            from database.db_manager import get_instagram_account
            account = get_instagram_account(task.account_id)
            
            scheduled_time = task.scheduled_time.strftime("%d.%m.%Y %H:%M")
            task_type = task.task_type.value if hasattr(task.task_type, 'value') else str(task.task_type)
            
            message += f"‚Ä¢ *{task_type.upper()}* –≤ @{account.username if account else 'Unknown'}\n"
            message += f"  üìÖ {scheduled_time}\n"
            message += f"  üìù {task.caption[:50]}{'...' if len(task.caption or '') > 50 else ''}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="scheduled_posts")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
        ]
        
        query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
        query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
            ])
        )
    finally:
        session.close()

def show_publication_history(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    query = update.callback_query
    query.answer()
    
    from database.db_manager import get_session
    from database.models import PublishTask, TaskStatus
    
    session = get_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        completed_tasks = session.query(PublishTask).filter(
            PublishTask.status.in_([TaskStatus.COMPLETED, TaskStatus.FAILED])
        ).order_by(PublishTask.completed_time.desc()).limit(10).all()
        
        if not completed_tasks:
            query.edit_message_text(
                "üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
                ])
            )
            return
        
        message = "üìä *–ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π:*\n\n"
        
        for task in completed_tasks:
            from database.db_manager import get_instagram_account
            account = get_instagram_account(task.account_id)
            
            completed_time = task.completed_time.strftime("%d.%m.%Y %H:%M") if task.completed_time else "–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            task_type = task.task_type.value if hasattr(task.task_type, 'value') else str(task.task_type)
            status_emoji = "‚úÖ" if task.status == TaskStatus.COMPLETED else "‚ùå"
            
            message += f"{status_emoji} *{task_type.upper()}* –≤ @{account.username if account else 'Unknown'}\n"
            message += f"  üìÖ {completed_time}\n"
            
            if task.status == TaskStatus.FAILED and task.error_message:
                message += f"  ‚ùå {task.error_message[:50]}{'...' if len(task.error_message) > 50 else ''}\n"
            elif task.media_id:
                message += f"  üîó ID: {task.media_id}\n"
            
            message += "\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="publication_history")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
        ]
        
        query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: {e}")
        query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_publications")]
            ])
        )
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤

def handle_post_source_selection(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    if query.data == "post_from_folders":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
        return show_post_folders(update, context)
    
    elif query.data == "post_all_accounts":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        return show_post_accounts_list(update, context, "all")
    
    elif query.data == "post_back_to_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        from telegram_bot.handlers.system_handlers import show_publish_menu
        return show_publish_menu(update, context)

def handle_post_folder_selection(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    if query.data.startswith("post_folder_"):
        folder_id = query.data.replace("post_folder_", "")
        return show_post_accounts_list(update, context, folder_id)
    elif query.data == "post_back_to_source":
        return handle_post_source_selection(update, context)

def show_post_accounts_list(update, context, folder_name_or_accounts, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω folder_name (—Å—Ç—Ä–æ–∫–∞), –ø–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        if isinstance(folder_name_or_accounts, str):
            folder_name = folder_name_or_accounts
            if folder_name == "all":
                accounts = get_instagram_accounts()
            else:
                accounts = get_accounts_by_folder(folder_name)
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            accounts = folder_name_or_accounts
            folder_name = "unknown"
        
        if not accounts:
            query = update.callback_query
            query.edit_message_text(
                f"‚ùå –í –ø–∞–ø–∫–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_back_to_source")
                ]])
            )
            return CHOOSE_ACCOUNT
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if 'selected_post_accounts' not in context.user_data:
            context.user_data['selected_post_accounts'] = []
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        accounts_per_page = 8
        total_pages = (len(accounts) + accounts_per_page - 1) // accounts_per_page
        page = max(0, min(page, total_pages - 1))
        
        start_idx = page * accounts_per_page
        end_idx = start_idx + accounts_per_page
        page_accounts = accounts[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for account in page_accounts:
            selected = account.id in context.user_data['selected_post_accounts']
            checkbox = "‚úÖ" if selected else "‚òê"
            status = "‚úÖ" if account.is_active else "‚ùå"
            
            keyboard.append([InlineKeyboardButton(
                f"{checkbox} {status} @{account.username}",
                callback_data=f"post_toggle_{account.id}"
            )])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_buttons = []
        if len(context.user_data['selected_post_accounts']) > 0:
            control_buttons.append(InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", callback_data="post_deselect_all"))
        
        if len(context.user_data['selected_post_accounts']) < len(accounts):
            control_buttons.append(InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data="post_select_all"))
        
        if control_buttons:
            keyboard.append(control_buttons)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if total_pages > 1:
            nav_buttons = []
            if page > 0:
                nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"post_page_{page-1}"))
            
            nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="post_page_info"))
            
            if page < total_pages - 1:
                nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"post_page_{page+1}"))
            
            keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = []
        if len(context.user_data['selected_post_accounts']) > 0:
            action_buttons.append(InlineKeyboardButton(
                f"üì§ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ({len(context.user_data['selected_post_accounts'])})",
                callback_data="post_confirm_selection"
            ))
        
        action_buttons.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_back_to_source"))
        keyboard.append(action_buttons)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        folder_text = f"üìÅ {folder_name}" if folder_name != "all" else "üìÅ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"
        selected_count = len(context.user_data['selected_post_accounts'])
        
        text = f"üéØ –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞\n\n"
        text += f"{folder_text}\n"
        text += f"–í—ã–±—Ä–∞–Ω–æ: {selected_count} –∏–∑ {len(accounts)}\n\n"
        
        if selected_count > 1:
            text += "‚ö†Ô∏è –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n\n"
        
        text += "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã:"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        context.user_data['post_folder_name'] = folder_name
        context.user_data['post_current_page'] = page
        context.user_data['post_total_accounts'] = len(accounts)
        context.user_data['post_all_accounts'] = [acc.id for acc in accounts]
        
        query = update.callback_query
        query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return CHOOSE_ACCOUNT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        query = update.callback_query
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_back_to_source")
            ]])
        )
        return CHOOSE_ACCOUNT

def handle_post_account_toggle(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä/–æ—Ç–º–µ–Ω—É –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    try:
        if query.data.startswith("post_toggle_"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞
            account_id = int(query.data.replace("post_toggle_", ""))
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if 'selected_post_accounts' not in context.user_data:
                context.user_data['selected_post_accounts'] = []
            
            selected = context.user_data['selected_post_accounts']
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä
            if account_id in selected:
                selected.remove(account_id)
            else:
                selected.append(account_id)
            
            context.user_data['selected_post_accounts'] = selected
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            folder_name = context.user_data.get('post_folder_name', 'all')
            current_page = context.user_data.get('post_current_page', 0)
            
            return show_post_accounts_list(update, context, folder_name, current_page)
            
        elif query.data == "post_select_all":
            # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            all_account_ids = context.user_data.get('post_all_accounts', [])
            context.user_data['selected_post_accounts'] = all_account_ids.copy()
            
            folder_name = context.user_data.get('post_folder_name', 'all')
            current_page = context.user_data.get('post_current_page', 0)
            
            return show_post_accounts_list(update, context, folder_name, current_page)
            
        elif query.data == "post_deselect_all":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã
            context.user_data['selected_post_accounts'] = []
            
            folder_name = context.user_data.get('post_folder_name', 'all')
            current_page = context.user_data.get('post_current_page', 0)
            
            return show_post_accounts_list(update, context, folder_name, current_page)
            
        elif query.data.startswith("post_page_"):
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            page_part = query.data.replace("post_page_", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            if page_part == "info":
                return CHOOSE_ACCOUNT
            
            try:
                page_num = int(page_part)
                folder_name = context.user_data.get('post_folder_name', 'all')
                return show_post_accounts_list(update, context, folder_name, page_num)
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                return CHOOSE_ACCOUNT
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {e}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_back_to_source")
            ]])
        )
        return CHOOSE_ACCOUNT

def handle_post_confirm_selection(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    selected = context.user_data.get('selected_post_accounts', [])
    
    if not selected:
        query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç", show_alert=True)
        return CHOOSE_ACCOUNT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    context.user_data['selected_accounts'] = selected
    context.user_data['publish_account_ids'] = selected
    context.user_data['publish_to_all_accounts'] = len(selected) > 1
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    from database.db_manager import get_instagram_account
    accounts = [get_instagram_account(acc_id) for acc_id in selected]
    usernames = [acc.username for acc in accounts if acc]
    context.user_data['publish_account_usernames'] = usernames
    
    if len(selected) == 1:
        text = f"üì∏ –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: @{usernames[0]}\n\n"
        context.user_data['publish_account_id'] = selected[0]
        context.user_data['publish_account_username'] = usernames[0]
    else:
        text = f"üì∏ –í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected)}\n"
        text += f"–ê–∫–∫–∞—É–Ω—Ç—ã: {', '.join(usernames[:5])}"
        if len(usernames) > 5:
            text += f" –∏ –µ—â—ë {len(usernames) - 5}..."
        text += "\n\n"
    
    text += "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n"
    text += "‚Ä¢ –§–æ—Ç–æ (JPG, PNG)\n"
    text += "‚Ä¢ –í–∏–¥–µ–æ (MP4, MOV)\n"
    text += "‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ (–¥–æ 10 —à—Ç—É–∫)\n\n"
    
    if len(selected) > 1:
        text += "üé® –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
    
    query.edit_message_text(text)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if 'selected_post_accounts' in context.user_data:
        del context.user_data['selected_post_accounts']
    if 'available_post_accounts' in context.user_data:
        del context.user_data['available_post_accounts']
    
    return UPLOAD_MEDIA

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

def show_post_folders(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    try:
        from database.db_manager import get_account_groups
        folders = get_account_groups()
        
        if not folders:
            query = update.callback_query
            query.edit_message_text(
                "üìÇ –ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_back_to_source")
                ]])
            )
            return CHOOSE_ACCOUNT
        
        keyboard = []
        for folder in folders:
            from database.db_manager import get_accounts_in_group
            accounts_count = len(get_accounts_in_group(folder.id))
            button_text = f"{folder.icon} {folder.name} ({accounts_count} –∞–∫–∫.)"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"post_folder_{folder.id}")])
        
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="post_back_to_source")])
        
        query = update.callback_query
        query.edit_message_text(
            "üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return CHOOSE_ACCOUNT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–∞–ø–æ–∫: {e}")
        query = update.callback_query
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return CHOOSE_ACCOUNT

def get_accounts_by_folder(folder_name):
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏"""
    try:
        if folder_name == "all":
            return get_instagram_accounts()
        
        # –ï—Å–ª–∏ —ç—Ç–æ ID –ø–∞–ø–∫–∏
        if folder_name.isdigit():
            from database.db_manager import get_accounts_in_group
            return get_accounts_in_group(int(folder_name))
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∏–º—è –ø–∞–ø–∫–∏
        from database.db_manager import get_account_groups, get_accounts_in_group
        folders = get_account_groups()
        for folder in folders:
            if folder.name == folder_name:
                return get_accounts_in_group(folder.id)
        
        return []
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞–ø–∫–∏ {folder_name}: {e}")
        return []

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–π

def handle_media_upload(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if 'media_files' not in context.user_data:
            context.user_data['media_files'] = []
        
        media_files = context.user_data['media_files']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.message.photo:
            # –§–æ—Ç–æ
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            file_obj = context.bot.get_file(photo.file_id)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            import uuid
            filename = f"photo_{uuid.uuid4().hex[:8]}.jpg"
            file_path = os.path.join("media", filename)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs("media", exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_obj.download(file_path)
            
            media_files.append({
                'type': 'photo',
                'path': file_path,
                'original_filename': filename
            })
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ: {file_path}")
            
        elif update.message.video:
            # –í–∏–¥–µ–æ
            video = update.message.video
            file_obj = context.bot.get_file(video.file_id)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            import uuid
            filename = f"video_{uuid.uuid4().hex[:8]}.mp4"
            file_path = os.path.join("media", filename)
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs("media", exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_obj.download(file_path)
            
            media_files.append({
                'type': 'video',
                'path': file_path,
                'original_filename': filename
            })
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ: {file_path}")
            
        elif update.message.document:
            # –î–æ–∫—É–º–µ–Ω—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–º)
            document = update.message.document
            file_name = document.file_name or "unknown"
            file_ext = os.path.splitext(file_name)[1].lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª
            if file_ext in ['.jpg', '.jpeg', '.png', '.webp', '.mp4', '.mov', '.avi', '.mkv']:
                file_obj = context.bot.get_file(document.file_id)
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                import uuid
                filename = f"media_{uuid.uuid4().hex[:8]}{file_ext}"
                file_path = os.path.join("media", filename)
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                os.makedirs("media", exist_ok=True)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                file_obj.download(file_path)
                
                media_type = 'photo' if file_ext in ['.jpg', '.jpeg', '.png', '.webp'] else 'video'
                media_files.append({
                    'type': media_type,
                    'path': file_path,
                    'original_filename': file_name
                })
                
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω –º–µ–¥–∏–∞ —Ñ–∞–π–ª: {file_path}")
            else:
                update.message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, MP4, MOV")
                return UPLOAD_MEDIA
        else:
            update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª")
            return UPLOAD_MEDIA
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
        context.user_data['media_files'] = media_files
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        total_files = len(media_files)
        current_file = media_files[-1]
        
        text = f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        for i, file_info in enumerate(media_files, 1):
            file_type = "üì∑ –§–æ—Ç–æ" if file_info['type'] == 'photo' else "üé• –í–∏–¥–µ–æ"
            # –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            text += f"{i}. {file_type} - {file_info['original_filename']}\n"
        
        text += "\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if total_files == 1:
            if current_file['type'] == 'photo':
                text += "üì§ –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –û–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ\n"
            else:
                text += "üì§ –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –í–∏–¥–µ–æ\n"
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã - —Ñ–æ—Ç–æ
            all_photos = all(f['type'] == 'photo' for f in media_files)
            if all_photos and total_files <= 10:
                text += f"üé† –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –ö–∞—Ä—É—Å–µ–ª—å ({total_files} —Ñ–æ—Ç–æ)\n"
            elif not all_photos:
                text += "‚ùå –û—à–∏–±–∫–∞: –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ\n"
                text += "–£–¥–∞–ª–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ\n"
            else:
                text += f"‚ùå –û—à–∏–±–∫–∞: –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ –≤ –∫–∞—Ä—É—Å–µ–ª–∏ (–∑–∞–≥—Ä—É–∂–µ–Ω–æ {total_files})\n"
        
        text += "\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'"
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = [
            [InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_to_caption")],
            [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_media_files")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
        ]
        
        update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return UPLOAD_MEDIA
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return UPLOAD_MEDIA

def handle_media_actions(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏"""
    query = update.callback_query
    query.answer()
    
    try:
        if query.data == "continue_to_caption":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
            media_files = context.user_data.get('media_files', [])
            
            if not media_files:
                query.edit_message_text(
                    "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_accounts")
                    ]])
                )
                return UPLOAD_MEDIA
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
            if len(media_files) > 1:
                all_photos = all(f['type'] == 'photo' for f in media_files)
                if not all_photos:
                    query.edit_message_text(
                        "‚ùå –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_media_files"),
                            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")
                        ]])
                    )
                    return UPLOAD_MEDIA
                
                if len(media_files) > 10:
                    query.edit_message_text(
                        f"‚ùå –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–æ—Ç–æ –≤ –∫–∞—Ä—É—Å–µ–ª–∏ (–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(media_files)})",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_media_files"),
                            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")
                        ]])
                    )
                    return UPLOAD_MEDIA
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è
            selected_accounts = context.user_data.get('selected_accounts', [])
            total_files = len(media_files)
            
            text = f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
            text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
            text += f"üìÅ –§–∞–π–ª–æ–≤: {total_files}\n"
            
            if total_files > 1:
                text += f"üé† –¢–∏–ø: –ö–∞—Ä—É—Å–µ–ª—å\n"
            elif media_files[0]['type'] == 'photo':
                text += f"üì∑ –¢–∏–ø: –§–æ—Ç–æ\n"
            else:
                text += f"üé• –¢–∏–ø: –í–∏–¥–µ–æ\n"
            
            if len(selected_accounts) > 1:
                text += "\nüé® –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            
            text += "\n‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è':"
            
            keyboard = [
                [InlineKeyboardButton("üìù –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="no_caption")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="back_to_media")]
            ]
            
            query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return ENTER_CAPTION
            
        elif query.data == "clear_media_files":
            # –û—á–∏—â–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
            media_files = context.user_data.get('media_files', [])
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞
            for file_info in media_files:
                try:
                    if os.path.exists(file_info['path']):
                        os.remove(file_info['path'])
                except:
                    pass
            
            # –û—á–∏—â–∞–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.user_data['media_files'] = []
            
            query.edit_message_text(
                "üóë –í—Å–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã\n\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
            )
            
            return UPLOAD_MEDIA
            
        elif query.data == "cancel_publish":
            # –û—Ç–º–µ–Ω—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            media_files = context.user_data.get('media_files', [])
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –¥–∏—Å–∫–∞
            for file_info in media_files:
                try:
                    if os.path.exists(file_info['path']):
                        os.remove(file_info['path'])
                except:
                    pass
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.clear()
            
            query.edit_message_text("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return ConversationHandler.END
            
        elif query.data == "back_to_accounts":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            return handle_post_source_selection(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –º–µ–¥–∏–∞: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return UPLOAD_MEDIA

def handle_caption_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        caption = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        context.user_data['caption'] = caption
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ö–µ—à—Ç–µ–≥–æ–≤
        return show_hashtags_input(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ENTER_CAPTION

def handle_caption_actions(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    query = update.callback_query
    query.answer()
    
    try:
        if query.data == "no_caption":
            # –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            context.user_data['caption'] = ""
            return show_hashtags_input(update, context)
            
        elif query.data == "back_to_media":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–¥–∏–∞
            media_files = context.user_data.get('media_files', [])
            
            if not media_files:
                query.edit_message_text("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
                return UPLOAD_MEDIA
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
            text = f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(media_files)}\n\n"
            
            for i, file_info in enumerate(media_files, 1):
                file_type = "üì∑ –§–æ—Ç–æ" if file_info['type'] == 'photo' else "üé• –í–∏–¥–µ–æ"
                text += f"{i}. {file_type} - {file_info['original_filename']}\n"
            
            text += "\nüìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'"
            
            keyboard = [
                [InlineKeyboardButton("üìù –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_to_caption")],
                [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_media_files")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
            ]
            
            query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return UPLOAD_MEDIA
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ENTER_CAPTION

def show_hashtags_input(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    try:
        selected_accounts = context.user_data.get('selected_accounts', [])
        media_files = context.user_data.get('media_files', [])
        caption = context.user_data.get('caption', "")
        
        text = f"üè∑ –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
        text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
        text += f"üìÅ –§–∞–π–ª–æ–≤: {len(media_files)}\n"
        
        if caption:
            preview = caption[:50] + "..." if len(caption) > 50 else caption
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {preview}\n"
        else:
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è\n"
        
        text += "\nüè∑ –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #nature #beautiful #photo)\n"
        text += "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤':"
        
        keyboard = [
            [InlineKeyboardButton("üè∑ –ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤", callback_data="no_hashtags")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="back_to_caption_from_hashtags")]
        ]
        
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        return ENTER_HASHTAGS
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤: {e}")
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ENTER_HASHTAGS

def handle_hashtags_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    try:
        hashtags = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
        context.user_data['hashtags'] = hashtags
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        return show_final_confirmation(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–µ—à—Ç–µ–≥–æ–≤: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ENTER_HASHTAGS

def handle_hashtags_actions(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏"""
    query = update.callback_query
    query.answer()
    
    try:
        if query.data == "no_hashtags":
            # –ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤
            context.user_data['hashtags'] = ""
            return show_final_confirmation(update, context)
            
        elif query.data == "back_to_caption_from_hashtags":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é
            text = f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
            text += f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è':"
            
            keyboard = [
                [InlineKeyboardButton("üìù –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="no_caption")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="back_to_media")]
            ]
            
            query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return ENTER_CAPTION
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ENTER_HASHTAGS

def show_final_confirmation(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        selected_accounts = context.user_data.get('selected_accounts', [])
        media_files = context.user_data.get('media_files', [])
        caption = context.user_data.get('caption', "")
        hashtags = context.user_data.get('hashtags', "")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        accounts = []
        for account_id in selected_accounts:
            account = get_instagram_account(account_id)
            if account:
                accounts.append(account)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        text = f"üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞
        if len(media_files) == 1:
            if media_files[0]['type'] == 'photo':
                text += f"üì∑ –¢–∏–ø: –§–æ—Ç–æ\n"
            else:
                text += f"üé• –¢–∏–ø: –í–∏–¥–µ–æ\n"
        else:
            text += f"üé† –¢–∏–ø: –ö–∞—Ä—É—Å–µ–ª—å ({len(media_files)} —Ñ–æ—Ç–æ)\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        text += f"üë• –ê–∫–∫–∞—É–Ω—Ç—ã:\n"
        for i, account in enumerate(accounts[:5]):
            status = "‚úÖ" if account.is_active else "‚ùå"
            text += f"   {i+1}. {status} @{account.username}\n"
        
        if len(accounts) > 5:
            text += f"   ... –∏ –µ—â–µ {len(accounts) - 5} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–∏—Å–∞–Ω–∏–∏
        if caption:
            preview = caption[:100] + "..." if len(caption) > 100 else caption
            text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {preview}\n"
        else:
            text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö–µ—à—Ç–µ–≥–∞—Ö
        if hashtags:
            hashtags_preview = hashtags[:100] + "..." if len(hashtags) > 100 else hashtags
            text += f"üè∑ –•–µ—à—Ç–µ–≥–∏: {hashtags_preview}\n"
        else:
            text += f"üè∑ –•–µ—à—Ç–µ–≥–∏: –ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤\n"
        
        # –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è
        if len(accounts) > 1:
            text += f"\nüé® –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞ (–∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)\n"
        
        text += f"\n‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏–ª–∏ –Ω–µ—Ç
        is_scheduled = context.user_data.get('is_scheduled_post', False)
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if is_scheduled:
            # –î–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="schedule_publish")],
                [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="back_to_caption")],
                [InlineKeyboardButton("üè∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", callback_data="back_to_hashtags")],
                [InlineKeyboardButton("üìÅ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data="back_to_media")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_publish")],
                [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="back_to_caption")],
                [InlineKeyboardButton("üè∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", callback_data="back_to_hashtags")],
                [InlineKeyboardButton("üìÅ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data="back_to_media")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_publish")]
            ]
        
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        return CONFIRM_PUBLISH
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return CONFIRM_PUBLISH

def handle_final_confirmation(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    query = update.callback_query
    query.answer()
    
    try:
        if query.data == "confirm_publish":
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            return execute_publish_task(update, context)
        
        elif query.data == "schedule_publish":
            # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –Ω–æ–≤—ã–π
            selected_accounts = context.user_data.get('selected_accounts', [])
            media_files = context.user_data.get('media_files', [])
            caption = context.user_data.get('caption', "")
            hashtags = context.user_data.get('hashtags', "")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö–µ—à—Ç–µ–≥–∏
            full_caption = caption
            if hashtags:
                if full_caption:
                    full_caption += "\n\n" + hashtags
                else:
                    full_caption = hashtags
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            context.user_data['publish_account_ids'] = selected_accounts
            context.user_data['publish_caption'] = full_caption
            context.user_data['publish_type'] = 'post'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ
            if media_files:
                if len(media_files) == 1:
                    context.user_data['publish_media_path'] = media_files[0]['path']
                    context.user_data['publish_media_type'] = 'PHOTO' if media_files[0]['type'] == 'photo' else 'VIDEO'
                else:
                    # –ö–∞—Ä—É—Å–µ–ª—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
                    context.user_data['publish_media_path'] = json.dumps([f['path'] for f in media_files])
                    context.user_data['publish_media_type'] = 'CAROUSEL'
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            return schedule_publish_callback(update, context)
            
        elif query.data == "back_to_caption":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é
            text = f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n"
            text += f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è':"
            
            keyboard = [
                [InlineKeyboardButton("üìù –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="no_caption")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–¥–∏–∞", callback_data="back_to_media")]
            ]
            
            query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
            return ENTER_CAPTION
            
        elif query.data == "back_to_hashtags":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ö–µ—à—Ç–µ–≥–∞–º
            return show_hashtags_input(update, context)
            
        elif query.data == "back_to_media":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–¥–∏–∞
            return handle_caption_actions(update, context)
            
        elif query.data == "cancel_publish":
            # –û—Ç–º–µ–Ω—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            return handle_media_actions(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return CONFIRM_PUBLISH

def execute_publish_task(update, context):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    
    try:
        selected_accounts = context.user_data.get('selected_accounts', [])
        media_files = context.user_data.get('media_files', [])
        caption = context.user_data.get('caption', "")
        hashtags = context.user_data.get('hashtags', "")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ö–µ—à—Ç–µ–≥–∏
        full_caption = caption
        if hashtags:
            if full_caption:
                full_caption += "\n\n" + hashtags
            else:
                full_caption = hashtags
        
        if not selected_accounts or not media_files:
            query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            return ConversationHandler.END
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        query.edit_message_text("üöÄ –ù–∞—á–∏–Ω–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é...\n\n‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞—á...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
        if len(media_files) == 1:
            if media_files[0]['type'] == 'photo':
                task_type = TaskType.PHOTO
            else:
                task_type = TaskType.VIDEO
        else:
            task_type = TaskType.CAROUSEL
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø—É—Ç–∏
        if task_type == TaskType.CAROUSEL:
            media_paths = [f['path'] for f in media_files]
            media_path_json = json.dumps(media_paths)
        else:
            media_path_json = media_files[0]['path']
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        task_ids = []
        need_uniquification = len(selected_accounts) > 1
        
        for account_id in selected_accounts:
            account = get_instagram_account(account_id)
            if not account:
                continue
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            success, task_id = create_publish_task(
                account_id=account_id,
                task_type=task_type,
                media_path=media_path_json,
                caption=full_caption,
                additional_data=json.dumps({
                    'uniquify_content': need_uniquification,
                    'is_carousel': task_type == TaskType.CAROUSEL,
                    'account_username': account.username,
                    'account_email': account.email,
                    'account_email_password': account.email_password
                }),
                user_id=query.from_user.id
            )
            
            if success and task_id:
                task_ids.append(task_id)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ #{task_id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ @{account.username}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                from utils.task_queue import add_task_to_queue
                add_task_to_queue(task_id, query.message.chat_id, context.bot)
                logger.info(f"–ó–∞–¥–∞—á–∞ #{task_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        if task_ids:
            from utils.task_queue import register_task_batch
            register_task_batch(task_ids, query.message.chat_id, context.bot)
            logger.info(f"üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞–∫–µ—Ç –∏–∑ {len(task_ids)} –∑–∞–¥–∞—á –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if task_ids:
            text = f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
            text += f"üéØ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {len(task_ids)}\n"
            text += f"üìÅ –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: "
            
            if task_type == TaskType.CAROUSEL:
                text += f"–ö–∞—Ä—É—Å–µ–ª—å ({len(media_files)} —Ñ–æ—Ç–æ)\n"
            elif task_type == TaskType.PHOTO:
                text += "–§–æ—Ç–æ\n"
            else:
                text += "–í–∏–¥–µ–æ\n"
            
            if need_uniquification:
                text += f"üé® –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞\n"
            
            text += f"\nüìã –ó–∞–¥–∞—á–∏: {', '.join([f'#{tid}' for tid in task_ids])}\n"
            
            if len(task_ids) > 1:
                text += f"\n‚è≥ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è...\n"
                text += f"üìä –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á."
            else:
                text += f"\n‚è≥ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è..."
            
            query.edit_message_text(text)
        else:
            query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –¥–∞–Ω–Ω—ã–µ
        for file_info in media_files:
            try:
                if os.path.exists(file_info['path']):
                    # –ù–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ä–∞–∑—É - –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    pass
            except:
                pass
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.clear()
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        return ConversationHandler.END

def handle_story_media_upload(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –¥–ª—è Stories"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    publish_type = context.user_data.get('publish_type')
    account_ids = context.user_data.get('publish_account_ids', [])
    
    logger.info(f"üì± STORY: handle_story_media_upload –≤—ã–∑–≤–∞–Ω")
    logger.info(f"üì± STORY: publish_type={publish_type}")
    logger.info(f"üì± STORY: account_ids={account_ids}")
    logger.info(f"üì± STORY: user_data keys={list(context.user_data.keys())}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–ª—è Stories –∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã
    if publish_type != 'story' or not account_ids:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–ª—è Stories –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        logger.info(f"üì± STORY: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º - publish_type={publish_type}, account_ids={len(account_ids)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –≤–º–µ—Å—Ç–æ ConversationHandler.END, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        return None

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    media_file = None
    media_type = None
    file_extension = '.jpg'

    if update.message.photo:
        media_file = update.message.photo[-1]
        media_type = 'PHOTO'
        file_extension = '.jpg'
    elif update.message.video:
        media_file = update.message.video
        media_type = 'VIDEO'
        file_extension = '.mp4'
    elif update.message.document:
        media_file = update.message.document
        if media_file.mime_type and media_file.mime_type.startswith('video/'):
            media_type = 'VIDEO'
            file_extension = '.mp4'
        else:
            media_type = 'PHOTO'
            file_extension = '.jpg'
    else:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏.")
        return ConversationHandler.END

    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
    import tempfile
    with tempfile.NamedTemporaryFile(delete=False, suffix=file_extension) as temp_file:
        media_path = temp_file.name

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –µ–≥–æ
    file = media_file.get_file()
    file.download(media_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data['publish_media_path'] = media_path
    context.user_data['publish_media_type'] = media_type

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
    is_scheduled = context.user_data.get('is_scheduled_post', False)
    
    if is_scheduled:
        # –î–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("üë• –£–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='story_add_mentions'),
                InlineKeyboardButton("üîó –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='story_add_link')
            ],
            [
                InlineKeyboardButton("üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data='story_schedule_publish')
            ],
            [
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')
            ]
        ]
        title_prefix = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è "
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton("üë• –£–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='story_add_mentions'),
                InlineKeyboardButton("üîó –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='story_add_link')
            ],
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data='story_confirm_publish'),
                InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='story_schedule_publish')
            ],
            [
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')
            ]
        ]
        title_prefix = ""
    
    reply_markup = InlineKeyboardMarkup(keyboard)

    account_info = ""
    if context.user_data.get('publish_to_all_accounts'):
        account_count = len(context.user_data.get('publish_account_ids', []))
        account_info = f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {account_count}"
    else:
        username = context.user_data.get('publish_account_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        account_info = f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{username}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    text = f"üì± {title_prefix}–ú–µ–¥–∏–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n{account_info}\n"
    text += f"üé¨ –¢–∏–ø: {media_type}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    mentions = context.user_data.get('story_mentions', [])
    if mentions:
        text += f"üë• –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(mentions)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    
    link = context.user_data.get('story_link', '')
    if link:
        text += f"üîó –°—Å—ã–ª–∫–∞: {link[:30]}{'...' if len(link) > 30 else ''}\n"
    
    if is_scheduled:
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
    else:
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ:"

    update.message.reply_text(
        text,
        reply_markup=reply_markup,
        
    )

    return STORY_ADD_FEATURES

def story_add_caption_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∫ –∏—Å—Ç–æ—Ä–∏–∏*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        
    )

    return ENTER_CAPTION

def handle_story_caption_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏"""
    if update.message.text == '/skip':
        context.user_data.pop('publish_caption', None)
        update.message.reply_text("‚è≠Ô∏è –ü–æ–¥–ø–∏—Å—å –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
    else:
        caption = update.message.text.strip()
        context.user_data['publish_caption'] = caption
        update.message.reply_text(f"‚úÖ –ü–æ–¥–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {caption[:50]}{'...' if len(caption) > 50 else ''}")

    return back_to_story_features(update, context)

def story_add_mentions_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "üë• *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: `username1, username2, username3`\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
        
    )

    return STORY_ADD_MENTIONS

def story_add_link_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ Stories\n\n"
        "‚ö†Ô∏è –í–ê–ñ–ù–û: –°—Å—ã–ª–∫–∏ –≤ Stories –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è:\n"
        "‚Ä¢ üéØ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ —Å 10,000+ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
        "‚Ä¢ ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Å–∏–Ω—è—è –≥–∞–ª–æ—á–∫–∞)\n"
        "‚Ä¢ üè¢ Business/Creator –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è swipe up:\n"
        "–ü—Ä–∏–º–µ—Ä: https://example.com\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
    )

    return STORY_ADD_LINK

def story_add_text_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ–≤–µ—Ä—Ö —Ñ–æ—Ç–æ"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "üí¨ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–≤–µ—Ä—Ö —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–≤–µ—Ä—Ö –∏—Å—Ç–æ—Ä–∏–∏:\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.",
        
    )

    return STORY_ADD_TEXT

def handle_story_mentions_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    if update.message.text == '/skip':
        context.user_data.pop('story_mentions', None)
    else:
        # –ü–∞—Ä—Å–∏–º usernames
        usernames = [username.strip().replace('@', '') for username in update.message.text.split(',')]
        usernames = [u for u in usernames if u]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
        
        if usernames:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
            mentions = []
            for i, username in enumerate(usernames[:5]):  # –ú–∞–∫—Å–∏–º—É–º 5 —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
                mentions.append({
                    'username': username,
                    'x': 0.5,
                    'y': 0.2 + (i * 0.15),  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
                    'width': 0.6,
                    'height': 0.1
                })
            
            context.user_data['story_mentions'] = mentions
            usernames_str = ', '.join([f"@{m['username']}" for m in mentions])
            update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(mentions)} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {usernames_str}")
        else:
            update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å usernames. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return STORY_ADD_MENTIONS

    return back_to_story_features(update, context)

def handle_story_link_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏"""
    if update.message.text == '/skip':
        context.user_data.pop('story_link', None)
    else:
        link = update.message.text.strip()
        if link.startswith('http://') or link.startswith('https://'):
            context.user_data['story_link'] = link
            update.message.reply_text(f"‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {link}")
        else:
            update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return STORY_ADD_LINK

    return back_to_story_features(update, context)

def handle_story_text_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–≤–µ—Ä—Ö —Ñ–æ—Ç–æ"""
    if update.message.text == '/skip':
        context.user_data.pop('story_text', None)
        context.user_data.pop('story_text_color', None)
        context.user_data.pop('story_text_position', None)
    else:
        story_text = update.message.text.strip()
        if len(story_text) > 100:
            update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
            return STORY_ADD_TEXT
        
        context.user_data['story_text'] = story_text
        context.user_data['story_text_color'] = '#ffffff'  # –ë–µ–ª—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        context.user_data['story_text_position'] = {
            'x': 0.5, 'y': 0.5, 'width': 0.8, 'height': 0.1
        }
        
        update.message.reply_text(f"‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {story_text}")

    return back_to_story_features(update, context)

def back_to_story_features(update, context):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Stories"""
    is_scheduled = context.user_data.get('is_scheduled_post', False)
    
    if is_scheduled:
        # –î–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("üë• –£–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='story_add_mentions'),
                InlineKeyboardButton("üîó –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='story_add_link')
            ],
            [
                InlineKeyboardButton("üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data='story_schedule_publish')
            ],
            [
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')
            ]
        ]
        title_prefix = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è "
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [
                InlineKeyboardButton("üë• –£–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='story_add_mentions'),
                InlineKeyboardButton("üîó –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='story_add_link')
            ],
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data='story_confirm_publish'),
                InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data='story_schedule_publish')
            ],
            [
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_publish')
            ]
        ]
        title_prefix = ""
    
    reply_markup = InlineKeyboardMarkup(keyboard)

    account_info = ""
    if context.user_data.get('publish_to_all_accounts'):
        account_count = len(context.user_data.get('publish_account_ids', []))
        account_info = f"üì± –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {account_count}"
    else:
        username = context.user_data.get('publish_account_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        account_info = f"üì± –ê–∫–∫–∞—É–Ω—Ç: @{username}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    media_type = context.user_data.get('publish_media_type', 'UNKNOWN')
    text = f"üì± {title_prefix}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏\n\n{account_info}\n"
    text += f"üé¨ –¢–∏–ø: {media_type}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    mentions = context.user_data.get('story_mentions', [])
    if mentions:
        text += f"üë• –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(mentions)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    
    link = context.user_data.get('story_link', '')
    if link:
        text += f"üîó –°—Å—ã–ª–∫–∞: {link[:30]}{'...' if len(link) > 30 else ''}\n"
    
    if is_scheduled:
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
    else:
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ:"

    update.message.reply_text(
        text,
        reply_markup=reply_markup,
        
    )

    return STORY_ADD_FEATURES

def story_add_location_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å:\n"
        "–ü—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å\n"
        "–ü—Ä–∏–º–µ—Ä: New York, Central Park\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
    )

    return STORY_ADD_LOCATION

def handle_story_location_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    if update.message.text == '/skip':
        context.user_data.pop('story_location', None)
    else:
        location_name = update.message.text.strip()
        if len(location_name) > 100:
            update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
            return STORY_ADD_LOCATION
        
        context.user_data['story_location'] = location_name
        update.message.reply_text(f"‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {location_name}")

    return back_to_story_features(update, context)

def story_add_hashtags_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–µ—à—Ç–µ–≥–æ–≤"""
    query = update.callback_query
    query.answer()

    query.edit_message_text(
        "üè∑Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é:\n"
        "–ü—Ä–∏–º–µ—Ä: #travel #nature #beautiful\n"
        "–ü—Ä–∏–º–µ—Ä: travel, nature, beautiful\n\n"
        "–ú–∞–∫—Å–∏–º—É–º 10 —Ö–µ—à—Ç–µ–≥–æ–≤.\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
    )

    return STORY_ADD_HASHTAGS

def handle_story_hashtags_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤"""
    if update.message.text == '/skip':
        context.user_data.pop('story_hashtags', None)
    else:
        hashtags_text = update.message.text.strip()
        
        # –ü–∞—Ä—Å–∏–º —Ö–µ—à—Ç–µ–≥–∏ (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏: –ø—Ä–æ–±–µ–ª, –∑–∞–ø—è—Ç–∞—è)
        import re
        hashtags = re.split(r'[,\s]+', hashtags_text)
        hashtags = [tag.strip().replace('#', '') for tag in hashtags if tag.strip()]
        hashtags = [tag for tag in hashtags if tag]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
        
        if len(hashtags) > 10:
            update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ö–µ—à—Ç–µ–≥–æ–≤. –ú–∞–∫—Å–∏–º—É–º 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return STORY_ADD_HASHTAGS
        
        if hashtags:
            context.user_data['story_hashtags'] = hashtags
            hashtags_str = ', '.join([f"#{tag}" for tag in hashtags])
            update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(hashtags)} —Ö–µ—à—Ç–µ–≥–æ–≤: {hashtags_str}")
        else:
            update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ö–µ—à—Ç–µ–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return STORY_ADD_HASHTAGS

    return back_to_story_features(update, context)

def story_confirm_publish_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    query = update.callback_query
    query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    media_path = context.user_data.get('publish_media_path')
    media_type = context.user_data.get('publish_media_type')
    caption = context.user_data.get('publish_caption', '')
    mentions = context.user_data.get('story_mentions', [])
    link = context.user_data.get('story_link', '')
    story_text = context.user_data.get('story_text', '')
    story_text_color = context.user_data.get('story_text_color', '#ffffff')
    story_text_position = context.user_data.get('story_text_position', {})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    status_message = query.edit_message_text(
        "‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏–∏... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É–±–ª–∏–∫—É–µ–º –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ
    if context.user_data.get('publish_to_all_accounts'):
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        account_ids = context.user_data.get('publish_account_ids', [])
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π batch_id –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á
        import time
        batch_id = f"{query.from_user.id}_{int(time.time())}"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Stories
        additional_data = {
            'publish_type': 'story',
            'mentions': mentions,
            'link': link,
            'story_text': story_text,
            'story_text_color': story_text_color,
            'story_text_position': story_text_position
        }

        successful_tasks = 0
        failed_tasks = 0
        task_ids = []
        
        for account_id in account_ids:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            success, task_id = create_publish_task(
                account_id=account_id,
                task_type=TaskType.STORY,
                media_path=media_path,
                caption=caption,
                additional_data=json.dumps(additional_data),
                user_id=query.from_user.id  # –î–æ–±–∞–≤–ª—è–µ–º user_id
            )
            
            if success:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
                from utils.task_queue import add_task_to_queue
                add_task_to_queue(task_id, query.message.chat_id, context.bot)
                task_ids.append(task_id)
                successful_tasks += 1
            else:
                failed_tasks += 1

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        if task_ids:
            from utils.task_queue import register_task_batch
            register_task_batch(task_ids, query.message.chat_id, context.bot)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if successful_tasks > 0:
            context.bot.edit_message_text(
                f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {successful_tasks} –∑–∞–¥–∞—á –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏–∏!\n"
                f"{'‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ' + str(failed_tasks) + ' –∑–∞–¥–∞—á.' if failed_tasks > 0 else ''}\n\n"
                f"üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ '–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á'.",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )
        else:
            context.bot.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )
    else:
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç
        account_id = context.user_data.get('publish_account_id')

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Stories
        additional_data = {
            'publish_type': 'story',
            'mentions': mentions,
            'link': link,
            'story_text': story_text,
            'story_text_color': story_text_color,
            'story_text_position': story_text_position
        }

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        success, task_id = create_publish_task(
            account_id=account_id,
            task_type=TaskType.STORY,
            media_path=media_path,
            caption=caption,
            additional_data=json.dumps(additional_data),
            user_id=query.from_user.id  # –î–æ–±–∞–≤–ª—è–µ–º user_id
        )

        if not success:
            context.bot.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {task_id}",
                chat_id=status_message.chat_id,
                message_id=status_message.message_id
            )
            return ConversationHandler.END

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
        from utils.task_queue import add_task_to_queue
        add_task_to_queue(task_id)

        # –°–æ–∑–¥–∞–µ–º batch –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
        from utils.task_queue import register_task_batch
        register_task_batch([task_id], query.message.chat_id, context.bot)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        context.bot.edit_message_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ '–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á'.",
            chat_id=status_message.chat_id,
            message_id=status_message.message_id
        )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END

def handle_reels_media_upload(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è Reels"""
    user_id = update.effective_user.id

    if not is_admin(user_id):
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    publish_type = context.user_data.get('publish_type')
    account_ids = context.user_data.get('publish_account_ids', [])
    
    logger.info(f"üé• REELS: handle_reels_media_upload –≤—ã–∑–≤–∞–Ω")
    logger.info(f"üé• REELS: publish_type={publish_type}")
    logger.info(f"üé• REELS: account_ids={account_ids}")
    logger.info(f"üé• REELS: user_data keys={list(context.user_data.keys())}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ
    video_file = None
    if update.message.video:
        video_file = update.message.video
        logger.info(f"üé• REELS: –ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ: {video_file.file_id}")
    elif update.message.document and update.message.document.mime_type and update.message.document.mime_type.startswith('video/'):
        video_file = update.message.document
        logger.info(f"üé• REELS: –ü–æ–ª—É—á–µ–Ω –≤–∏–¥–µ–æ –¥–æ–∫—É–º–µ–Ω—Ç: {video_file.file_id}")
    
    if not video_file:
        logger.warning(f"üé• REELS: –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è Reels.")
        return ConversationHandler.END
    
    # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –Ω–æ –µ—Å—Ç—å –≤–∏–¥–µ–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not account_ids:
        logger.warning(f"üé• REELS: –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")
        update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        return ConversationHandler.END
    
    # –ï—Å–ª–∏ publish_type –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
    if publish_type != 'reels':
        logger.info(f"üé• REELS: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º publish_type = 'reels'")
        context.user_data['publish_type'] = 'reels'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ 90 —Å–µ–∫—É–Ω–¥)
    if hasattr(video_file, 'duration') and video_file.duration > 90:
        update.message.reply_text("‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è Reels - 90 —Å–µ–∫—É–Ω–¥.")
        return ConversationHandler.END

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        file_id = video_file.file_id
        media = context.bot.get_file(file_id)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
        import tempfile
        with tempfile.NamedTemporaryFile(delete=False, suffix='.mp4') as temp_file:
            video_path = temp_file.name

        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        media.download(video_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
        context.user_data['reels_video_path'] = video_path
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º reels_options –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if 'reels_options' not in context.user_data:
            context.user_data['reels_options'] = {}

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è (–∫–∞–∫ –≤ –ø–æ—Å—Ç–∞—Ö)
        return show_reels_caption_input(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

def show_reels_caption_input(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è Reels"""
    try:
        selected_accounts = context.user_data.get('publish_account_ids', [])
        
        text = f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è Reels\n\n"
        text += f"üé• –í–∏–¥–µ–æ: –ó–∞–≥—Ä—É–∂–µ–Ω–æ\n"
        text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
        
        if len(selected_accounts) > 1:
            text += "\nüé® –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        
        text += "\n‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è':"
        
        keyboard = [
            [InlineKeyboardButton("üìù –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è", callback_data="reels_no_caption")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∏–¥–µ–æ", callback_data="reels_back_to_video")]
        ]
        
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        from telegram_bot.states import REELS_ADD_CAPTION
        return REELS_ADD_CAPTION
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        from telegram_bot.states import REELS_ADD_CAPTION
        return REELS_ADD_CAPTION

def handle_reels_caption_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è Reels"""
    try:
        caption = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        context.user_data['reels_caption'] = caption
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ö–µ—à—Ç–µ–≥–æ–≤
        return show_reels_hashtags_input(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        from telegram_bot.states import REELS_ADD_CAPTION
        return REELS_ADD_CAPTION

def handle_reels_caption_actions(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è Reels"""
    query = update.callback_query
    query.answer()
    
    try:
        if query.data == "reels_no_caption":
            # –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            context.user_data['reels_caption'] = ""
            return show_reels_hashtags_input(update, context)
            
        elif query.data == "reels_back_to_video":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ
            query.edit_message_text("üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è Reels (–¥–æ 90 —Å–µ–∫—É–Ω–¥):")
            from telegram_bot.states import REELS_UPLOAD_MEDIA
            return REELS_UPLOAD_MEDIA
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        from telegram_bot.states import REELS_ADD_CAPTION
        return REELS_ADD_CAPTION

def show_reels_hashtags_input(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è Reels"""
    try:
        selected_accounts = context.user_data.get('publish_account_ids', [])
        caption = context.user_data.get('reels_caption', "")
        
        text = f"üè∑ –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è Reels\n\n"
        text += f"üé• –í–∏–¥–µ–æ: –ó–∞–≥—Ä—É–∂–µ–Ω–æ\n"
        text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
        
        if caption:
            preview = caption[:50] + "..." if len(caption) > 50 else caption
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {preview}\n"
        else:
            text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è\n"
        
        text += "\nüè∑ –í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #reels #video #instagram)\n"
        text += "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤':"
        
        keyboard = [
            [InlineKeyboardButton("üè∑ –ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤", callback_data="reels_no_hashtags")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="reels_back_to_caption")]
        ]
        
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            update.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        from telegram_bot.states import REELS_ADD_HASHTAGS
        return REELS_ADD_HASHTAGS
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤: {e}")
        if hasattr(update, 'callback_query') and update.callback_query:
            update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        from telegram_bot.states import REELS_ADD_HASHTAGS
        return REELS_ADD_HASHTAGS

def handle_reels_hashtags_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è Reels"""
    try:
        hashtags_text = update.message.text
        
        # –ü–∞—Ä—Å–∏–º —Ö–µ—à—Ç–µ–≥–∏
        hashtags = []
        # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –µ—Å—Ç—å, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
        text = hashtags_text.replace('#', '')
        tags = text.split()
        
        for tag in tags:
            if tag.strip():
                hashtags.append(tag.strip())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
        if 'reels_options' not in context.user_data:
            context.user_data['reels_options'] = {}
        context.user_data['reels_options']['hashtags'] = hashtags
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
        return show_reels_features_menu(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ö–µ—à—Ç–µ–≥–æ–≤: {e}")
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        from telegram_bot.states import REELS_ADD_HASHTAGS
        return REELS_ADD_HASHTAGS

def handle_reels_hashtags_actions(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏ –¥–ª—è Reels"""
    query = update.callback_query
    query.answer()
    
    try:
        if query.data == "reels_no_hashtags":
            # –ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤
            if 'reels_options' not in context.user_data:
                context.user_data['reels_options'] = {}
            context.user_data['reels_options']['hashtags'] = []
            return show_reels_features_menu(update, context)
            
        elif query.data == "reels_back_to_caption":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é
            return show_reels_caption_input(update, context)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏: {e}")
        query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        from telegram_bot.states import REELS_ADD_HASHTAGS
        return REELS_ADD_HASHTAGS

def show_reels_features_menu(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è Reels"""
    from telegram_bot.states import REELS_ADD_FEATURES
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    options = context.user_data.get('reels_options', {})
    caption = context.user_data.get('reels_caption', '')
    selected_accounts = context.user_data.get('publish_account_ids', [])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    is_scheduled = context.user_data.get('is_scheduled_post', False)
    title_prefix = "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ " if is_scheduled else ""
    
    status_text = f"üé• *{title_prefix}–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Reels*\n\n"
    status_text += f"üì§ –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
    
    if caption:
        preview = caption[:50] + "..." if len(caption) > 50 else caption
        status_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {preview}\n"
    else:
        status_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è\n"
    
    hashtags = options.get('hashtags', [])
    if hashtags:
        status_text += f"üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: {len(hashtags)} —à—Ç.\n"
    else:
        status_text += f"üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: –ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    usertags = options.get('usertags', [])
    distributed_usertags = options.get('distributed_usertags', [])
    
    if distributed_usertags:
        total_tags = sum(len(item['tags']) for item in distributed_usertags)
        status_text += f"üë• –¢–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ‚úÖ ({total_tags} —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)\n"
    elif usertags:
        status_text += f"üë• –¢–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ‚úÖ ({len(usertags)})\n"
    else:
        status_text += f"üë• –¢–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ‚ùå (0)\n"
    
    location = options.get('location')
    status_text += f"üìç –õ–æ–∫–∞—Ü–∏—è: {'‚úÖ' if location else '‚ùå'}\n"
    
    # –û–±–ª–æ–∂–∫–∞
    thumbnail_path = options.get('thumbnail_path')
    cover_time = options.get('cover_time', 0)
    
    if thumbnail_path:
        status_text += f"üñºÔ∏è –û–±–ª–æ–∂–∫–∞: ‚úÖ (—Ñ–æ—Ç–æ)\n"
    elif cover_time > 0:
        status_text += f"üñºÔ∏è –û–±–ª–æ–∂–∫–∞: ‚úÖ ({cover_time}—Å)\n"
    else:
        status_text += f"üñºÔ∏è –û–±–ª–æ–∂–∫–∞: ‚ùå\n"
    
    if len(selected_accounts) > 1:
        status_text += f"\nüé® –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞\n"
    
    status_text += "\n*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if len(selected_accounts) > 1:
        keyboard.append([
            InlineKeyboardButton("üë• –ú–∞—Å—Å–æ–≤—ã–µ —Ç–µ–≥–∏", callback_data="reels_bulk_usertags"),
            InlineKeyboardButton("üìç –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="reels_add_location")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton("üë• –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="reels_add_usertags"),
            InlineKeyboardButton("üìç –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="reels_add_location")
        ])
    
    keyboard.append([
        InlineKeyboardButton("üñºÔ∏è –í—ã–±—Ä–∞—Ç—å –æ–±–ª–æ–∂–∫—É", callback_data="reels_choose_cover")
    ])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard.append([
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="reels_edit_caption"),
        InlineKeyboardButton("üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", callback_data="reels_edit_hashtags")
    ])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    is_scheduled = context.user_data.get('is_scheduled_post', False)
    
    if is_scheduled:
        # –î–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton("üóìÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="reels_schedule_publish")
        ])
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([
            InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="reels_confirm_publish"),
            InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="reels_schedule_publish")
        ])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reels")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if hasattr(update, 'callback_query') and update.callback_query:
        update.callback_query.edit_message_text(status_text, reply_markup=reply_markup)
    else:
        update.message.reply_text(status_text, reply_markup=reply_markup)
    
    return REELS_ADD_FEATURES

def reels_choose_cover_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è Reels"""
    query = update.callback_query
    query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üñºÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –æ–±–ª–æ–∂–∫–∏", callback_data="reels_upload_cover")],
        [InlineKeyboardButton("‚è∞ –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –≤ –≤–∏–¥–µ–æ", callback_data="reels_time_cover")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reels_back_to_features")]
    ]
    
    query.edit_message_text(
        "üñºÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–∫–∏:*\n\n"
        "üñºÔ∏è *–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ* - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "‚è∞ *–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è* - –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–µ–∫—É–Ω–¥–µ",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    from telegram_bot.states import REELS_CHOOSE_COVER
    return REELS_CHOOSE_COVER

def handle_reels_cover_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è Reels"""
    if update.message.text == '/skip':
        if 'reels_options' not in context.user_data:
            context.user_data['reels_options'] = {}
        context.user_data['reels_options']['cover_time'] = 0
        context.user_data['reels_options']['thumbnail_path'] = None
        update.message.reply_text("‚úÖ –û–±–ª–æ–∂–∫–∞ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    else:
        try:
            cover_time = float(update.message.text.strip())
            if 0 <= cover_time <= 90:
                if 'reels_options' not in context.user_data:
                    context.user_data['reels_options'] = {}
                context.user_data['reels_options']['cover_time'] = cover_time
                context.user_data['reels_options']['thumbnail_path'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –æ–±–ª–æ–∂–∫—É
                update.message.reply_text(f"‚úÖ –û–±–ª–æ–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {cover_time} —Å–µ–∫—É–Ω–¥.")
            else:
                update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 90 —Å–µ–∫—É–Ω–¥.")
                from telegram_bot.states import REELS_TIME_COVER
                return REELS_TIME_COVER
        except ValueError:
            update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            from telegram_bot.states import REELS_TIME_COVER
            return REELS_TIME_COVER
    
    return show_reels_features_menu(update, context)

def handle_reels_cover_upload(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è Reels"""
    if not update.message.photo:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±–ª–æ–∂–∫–∏.")
        from telegram_bot.states import REELS_UPLOAD_COVER
        return REELS_UPLOAD_COVER
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo_file = update.message.photo[-1]
        file_id = photo_file.file_id
        media = context.bot.get_file(file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏
        import tempfile
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
            thumbnail_path = temp_file.name
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        media.download(thumbnail_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –æ–±–ª–æ–∂–∫–µ
        if 'reels_options' not in context.user_data:
            context.user_data['reels_options'] = {}
        context.user_data['reels_options']['thumbnail_path'] = thumbnail_path
        context.user_data['reels_options']['cover_time'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è
        
        update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ–±–ª–æ–∂–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        
        return show_reels_features_menu(update, context)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–æ–∂–∫–∏: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–æ–∂–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        from telegram_bot.states import REELS_UPLOAD_COVER
        return REELS_UPLOAD_COVER

def handle_reels_location_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è Reels"""
    if update.message.text == '/skip':
        if 'reels_options' not in context.user_data:
            context.user_data['reels_options'] = {}
        context.user_data['reels_options']['location'] = None
        update.message.reply_text("‚úÖ –õ–æ–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
    else:
        location_name = update.message.text.strip()
        if 'reels_options' not in context.user_data:
            context.user_data['reels_options'] = {}
        context.user_data['reels_options']['location'] = location_name
        update.message.reply_text(f"‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {location_name}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return show_reels_features_menu_message(update, context)

def reels_add_music_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–∏ –∫ Reels"""
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        "üéµ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –∫ Reels*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: Shape of You Ed Sheeran"
    )
    
    from telegram_bot.states import REELS_ADD_MUSIC
    return REELS_ADD_MUSIC

def handle_reels_music_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º—É–∑—ã–∫–∏ –¥–ª—è Reels"""
    if update.message.text == '/skip':
        if 'reels_options' not in context.user_data:
            context.user_data['reels_options'] = {}
        context.user_data['reels_options']['music_track'] = None
        update.message.reply_text("‚úÖ –ú—É–∑—ã–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return show_reels_features_menu_message(update, context)
    
    # –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏
    query = update.message.text.strip()
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏
        account_ids = context.user_data.get('publish_account_ids', [])
        if not account_ids:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
            return show_reels_features_menu(update, context)
        
        from instagram.reels_manager import ReelsManager
        manager = ReelsManager(account_ids[0])
        tracks = manager.search_music(query, limit=5)
        
        if not tracks:
            update.message.reply_text("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            from telegram_bot.states import REELS_ADD_MUSIC
            return REELS_ADD_MUSIC
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
        keyboard = []
        for i, track in enumerate(tracks):
            title = track.title if hasattr(track, 'title') else 'Unknown'
            artist = track.artist if hasattr(track, 'artist') else 'Unknown'
            keyboard.append([InlineKeyboardButton(
                f"üéµ {title} - {artist}",
                callback_data=f"reels_select_music_{i}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reels_back_to_features")])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        context.user_data['found_tracks'] = tracks
        
        update.message.reply_text(
            f"üéµ *–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(tracks)}*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        from telegram_bot.states import REELS_ADD_MUSIC
        return REELS_ADD_MUSIC
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–∑—ã–∫–∏: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–∑—ã–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        from telegram_bot.states import REELS_ADD_MUSIC
        return REELS_ADD_MUSIC

def reels_choose_visibility_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ Reels"""
    query = update.callback_query
    query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üì± –¢–æ–ª—å–∫–æ –≤ Reels", callback_data="reels_hide_from_feed")],
        [InlineKeyboardButton("üì±üì∏ –í Reels + –õ–µ–Ω—Ç–µ", callback_data="reels_show_in_feed")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reels_back_to_features")]
    ]
    
    query.edit_message_text(
        "üîç *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ Reels*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–¥–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à Reels:\n\n"
        "üì± *–¢–æ–ª—å–∫–æ –≤ Reels* - –≤–∏–¥–µ–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–¥–µ–ª–µ Reels\n"
        "üì±üì∏ *–í Reels + –õ–µ–Ω—Ç–µ* - –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≤ Reels –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–µ–Ω—Ç–µ –ø—Ä–æ—Ñ–∏–ª—è",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    from telegram_bot.states import REELS_CHOOSE_VISIBILITY
    return REELS_CHOOSE_VISIBILITY

def reels_confirm_publish_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels"""
    query = update.callback_query
    query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    video_path = context.user_data.get('reels_video_path')
    caption = context.user_data.get('reels_caption', '')
    options = context.user_data.get('reels_options', {})
    selected_accounts = context.user_data.get('publish_account_ids', [])

    if not video_path or not selected_accounts:
        query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels.")
        return ConversationHandler.END

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    status_message = query.edit_message_text(
        "‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é Reels... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    from database.db_manager import create_publish_task
    from database.models import TaskType
    from utils.task_queue import add_task_to_queue, register_task_batch
    
    task_ids = []
    
    for account_id in selected_accounts:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏
        music_track = options.get('music_track')
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç Track –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if music_track and hasattr(music_track, '__dict__'):
            music_track_dict = {
                'id': getattr(music_track, 'id', ''),
                'title': getattr(music_track, 'title', ''),
                'subtitle': getattr(music_track, 'subtitle', ''),
                'display_artist': getattr(music_track, 'display_artist', getattr(music_track, 'artist', '')),
                'audio_asset_id': getattr(music_track, 'audio_asset_id', 0),
                'audio_cluster_id': getattr(music_track, 'audio_cluster_id', 0),
                'highlight_start_times_in_ms': getattr(music_track, 'highlight_start_times_in_ms', []),
                'is_explicit': getattr(music_track, 'is_explicit', False),
                'dash_manifest': getattr(music_track, 'dash_manifest', ''),
                'has_lyrics': getattr(music_track, 'has_lyrics', False),
                'duration_in_ms': getattr(music_track, 'duration_in_ms', 0),
                'allows_saving': getattr(music_track, 'allows_saving', True),
                'territory_validity_periods': getattr(music_track, 'territory_validity_periods', {}),
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                'artist': getattr(music_track, 'display_artist', getattr(music_track, 'artist', '')),
                'duration': getattr(music_track, 'duration_in_ms', 0) // 1000 if getattr(music_track, 'duration_in_ms', 0) else 0
            }
        else:
            music_track_dict = music_track
        
        task_data = {
            'hashtags': options.get('hashtags', []),
            'usertags': options.get('usertags', []),
            'distributed_usertags': options.get('distributed_usertags', []),
            'location': options.get('location'),
            'music_track': music_track_dict,
            'cover_time': options.get('cover_time', 0),
            'thumbnail_path': options.get('thumbnail_path'),
            'uniquify_content': len(selected_accounts) > 1  # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        }
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        success, task_id = create_publish_task(
            account_id=account_id,
            task_type=TaskType.VIDEO,  # Reels –∏—Å–ø–æ–ª—å–∑—É—é—Ç VIDEO —Ç–∏–ø
            media_path=video_path,
            caption=caption,
            additional_data=json.dumps(task_data),
            user_id=query.from_user.id  # –î–æ–±–∞–≤–ª—è–µ–º user_id
        )
        
        if success:
            task_ids.append(task_id)
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            add_task_to_queue(task_id, query.message.chat_id, context.bot)
        else:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {task_id}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    if task_ids:
        register_task_batch(task_ids, query.message.chat_id, context.bot)
    
    # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á
    if len(selected_accounts) == 1:
        username = context.user_data.get('publish_account_username', 'Unknown')
        message = f"‚úÖ *Reels –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é*\n\n"
        message += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{username}\n"
        message += f"üìã ID –∑–∞–¥–∞—á–∏: {task_ids[0]}\n\n"
        message += "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
    else:
        message = f"‚úÖ *Reels –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é*\n\n"
        message += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(selected_accounts)}\n"
        message += f"üìã –ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: {len(task_ids)}\n\n"
        message += "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
    keyboard = [
        [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_task_status_{task_ids[0]}")],
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    status_message.edit_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cleanup_reels_data(context)
    
    return ConversationHandler.END

def execute_reels_publish(update, context):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels"""
    query = update.callback_query
    query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    video_path = context.user_data.get('reels_video_path')
    caption = context.user_data.get('reels_caption', '')
    options = context.user_data.get('reels_options', {})
    account_ids = context.user_data.get('publish_account_ids', [])
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        query.edit_message_text("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é Reels... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        from database.db_manager import create_publish_task
        from database.models import TaskType
        from utils.task_queue import add_task_to_queue, register_task_batch
        
        task_ids = []
        
        for account_id in account_ids:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏
            music_track = options.get('music_track')
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç Track –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if music_track and hasattr(music_track, '__dict__'):
                music_track_dict = {
                    'id': getattr(music_track, 'id', ''),
                    'title': getattr(music_track, 'title', ''),
                    'subtitle': getattr(music_track, 'subtitle', ''),
                    'display_artist': getattr(music_track, 'display_artist', getattr(music_track, 'artist', '')),
                    'audio_asset_id': getattr(music_track, 'audio_asset_id', 0),
                    'audio_cluster_id': getattr(music_track, 'audio_cluster_id', 0),
                    'highlight_start_times_in_ms': getattr(music_track, 'highlight_start_times_in_ms', []),
                    'is_explicit': getattr(music_track, 'is_explicit', False),
                    'dash_manifest': getattr(music_track, 'dash_manifest', ''),
                    'has_lyrics': getattr(music_track, 'has_lyrics', False),
                    'duration_in_ms': getattr(music_track, 'duration_in_ms', 0),
                    'allows_saving': getattr(music_track, 'allows_saving', True),
                    'territory_validity_periods': getattr(music_track, 'territory_validity_periods', {}),
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    'artist': getattr(music_track, 'display_artist', getattr(music_track, 'artist', '')),
                    'duration': getattr(music_track, 'duration_in_ms', 0) // 1000 if getattr(music_track, 'duration_in_ms', 0) else 0
                }
            else:
                music_track_dict = music_track
            
            task_data = {
                'hashtags': options.get('hashtags', []),
                'usertags': options.get('usertags', []),
                'distributed_usertags': options.get('distributed_usertags', []),
                'location': options.get('location'),
                'music_track': music_track_dict,
                'cover_time': options.get('cover_time', 0),
                'thumbnail_path': options.get('thumbnail_path'),
                'uniquify_content': len(account_ids) > 1  # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            }
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            success, task_id = create_publish_task(
                account_id=account_id,
                task_type=TaskType.VIDEO,  # Reels –∏—Å–ø–æ–ª—å–∑—É—é—Ç VIDEO —Ç–∏–ø
                media_path=video_path,
                caption=caption,
                additional_data=json.dumps(task_data),
                user_id=query.from_user.id  # –î–æ–±–∞–≤–ª—è–µ–º user_id
            )
            
            if success:
                task_ids.append(task_id)
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
                add_task_to_queue(task_id, query.message.chat_id, context.bot)
            else:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {task_id}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        if task_ids:
            register_task_batch(task_ids, query.message.chat_id, context.bot)
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á
        if len(account_ids) == 1:
            username = context.user_data.get('publish_account_username', 'Unknown')
            message = f"‚úÖ *Reels –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é*\n\n"
            message += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{username}\n"
            message += f"üìã ID –∑–∞–¥–∞—á–∏: {task_ids[0]}\n\n"
            message += "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
        else:
            message = f"‚úÖ *Reels –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é*\n\n"
            message += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
            message += f"üìã –ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: {len(task_ids)}\n\n"
            message += "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        keyboard = [
            [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_task_status_{task_ids[0]}")],
            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cleanup_reels_data(context)
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels: {e}")
        query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reels_back_to_features")]
            ])
        )
        from telegram_bot.states import REELS_CONFIRM_PUBLISH
        return REELS_CONFIRM_PUBLISH

def cleanup_reels_data(context):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Reels –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    keys_to_remove = [
        'reels_video_path', 'reels_caption', 'reels_options',
        'found_tracks', 'publish_account_ids', 'publish_account_usernames',
        'publish_account_id', 'publish_account_username', 'publish_type',
        'publish_to_all_accounts'
    ]
    
    for key in keys_to_remove:
        if key in context.user_data:
            del context.user_data[key]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è Reels
def handle_reels_callbacks(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è Reels"""
    query = update.callback_query
    data = query.data
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if data == "reels_no_caption":
        return handle_reels_caption_actions(update, context)
    elif data == "reels_back_to_video":
        return handle_reels_caption_actions(update, context)
    elif data == "reels_no_hashtags":
        return handle_reels_hashtags_actions(update, context)
    elif data == "reels_back_to_caption":
        return handle_reels_hashtags_actions(update, context)
    elif data == "reels_edit_caption":
        return show_reels_caption_input(update, context)
    elif data == "reels_edit_hashtags":
        return show_reels_hashtags_input(update, context)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    elif data == "reels_add_usertags":
        return reels_add_usertags_handler(update, context)
    elif data == "reels_add_location":
        return reels_add_location_handler(update, context)
    elif data == "reels_add_music":
        return reels_add_music_handler(update, context)
    elif data == "reels_bulk_usertags":
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤—ã—Ö —Ç–µ–≥–æ–≤
        query.answer()
        query.edit_message_text(
            "üë• *–ú–∞—Å—Å–æ–≤—ã–µ —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            "üìù *–¢–µ–∫—Å—Ç–æ–º* - –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n"
            "üìÅ *–§–∞–π–ª–æ–º* - .txt —Ñ–∞–π–ª —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "excc\n"
            "user123\n"
            "@another_user\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞",
            parse_mode='Markdown'
        )
        from telegram_bot.states import REELS_BULK_USERTAGS
        return REELS_BULK_USERTAGS
    elif data == "reels_upload_cover":
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏
        query.answer()
        query.edit_message_text(
            "üñºÔ∏è *–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ–±–ª–æ–∂–∫–∞ –¥–ª—è Reels:",
            parse_mode='Markdown'
        )
        from telegram_bot.states import REELS_UPLOAD_COVER
        return REELS_UPLOAD_COVER
    elif data == "reels_time_cover":
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–ª–æ–∂–∫–∏
        query.answer()
        query.edit_message_text(
            "‚è∞ *–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ–±–ª–æ–∂–∫–∏*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–¥—Ä–∞ –æ–±–ª–æ–∂–∫–∏ (0-90):\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5 (–¥–ª—è –∫–∞–¥—Ä–∞ –Ω–∞ 5-–π —Å–µ–∫—É–Ω–¥–µ)\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞:",
            parse_mode='Markdown'
        )
        from telegram_bot.states import REELS_TIME_COVER
        return REELS_TIME_COVER
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã
    elif data == "reels_choose_cover":
        return reels_choose_cover_handler(update, context)
    elif data == "reels_confirm_publish":
        return reels_confirm_publish_handler(update, context)
    elif data == "reels_schedule_publish":
        return reels_schedule_publish_handler(update, context)
    elif data == "reels_execute_publish":
        return execute_reels_publish(update, context)
    elif data == "reels_back_to_features":
        return show_reels_features_menu(update, context)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã
    elif data.startswith("reels_select_music_"):
        # –í—ã–±–æ—Ä –º—É–∑—ã–∫–∏
        try:
            track_index = int(data.split("_")[-1])
            tracks = context.user_data.get('found_tracks', [])
            if 0 <= track_index < len(tracks):
                selected_track = tracks[track_index]
                if 'reels_options' not in context.user_data:
                    context.user_data['reels_options'] = {}
                context.user_data['reels_options']['music_track'] = selected_track
                query.answer("‚úÖ –ú—É–∑—ã–∫–∞ –≤—ã–±—Ä–∞–Ω–∞")
                return show_reels_features_menu(update, context)
        except (ValueError, IndexError):
            query.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º—É–∑—ã–∫–∏")
        return show_reels_features_menu(update, context)
    elif data == "cancel_reels":
        query.answer()
        cleanup_reels_data(context)
        query.edit_message_text("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è Reels –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
    
    return ConversationHandler.END

def reels_add_usertags_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤ –∫ Reels"""
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        "üë• *–û—Ç–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Reels*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–±–µ–∑ @) –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: username1 username2 username3\n\n"
        "‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    
    from telegram_bot.states import REELS_ADD_USERTAGS
    return REELS_ADD_USERTAGS

def handle_reels_usertags_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤ –¥–ª—è Reels"""
    if update.message.text == '/skip':
        if 'reels_options' not in context.user_data:
            context.user_data['reels_options'] = {}
        context.user_data['reels_options']['usertags'] = []
        update.message.reply_text("‚úÖ –¢–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
    else:
        # –ü–∞—Ä—Å–∏–º username
        usertags = []
        usernames = update.message.text.replace('@', '').split()
        
        for i, username in enumerate(usernames[:5]):  # –ú–∞–∫—Å–∏–º—É–º 5 —Ç–µ–≥–æ–≤
            if username.strip():
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥ —Å –ø–æ–∑–∏—Ü–∏–µ–π (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏)
                y_position = 0.2 + (i * 0.15)  # –ù–∞—á–∏–Ω–∞–µ–º —Å 20% –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ 15%
                usertags.append({
                    'username': username.strip(),
                    'x': 0.5,  # –ü–æ —Ü–µ–Ω—Ç—Ä—É –ø–æ X
                    'y': min(y_position, 0.8)  # –ù–µ –≤—ã—à–µ 80%
                })
        
        if 'reels_options' not in context.user_data:
            context.user_data['reels_options'] = {}
        context.user_data['reels_options']['usertags'] = usertags
        update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(usertags)}")
    
    return show_reels_features_menu_message(update, context)

def reels_add_location_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –∫ Reels"""
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        "üìç *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –∫ Reels*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"—à–∏—Ä–æ—Ç–∞,–¥–æ–ª–≥–æ—Ç–∞\" –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ Kiev\n"
        "‚Ä¢ 50.4501,30.5234\n"
        "‚Ä¢ Central Park"
    )
    
    from telegram_bot.states import REELS_ADD_LOCATION
    return REELS_ADD_LOCATION

def reels_add_music_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–∏ –∫ Reels"""
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        "üéµ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º—É–∑—ã–∫–∏ –∫ Reels*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä: Shape of You Ed Sheeran"
    )
    
    from telegram_bot.states import REELS_ADD_MUSIC
    return REELS_ADD_MUSIC

def handle_reels_music_input(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º—É–∑—ã–∫–∏ –¥–ª—è Reels"""
    if update.message.text == '/skip':
        if 'reels_options' not in context.user_data:
            context.user_data['reels_options'] = {}
        context.user_data['reels_options']['music_track'] = None
        update.message.reply_text("‚úÖ –ú—É–∑—ã–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return show_reels_features_menu_message(update, context)
    
    # –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏
    query = update.message.text.strip()
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏
        account_ids = context.user_data.get('publish_account_ids', [])
        if not account_ids:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
            return show_reels_features_menu(update, context)
        
        from instagram.reels_manager import ReelsManager
        manager = ReelsManager(account_ids[0])
        tracks = manager.search_music(query, limit=5)
        
        if not tracks:
            update.message.reply_text("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            from telegram_bot.states import REELS_ADD_MUSIC
            return REELS_ADD_MUSIC
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏
        keyboard = []
        for i, track in enumerate(tracks):
            title = track.title if hasattr(track, 'title') else 'Unknown'
            artist = track.artist if hasattr(track, 'artist') else 'Unknown'
            keyboard.append([InlineKeyboardButton(
                f"üéµ {title} - {artist}",
                callback_data=f"reels_select_music_{i}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reels_back_to_features")])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        context.user_data['found_tracks'] = tracks
        
        update.message.reply_text(
            f"üéµ *–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(tracks)}*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        from telegram_bot.states import REELS_ADD_MUSIC
        return REELS_ADD_MUSIC
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–∑—ã–∫–∏: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º—É–∑—ã–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        from telegram_bot.states import REELS_ADD_MUSIC
        return REELS_ADD_MUSIC

def reels_choose_visibility_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ Reels"""
    query = update.callback_query
    query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üì± –¢–æ–ª—å–∫–æ –≤ Reels", callback_data="reels_hide_from_feed")],
        [InlineKeyboardButton("üì±üì∏ –í Reels + –õ–µ–Ω—Ç–µ", callback_data="reels_show_in_feed")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reels_back_to_features")]
    ]
    
    query.edit_message_text(
        "üîç *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ Reels*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–¥–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à Reels:\n\n"
        "üì± *–¢–æ–ª—å–∫–æ –≤ Reels* - –≤–∏–¥–µ–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–¥–µ–ª–µ Reels\n"
        "üì±üì∏ *–í Reels + –õ–µ–Ω—Ç–µ* - –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≤ Reels –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–µ–Ω—Ç–µ –ø—Ä–æ—Ñ–∏–ª—è",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    from telegram_bot.states import REELS_CHOOSE_VISIBILITY
    return REELS_CHOOSE_VISIBILITY

# –§—É–Ω–∫—Ü–∏—è handle_reels_accounts_selected —É–¥–∞–ª–µ–Ω–∞ - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
def show_reels_features_menu_message(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Reels —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    account_ids = context.user_data.get('publish_account_ids', [])
    usernames = context.user_data.get('publish_account_usernames', [])
    caption = context.user_data.get('reels_caption', '')
    options = context.user_data.get('reels_options', {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = "ÔøΩÔøΩ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Reels*\n\n"
    
    # –ê–∫–∫–∞—É–Ω—Ç—ã
    if len(account_ids) == 1:
        text += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{usernames[0]}\n"
    else:
        text += f"üë• –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {caption[:30]}{'...' if len(caption) > 30 else caption}\n"
    
    # –•–µ—à—Ç–µ–≥–∏
    hashtags = options.get('hashtags', [])
    text += f"üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: {len(hashtags)} —à—Ç.\n"
    
    # –¢–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    usertags = options.get('usertags', [])
    if usertags:
        text += f"üë• –¢–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ‚úÖ ({len(usertags)})\n"
    else:
        text += f"üë• –¢–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ‚ùå (0)\n"
    
    # –õ–æ–∫–∞—Ü–∏—è
    location = options.get('location')
    if location:
        text += f"üìç –õ–æ–∫–∞—Ü–∏—è: ‚úÖ\n"
    else:
        text += f"üìç –õ–æ–∫–∞—Ü–∏—è: ‚ùå\n"
    
    # –ú—É–∑—ã–∫–∞
    music_track = options.get('music_track')
    if music_track:
        text += f"üéµ –ú—É–∑—ã–∫–∞: ‚úÖ\n"
    else:
        text += f"üéµ –ú—É–∑—ã–∫–∞: ‚ùå\n"
    
    # –û–±–ª–æ–∂–∫–∞
    cover_time = options.get('cover_time', 0)
    if cover_time > 0:
        text += f"üñºÔ∏è –û–±–ª–æ–∂–∫–∞: ‚úÖ\n"
    else:
        text += f"üñºÔ∏è –û–±–ª–æ–∂–∫–∞: ‚ùå\n"
    
    # –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è
    if len(account_ids) > 1:
        text += f"üé® –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞\n"
    
    text += "\n*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥
    keyboard.append([
        InlineKeyboardButton("üë• –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="reels_add_usertags"),
        InlineKeyboardButton("üìç –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data="reels_add_location")
    ])
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥
    keyboard.append([
        InlineKeyboardButton("üñºÔ∏è –í—ã–±—Ä–∞—Ç—å –æ–±–ª–æ–∂–∫—É", callback_data="reels_choose_cover")
    ])
    
    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ —É–¥–∞–ª–µ–Ω - –æ–±–ª–æ–∂–∫–∞ —Ç–µ–ø–µ—Ä—å –≤–æ –≤—Ç–æ—Ä–æ–º —Ä—è–¥—É
    
    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    keyboard.append([
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="reels_edit_caption"),
        InlineKeyboardButton("üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", callback_data="reels_edit_hashtags")
    ])
    
    # –ü—è—Ç—ã–π —Ä—è–¥ - –¥–µ–π—Å—Ç–≤–∏—è
    keyboard.append([
        InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="reels_confirm_publish"),
        InlineKeyboardButton("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="reels_schedule_publish")
    ])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reels")])
    
    from telegram import InlineKeyboardMarkup
    update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    from telegram_bot.states import REELS_ADD_FEATURES
    return REELS_ADD_FEATURES

def handle_reels_bulk_usertags(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤"""
    if update.message.text == '/skip':
        if 'reels_options' not in context.user_data:
            context.user_data['reels_options'] = {}
        context.user_data['reels_options']['usertags'] = []
        update.message.reply_text("‚úÖ –¢–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
        return show_reels_features_menu(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç
    if update.message.document:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        try:
            file_id = update.message.document.file_id
            media = context.bot.get_file(file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import tempfile
            with tempfile.NamedTemporaryFile(mode='w+', delete=False, suffix='.txt') as temp_file:
                temp_path = temp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            media.download(temp_path)
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞
            with open(temp_path, 'r', encoding='utf-8') as f:
                usernames = [line.strip().replace('@', '') for line in f.readlines() if line.strip()]
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import os
            os.unlink(temp_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ —Ç–µ–≥–æ–≤: {e}")
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            from telegram_bot.states import REELS_BULK_USERTAGS
            return REELS_BULK_USERTAGS
    else:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        text = update.message.text.strip()
        usernames = [username.strip().replace('@', '') for username in text.split('\n') if username.strip()]
    
    if not usernames:
        update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        from telegram_bot.states import REELS_BULK_USERTAGS
        return REELS_BULK_USERTAGS
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    account_ids = context.user_data.get('publish_account_ids', [])
    if not account_ids:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return show_reels_features_menu(update, context)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥–∏ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    max_tags_per_account = 5
    total_slots = len(account_ids) * max_tags_per_account
    
    if len(usernames) > total_slots:
        # –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –±–æ–ª—å—à–µ —á–µ–º —Å–ª–æ—Ç–æ–≤, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ —Å–æ–æ–±—â–∞–µ–º –æ–± –∏–∑–ª–∏—à–∫–∞—Ö
        used_usernames = usernames[:total_slots]
        excess_usernames = usernames[total_slots:]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–ª–∏—à–∫–æ–≤
        excess_text = "\n".join([f"@{username}" for username in excess_usernames])
        
        update.message.reply_text(
            f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–≥–æ–≤!\n\n"
            f"üìä –ú–∞–∫—Å–∏–º—É–º: {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ √ó {max_tags_per_account} —Ç–µ–≥–æ–≤ = {total_slots} —Ç–µ–≥–æ–≤\n"
            f"üì• –ü–æ–ª—É—á–µ–Ω–æ: {len(usernames)} —Ç–µ–≥–æ–≤\n"
            f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(used_usernames)} —Ç–µ–≥–æ–≤\n\n"
            f"‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã ({len(excess_usernames)}):\n{excess_text}"
        )
        
        usernames = used_usernames
    else:
        update.message.reply_text(
            f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(usernames)} —Ç–µ–≥–æ–≤ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
        )
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    distributed_tags = []
    for i, account_id in enumerate(account_ids):
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–≥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        start_idx = i * max_tags_per_account
        end_idx = min(start_idx + max_tags_per_account, len(usernames))
        
        account_tags = usernames[start_idx:end_idx]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏)
        account_usertags = []
        for j, username in enumerate(account_tags):
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ —ç–∫—Ä–∞–Ω—É
            x = 0.2 + (j % 3) * 0.3  # 0.2, 0.5, 0.8
            y = 0.2 + (j // 3) * 0.3  # 0.2, 0.5, 0.8
            
            account_usertags.append({
                'username': username,
                'x': x,
                'y': y
            })
        
        distributed_tags.append({
            'account_id': account_id,
            'tags': account_usertags
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
    if 'reels_options' not in context.user_data:
        context.user_data['reels_options'] = {}
    context.user_data['reels_options']['distributed_usertags'] = distributed_tags
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    distribution_text = "üìä *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º:*\n\n"
    
    from database.db_manager import get_instagram_account
    for item in distributed_tags:
        account = get_instagram_account(item['account_id'])
        if account:
            distribution_text += f"üë§ *@{account.username}*: {len(item['tags'])} —Ç–µ–≥–æ–≤\n"
            for tag in item['tags']:
                distribution_text += f"   ‚Ä¢ @{tag['username']}\n"
            distribution_text += "\n"
    
    update.message.reply_text(distribution_text, parse_mode='Markdown')
    
    return show_reels_features_menu(update, context)

def start_schedule_post(update, context):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ —ç—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
    context.user_data['is_scheduled_post'] = True
    context.user_data['publish_type'] = 'post'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–∏–ø –ø–æ—Å—Ç–∞
    context.user_data['publish_media_type'] = 'PHOTO'
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ö–∞–Ω–∏–∑–º –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–æ–≤
    return start_post_publish(update, context)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Stories
def story_schedule_publish_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã
    account_ids = context.user_data.get('publish_account_ids', [])
    if not account_ids:
        query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return ConversationHandler.END
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ —ç—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    context.user_data['is_scheduled_post'] = True
    context.user_data['publish_type'] = 'story'
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
    query.edit_message_text(
        "üóìÔ∏è *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ `10.07.2025 14:30`\n"
        "‚Ä¢ `15.07.2025 09:00`\n\n"
        "–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ.",
        parse_mode='Markdown'
    )
    
    return CHOOSE_SCHEDULE

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Reels  
def reels_schedule_publish_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels"""
    query = update.callback_query
    query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω—ã
    account_ids = context.user_data.get('publish_account_ids', [])
    if not account_ids:
        query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
        return ConversationHandler.END
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ —ç—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    context.user_data['is_scheduled_post'] = True
    context.user_data['publish_type'] = 'reels'
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
    query.edit_message_text(
        "üóìÔ∏è *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ `10.07.2025 14:30`\n"
        "‚Ä¢ `15.07.2025 09:00`\n\n"
        "–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ.",
        parse_mode='Markdown'
    )
    
    return CHOOSE_SCHEDULE