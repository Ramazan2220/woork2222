import logging
import os
import threading
import concurrent.futures
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, Filters

from database.db_manager import get_instagram_account, get_instagram_accounts as get_all_instagram_accounts, update_instagram_account
from instagram.profile_manager import ProfileManager
from telegram_bot.keyboards import get_main_menu_keyboard
from telegram_bot.states import ProfileStates
from telegram_bot.utils.account_selection import AccountSelector
from profile_setup.name_manager import edit_profile_name, save_profile_name
from profile_setup.username_manager import edit_profile_username, save_profile_username
from profile_setup.bio_manager import edit_profile_bio, save_profile_bio
from profile_setup.links_manager import edit_profile_links, save_profile_links
from profile_setup.avatar_manager import add_profile_photo, save_profile_photo, delete_profile_photo
from profile_setup.post_manager import add_post, save_post
from profile_setup.cleanup_manager import delete_all_posts
from profile_setup import EDIT_NAME, EDIT_USERNAME, EDIT_BIO, EDIT_LINKS, ADD_PHOTO, ADD_POST

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
EDIT_NAME, EDIT_USERNAME, EDIT_BIO, EDIT_LINKS, ADD_PHOTO, ADD_POST = range(6)
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
BULK_EDIT_NAME, BULK_EDIT_USERNAME, BULK_EDIT_BIO, BULK_ADD_PHOTO, BULK_EDIT_LINKS = range(10, 15)

def profile_setup_menu(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è - entry point –¥–ª—è ConversationHandler"""
    query = update.callback_query
    if query:
        query.answer()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ profile_selector
    return profile_selector.start_selection(update, context, PROFILE_ACCOUNT_CALLBACK)

def show_bulk_profile_actions(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    if query:
        query.answer()
    
    account_ids = context.user_data.get('selected_profile_accounts', [])
    accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
    
    keyboard = [
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="bulk_edit_name")],
        [InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å username", callback_data="bulk_edit_username")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="bulk_edit_bio")],
        [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="bulk_edit_links")],
        [InlineKeyboardButton("üñº –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="bulk_add_photo")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="bulk_remove_photo")],
        [InlineKeyboardButton("üì∏ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã", callback_data="bulk_delete_all_posts")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="bulk_clear_bio")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
    ]
    
    accounts_list = "\n".join([f"‚Ä¢ @{acc.username}" for acc in accounts[:10]])
    if len(accounts) > 10:
        accounts_list += f"\n... –∏ –µ—â–µ {len(accounts) - 10} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
    
    text = f"–ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n{accounts_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    if query:
        query.edit_message_text(text, parse_mode=None, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        update.message.reply_text(text, parse_mode=None, reply_markup=InlineKeyboardMarkup(keyboard))

def profile_account_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()

    # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
    account_id = int(query.data.split('_')[-1])
    context.user_data['current_account_id'] = account_id

    account = get_instagram_account(account_id)
    if not account:
        query.edit_message_text(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return

    keyboard = [
        [InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="profile_edit_name")],
        [InlineKeyboardButton("üî§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="profile_edit_username")],
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="profile_edit_bio")],
        [InlineKeyboardButton("üîó –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏", callback_data="profile_edit_links")],
        [InlineKeyboardButton("üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"add_profile_photo_{account_id}")],
        [InlineKeyboardButton("üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="profile_add_post")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã", callback_data="profile_delete_posts")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="profile_delete_bio")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data="profile_setup")]
    ]

    query.edit_message_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: *{account.username}*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

def setup_profile_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
    account_id = int(query.data.split('_')[-1])
    context.user_data['current_account_id'] = account_id
    
    account = get_instagram_account(account_id)
    if not account:
        query.edit_message_text(
            "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return
    
    keyboard = [
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_name_{account_id}")],
        [InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å username", callback_data=f"edit_username_{account_id}")],
        [InlineKeyboardButton("üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ", callback_data=f"edit_bio_{account_id}")],
        [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏", callback_data=f"edit_links_{account_id}")],
        [InlineKeyboardButton("üñº –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä", callback_data=f"edit_avatar_{account_id}")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data=f"add_post_{account_id}")],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=f"delete_all_posts_{account_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
    ]
    
    query.edit_message_text(
        f"üë§ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è\n"
        f"–ê–∫–∫–∞—É–Ω—Ç: @{account.username}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def edit_profile_name(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    query.answer()

    account_id = context.user_data.get('current_account_id')
    account = get_instagram_account(account_id)

    if not account:
        query.edit_message_text(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è
    current_name = account.full_name if hasattr(account, 'full_name') and account.full_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    query.edit_message_text(
        f"–¢–µ–∫—É—â–µ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è: *{current_name}*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"profile_account_{account_id}")]
        ])
    )

    return EDIT_NAME

def save_profile_name(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è"""
    new_name = update.message.text
    account_id = context.user_data.get('current_account_id')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    message = update.message.reply_text("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è...")

    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
        profile_manager = ProfileManager(account_id)
        success, result = profile_manager.update_profile_name(new_name)

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            account = get_instagram_account(account_id)
            if hasattr(account, 'full_name'):
                account.full_name = new_name
                update_instagram_account(account_id, full_name=new_name)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            update.message.reply_text(
                f"‚úÖ –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *{new_name}*!",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è: {result}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    message.delete()

    return ConversationHandler.END

def edit_profile_username(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    query.answer()

    account_id = context.user_data.get('current_account_id')
    account = get_instagram_account(account_id)

    if not account:
        query.edit_message_text(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return ConversationHandler.END

    query.edit_message_text(
        f"–¢–µ–∫—É—â–µ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: *{account.username}*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"profile_account_{account_id}")]
        ])
    )

    return EDIT_USERNAME

def save_profile_username(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    new_username = update.message.text
    account_id = context.user_data.get('current_account_id')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    message = update.message.reply_text("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile_manager = ProfileManager(account_id)
        success, result = profile_manager.update_username(new_username)

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_instagram_account(account_id, username=new_username)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            update.message.reply_text(
                f"‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ *{new_username}*!",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {result}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    message.delete()

    return ConversationHandler.END

def edit_profile_bio(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    query.answer()

    account_id = context.user_data.get('current_account_id')
    account = get_instagram_account(account_id)

    if not account:
        query.edit_message_text(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    current_bio = account.biography if hasattr(account, 'biography') and account.biography else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    query.edit_message_text(
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:\n\n{current_bio}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"profile_account_{account_id}")]
        ])
    )

    return EDIT_BIO

def save_profile_bio(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    new_bio = update.message.text
    account_id = context.user_data.get('current_account_id')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    message = update.message.reply_text("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è...")

    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        profile_manager = ProfileManager(account_id)
        success, result = profile_manager.update_biography(new_bio)

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            # –í–º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞ account, –ø–µ—Ä–µ–¥–∞–µ–º account_id –∏ biography
            update_instagram_account(account_id, biography=new_bio)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            update.message.reply_text(
                "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {result}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    message.delete()

    return ConversationHandler.END

def edit_profile_links(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    query.answer()
    
    account_id = context.user_data.get('current_account_id')
    account = get_instagram_account(account_id)

    if not account:
        query.edit_message_text(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return ConversationHandler.END

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_message = query.message.reply_text("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Instagram... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Å—ã–ª–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
    try:
        profile_manager = ProfileManager(account_id)
        current_link = profile_manager.get_profile_links()

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message.delete()

        current_link_text = "–ù–µ —É–∫–∞–∑–∞–Ω–∞" if not current_link else current_link

        query.message.reply_text(
            f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ: {current_link_text}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è Instagram (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"profile_account_{account_id}")]
            ])
        )

        return EDIT_LINKS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message.delete()

        query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        return ConversationHandler.END

def save_profile_links(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    links_text = update.message.text
    account_id = context.user_data.get('current_account_id')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    message = update.message.reply_text("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è...")

    try:
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É, —Ç–∞–∫ –∫–∞–∫ Instagram –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É
        link = links_text.strip()
        if '|' in link:
            _, url = link.split('|', 1)
            link = url.strip()

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        profile_manager = ProfileManager(account_id)
        success, result = profile_manager.update_profile_links(link)

        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            update.message.reply_text(
                "‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {result}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    message.delete()

    return ConversationHandler.END

def add_profile_photo(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    query.answer()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
    account_id = int(query.data.split('_')[-1])
    context.user_data['current_account_id'] = account_id

    account = get_instagram_account(account_id)

    if not account:
        query.edit_message_text(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return ConversationHandler.END

    query.edit_message_text(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ *{account.username}*:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"profile_account_{account_id}")]
        ])
    )

    return ADD_PHOTO

def save_profile_photo(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    account_id = context.user_data.get('current_account_id')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    message = update.message.reply_text("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = update.message.photo[-1].get_file()
        photo_path = f"temp_profile_photo_{account_id}.jpg"
        photo_file.download(photo_path)

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        profile_manager = ProfileManager(account_id)
        success, result = profile_manager.update_profile_picture(photo_path)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(photo_path):
            os.remove(photo_path)

        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            update.message.reply_text(
                "‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {result}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    message.delete()

    return ConversationHandler.END

def add_post(update: Update, context: CallbackContext) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞"""
    query = update.callback_query
    query.answer()

    account_id = context.user_data.get('current_account_id')
    account = get_instagram_account(account_id)

    if not account:
        query.edit_message_text(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return ConversationHandler.END

    query.edit_message_text(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ *{account.username}*.\n\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"profile_account_{account_id}")]
        ])
    )

    return ADD_POST

def save_post(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Å—Ç"""
    account_id = context.user_data.get('current_account_id')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    message = update.message.reply_text("‚è≥ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞...")

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
        if update.message.photo:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
            media_file = update.message.photo[-1].get_file()
            media_path = f"temp_post_{account_id}.jpg"
            media_file.download(media_path)

            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—É–±–ª–∏–∫—É–µ–º —Ñ–æ—Ç–æ
            profile_manager = ProfileManager(account_id)
            caption = update.message.caption or ""
            success, result = profile_manager.upload_photo(media_path, caption)
        elif update.message.video:
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ
            media_file = update.message.video.get_file()
            media_path = f"temp_post_{account_id}.mp4"
            media_file.download(media_path)

            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—É–±–ª–∏–∫—É–µ–º –≤–∏–¥–µ–æ
            profile_manager = ProfileManager(account_id)
            caption = update.message.caption or ""
            success, result = profile_manager.upload_video(media_path, caption)
        else:
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
            message.delete()
            return ConversationHandler.END

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(media_path):
            os.remove(media_path)

        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            update.message.reply_text(
                "‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {result}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    message.delete()

    return ConversationHandler.END

def delete_profile_photo(update: Update, context: CallbackContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    query.answer()

    account_id = context.user_data.get('current_account_id')
    account = get_instagram_account(account_id)

    if not account:
        query.edit_message_text(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    query.edit_message_text(
        f"‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}..."
    )

    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ —É–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
        profile_manager = ProfileManager(account_id)
        success, result = profile_manager.remove_profile_picture()

        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            query.edit_message_text(
                "‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {result}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

def delete_all_posts(update: Update, context: CallbackContext) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ—Å—Ç—ã"""
    query = update.callback_query
    query.answer()

    account_id = context.user_data.get('current_account_id')
    account = get_instagram_account(account_id)

    if not account:
        query.edit_message_text(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    query.edit_message_text(
        f"‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )

    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
        profile_manager = ProfileManager(account_id)
        success, result = profile_manager.delete_all_posts()

        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            query.edit_message_text(
                f"‚úÖ {result}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {result}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
        query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

def delete_bio(update: Update, context: CallbackContext) -> None:
    """–û—á–∏—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    query.answer()

    account_id = context.user_data.get('current_account_id')
    account = get_instagram_account(account_id)

    if not account:
        query.edit_message_text(
            "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    query.edit_message_text(
        f"‚è≥ –û—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}..."
    )

    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ –æ—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        profile_manager = ProfileManager(account_id)
        success, result = profile_manager.update_biography("")

        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_instagram_account(account_id, biography="")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            query.edit_message_text(
                "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {result}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ—Ñ–∏–ª—è", callback_data=f"profile_account_{account_id}")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

def bulk_edit_name(update: Update, context: CallbackContext) -> int:
    """–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏"""
    query = update.callback_query
    query.answer()
    
    account_ids = context.user_data.get('selected_profile_accounts', [])
    
    query.edit_message_text(
        f"üìù *–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏*\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ:\n"
        f"‚Ä¢ –í–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ –∏–º—è –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        f"‚Ä¢ –í–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–º—ë–Ω (–∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n\n"
        f"‚ö†Ô∏è *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞.\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è(–∏–º–µ–Ω–∞) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        parse_mode="Markdown"
    )
    
    return BULK_EDIT_NAME

def save_bulk_names(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—ã–µ –∏–º–µ–Ω–∞"""
    import random
    
    text = update.message.text
    if text == '/cancel':
        update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
                                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]]))
        return ConversationHandler.END
    
    account_ids = context.user_data.get('selected_profile_accounts', [])
    accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–∞
    names = [name.strip() for name in text.strip().split('\n') if name.strip()]
    
    if not names:
        update.message.reply_text("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return BULK_EDIT_NAME
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–º–µ–Ω–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    if len(names) == 1:
        # –û–¥–Ω–æ –∏–º—è –¥–ª—è –≤—Å–µ—Ö
        name_assignments = {acc_id: names[0] for acc_id in account_ids}
    else:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º–µ–Ω–∞
        name_assignments = {}
        if len(names) >= len(accounts):
            # –ò–º—ë–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            for i, acc_id in enumerate(account_ids):
                name_assignments[acc_id] = names[i % len(names)]
        else:
            # –ò–º—ë–Ω –º–µ–Ω—å—à–µ, —á–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –¥—É–±–ª–∏—Ä—É–µ–º —Å –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ–º
            extended_names = []
            while len(extended_names) < len(accounts):
                shuffled = names.copy()
                random.shuffle(shuffled)
                extended_names.extend(shuffled)
            
            for i, acc_id in enumerate(account_ids):
                name_assignments[acc_id] = extended_names[i]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    message = update.message.reply_text("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º—ë–Ω...")
    success_count = 0
    failed_accounts = []
    
    for acc_id, new_name in name_assignments.items():
        account = get_instagram_account(acc_id)
        profile_manager = ProfileManager(acc_id)
        success, result = profile_manager.update_profile_name(new_name)
        
        if success:
            success_count += 1
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            update_instagram_account(acc_id, full_name=new_name)
        else:
            failed_accounts.append(f"@{account.username}: {result}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {success_count} –∏–∑ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
    
    if failed_accounts:
        report += f"\n‚ùå –û—à–∏–±–∫–∏:\n" + "\n".join(failed_accounts[:5])
        if len(failed_accounts) > 5:
            report += f"\n... –∏ –µ—â—ë {len(failed_accounts) - 5} –æ—à–∏–±–æ–∫"
    
    message.delete()
    update.message.reply_text(
        report,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]])
    )
    
    return ConversationHandler.END

def bulk_edit_username(update: Update, context: CallbackContext) -> None:
    """–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ username"""
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π username –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–±–µ–∑ @):",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="profile_setup")]
        ])
    )
    
    context.user_data['bulk_action'] = 'edit_username'
    return EDIT_USERNAME

def bulk_edit_bio(update: Update, context: CallbackContext) -> int:
    """–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    query.answer()
    
    account_ids = context.user_data.get('selected_profile_accounts', [])
    
    query.edit_message_text(
        f"‚úèÔ∏è *–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è*\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n\n"
        f"*–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏:*\n"
        f"`{{–ü—Ä–∏–≤–µ—Ç|–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–î–æ–±—Ä—ã–π –¥–µ–Ω—å}}`\n"
        f"`{{–∫–∞–∫ –¥–µ–ª–∞?|—á—Ç–æ –Ω–æ–≤–æ–≥–æ?}}`\n\n"
        f"–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
        f"*–ü—Ä–∏–º–µ—Ä:*\n"
        f"`{{–ü—Ä–∏–≤–µ—Ç|–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ}}, —è {{—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ|–±–ª–æ–≥–µ—Ä}}!`\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –∏–ª–∏ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç:",
        parse_mode="Markdown"
    )
    
    return BULK_EDIT_BIO

def bulk_edit_links(update: Update, context: CallbackContext) -> int:
    """–ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫"""
    query = update.callback_query
    query.answer()
    
    account_ids = context.user_data.get('selected_profile_accounts', [])
    
    query.edit_message_text(
        f"üîó –ú–∞—Å—Å–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏:\n"
        f"–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"‚Ä¢ https://linktr.ee/yourname\n"
        f"‚Ä¢ https://t.me/yourchannel\n"
        f"‚Ä¢ https://yourwebsite.com\n\n"
        f"‚ö†Ô∏è –í–ê–ñ–ù–û: –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
        f"–ú–µ—Ç–æ–¥—ã —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏:\n"
        f"üìä UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ?utm_source=instagram&utm_campaign=acc1\n"
        f"üî¢ ID –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ?ref=user123\n"
        f"üé≤ –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: ?token=abc123\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        parse_mode=None
    )
    
    return BULK_EDIT_LINKS

def uniquify_link(base_url: str, account_username: str, method: str = "utm") -> str:
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    import random
    import string
    from urllib.parse import urlparse, parse_qs, urlencode, urlunparse
    
    # –ü–∞—Ä—Å–∏–º URL
    parsed = urlparse(base_url)
    query_params = parse_qs(parsed.query)
    
    if method == "utm":
        # UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        query_params.update({
            'utm_source': ['instagram'],
            'utm_medium': ['bio_link'],
            'utm_campaign': [f'profile_{account_username}'],
            'utm_content': [account_username]
        })
    elif method == "ref":
        # –ü—Ä–æ—Å—Ç–æ–π ref –ø–∞—Ä–∞–º–µ—Ç—Ä
        query_params['ref'] = [account_username]
    elif method == "random":
        # –°–ª—É—á–∞–π–Ω—ã–π —Ç–æ–∫–µ–Ω
        token = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
        query_params['id'] = [token]
    elif method == "mixed":
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        token = ''.join(random.choices(string.ascii_lowercase + string.digits, k=6))
        query_params.update({
            'utm_source': ['instagram'],
            'ref': [account_username],
            'token': [token]
        })
    
    # –°–æ–±–∏—Ä–∞–µ–º URL –æ–±—Ä–∞—Ç–Ω–æ
    new_query = urlencode(query_params, doseq=True)
    unique_url = urlunparse((
        parsed.scheme,
        parsed.netloc,
        parsed.path,
        parsed.params,
        new_query,
        parsed.fragment
    ))
    
    return unique_url

def save_bulk_links(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ —Å —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    text = update.message.text
    if text == '/cancel':
        update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
                                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]]))
        return ConversationHandler.END
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
    base_link = text.strip()
    if not base_link:
        update.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return BULK_EDIT_LINKS
    
    # –î–æ–±–∞–≤–ª—è–µ–º http:// –µ—Å–ª–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω
    if not base_link.startswith(('http://', 'https://')):
        base_link = 'https://' + base_link
    
    account_ids = context.user_data.get('selected_profile_accounts', [])
    accounts = [get_instagram_account(acc_id) for acc_id in account_ids]
    
    # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    if len(accounts) <= 5:
        method = "utm"  # UTM –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø
    elif len(accounts) <= 15:
        method = "mixed"  # –°–º–µ—à–∞–Ω–Ω—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –≥—Ä—É–ø–ø
    else:
        method = "random"  # –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    message = update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫...")
    
    try:
        result = process_bulk_links_async(accounts, base_link, method, message, update.message.chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        send_bulk_links_report(result, update.message, base_link, method)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–æ–∫: {e}")
        message.delete()
        update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}",
            parse_mode=None,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]])
        )
    
    return ConversationHandler.END

def process_single_link(account, base_link: str, method: str) -> dict:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    import time
    import random
    
    try:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        unique_link = uniquify_link(base_link, account.username, method)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        delay = random.uniform(1, 4)
        time.sleep(delay)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ ProfileManager
        profile_manager = ProfileManager(account.id)
        success, result = profile_manager.update_profile_links(unique_link)
        
        if success:
            logger.info(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è @{account.username}: {unique_link}")
            return {
                'success': True,
                'account': account.username,
                'link': unique_link,
                'message': result
            }
        else:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è @{account.username}: {result}")
            return {
                'success': False,
                'account': account.username,
                'link': unique_link,
                'message': result
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è @{account.username}: {e}")
        return {
            'success': False,
            'account': account.username,
            'link': base_link,
            'message': str(e)
        }

def process_bulk_links_async(accounts, base_link: str, method: str, status_message, chat_id) -> dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫"""
    import concurrent.futures
    import time
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤
    try:
        from utils.system_monitor import get_adaptive_limits
        limits = get_adaptive_limits()
        system_max_workers = limits.max_workers  # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 4 –ø–æ—Ç–æ–∫–∞
        logger.info(f"üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–∏–º–∏—Ç—ã: {limits.description}, –º–∞–∫—Å –ø–æ—Ç–æ–∫–æ–≤: {system_max_workers}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–∏–º–∏—Ç—ã: {e}")
        system_max_workers = 20  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º fallback —Å 3 –¥–æ 10
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    account_based_workers = min(20, max(1, len(accounts) // 2))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 4 –¥–æ 20
    max_workers = min(system_max_workers, account_based_workers)
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ {max_workers} –ø–æ—Ç–æ–∫–∞—Ö")
    
    success_results = []
    failed_results = []
    completed = 0
    
    start_time = time.time()
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        future_to_account = {
            executor.submit(process_single_link, account, base_link, method): account 
            for account in accounts
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        for future in concurrent.futures.as_completed(future_to_account):
            account = future_to_account[future]
            completed += 1
            
            try:
                result = future.result()
                
                if result['success']:
                    success_results.append(result)
                else:
                    failed_results.append(result)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 2-3 –∞–∫–∫–∞—É–Ω—Ç–∞
                if completed % 3 == 0 or completed == len(accounts):
                    elapsed = time.time() - start_time
                    
                    try:
                        status_message.edit_text(
                            f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫\n\n"
                            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/{len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(success_results)}\n"
                            f"‚ùå –û—à–∏–±–∫–∏: {len(failed_results)}\n"
                            f"üßµ –ü–æ—Ç–æ–∫–æ–≤: {max_workers}\n"
                            f"‚è±Ô∏è –í—Ä–µ–º—è: {elapsed:.1f}—Å\n\n"
                            f"{'‚ñà' * (completed * 20 // len(accounts))}{'‚ñë' * (20 - completed * 20 // len(accounts))}",
                            parse_mode=None
                        )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è @{account.username}: {e}")
                failed_results.append({
                    'success': False,
                    'account': account.username,
                    'link': base_link,
                    'message': str(e)
                })
    
    total_time = time.time() - start_time
    
    logger.info(f"üèÅ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.1f}—Å. –£—Å–ø–µ—à–Ω–æ: {len(success_results)}, –û—à–∏–±–æ–∫: {len(failed_results)}")
    
    return {
        'success_results': success_results,
        'failed_results': failed_results,
        'total_time': total_time,
        'max_workers': max_workers
    }

def send_bulk_links_report(result: dict, message, base_link: str, method: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    success_results = result['success_results']
    failed_results = result['failed_results']
    total_time = result['total_time']
    max_workers = result['max_workers']
    
    total_accounts = len(success_results) + len(failed_results)
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    link_examples = []
    for res in success_results[:3]:
        link_examples.append(f"@{res['account']}: {res['link']}")
    
    method_names = {
        "utm": "UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
        "ref": "REF-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã", 
        "random": "–°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã",
        "mixed": "–°–º–µ—à–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥"
    }
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = f"üîó –û–¢–ß–ï–¢ –ü–û –ê–°–ò–ù–•–†–û–ù–ù–û–ú–£ –î–û–ë–ê–í–õ–ï–ù–ò–Æ –°–°–´–õ–û–ö\n\n"
    report += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(success_results)} –∏–∑ {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
    report += f"üéØ –ë–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {base_link}\n"
    report += f"üîß –ú–µ—Ç–æ–¥ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏: {method_names.get(method, method)}\n"
    report += f"‚ö° –ü–æ—Ç–æ–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {max_workers}\n"
    report += f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_time:.1f} —Å–µ–∫—É–Ω–¥\n"
    
    if total_accounts > 0:
        speed = total_accounts / total_time
        old_method_time = total_accounts * 2  # –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥: 2 —Å–µ–∫ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        improvement = old_method_time / total_time
        report += f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} –∞–∫–∫–∞—É–Ω—Ç–æ–≤/—Å–µ–∫\n"
        report += f"‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: –≤ {improvement:.1f}x —Ä–∞–∑ (–±—ã–ª–æ –±—ã {old_method_time:.0f}—Å)\n"
    
    report += "\n"
    
    if link_examples:
        report += f"üìã –ü—Ä–∏–º–µ—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:\n"
        for example in link_examples:
            report += f"‚Ä¢ {example}\n"
        if len(success_results) > 3:
            report += f"... –∏ –µ—â–µ {len(success_results) - 3} —É—Å–ø–µ—à–Ω—ã—Ö —Å—Å—ã–ª–æ–∫\n"
        report += "\n"
    
    if failed_results:
        report += f"‚ùå –û—à–∏–±–∫–∏ ({len(failed_results)}):\n"
        for res in failed_results[:5]:
            report += f"‚Ä¢ @{res['account']}: {res['message']}\n"
        if len(failed_results) > 5:
            report += f"... –∏ –µ—â—ë {len(failed_results) - 5} –æ—à–∏–±–æ–∫\n"
        report += "\n"
    
    if len(success_results) > 0:
        report += f"üí° –°—Å—ã–ª–∫–∏ –º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—è—Ö –Ω–µ —Å—Ä–∞–∑—É\n"
        report += f"üõ°Ô∏è –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –±–∞–Ω–æ–≤ Instagram\n"
        report += f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–∫–æ—Ä–∏–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å –≤ {max_workers}x —Ä–∞–∑!"
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    try:
        message.delete()
    except:
        pass
        
    message.reply_text(
        report,
        parse_mode=None,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]])
    )

def bulk_add_photo(update: Update, context: CallbackContext) -> int:
    """–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    query.answer()
    
    account_ids = context.user_data.get('selected_profile_accounts', [])
    
    query.edit_message_text(
        f"üñº *–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n\n"
        f"*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        f"‚Ä¢ –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ\n"
        f"‚Ä¢ –ï—Å–ª–∏ —Ñ–æ—Ç–æ –º–µ–Ω—å—à–µ, —á–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –æ–Ω–∏ –±—É–¥—É—Ç —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n"
        f"‚Ä¢ –£–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞, –∫—Ä–æ–ø, –ø–æ–≤–æ—Ä–æ—Ç\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        parse_mode="Markdown"
    )
    
    context.user_data['bulk_photos'] = []
    return BULK_ADD_PHOTO

def show_bulk_actions_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback show_bulk_actions"""
    show_bulk_profile_actions(update, context)

def bulk_delete_photo(update: Update, context: CallbackContext) -> None:
    """–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    query.answer()
    query.edit_message_text("üöß –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", 
                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]]))

def bulk_delete_posts(update: Update, context: CallbackContext) -> None:
    """–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    query.edit_message_text("üöß –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", 
                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]]))

def bulk_delete_bio(update: Update, context: CallbackContext) -> None:
    """–ú–∞—Å—Å–æ–≤–æ–µ –æ—á–∏—â–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    query = update.callback_query
    query.answer()
    query.edit_message_text("üöß –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", 
                          reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]]))

def save_bulk_bio(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —à–∞–±–ª–æ–Ω–æ–≤"""
    text = update.message.text
    if text == '/cancel':
        update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
                                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_bulk_actions")]]))
        return ConversationHandler.END
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    context.user_data['bulk_action'] = 'edit_bio'
    return handle_bulk_profile_action(update, context)

def save_bulk_usernames(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—ã–µ username"""
    text = update.message.text
    if text == '/cancel':
        update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", 
                                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_bulk_actions")]]))
        return ConversationHandler.END
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ username
    update.message.reply_text("üöß –û–±—Ä–∞–±–æ—Ç–∫–∞ username –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", 
                            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]]))
    return ConversationHandler.END

def collect_bulk_photos(update: Update, context: CallbackContext) -> int:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    if 'bulk_photos' not in context.user_data:
        context.user_data['bulk_photos'] = []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_file = update.message.photo[-1]
    context.user_data['bulk_photos'].append(photo_file.file_id)
    
    count = len(context.user_data['bulk_photos'])
    update.message.reply_text(
        f"üì∏ –§–æ—Ç–æ #{count} –ø–æ–ª—É—á–µ–Ω–æ.\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /done –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    )
    
    return BULK_ADD_PHOTO

def process_bulk_photos(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ"""
    import concurrent.futures
    import threading
    
    photos = context.user_data.get('bulk_photos', [])
    account_ids = context.user_data.get('selected_profile_accounts', [])
    
    if not photos:
        update.message.reply_text("‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ.")
        return BULK_ADD_PHOTO
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    active_account_ids = []
    inactive_accounts = []
    
    for acc_id in account_ids:
        account = get_instagram_account(acc_id)
        if account and account.status == 'active':
            active_account_ids.append(acc_id)
        else:
            inactive_accounts.append(account.username if account else f"ID {acc_id}")
    
    if not active_account_ids:
        update.message.reply_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
            f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {', '.join(inactive_accounts)}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]])
        )
        return ConversationHandler.END
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    message_text = f"‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤...\n\n"
    if inactive_accounts:
        message_text += f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(inactive_accounts)}\n"
    message_text += f"üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(active_account_ids)}"
    
    message = update.message.reply_text(message_text)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤–º–µ—Å—Ç–æ –≤—Å–µ—Ö
    account_ids = active_account_ids
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ
    photo_paths = []
    for i, photo_file_id in enumerate(photos):
        try:
            photo_file = context.bot.get_file(photo_file_id)
            photo_path = f"temp_bulk_photo_{i}.jpg"
            photo_file.download(photo_path)
            photo_paths.append(photo_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
    
    if not photo_paths:
        message.delete()
        update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]])
        )
        return ConversationHandler.END
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    success_count = 0
    failed_accounts = []
    processed_count = 0
    lock = threading.Lock()
    
    def update_avatar(account_id, index):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        nonlocal success_count, processed_count
        photo_path = photo_paths[index % len(photo_paths)]
        
        try:
            account = get_instagram_account(account_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            if account.status != 'active':
                with lock:
                    processed_count += 1
                    failed_accounts.append(f"@{account.username}: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                return
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å ProfileManager
            try:
                profile_manager = ProfileManager(account_id)
            except Exception as e:
                with lock:
                    processed_count += 1
                    failed_accounts.append(f"@{account.username}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            success, result = profile_manager.update_profile_picture(photo_path)
            
            with lock:
                processed_count += 1
                if success:
                    success_count += 1
                else:
                    failed_accounts.append(f"@{account.username}: {result}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if processed_count % 3 == 0 or processed_count == len(account_ids):
                    try:
                        message.edit_text(
                            f"‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤...\n\n"
                            f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}/{len(account_ids)}\n"
                            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                            f"‚ùå –û—à–∏–±–æ–∫: {len(failed_accounts)}\n\n"
                            f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"
                        )
                    except:
                        pass
                        
        except Exception as e:
            with lock:
                processed_count += 1
                error_msg = str(e)
                if "–ö–ª–∏–µ–Ω—Ç Instagram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω" in error_msg:
                    failed_accounts.append(f"@{account.username if 'account' in locals() else f'ID {account_id}'}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏")
                else:
                    failed_accounts.append(f"–ê–∫–∫–∞—É–Ω—Ç {account_id}: {error_msg}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    max_workers = min(20, len(account_ids))  # –ú–∞–∫—Å–∏–º—É–º 20 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
    
    try:
        message.edit_text(
            f"‚ö° –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏...\n\n"
            f"üìä –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
            f"üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {max_workers}"
        )
    except:
        pass
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        futures = {}
        for i, account_id in enumerate(account_ids):
            future = executor.submit(update_avatar, account_id, i)
            futures[future] = (account_id, i)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        timeout = 60 * len(account_ids) / max_workers  # 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        done, not_done = concurrent.futures.wait(futures, timeout=timeout)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if not_done:
            for future in not_done:
                account_id, _ = futures[future]
                try:
                    account = get_instagram_account(account_id)
                    with lock:
                        failed_accounts.append(f"@{account.username}: –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç")
                        processed_count += 1
                except:
                    with lock:
                        failed_accounts.append(f"–ê–∫–∫–∞—É–Ω—Ç {account_id}: –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç")
                        processed_count += 1
                future.cancel()
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for photo_path in photo_paths:
        if os.path.exists(photo_path):
            os.remove(photo_path)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {success_count} –∏–∑ {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
    
    if failed_accounts:
        report += f"\n‚ùå –û—à–∏–±–∫–∏:\n" + "\n".join(failed_accounts[:5])
        if len(failed_accounts) > 5:
            report += f"\n... –∏ –µ—â—ë {len(failed_accounts) - 5} –æ—à–∏–±–æ–∫"
    
    message.delete()
    update.message.reply_text(
        report,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]])
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('bulk_photos', None)
    context.user_data.pop('selected_profile_accounts', None)
    
    return ConversationHandler.END

def cancel_bulk_operation(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('bulk_photos', None)
    
    update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]])
    )
    
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    query = update.callback_query
    query.answer()

    account_id = context.user_data.get('current_account_id')

    if account_id:
        return profile_account_menu(update, context)
    else:
        return profile_setup_menu(update, context)

def on_profile_account_selected(account_ids: list, update: Update, context: CallbackContext):
    """Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª—è—Ö"""
    if account_ids:
        if len(account_ids) == 1:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            account_id = account_ids[0]
            context.user_data['current_account_id'] = account_id
            profile_account_menu(update, context)
        else:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            context.user_data['selected_profile_accounts'] = account_ids
            show_bulk_profile_actions(update, context)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è callback —Ñ—É–Ω–∫—Ü–∏–∏
PROFILE_ACCOUNT_CALLBACK = on_profile_account_selected

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
profile_selector = AccountSelector(
    callback_prefix="profile_select",
    title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è",
    allow_multiple=True,  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ True –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    show_status=True,
    show_folders=True,
    back_callback="menu_accounts"
)

def start_profile_selection(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    return profile_selector.start_selection(update, context, PROFILE_ACCOUNT_CALLBACK)

def get_profile_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º"""
    
    profile_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(edit_profile_name, pattern='^profile_edit_name$'),
            CallbackQueryHandler(edit_profile_username, pattern='^profile_edit_username$'),
            CallbackQueryHandler(edit_profile_bio, pattern='^profile_edit_bio$'),
            CallbackQueryHandler(edit_profile_links, pattern='^profile_edit_links$'),
            CallbackQueryHandler(add_profile_photo, pattern='^profile_add_photo$'),
            CallbackQueryHandler(add_post, pattern='^profile_add_post$'),
        ],
        states={
            EDIT_NAME: [MessageHandler(Filters.text & ~Filters.command, save_profile_name)],
            EDIT_USERNAME: [MessageHandler(Filters.text & ~Filters.command, save_profile_username)],
            EDIT_BIO: [MessageHandler(Filters.text & ~Filters.command, save_profile_bio)],
            EDIT_LINKS: [MessageHandler(Filters.text & ~Filters.command, save_profile_links)],
            ADD_PHOTO: [MessageHandler(Filters.photo, save_profile_photo)],
            ADD_POST: [
                MessageHandler(Filters.photo | Filters.video, save_post),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(cancel, pattern='^profile_account_'),
            CallbackQueryHandler(cancel, pattern='^profile_setup$'),
        ],
        name="profile_conversation",
        persistent=False,
    )
    
    # ConversationHandler –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    bulk_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(bulk_edit_name, pattern='^bulk_edit_name$'),
            CallbackQueryHandler(bulk_edit_username, pattern='^bulk_edit_username$'),
            CallbackQueryHandler(bulk_edit_bio, pattern='^bulk_edit_bio$'),
            CallbackQueryHandler(bulk_edit_links, pattern='^bulk_edit_links$'),
            CallbackQueryHandler(bulk_add_photo, pattern='^bulk_add_photo$'),
        ],
        states={
            BULK_EDIT_NAME: [MessageHandler(Filters.text & ~Filters.command, save_bulk_names)],
            BULK_EDIT_USERNAME: [MessageHandler(Filters.text & ~Filters.command, save_bulk_usernames)],
            BULK_EDIT_BIO: [MessageHandler(Filters.text & ~Filters.command, save_bulk_bio)],
            BULK_EDIT_LINKS: [MessageHandler(Filters.text & ~Filters.command, save_bulk_links)],
            BULK_ADD_PHOTO: [
                MessageHandler(Filters.photo, collect_bulk_photos),
                CommandHandler('done', process_bulk_photos)
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_bulk_operation),
            CallbackQueryHandler(show_bulk_actions_callback, pattern='^show_bulk_actions$'),
        ],
        name="bulk_profile_conversation",
        persistent=False,
    )

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π ConversationHandler –¥–ª—è profile_selector
    selector_conv = profile_selector.get_conversation_handler()
    
    # –î–æ–±–∞–≤–ª—è–µ–º profile_setup –∫–∞–∫ entry point
    profile_selector_conv = ConversationHandler(
        entry_points=selector_conv.entry_points + [
            CallbackQueryHandler(profile_setup_menu, pattern='^profile_setup$')
        ],
        states=selector_conv.states,
        fallbacks=selector_conv.fallbacks,
        name="profile_selector_conversation",
        persistent=False,
    )

    handlers = [
        CommandHandler('profile', profile_setup_menu),
        CallbackQueryHandler(show_bulk_actions_callback, pattern='^show_bulk_actions$'),
        CallbackQueryHandler(profile_account_menu, pattern='^profile_account_'),
        CallbackQueryHandler(delete_profile_photo, pattern='^profile_delete_photo$'),
        CallbackQueryHandler(add_profile_photo, pattern=r'^add_profile_photo_\d+$'),
        CallbackQueryHandler(delete_all_posts, pattern='^profile_delete_posts$'),
        CallbackQueryHandler(delete_bio, pattern='^profile_delete_bio$'),
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–Ω–µ –≤ ConversationHandler)
        CallbackQueryHandler(bulk_remove_photo, pattern='^bulk_remove_photo$'),
        CallbackQueryHandler(bulk_delete_all_posts, pattern='^bulk_delete_all_posts$'),
        CallbackQueryHandler(confirm_bulk_delete_posts, pattern='^confirm_bulk_delete_posts$'),
        CallbackQueryHandler(bulk_clear_bio, pattern='^bulk_clear_bio$'),
        profile_conv_handler,
        bulk_conv_handler,  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        profile_selector_conv,  # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    ]

    return handlers

def bulk_add_link(update: Update, context: CallbackContext) -> None:
    """–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏"""
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="profile_setup")]
        ])
    )
    
    context.user_data['bulk_action'] = 'add_link'
    return EDIT_LINKS

def bulk_set_avatar(update: Update, context: CallbackContext) -> None:
    """–ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞"""
    query = update.callback_query
    query.answer()
    
    query.edit_message_text(
        "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–∫ –∞–≤–∞—Ç–∞—Ä –≤–æ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="profile_setup")]
        ])
    )
    
    context.user_data['bulk_action'] = 'set_avatar'
    return ADD_PHOTO

def bulk_delete_avatar(update: Update, context: CallbackContext) -> None:
    """–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞"""
    query = update.callback_query
    query.answer()
    
    selected_accounts = context.user_data.get('selected_accounts', [])
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
    query.edit_message_text(
        f"‚úÖ –ê–≤–∞—Ç–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã —É {len(selected_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
        ])
    )
    
    # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    context.user_data['selected_accounts'] = []

def handle_bulk_profile_action(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
    try:
        text = update.message.text if update.message.text else ""
        bulk_action = context.user_data.get('bulk_action')
        selected_accounts = context.user_data.get('selected_profile_accounts', [])
        
        if not selected_accounts or not bulk_action:
            update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
                ])
            )
            return ConversationHandler.END
        
        # –§–ò–õ–¨–¢–†–£–ï–ú –¢–û–õ–¨–ö–û –ê–ö–¢–ò–í–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´
        from database.db_manager import get_instagram_account
        active_accounts = []
        inactive_accounts = []
        
        for acc_id in selected_accounts:
            account = get_instagram_account(acc_id)
            if account and account.status == 'active':
                active_accounts.append(acc_id)
            else:
                inactive_accounts.append(account.username if account else f"ID {acc_id}")
        
        if not active_accounts:
            update.message.reply_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {', '.join(inactive_accounts)}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]
                ])
            )
            return ConversationHandler.END
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        if inactive_accounts:
            info_message = f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(inactive_accounts)}\n\n"
            update.message.reply_text(info_message)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        selected_accounts = active_accounts
        
        success_count = 0
        errors = []
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
        if bulk_action == 'set_avatar' and update.message.photo:
            import concurrent.futures
            import threading
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            photo_file = update.message.photo[-1]
            file_obj = photo_file.get_file()
            photo_bytes = file_obj.download_as_bytearray()
            
            # –ü–æ–¥—Å—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            processed_count = 0
            lock = threading.Lock()
            
            def update_single_avatar(account_id):
                nonlocal processed_count, success_count
                try:
                    from instagram.profile_manager import ProfileManager
                    profile_manager = ProfileManager(account_id)
                    success, message = profile_manager.update_profile_photo(photo_bytes)
                    
                    with lock:
                        if success:
                            success_count += 1
                        else:
                            errors.append(f"–ê–∫–∫–∞—É–Ω—Ç ID {account_id}: {message}")
                        processed_count += 1
                            
                except Exception as e:
                    with lock:
                        processed_count += 1
                        errors.append(f"–ê–∫–∫–∞—É–Ω—Ç ID {account_id}: {str(e)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            progress_message = update.message.reply_text(
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª–µ–π...\n\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0/{len(selected_accounts)}"
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º system_monitor –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤
            from utils.system_monitor import system_monitor
            workload_limits = system_monitor.get_workload_limits()
            max_workers = min(workload_limits.max_workers, len(selected_accounts))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
            
            with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
                futures = {executor.submit(update_single_avatar, acc_id): acc_id 
                          for acc_id in selected_accounts}
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                for future in concurrent.futures.as_completed(futures):
                    if processed_count % 3 == 0:
                        try:
                            progress_message.edit_text(
                                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª–µ–π...\n\n"
                                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}/{len(selected_accounts)}\n"
                                f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                                f"–ü–æ—Ç–æ–∫–æ–≤: {max_workers}"
                            )
                        except:
                            pass
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            try:
                progress_message.delete()
            except:
                pass
        
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ batch_update_profiles
            from instagram.profile_manager import ProfileManager
            from utils.system_monitor import system_monitor
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
            workload_limits = system_monitor.get_workload_limits()
            max_workers = min(workload_limits.max_workers, len(selected_accounts))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            progress_message = update.message.reply_text(
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π...\n\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0/{len(selected_accounts)}\n"
                f"–ü–æ—Ç–æ–∫–æ–≤: {max_workers}"
            )
            
            # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def progress_callback(processed, total, success, error_count):
                try:
                    progress_message.edit_text(
                        f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π...\n\n"
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{total}\n"
                        f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
                        f"–û—à–∏–±–æ–∫: {error_count}\n"
                        f"–ü–æ—Ç–æ–∫–æ–≤: {max_workers}"
                    )
                except:
                    pass
            
            # –í—ã–∑—ã–≤–∞–µ–º batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            success_count, error_list = ProfileManager.batch_update_profiles(
                account_ids=selected_accounts,
                update_type=bulk_action,
                value=text,
                max_workers=max_workers,
                progress_callback=progress_callback
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            errors = [f"@{err.get('username', f'ID {err.get("account_id")}')}: {err.get('error')}" 
                     for err in error_list]
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            try:
                progress_message.delete()
            except:
                pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {success_count} –∏–∑ {len(selected_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        if errors:
            report += "\n‚ùå –û—à–∏–±–∫–∏:\n" + "\n".join(errors[:5])
            if len(errors) > 5:
                report += f"\n... –∏ –µ—â–µ {len(errors) - 5} –æ—à–∏–±–æ–∫"
        
        update.message.reply_text(
            report,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data['selected_profile_accounts'] = []
        context.user_data['bulk_action'] = None
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_bulk_profile_action: {e}", exc_info=True)
        update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return ConversationHandler.END

def bulk_remove_photo(update: Update, context: CallbackContext) -> None:
    """–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    query.answer()
    
    account_ids = context.user_data.get('selected_profile_accounts', [])
    
    if not account_ids:
        query.edit_message_text(
            "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    active_account_ids = []
    inactive_accounts = []
    
    for acc_id in account_ids:
        account = get_instagram_account(acc_id)
        if account and account.status == 'active':
            active_account_ids.append(acc_id)
        else:
            inactive_accounts.append(account.username if account else f"ID {acc_id}")
    
    if not active_account_ids:
        query.edit_message_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
            f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {', '.join(inactive_accounts)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]
            ])
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    message_text = f"üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è...\n"
    if inactive_accounts:
        message_text += f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(inactive_accounts)}\n"
    message_text += f"\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0/{len(active_account_ids)}"
    
    query.edit_message_text(message_text)
    
    success_count = 0
    errors = []
    
    def progress_callback(processed, total, success, error_count):
        try:
            query.edit_message_text(
                f"üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è...\n\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{total}\n"
                f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
                f"–û—à–∏–±–æ–∫: {error_count}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º batch_update_profiles –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    from instagram.profile_manager import ProfileManager
    
    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±–µ—Ä—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
    def delete_photo_wrapper(account_id):
        try:
            pm = ProfileManager(account_id)
            return pm.remove_profile_picture()
        except Exception as e:
            return False, str(e)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    import concurrent.futures
    import threading
    
    processed_count = 0
    lock = threading.Lock()
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
        futures = []
        for acc_id in active_account_ids:
            future = executor.submit(delete_photo_wrapper, acc_id)
            futures.append((acc_id, future))
        
        for acc_id, future in futures:
            try:
                success, message = future.result()
                with lock:
                    processed_count += 1
                    if success:
                        success_count += 1
                    else:
                        account = get_instagram_account(acc_id)
                        errors.append({
                            'username': account.username if account else f'ID {acc_id}',
                            'error': message
                        })
                    progress_callback(processed_count, len(active_account_ids), success_count, len(errors))
            except Exception as e:
                with lock:
                    processed_count += 1
                    errors.append({
                        'username': f'ID {acc_id}',
                        'error': str(e)
                    })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
    report += f"–£—Å–ø–µ—à–Ω–æ: {success_count}/{len(active_account_ids)}\n"
    
    if errors:
        report += f"\n‚ùå –û—à–∏–±–∫–∏:\n"
        for err in errors[:5]:
            report += f"@{err['username']}: {err['error']}\n"
        if len(errors) > 5:
            report += f"... –∏ –µ—â–µ {len(errors) - 5} –æ—à–∏–±–æ–∫"
    
    query.edit_message_text(
        report,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]
        ])
    )

def bulk_delete_all_posts(update: Update, context: CallbackContext) -> None:
    """–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    account_ids = context.user_data.get('selected_profile_accounts', [])
    
    if not account_ids:
        query.edit_message_text(
            "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    query.edit_message_text(
        f"‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï!*\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å *–í–°–ï –ü–û–°–¢–´* —É {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ *–ù–ï–û–ë–†–ê–¢–ò–ú–û*!\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_bulk_delete_posts"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="show_bulk_actions")
            ]
        ])
    )

def confirm_bulk_delete_posts(update: Update, context: CallbackContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤"""
    query = update.callback_query
    query.answer()
    
    account_ids = context.user_data.get('selected_profile_accounts', [])
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    active_account_ids = []
    inactive_accounts = []
    
    for acc_id in account_ids:
        account = get_instagram_account(acc_id)
        if account and account.status == 'active':
            active_account_ids.append(acc_id)
        else:
            inactive_accounts.append(account.username if account else f"ID {acc_id}")
    
    if not active_account_ids:
        query.edit_message_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.\n\n"
            f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {', '.join(inactive_accounts)}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]
            ])
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    message_text = f"üì∏ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤...\n"
    if inactive_accounts:
        message_text += f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(inactive_accounts)}\n"
    message_text += f"\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0/{len(active_account_ids)}"
    
    query.edit_message_text(message_text)
    
    success_count = 0
    total_deleted = 0
    errors = []
    
    def progress_callback(processed, total):
        try:
            query.edit_message_text(
                f"üì∏ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤...\n\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {processed}/{total}\n"
                f"–£–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_deleted}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–¥–ª—è –ø–æ—Å—Ç–æ–≤ –ª—É—á—à–µ –Ω–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
    for i, acc_id in enumerate(active_account_ids):
        try:
            pm = ProfileManager(acc_id)
            success, message = pm.delete_all_posts()
            
            if success:
                success_count += 1
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                import re
                match = re.search(r'–£–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: (\d+)', message)
                if match:
                    total_deleted += int(match.group(1))
            else:
                account = get_instagram_account(acc_id)
                errors.append({
                    'username': account.username if account else f'ID {acc_id}',
                    'error': message
                })
            
            progress_callback(i + 1, len(active_account_ids))
            
        except Exception as e:
            errors.append({
                'username': f'ID {acc_id}',
                'error': str(e)
            })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
    report += f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {success_count}/{len(active_account_ids)}\n"
    report += f"–í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_deleted}\n"
    
    if errors:
        report += f"\n‚ùå –û—à–∏–±–∫–∏:\n"
        for err in errors[:5]:
            report += f"@{err['username']}: {err['error']}\n"
        if len(errors) > 5:
            report += f"... –∏ –µ—â–µ {len(errors) - 5} –æ—à–∏–±–æ–∫"
    
    query.edit_message_text(
        report,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]
        ])
    )

def bulk_clear_bio(update: Update, context: CallbackContext) -> None:
    """–ú–∞—Å—Å–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    query.answer()
    
    account_ids = context.user_data.get('selected_profile_accounts', [])
    
    if not account_ids:
        query.edit_message_text(
            "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –∞–∫–∫–∞—É–Ω—Ç—ã",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile_setup")]
            ])
        )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    query.edit_message_text(f"üßπ –û—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π...\n\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0/{len(account_ids)}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º batch_update_profiles —Å –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    from instagram.profile_manager import ProfileManager
    
    def progress_callback(processed, total, success, error_count):
        try:
            query.edit_message_text(
                f"üßπ –û—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π...\n\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{total}\n"
                f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
                f"–û—à–∏–±–æ–∫: {error_count}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º batch_update_profiles –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –±–∏–æ
    success_count, errors = ProfileManager.batch_update_profiles(
        account_ids, 
        'bio', 
        '',  # –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        max_workers=4,
        progress_callback=progress_callback
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
    report += f"–£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ: {success_count}/{len(account_ids)}\n"
    
    if errors:
        report += f"\n‚ùå –û—à–∏–±–∫–∏:\n"
        for err in errors[:5]:
            report += f"@{err['username']}: {err['error']}\n"
        if len(errors) > 5:
            report += f"... –∏ –µ—â–µ {len(errors) - 5} –æ—à–∏–±–æ–∫"
    
    query.edit_message_text(
        report,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ö –º–∞—Å—Å–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º", callback_data="show_bulk_actions")]
        ])
    )

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –º–æ–¥—É–ª–µ–π profile_setup
__all__ = [
    'profile_setup_handler',
    'setup_profile_menu',
    'handle_profile_selection',
    'show_bulk_profile_actions',
    'bulk_edit_name',
    'bulk_edit_username',
    'bulk_edit_bio',
    'bulk_add_link',
    'bulk_set_avatar',
    'bulk_delete_avatar',
    'bulk_delete_photo',
    'handle_bulk_profile_action',
    'edit_profile_name',
    'save_profile_name',
    'edit_profile_username', 
    'save_profile_username',
    'edit_profile_bio',
    'save_profile_bio',
    'edit_profile_links',
    'save_profile_links',
    'add_profile_photo',
    'save_profile_photo',
    'delete_profile_photo',
    'add_post',
    'save_post',
    'delete_all_posts',
    'EDIT_NAME',
    'EDIT_USERNAME',
    'EDIT_BIO',
    'EDIT_LINKS',
    'ADD_PHOTO',
    'ADD_POST'
]