# -*- coding: utf-8 -*-
"""
Handlers –¥–ª—è –∫–æ–º–∞–Ω–¥ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import logging
import threading
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler, ConversationHandler

from services.account_automation import automation_service
from services.rate_limiter import rate_limiter
from telegram_bot.utils.account_selection import AccountSelector
from database.db_manager import get_instagram_account
from telegram_bot.utils.async_handlers import async_handler, LoadingContext, answer_callback_async
from datetime import datetime
from telegram import ParseMode

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
warmup_selector = AccountSelector(
    callback_prefix="warmup_acc",
    title="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞",
    allow_multiple=True,
    show_status=True,
    show_folders=True
)

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤
active_warmups = {}

def handle_multi_warmup(update: Update, context: CallbackContext, account_ids_str: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–∞—Ä—Å–∏–º ID –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    account_ids = [int(id_) for id_ in account_ids_str.split(',')]
    
    logger.info(f"–ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {account_ids}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
    accounts_info = []
    for acc_id in account_ids:
        account = get_instagram_account(acc_id)
        if account:
            accounts_info.append(f"‚Ä¢ @{account.username} (ID: {acc_id})")
    
    query.edit_message_text(
        f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
        f"üìã –ê–∫–∫–∞—É–Ω—Ç—ã:\n" + "\n".join(accounts_info) + "\n\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 15 –º–∏–Ω—É—Ç –Ω–∞ –∫–∞–∂–¥—ã–π\n"
        f"üí° –ü—Ä–æ–≥—Ä–µ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ\n\n"
        f"‚è≥ –°—Ç–∞—Ç—É—Å: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ", callback_data=f"stop_all_warm_{','.join(map(str, account_ids))}")],
            [InlineKeyboardButton("üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"update_warm_status_{','.join(map(str, account_ids))}")],
            [InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_multi_warmup():
        import asyncio
        from services.advanced_warmup import AdvancedWarmupService
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        async def warmup_account(account_id):
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ–≤—ã
            warmup_key = f"{user_id}_{account_id}"
            active_warmups[warmup_key] = True
            
            try:
                logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                advanced_warmup = AdvancedWarmupService()
                
                def check_stop():
                    return not active_warmups.get(warmup_key, False)
                
                advanced_warmup.stop_callback = check_stop
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ run_in_executor
                success, report = await loop.run_in_executor(
                    None,
                    advanced_warmup.start_warmup,
                    account_id,       # account_id
                    15,              # duration_minutes
                    []               # interests
                )
                
                logger.info(f"{'‚úÖ' if success else '‚ö†Ô∏è'} –ü—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
                return account_id, success, report
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
                return account_id, False, f"–û—à–∏–±–∫–∞: {str(e)}"
            finally:
                # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                active_warmups.pop(warmup_key, None)
        
        async def run_all_warmups():
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–µ–≤—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [warmup_account(acc_id) for acc_id in account_ids]
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful = []
            failed = []
            detailed_reports = {}
            
            for result in results:
                if isinstance(result, Exception):
                    failed.append(("–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞", str(result), None))
                else:
                    account_id, success, report = result
                    account = get_instagram_account(account_id)
                    username = account.username if account else f"ID:{account_id}"
                    
                    if success:
                        successful.append((username, account_id))
                    else:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
                        error_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
                        if "–Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Instagram" in report or "We can't find an account" in report:
                            error_type = "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                        elif "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥" in report or "login_required" in report:
                            error_type = "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"
                        elif "565 Server Error" in report or "challenge" in report:
                            error_type = "üìß –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                        elif "–ø—Ä–æ–∫—Å–∏" in report.lower() or "proxy" in report.lower():
                            error_type = "üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∫—Å–∏"
                        elif "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏" in report:
                            error_type = "üö´ –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞"
                        
                        failed.append((username, error_type, account_id))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            final_report = f"üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ–≤–µ\n\n"
            final_report += f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(account_ids)}\n"
            final_report += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(successful)}\n"
            final_report += f"‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {len(failed)}\n\n"
            
            if successful:
                final_report += "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥—Ä–µ—Ç—ã–µ:\n"
                for username, acc_id in successful[:10]:
                    final_report += f"‚Ä¢ @{username}\n"
                if len(successful) > 10:
                    final_report += f"...–∏ –µ—â–µ {len(successful) - 10} –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                final_report += "\n"
            
            if failed:
                final_report += "‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n"
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏
                error_groups = {}
                for username, error_type, acc_id in failed:
                    if error_type not in error_groups:
                        error_groups[error_type] = []
                    error_groups[error_type].append(f"@{username}")
                
                for error_type, accounts in error_groups.items():
                    final_report += f"\n{error_type}:\n"
                    for acc in accounts[:5]:
                        final_report += f"‚Ä¢ {acc}\n"
                    if len(accounts) > 5:
                        final_report += f"...–∏ –µ—â–µ {len(accounts) - 5}\n"
                
                final_report += "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
                if "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error_groups:
                    final_report += "‚Ä¢ –£–¥–∞–ª–∏—Ç–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –±–∞–∑—ã\n"
                if "üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è" in error_groups or "üìß –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏" in error_groups:
                    final_report += "‚Ä¢ –ü—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                if "üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∫—Å–∏" in error_groups:
                    final_report += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏\n"
                final_report += "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É"
            
            return final_report
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_report = loop.run_until_complete(run_all_warmups())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        try:
            context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                text=final_report,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üî• –ù–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ–≤", callback_data="smart_warm_menu")],
                    [InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    thread = threading.Thread(target=run_multi_warmup)
    thread.start()
    
    return ConversationHandler.END

def handle_warmup_confirmation(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    selection_data = context.user_data.get('account_selection', {})
    action_type = selection_data.get('action_type')
    selected_accounts = selection_data.get('selected_accounts', [])
    
    if not selected_accounts:
        update.callback_query.edit_message_text("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
        return ConversationHandler.END
    
    # –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π handler –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if action_type == "smart_warm":
        return handle_smart_warm_action(update, context, selected_accounts)
    elif action_type == "show_limits":
        return handle_show_limits_action(update, context, selected_accounts)
    
    update.callback_query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
    return ConversationHandler.END

def handle_smart_warm_action(update: Update, context: CallbackContext, account_ids):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    if len(account_ids) == 1:
        # –û–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        account_id = account_ids[0]
        account = get_instagram_account(account_id)
        
        if not account:
            update.callback_query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
        status = automation_service.get_account_status(account_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
        from services.advanced_warmup import advanced_warmup
        current_pattern = advanced_warmup.determine_time_pattern()
        
        message = f"üî• *–ü—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ @{account.username}*\n\n"
        message += f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n"
        message += f"‚îú –ó–¥–æ—Ä–æ–≤—å–µ: {status['health_score']}/100\n"
        message += f"‚îú –†–∏—Å–∫ –±–∞–Ω–∞: {status['ban_risk_score']}/100\n"
        message += f"‚îî –°—Ç–∞—Ç—É—Å: {status['status']}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–µ
        if current_pattern:
            intensity_percent = int(current_pattern['intensity'] * 100)
            message += f"‚è∞ –¢–µ–∫—É—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω: {current_pattern['name']}\n"
            message += f"‚îú –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity_percent}%\n"
            message += f"‚îî –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {current_pattern['duration']}\n\n"
        
        message += "üöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Advanced Warmup 2.0:\n"
        message += "‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n"
        message += "‚Ä¢ üì± –ü—Ä–æ—Å–º–æ—Ç—Ä Reels —Å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ–º\n"
        message += "‚Ä¢ üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        message += "‚Ä¢ üìç –ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π\n"
        message += "‚Ä¢ üëÜ UI –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ)\n"
        message += "‚Ä¢ üí´ –°–ª—É—á–∞–π–Ω—ã–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏\n\n"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤ (15 –º–∏–Ω)", callback_data=f"start_warm_quick_{account_id}")],
            [InlineKeyboardButton("üß† –£–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ (30 –º–∏–Ω)", callback_data=f"start_warm_smart_{account_id}")],
            [InlineKeyboardButton("üéØ –ü—Ä–æ–≥—Ä–µ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º", callback_data=f"warm_interests_{account_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_warm")]
        ])
        
        update.callback_query.edit_message_text(message, reply_markup=keyboard)
    else:
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        message = f"üî• –í—ã–±—Ä–∞–Ω–æ {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞\n\n"
        message += f"‚ö° –ë—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è {len(account_ids)} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
        message += "üìù –î–µ—Ç–∞–ª–∏:\n"
        message += "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 15 –º–∏–Ω—É—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç\n"
        message += "‚Ä¢ –†–µ–∂–∏–º: –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤\n"
        message += "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤ {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤", callback_data=f"start_warm_multi_{','.join(map(str, account_ids))}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_warm")]
        ])
        
        update.callback_query.edit_message_text(message, reply_markup=keyboard)
    
    return ConversationHandler.END

def handle_show_limits_action(update: Update, context: CallbackContext, account_ids):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    if len(account_ids) == 1:
        account_id = account_ids[0]
        account = get_instagram_account(account_id)
        
        if not account:
            update.callback_query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞
        from services.rate_limiter import ActionType
        
        message = f"üìä *–õ–∏–º–∏—Ç—ã –¥–ª—è @{account.username}*\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º
        actions = [
            (ActionType.LIKE, "üëç –õ–∞–π–∫–∏"),
            (ActionType.FOLLOW, "‚ûï –ü–æ–¥–ø–∏—Å–∫–∏"),
            (ActionType.UNFOLLOW, "‚ûñ –û—Ç–ø–∏—Å–∫–∏"),
            (ActionType.COMMENT, "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"),
            (ActionType.STORY_VIEW, "üëÅ –ü—Ä–æ—Å–º. –∏—Å—Ç–æ—Ä–∏–π"),
            (ActionType.DM_SEND, "üì© –°–æ–æ–±—â–µ–Ω–∏—è")
        ]
        
        for action_type, name in actions:
            can_perform = rate_limiter.can_perform_action(account_id, action_type)
            if can_perform:
                message += f"‚úÖ {name}: –î–æ—Å—Ç—É–ø–Ω–æ\n"
            else:
                wait_time = rate_limiter.get_wait_time(account_id, action_type)
                message += f"‚è≥ {name}: –ñ–¥–∞—Ç—å {wait_time//60} –º–∏–Ω\n"
        
        message += f"\nüí° –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: {account.created_at.strftime('%d.%m.%Y') if account.created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
        
        update.callback_query.edit_message_text(message, parse_mode='Markdown')
    else:
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        message = f"üìä *–õ–∏–º–∏—Ç—ã –¥–ª—è {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤*\n\n"
        message += "–ü–æ–∫–∞–∑–∞–Ω–∞ –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º."
        
        update.callback_query.edit_message_text(message, parse_mode='Markdown')
    
    return ConversationHandler.END

def status_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    user_id = update.effective_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_msg = update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∞–∫–∫–∞—É–Ω—Ç—ã...")
    
    try:
        recommendations = automation_service.get_daily_recommendations()
        
        if not recommendations:
            loading_msg.edit_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä *–°–¢–ê–¢–£–° –ê–ö–ö–ê–£–ù–¢–û–í*\n\n"
        
        for account_id, data in recommendations.items():
            status_emoji = {
                "EXCELLENT": "üü¢",
                "GOOD": "üü°", 
                "NEEDS_ATTENTION": "üü†",
                "UNHEALTHY": "üî¥",
                "HIGH_RISK": "‚ö†Ô∏è",
                "CRITICAL_RISK": "üö®"
            }.get(data['status'], "‚ùì")
            
            message += f"{status_emoji} *@{data['username']}*\n"
            message += f"‚îú –ó–¥–æ—Ä–æ–≤—å–µ: {data['health_score']}/100\n"
            message += f"‚îú –†–∏—Å–∫ –±–∞–Ω–∞: {data['ban_risk']}/100\n"
            message += f"‚îî –°—Ç–∞—Ç—É—Å: {data['status']}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if data['actions']:
                message += "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
                for action in data['actions'][:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    message += f"  ‚Ä¢ {action}\n"
                message += "\n"
            
            message += "‚îÄ" * 30 + "\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üî• –ü—Ä–æ–≥—Ä–µ—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="smart_warm_menu")],
            [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="detailed_analytics")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_status")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        loading_msg.edit_text(
            message[:4096],  # Telegram limit
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ status_command: {e}")
        loading_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

def smart_warm_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /smart_warm - —É–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    user_id = update.effective_user.id
    
    def on_accounts_selected(account_ids, update, context):
        return handle_smart_warm_action(update, context, account_ids)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º AccountSelector –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    return warmup_selector.start_selection(update, context, on_accounts_selected)

@async_handler(loading_text="‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...")
def warm_account_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ callback_data
    account_id = int(query.data.replace("warm_account_", ""))
    account = get_instagram_account(account_id)
    
    if not account:
        query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
    status = automation_service.get_account_status(account_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
    from services.advanced_warmup import advanced_warmup
    current_pattern = advanced_warmup.determine_time_pattern()
    
    message = f"üî• *–ü—Ä–æ–≥—Ä–µ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ @{account.username}*\n\n"
    message += f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:\n"
    message += f"‚îú –ó–¥–æ—Ä–æ–≤—å–µ: {status['health_score']}/100\n"
    message += f"‚îú –†–∏—Å–∫ –±–∞–Ω–∞: {status['ban_risk_score']}/100\n"
    message += f"‚îî –°—Ç–∞—Ç—É—Å: {status['status']}\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–µ
    if current_pattern:
        intensity_percent = int(current_pattern['intensity'] * 100)
        message += f"‚è∞ *–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω:*\n"
        message += f"‚îú –í—Ä–µ–º—è —Å—É—Ç–æ–∫: {'–£—Ç—Ä–æ' if 6 <= datetime.now().hour < 9 else '–î–µ–Ω—å' if 9 <= datetime.now().hour < 18 else '–í–µ—á–µ—Ä' if 18 <= datetime.now().hour < 22 else '–ù–æ—á—å'}\n"
        message += f"‚îú –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity_percent}%\n"
        if datetime.now().weekday() in [5, 6]:
            message += f"‚îî –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å (+30%)\n"
        message += "\n"
    
    if not status['can_warm']:
        message += "‚ùå *–ü—Ä–æ–≥—Ä–µ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω!*\n"
        message += "–ü—Ä–∏—á–∏–Ω–∞: " + status['status']
        query.edit_message_text(message, parse_mode='Markdown')
        return
    
    message += "‚ú® *–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞:*\n"
    message += "‚Ä¢ –ê–≤—Ç–æ–∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫\n"
    message += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä Reels —Å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ–º\n"
    message += "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏\n"
    message += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
    message += "‚Ä¢ –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ–≤–∞
    keyboard = [
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π (15 –º–∏–Ω)", callback_data=f"start_warm_{account_id}_15")],
        [InlineKeyboardButton("üî• –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (30 –º–∏–Ω)", callback_data=f"start_warm_{account_id}_30")],
        [InlineKeyboardButton("üí™ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π (60 –º–∏–Ω)", callback_data=f"start_warm_{account_id}_60")],
        [InlineKeyboardButton("üéØ –° –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏", callback_data=f"warm_interests_{account_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_warm")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)

def start_warm_callback(update: Update, context: CallbackContext) -> None:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–∞—Ä—Å–∏–º callback_data
    parts = query.data.split("_")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–≥—Ä–µ–≤–∞
    if parts[2] == "multi":
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤: start_warm_multi_1,2,3
        return handle_multi_warmup(update, context, parts[3])
    elif parts[2] in ["quick", "smart"]:
        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: start_warm_quick_123 –∏–ª–∏ start_warm_smart_123
        account_id = int(parts[3])
        duration = 15 if parts[2] == "quick" else 30
    else:
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: start_warm_123_15
        account_id = int(parts[2])
        duration = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã)
    interests = context.user_data.get(f'warm_interests_{account_id}', [])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    query.edit_message_text(
        text=f"üöÄ *–ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–ø—É—â–µ–Ω!*\n\n"
             f"ÔøΩÔøΩ –ê–∫–∫–∞—É–Ω—Ç: @{account.username}\n"
             f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω—É—Ç\n\n"
             f"_–ü—Ä–æ–≥—Ä–µ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è..._",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ–≤", callback_data=f"stop_warm_{account_id}")],
            [InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_warmup():
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≥—Ä–µ–≤—ã
        active_warmups[f"{user_id}_{account_id}"] = True
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é advanced_warmup —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–ª–∞–≥–∞
            from services.advanced_warmup import AdvancedWarmupService
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            def check_stop():
                return not active_warmups.get(f"{user_id}_{account_id}", False)
            
            advanced_warmup = AdvancedWarmupService()
            advanced_warmup.stop_callback = check_stop
            
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            success, report = loop.run_until_complete(
                advanced_warmup.start_warmup(
                    account_id=account_id,
                    duration_minutes=duration,
                    interests=interests
                )
            )
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            active_warmups.pop(f"{user_id}_{account_id}", None)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if success:
                final_text = f"‚úÖ *–ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!*\n\n{report}"
            else:
                final_text = f"‚ö†Ô∏è *–ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏*\n\n{report}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                text=final_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üî• –ù–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ–≤", callback_data="smart_warm_menu")],
                    [InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
            active_warmups.pop(f"{user_id}_{account_id}", None)
            
            context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=query.message.message_id,
                text=f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞*\n\n{str(e)}",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üî• –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="smart_warm_menu")],
                    [InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])
            )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    import threading
    warmup_thread = threading.Thread(target=run_warmup)
    warmup_thread.start()
    
    return ConversationHandler.END

def warm_interests_callback(update: Update, context: CallbackContext):
    """–í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    query = update.callback_query
    account_id = int(query.data.split("_")[2])
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    interests = [
        "travel", "food", "fitness", "fashion", "art",
        "photography", "nature", "technology", "music", "sports",
        "beauty", "lifestyle", "business", "motivation", "cars"
    ]
    
    message = "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞:*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ 3-5 –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–º–∞—Ç–∏–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞:\n"
    
    keyboard = []
    for i in range(0, len(interests), 3):
        row = []
        for j in range(3):
            if i + j < len(interests):
                interest = interests[i + j]
                row.append(InlineKeyboardButton(interest.title(), callback_data=f"add_interest_{account_id}_{interest}"))
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"done_interests_{account_id}")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_warm")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)

def add_interest_callback(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞"""
    query = update.callback_query
    parts = query.data.split("_")
    account_id = int(parts[2])
    interest = parts[3]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    key = f'warm_interests_{account_id}'
    if key not in context.user_data:
        context.user_data[key] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å
    if interest in context.user_data[key]:
        context.user_data[key].remove(interest)
    else:
        if len(context.user_data[key]) < 5:
            context.user_data[key].append(interest)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    warm_interests_callback(update, context)
    query.answer(f"–í—ã–±—Ä–∞–Ω–æ: {len(context.user_data[key])}/5")

def limits_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /limits - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã"""
    user_id = update.effective_user.id
    
    def on_accounts_selected(account_ids, update, context):
        return handle_show_limits_action(update, context, account_ids)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º AccountSelector –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    return warmup_selector.start_selection(update, context, on_accounts_selected)

@async_handler(loading_text="‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–∏–º–∏—Ç–æ–≤...")
def show_limits_callback(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    
    account_id = int(query.data.replace("show_limits_", ""))
    account = get_instagram_account(account_id)
    
    if not account:
        query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ–π—Å—Ç–≤–∏–π
    stats = rate_limiter.get_action_stats(account_id)
    
    message = f"üìä *–õ–∏–º–∏—Ç—ã –¥–ª—è @{account.username}*\n\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
    age_days = rate_limiter._get_account_age_days(account_id)
    if age_days < 7:
        message += "üÜï *–°—Ç–∞—Ç—É—Å: –ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç*\n"
        limits_type = "new"
    elif age_days < 30:
        message += "üìà *–°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≥—Ä–µ–≤–∞–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç*\n"
        limits_type = "warming"
    else:
        message += "‚úÖ *–°—Ç–∞—Ç—É—Å: –ü—Ä–æ–≥—Ä–µ—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç*\n"
        limits_type = "warmed"
    
    message += f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {age_days} –¥–Ω–µ–π\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    message += "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞ —á–∞—Å:*\n"
    for action, count in stats['hourly'].items():
        message += f"‚Ä¢ {action}: {count}\n"
    
    message += "\n*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞ –¥–µ–Ω—å:*\n"
    for action, count in stats['daily'].items():
        message += f"‚Ä¢ {action}: {count}\n"
    
    query.edit_message_text(message, parse_mode='Markdown')

def done_interests_callback(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    query = update.callback_query
    account_id = int(query.data.split("_")[2])
    
    interests = context.user_data.get(f'warm_interests_{account_id}', [])
    
    if not interests:
        query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å!")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏
    message = f"üéØ *–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:* {', '.join(interests)}\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ–≤–∞:"
    
    keyboard = [
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π (15 –º–∏–Ω)", callback_data=f"start_warm_{account_id}_15")],
        [InlineKeyboardButton("üî• –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (30 –º–∏–Ω)", callback_data=f"start_warm_{account_id}_30")],
        [InlineKeyboardButton("üí™ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π (60 –º–∏–Ω)", callback_data=f"start_warm_{account_id}_60")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_warm")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(message, parse_mode='Markdown', reply_markup=reply_markup)

def stop_warm_callback(update: Update, context: CallbackContext) -> None:
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–∞—Ä—Å–∏–º account_id –∏–∑ callback_data
    account_id = int(query.data.split('_')[2])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    warmup_key = f"{user_id}_{account_id}"
    if warmup_key in active_warmups:
        active_warmups[warmup_key] = False
        
        query.edit_message_text(
            text="‚èπ *–ü—Ä–æ–≥—Ä–µ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n"
                 "–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≥—Ä–µ–≤–∞ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üî• –ù–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ–≤", callback_data="smart_warm_menu")],
                [InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
    else:
        query.edit_message_text(
            text="‚ÑπÔ∏è *–ü—Ä–æ–≥—Ä–µ–≤ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω*\n\n"
                 "–≠—Ç–æ—Ç –ø—Ä–æ–≥—Ä–µ–≤ —É–∂–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üî• –ù–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ–≤", callback_data="smart_warm_menu")],
                [InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

def stop_all_warm_callback(update: Update, context: CallbackContext) -> None:
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ–≤–æ–≤"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–∞—Ä—Å–∏–º account_ids –∏–∑ callback_data
    account_ids_str = query.data.split('_')[3]
    account_ids = [int(id_) for id_ in account_ids_str.split(',')]
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–µ–≤—ã
    stopped_count = 0
    for account_id in account_ids:
        warmup_key = f"{user_id}_{account_id}"
        if warmup_key in active_warmups:
            active_warmups[warmup_key] = False
            stopped_count += 1
    
    query.edit_message_text(
        text=f"‚èπ *–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {stopped_count} –ø—Ä–æ–≥—Ä–µ–≤–æ–≤*\n\n"
             f"–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–æ–≥—Ä–µ–≤–∞ –±—ã–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üî• –ù–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ–≤", callback_data="smart_warm_menu")],
            [InlineKeyboardButton("üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

def register_automation_handlers(dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
    # –ö–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler("status", status_command))
    
    # ConversationHandler –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞
    warmup_conversation = warmup_selector.get_conversation_handler()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ entry points –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    original_entry_points = warmup_conversation.entry_points
    additional_entry_points = [
        CallbackQueryHandler(smart_warm_command, pattern="^smart_warm_menu$"),
        CallbackQueryHandler(limits_command, pattern="^limits$")
    ]
    warmup_conversation.entry_points.extend(additional_entry_points)
    
    dispatcher.add_handler(warmup_conversation)
    
    # Callback handlers –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤  
    dispatcher.add_handler(CallbackQueryHandler(start_warm_callback, pattern="^start_warm_"))
    dispatcher.add_handler(CallbackQueryHandler(warm_interests_callback, pattern="^warm_interests_"))
    dispatcher.add_handler(CallbackQueryHandler(add_interest_callback, pattern="^add_interest_"))
    dispatcher.add_handler(CallbackQueryHandler(done_interests_callback, pattern="^done_interests_"))
    dispatcher.add_handler(CallbackQueryHandler(lambda u, c: u.callback_query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"), pattern="^cancel_warm$")) 
    dispatcher.add_handler(CallbackQueryHandler(stop_warm_callback, pattern=r'^stop_warm_')) 
    dispatcher.add_handler(CallbackQueryHandler(stop_all_warm_callback, pattern=r'^stop_all_warm_')) 