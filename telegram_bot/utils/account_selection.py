"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–ø–æ–∫
"""
import logging
from typing import List, Optional, Callable, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram.ext import CallbackContext, ConversationHandler, CallbackQueryHandler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
from telegram_bot.utils.async_handlers import async_handler, answer_callback_async

from database.db_manager import (
    get_instagram_accounts, get_account_groups, 
    get_accounts_in_group, get_accounts_without_group
)

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞
SELECTING_SOURCE = 1
SELECTING_FOLDER = 2
SELECTING_ACCOUNTS = 3

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–±–æ—Ä–∞
selection_data: Dict[int, Dict[str, Any]] = {}


class AccountSelector:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    def __init__(self, 
                 callback_prefix: str,
                 title: str = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                 allow_multiple: bool = True,
                 show_status: bool = True,
                 show_folders: bool = True,
                 back_callback: str = "main_menu"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        
        Args:
            callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
            allow_multiple: –†–∞–∑—Ä–µ—à–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
            show_status: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∞–∫—Ç–∏–≤–µ–Ω/–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω)
            show_folders: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø—Ü–∏—é –≤—ã–±–æ—Ä–∞ –ø–æ –ø–∞–ø–∫–∞–º
            back_callback: Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        """
        self.callback_prefix = callback_prefix
        self.title = title
        self.allow_multiple = allow_multiple
        self.show_status = show_status
        self.show_folders = show_folders
        self.back_callback = back_callback
    
    def start_selection(self, update: Update, context: CallbackContext, 
                       on_complete: Callable[[List[int], Update, CallbackContext], None]) -> int:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        logger.info(f"AccountSelector.start_selection called with prefix: {self.callback_prefix}")
        
        query = update.callback_query
        if query:
            query.answer()
            logger.info(f"Callback query data: {query.data}")
        
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∞
        selection_data[user_id] = {
            'prefix': self.callback_prefix,
            'selected_accounts': [],
            'on_complete': on_complete,
            'allow_multiple': self.allow_multiple,
            'show_status': self.show_status,
            'title': self.title,
            'back_callback': self.back_callback
        }
        
        logger.info(f"Selection data initialized for user {user_id}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        keyboard = []
        
        if self.show_folders:
            folders = get_account_groups()
            if folders:
                keyboard.append([InlineKeyboardButton("üìÅ –í—ã–±—Ä–∞—Ç—å –∏–∑ –ø–∞–ø–∫–∏", 
                                                    callback_data=f"{self.callback_prefix}_source_folder")])
        
        keyboard.append([InlineKeyboardButton("üìã –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã", 
                                            callback_data=f"{self.callback_prefix}_source_all")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=self.back_callback)])
        
        text = f"{self.title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:"
        
        if query:
            try:
                query.edit_message_text(text, 
                                      reply_markup=InlineKeyboardMarkup(keyboard),
                                      parse_mode=None)
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                query.message.reply_text(text, 
                                       reply_markup=InlineKeyboardMarkup(keyboard),
                                       parse_mode=None)
        else:
            update.message.reply_text(text, 
                                    reply_markup=InlineKeyboardMarkup(keyboard),
                                    parse_mode=None)
        
        return SELECTING_SOURCE
    
    def handle_source_selection(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        query = update.callback_query
        
        user_id = query.from_user.id
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö
        if user_id not in selection_data:
            selection_data[user_id] = {
                'prefix': self.callback_prefix,
                'selected_accounts': [],
                'on_complete': None,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                'allow_multiple': self.allow_multiple,
                'show_status': self.show_status,
                'title': self.title,
                'back_callback': self.back_callback
            }
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = selection_data[user_id]
            if 'allow_multiple' not in data:
                data['allow_multiple'] = self.allow_multiple
            if 'show_status' not in data:
                data['show_status'] = self.show_status
            if 'title' not in data:
                data['title'] = self.title
            if 'back_callback' not in data:
                data['back_callback'] = self.back_callback
        
        data = selection_data[user_id]
        
        if query.data.endswith("_source_folder"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
            folders = get_account_groups()
            
            if not folders:
                try:
                    query.edit_message_text(
                        "üìÇ –ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", 
                                                callback_data=f"{data['prefix']}_start")]
                        ]),
                        parse_mode=None
                    )
                except Exception as e:
                    logger.error(f"Error editing message: {e}")
                    query.message.reply_text(
                        "üìÇ –ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", 
                                                callback_data=f"{data['prefix']}_start")]
                        ]),
                        parse_mode=None
                    )
                return SELECTING_SOURCE
            
            keyboard = []
            for folder in folders:
                accounts_count = len(get_accounts_in_group(folder.id))
                button_text = f"{folder.icon} {folder.name} ({accounts_count} –∞–∫–∫.)"
                keyboard.append([InlineKeyboardButton(button_text, 
                                                    callback_data=f"{data['prefix']}_folder_{folder.id}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", 
                                                callback_data=f"{data['prefix']}_start")])
            
            try:
                query.edit_message_text(
                    f"{data['title']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=None
                )
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                query.message.reply_text(
                    f"{data['title']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=None
                )
            
            return SELECTING_FOLDER
        
        elif query.data.endswith("_source_all"):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            return self._show_accounts_list(update, context, get_instagram_accounts())
    
    def handle_folder_selection(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞–ø–∫–∏"""
        query = update.callback_query
        
        user_id = query.from_user.id
        data = selection_data.get(user_id, {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–∞–ø–∫–∏
        folder_id = int(query.data.split("_")[-1])
        accounts = get_accounts_in_group(folder_id)
        
        if not accounts:
            try:
                query.edit_message_text(
                    "üìÇ –í —ç—Ç–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", 
                                            callback_data=f"{data['prefix']}_source_folder")]
                    ]),
                    parse_mode=None
                )
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                query.message.reply_text(
                    "üìÇ –í —ç—Ç–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", 
                                            callback_data=f"{data['prefix']}_source_folder")]
                    ]),
                    parse_mode=None
                )
            return SELECTING_FOLDER
        
        return self._show_accounts_list(update, context, accounts)
    
    def _show_accounts_list(self, update: Update, context: CallbackContext, 
                           accounts: List[Any], page: int = 1) -> int:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        query = update.callback_query
        user_id = query.from_user.id
        data = selection_data.get(user_id, {})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        data['current_accounts'] = accounts
        data['current_page'] = page
        
        if not accounts:
            try:
                query.edit_message_text(
                    "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=data['back_callback'])]
                    ]),
                    parse_mode=None
                )
            except Exception as e:
                logger.error(f"Error editing message: {e}")
                query.message.reply_text(
                    "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=data['back_callback'])]
                    ]),
                    parse_mode=None
                )
            return ConversationHandler.END
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        accounts_per_page = 8
        total_pages = (len(accounts) + accounts_per_page - 1) // accounts_per_page
        start_idx = (page - 1) * accounts_per_page
        end_idx = min(start_idx + accounts_per_page, len(accounts))
        
        keyboard = []
        selected = data.get('selected_accounts', [])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        if data['allow_multiple']:
            logger.info(f"Showing multiple selection buttons for prefix: {data['prefix']}")
            select_buttons = []
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–±—Ä–∞–Ω—ã
            current_page_accounts = accounts[start_idx:end_idx]
            all_selected = all(acc.id in selected for acc in current_page_accounts)
            
            if all_selected:
                select_buttons.append(InlineKeyboardButton("‚òê –°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö", 
                                                         callback_data=f"{data['prefix']}_deselect_all"))
            else:
                select_buttons.append(InlineKeyboardButton("‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", 
                                                         callback_data=f"{data['prefix']}_select_all"))
            
            keyboard.append(select_buttons)
        else:
            logger.info(f"Single selection mode for prefix: {data['prefix']}")
        
        # –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for account in accounts[start_idx:end_idx]:
            if data['show_status']:
                status = "‚úÖ" if account.is_active else "‚ùå"
            else:
                status = ""
            
            if data['allow_multiple']:
                check = "‚òëÔ∏è" if account.id in selected else "‚òê"
                button_text = f"{check} {status} {account.username}"
            else:
                button_text = f"{status} {account.username}"
            
            keyboard.append([InlineKeyboardButton(button_text, 
                                                callback_data=f"{data['prefix']}_acc_{account.id}")])
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", 
                                                   callback_data=f"{data['prefix']}_page_{page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="noop"))
        
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", 
                                                   callback_data=f"{data['prefix']}_page_{page+1}"))
        
        if nav_buttons:
            keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = []
        if data['allow_multiple'] and selected:
            action_buttons.append(InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ({len(selected)})", 
                                                     callback_data=f"{data['prefix']}_confirm"))
        
        action_buttons.append(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", 
                                                 callback_data=f"{data['prefix']}_start"))
        keyboard.append(action_buttons)
        
        text = f"{data['title']}\n\n"
        if data['allow_multiple']:
            text += f"–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–≤—ã–±—Ä–∞–Ω–æ: {len(selected)}):"
        else:
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:"
        
        try:
            query.edit_message_text(text, 
                                  reply_markup=InlineKeyboardMarkup(keyboard),
                                  parse_mode=None)
        except Exception as e:
            logger.error(f"Error editing message: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            query.message.reply_text(text, 
                                   reply_markup=InlineKeyboardMarkup(keyboard),
                                   parse_mode=None)
        
        return SELECTING_ACCOUNTS
    
    def handle_account_toggle(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä/–æ—Ç–º–µ–Ω—É –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        query = update.callback_query
        
        user_id = query.from_user.id
        data = selection_data.get(user_id, {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–∫–∫–∞—É–Ω—Ç–∞
        account_id = int(query.data.split("_")[-1])
        
        if data['allow_multiple']:
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
            selected = data.get('selected_accounts', [])
            if account_id in selected:
                selected.remove(account_id)
            else:
                selected.append(account_id)
            data['selected_accounts'] = selected
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å —Ç–µ–∫—É—â–∏–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
            accounts = data.get('current_accounts', get_instagram_accounts())
            page = data.get('current_page', 1)
            return self._show_accounts_list(update, context, accounts, page)
        else:
            # –û–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä - —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º
            on_complete = data.get('on_complete')
            
            # –î–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π callback
            if self.callback_prefix == "profile_select" and not on_complete:
                from telegram_bot.handlers.profile_handlers import PROFILE_ACCOUNT_CALLBACK
                on_complete = PROFILE_ACCOUNT_CALLBACK
            
            if on_complete:
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                if user_id in selection_data:
                    del selection_data[user_id]
                
                # –í—ã–∑—ã–≤–∞–µ–º callback
                on_complete([account_id], update, context)
                return ConversationHandler.END
    
    def handle_select_all(self, update: Update, context: CallbackContext) -> int:
        """–í—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        query = update.callback_query
        query.answer("–í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã")
        
        user_id = query.from_user.id
        data = selection_data.get(user_id, {})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        accounts = data.get('current_accounts', [])
        page = data.get('current_page', 1)
        
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        selected = data.get('selected_accounts', [])
        for account in accounts:
            if account.id not in selected:
                selected.append(account.id)
        data['selected_accounts'] = selected
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        return self._show_accounts_list(update, context, accounts, page)
    
    def handle_deselect_all(self, update: Update, context: CallbackContext) -> int:
        """–°–Ω–∏–º–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        query = update.callback_query
        answer_callback_async(query, "–í—ã–±–æ—Ä —Å–Ω—è—Ç —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        
        user_id = query.from_user.id
        data = selection_data.get(user_id, {})
        
        # –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
        data['selected_accounts'] = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        accounts = data.get('current_accounts', [])
        page = data.get('current_page', 1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        return self._show_accounts_list(update, context, accounts, page)
    
    def handle_page_navigation(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
        query = update.callback_query
        user_id = query.from_user.id
        data = selection_data.get(user_id, {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try:
            page = int(query.data.split("_")[-1])
        except ValueError:
            answer_callback_async(query, "–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
            return SELECTING_ACCOUNTS
        
        accounts = data.get('current_accounts', [])
        return self._show_accounts_list(update, context, accounts, page)
    
    def handle_confirmation(self, update: Update, context: CallbackContext) -> int:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        query = update.callback_query
        
        user_id = query.from_user.id
        data = selection_data.get(user_id, {})
        
        selected = data.get('selected_accounts', [])
        on_complete = data.get('on_complete')
        
        # –î–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π callback
        if self.callback_prefix == "profile_select" and not on_complete:
            from telegram_bot.handlers.profile_handlers import PROFILE_ACCOUNT_CALLBACK
            on_complete = PROFILE_ACCOUNT_CALLBACK
        
        if selected:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if user_id in selection_data:
                del selection_data[user_id]
            
            # –í—ã–∑—ã–≤–∞–µ–º callback
            if on_complete:
                on_complete(selected, update, context)
            return ConversationHandler.END
        else:
            query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç", show_alert=True)
            return SELECTING_ACCOUNTS
    
    def get_conversation_handler(self) -> ConversationHandler:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–±–æ—Ä–∞"""
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è start_selection —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º on_complete
        def start_selection_wrapper(update, context):
            # –î–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π callback
            if self.callback_prefix == "profile_select":
                from telegram_bot.handlers.profile_handlers import PROFILE_ACCOUNT_CALLBACK
                return self.start_selection(update, context, PROFILE_ACCOUNT_CALLBACK)
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω on_complete –≤ selection_data
                user_id = update.effective_user.id
                data = selection_data.get(user_id, {})
                on_complete = data.get('on_complete')
                if on_complete:
                    return self.start_selection(update, context, on_complete)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç callback, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                    return SELECTING_SOURCE
        
        return ConversationHandler(
            entry_points=[
                CallbackQueryHandler(start_selection_wrapper, 
                                   pattern=f"^{self.callback_prefix}_start$"),
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º—ã–µ entry points –¥–ª—è source selection
                CallbackQueryHandler(self.handle_source_selection, 
                                   pattern=f"^{self.callback_prefix}_source_")
            ],
            states={
                SELECTING_SOURCE: [
                    CallbackQueryHandler(self.handle_source_selection, 
                                       pattern=f"^{self.callback_prefix}_source_"),
                    CallbackQueryHandler(start_selection_wrapper, 
                                       pattern=f"^{self.callback_prefix}_start$")
                ],
                SELECTING_FOLDER: [
                    CallbackQueryHandler(self.handle_folder_selection, 
                                       pattern=f"^{self.callback_prefix}_folder_"),
                    CallbackQueryHandler(start_selection_wrapper, 
                                       pattern=f"^{self.callback_prefix}_start$")
                ],
                SELECTING_ACCOUNTS: [
                    CallbackQueryHandler(self.handle_account_toggle, 
                                       pattern=f"^{self.callback_prefix}_acc_"),
                    CallbackQueryHandler(self.handle_select_all, 
                                       pattern=f"^{self.callback_prefix}_select_all$"),
                    CallbackQueryHandler(self.handle_deselect_all, 
                                       pattern=f"^{self.callback_prefix}_deselect_all$"),
                    CallbackQueryHandler(self.handle_confirmation, 
                                       pattern=f"^{self.callback_prefix}_confirm$"),
                    CallbackQueryHandler(self.handle_page_navigation, 
                                       pattern=f"^{self.callback_prefix}_page_"),
                    CallbackQueryHandler(start_selection_wrapper, 
                                       pattern=f"^{self.callback_prefix}_start$")
                ]
            },
            fallbacks=[
                CallbackQueryHandler(lambda u, c: ConversationHandler.END, 
                                   pattern=f"^{self.back_callback}$")
            ],
            per_message=False
        )


def create_account_selector(callback_prefix: str, **kwargs) -> AccountSelector:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    return AccountSelector(callback_prefix, **kwargs) 