"""
Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞
"""
import logging
from functools import wraps
from telegram import Update
from telegram.ext import CallbackContext

logger = logging.getLogger(__name__)

def subscription_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    @wraps(func)
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        from utils.subscription_service import subscription_service
        access_info = subscription_service.check_user_access(user_id)
        
        if not access_info['has_access']:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞
            status = access_info.get('status', 'unknown')
            
            blocked_message = f"üîí **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
            blocked_message += f"üë§ @{username} (ID: `{user_id}`)\n"
            blocked_message += f"üìä –°—Ç–∞—Ç—É—Å: {access_info.get('message', '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')}\n\n"
            
            if status == 'not_registered':
                blocked_message += "üí≥ **–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞:**\n"
                blocked_message += "‚Ä¢ üÜì –¢—Ä–∏–∞–ª 1-7 –¥–Ω–µ–π - –ë–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
                blocked_message += "‚Ä¢ üí≥ 1 –º–µ—Å—è—Ü - $200\n"
                blocked_message += "‚Ä¢ üí≥ 3 –º–µ—Å—è—Ü–∞ - $400\n"
                blocked_message += "‚Ä¢ üíé –ù–∞–≤—Å–µ–≥–¥–∞ - $500\n\n"
                blocked_message += f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin\n"
                blocked_message += f"üì® –°–æ–æ–±—â–∏—Ç–µ –≤–∞—à ID: `{user_id}`"
            elif status == 'expired':
                blocked_message += "‚è∞ **–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.**\n"
                blocked_message += f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin"
            elif status == 'blocked':
                blocked_message += "üö´ **–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.**\n"
                blocked_message += f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin"
            
            if update.message:
                update.message.reply_text(blocked_message, parse_mode='Markdown')
            elif update.callback_query:
                update.callback_query.answer("üîí –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞.")
                if update.callback_query.message:
                    update.callback_query.message.reply_text(blocked_message, parse_mode='Markdown')
            
            logger.warning(f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ—Å—Ç—É–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}) –∫ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}")
            return
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø - –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}) –∫ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}")
        return func(update, context, *args, **kwargs)
    
    return wrapper

def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    @wraps(func)
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        
        # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
        admin_ids = [6499246016]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤
        
        if user_id not in admin_ids:
            error_message = "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
            
            if update.message:
                update.message.reply_text(error_message)
            elif update.callback_query:
                update.callback_query.answer(error_message)
            
            logger.warning(f"üö´ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        
        return func(update, context, *args, **kwargs)
    
    return wrapper

def trial_allowed(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ —Ç—Ä–∏–∞–ª–µ"""
    @wraps(func)
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        from utils.subscription_service import subscription_service
        access_info = subscription_service.check_user_access(user_id)
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–≤–∫–ª—é—á–∞—è —Ç—Ä–∏–∞–ª)
        if access_info['has_access']:
            return func(update, context, *args, **kwargs)
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
        blocked_message = "üîí **–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
        blocked_message += "üí≥ –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø:\n"
        blocked_message += f"üìû –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin\n"
        blocked_message += f"üì® –í–∞—à ID: `{user_id}`"
        
        if update.message:
            update.message.reply_text(blocked_message, parse_mode='Markdown')
        elif update.callback_query:
            update.callback_query.answer("üîí –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞")
        
        return
    
    return wrapper

def premium_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    @wraps(func)
    def wrapper(update: Update, context: CallbackContext, *args, **kwargs):
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        from utils.subscription_service import subscription_service
        access_info = subscription_service.check_user_access(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∏ —ç—Ç–æ –Ω–µ —Ç—Ä–∏–∞–ª
        if access_info['has_access'] and not access_info.get('is_trial', False):
            return func(update, context, *args, **kwargs)
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
        if access_info.get('is_trial', False):
            blocked_message = "üíé **–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏**\n\n"
            blocked_message += "üí≥ –û–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:\n"
            blocked_message += "‚Ä¢ 1 –º–µ—Å—è—Ü - $200\n"
            blocked_message += "‚Ä¢ 3 –º–µ—Å—è—Ü–∞ - $400\n"
            blocked_message += "‚Ä¢ –ù–∞–≤—Å–µ–≥–¥–∞ - $500\n\n"
            blocked_message += f"üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin"
        else:
            blocked_message = "üîí **–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
            blocked_message += f"üìû –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin"
        
        if update.message:
            update.message.reply_text(blocked_message, parse_mode='Markdown')
        elif update.callback_query:
            update.callback_query.answer("üíé –¢–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
        
        return
    
    return wrapper 