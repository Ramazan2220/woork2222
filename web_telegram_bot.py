#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Instagram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, List
import json
import os

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup, 
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    CallbackQuery, Message
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from database.db_manager import (
    get_session, InstagramAccount, get_instagram_accounts,
    get_instagram_account, add_instagram_account, update_instagram_account,
    delete_instagram_account, get_instagram_account_by_username
)
from utils.smart_validator_service import (
    get_smart_validator, ValidationPriority, AccountStatus
)
from instagram.client import get_instagram_client
from config import WEB_TELEGRAM_BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AccountStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_password = State()
    waiting_for_email = State()
    waiting_for_email_password = State()
    waiting_for_edit_choice = State()
    waiting_for_new_value = State()

class SettingsStates(StatesGroup):
    waiting_for_check_interval = State()
    waiting_for_max_checks = State()
    waiting_for_max_recoveries = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text="üì± –ê–∫–∫–∞—É–Ω—Ç—ã"))
    keyboard.add(KeyboardButton(text="‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è"))
    keyboard.add(KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    keyboard.add(KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
    keyboard.adjust(2)
    return keyboard.as_markup(resize_keyboard=True)

def get_accounts_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"))
    keyboard.add(KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"))
    keyboard.add(KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    keyboard.adjust(2)
    return keyboard.as_markup(resize_keyboard=True)

def get_validation_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ"))
    keyboard.add(KeyboardButton(text="üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π"))
    keyboard.add(KeyboardButton(text="üìà –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏"))
    keyboard.add(KeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"))
    keyboard.add(KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    keyboard.adjust(2)
    return keyboard.as_markup(resize_keyboard=True)

def get_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = ReplyKeyboardBuilder()
    keyboard.add(KeyboardButton(text="‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏"))
    keyboard.add(KeyboardButton(text="üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"))
    keyboard.add(KeyboardButton(text="üîß –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"))
    keyboard.add(KeyboardButton(text="üíæ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"))
    keyboard.add(KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    keyboard.adjust(2)
    return keyboard.as_markup(resize_keyboard=True)

def get_account_inline_keyboard(account_id: int):
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º"""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{account_id}"))
    keyboard.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{account_id}"))
    keyboard.add(InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_{account_id}"))
    keyboard.adjust(2)
    return keyboard.as_markup()

def format_account_info(account: InstagramAccount) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
    status_emoji = "‚úÖ" if account.is_active else "‚ùå"
    last_check = account.last_check.strftime("%d.%m %H:%M") if account.last_check else "–ù–∏–∫–æ–≥–¥–∞"
    
    text = f"{status_emoji} <b>@{account.username}</b>\n"
    text += f"üìß Email: {account.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    text += f"üîç –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n"
    
    if account.last_error:
        text += f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {account.last_error}\n"
    
    return text

def format_validation_status(stats: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    text = "üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏</b>\n\n"
    
    # –°—Ç–∞—Ç—É—Å—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    status_counts = stats.get('status_counts', {})
    text += "üì± <b>–°—Ç–∞—Ç—É—Å—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n"
    
    status_emojis = {
        'valid': '‚úÖ',
        'invalid': '‚ùå',
        'checking': 'üîç',
        'recovering': 'üîß',
        'failed': '‚õî',
        'cooldown': '‚è≥'
    }
    
    for status, count in status_counts.items():
        emoji = status_emojis.get(status, '‚ùì')
        text += f"{emoji} {status.capitalize()}: {count}\n"
    
    text += f"\nüìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
    text += f"üîç –ü—Ä–æ–≤–µ—Ä–æ–∫: {stats.get('active_checks', 0)}\n"
    text += f"üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {stats.get('active_recoveries', 0)}\n"
    text += f"üìã –í –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: {stats.get('check_queue_size', 0)}\n"
    text += f"üîß –í –æ—á–µ—Ä–µ–¥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {stats.get('recovery_queue_size', 0)}\n"
    
    # –°–∏—Å—Ç–µ–º–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    system_load = stats.get('system_load', {})
    text += f"\nüíª <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
    text += f"üñ• CPU: {system_load.get('cpu', 0):.1f}%\n"
    text += f"üíæ RAM: {system_load.get('memory', 0):.1f}%\n"
    
    if system_load.get('is_high', False):
        text += "‚ö†Ô∏è <b>–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞!</b>\n"
    
    return text

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Instagram Account Manager!\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Instagram –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è\n"
        "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ email\n"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def handle_accounts_menu(message: Message):
    """–ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    await message.answer(
        "üì± <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_accounts_keyboard()
    )

async def handle_validation_menu(message: Message):
    """–ú–µ–Ω—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    await message.answer(
        "‚úÖ <b>–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_validation_keyboard()
    )

async def handle_statistics_menu(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    validator = get_smart_validator()
    stats = validator.get_stats()
    
    await message.answer(
        format_validation_status(stats),
        parse_mode="HTML"
    )

async def handle_settings_menu(message: Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=get_settings_keyboard()
    )

async def handle_main_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
async def handle_list_accounts(message: Message):
    """–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    accounts = get_instagram_accounts()
    
    if not accounts:
        await message.answer("üì≠ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return
    
    for account in accounts:
        await message.answer(
            format_account_info(account),
            parse_mode="HTML",
            reply_markup=get_account_inline_keyboard(account.id)
        )

async def handle_add_account(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ username Instagram:",
        parse_mode="HTML"
    )
    await state.set_state(AccountStates.waiting_for_username)

async def process_username(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ username"""
    username = message.text.strip().replace('@', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç
    existing = get_instagram_account_by_username(username)
    if existing:
        await message.answer(
            "‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º username —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
            reply_markup=get_accounts_keyboard()
        )
        await state.clear()
        return
    
    await state.update_data(username=username)
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AccountStates.waiting_for_password)

async def process_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è"""
    await state.update_data(password=message.text)
    await message.answer(
        "üìß –í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ '-'):"
    )
    await state.set_state(AccountStates.waiting_for_email)

async def process_email(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ email"""
    if message.text.strip() == '-':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –±–µ–∑ email
        data = await state.get_data()
        account_id = add_instagram_account(
            username=data['username'],
            password=data['password']
        )
        
        await message.answer(
            f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{data['username']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_accounts_keyboard()
        )
        await state.clear()
    else:
        await state.update_data(email=message.text)
        await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç email:")
        await state.set_state(AccountStates.waiting_for_email_password)

async def process_email_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è email"""
    data = await state.get_data()
    data['email_password'] = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
    account_id = add_instagram_account(
        username=data['username'],
        password=data['password'],
        email=data.get('email'),
        email_password=data.get('email_password')
    )
    
    await message.answer(
        f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{data['username']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å email!",
        reply_markup=get_accounts_keyboard()
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
async def handle_edit_account(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    account_id = int(callback.data.split('_')[1])
    account = get_instagram_account(account_id)
    
    if not account:
        await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üîë –ü–∞—Ä–æ–ª—å", callback_data=f"editfield_password_{account_id}"))
    keyboard.add(InlineKeyboardButton(text="üìß Email", callback_data=f"editfield_email_{account_id}"))
    keyboard.add(InlineKeyboardButton(text="üîê –ü–∞—Ä–æ–ª—å email", callback_data=f"editfield_email_password_{account_id}"))
    keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit"))
    keyboard.adjust(1)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ @{account.username}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

async def handle_edit_field(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
    parts = callback.data.split('_')
    field = parts[1]
    account_id = int(parts[2])
    
    field_names = {
        'password': '–ø–∞—Ä–æ–ª—å',
        'email': 'email',
        'email_password': '–ø–∞—Ä–æ–ª—å –æ—Ç email'
    }
    
    await state.update_data(edit_field=field, edit_account_id=account_id)
    await callback.message.edit_text(
        f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π {field_names.get(field, field)}:"
    )
    await state.set_state(AccountStates.waiting_for_new_value)
    await callback.answer()

async def process_new_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è"""
    data = await state.get_data()
    field = data.get('edit_field')
    account_id = data.get('edit_account_id')
    
    if not field or not account_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
    update_data = {field: message.text}
    update_instagram_account(account_id, **update_data)
    
    await message.answer(
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
        reply_markup=get_accounts_keyboard()
    )
    await state.clear()

async def handle_delete_account(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    account_id = int(callback.data.split('_')[1])
    account = get_instagram_account(account_id)
    
    if not account:
        await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{account_id}"))
    keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete"))
    
    await callback.message.edit_text(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å @{account.username}?",
        reply_markup=keyboard.as_markup()
    )
    await callback.answer()

async def handle_confirm_delete(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    account_id = int(callback.data.split('_')[2])
    
    if delete_instagram_account(account_id):
        await callback.message.edit_text("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞")
    
    await callback.answer()

async def handle_check_account(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    account_id = int(callback.data.split('_')[1])
    
    validator = get_smart_validator()
    validator.request_validation(account_id, ValidationPriority.HIGH)
    
    await callback.answer("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!", show_alert=True)
    
    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await asyncio.sleep(3)
    
    account = get_instagram_account(account_id)
    if account:
        await callback.message.edit_text(
            format_account_info(account),
            parse_mode="HTML",
            reply_markup=get_account_inline_keyboard(account_id)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
async def handle_check_all(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
    accounts = get_instagram_accounts()
    if not accounts:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return
    
    validator = get_smart_validator()
    
    await message.answer(f"üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    
    for account in accounts:
        validator.request_validation(account.id, ValidationPriority.NORMAL)
    
    await message.answer(
        "‚úÖ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–≤–µ—Ä–∫–∏!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üìà –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏' –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."
    )

async def handle_check_selected(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
    accounts = get_instagram_accounts()
    if not accounts:
        await message.answer("üì≠ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return
    
    keyboard = InlineKeyboardBuilder()
    for account in accounts:
        keyboard.add(InlineKeyboardButton(
            text=f"@{account.username}",
            callback_data=f"check_{account.id}"
        ))
    keyboard.adjust(1)
    
    await message.answer(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
        reply_markup=keyboard.as_markup()
    )

async def handle_validation_status(message: Message):
    """–°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    validator = get_smart_validator()
    stats = validator.get_stats()
    
    await message.answer(
        format_validation_status(stats),
        parse_mode="HTML"
    )

async def handle_validation_settings(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    validator = get_smart_validator()
    
    text = "üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏</b>\n\n"
    text += f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {validator.check_interval // 60} –º–∏–Ω\n"
    text += f"üîÑ –ú–∞–∫—Å. –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {validator.max_concurrent_checks}\n"
    text += f"üîß –ú–∞–∫—Å. –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {validator.max_concurrent_recoveries}\n"
    text += f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {validator.recovery_cooldown // 60} –º–∏–Ω\n"
    
    await message.answer(text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def handle_check_interval(message: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    await message.answer(
        "‚è± –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ç–µ–∫—É—â–∏–π: 30):"
    )
    await state.set_state(SettingsStates.waiting_for_check_interval)

async def process_check_interval(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        interval = int(message.text)
        if interval < 5:
            await message.answer("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç")
            return
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await message.answer(
            f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} –º–∏–Ω",
            reply_markup=get_settings_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    await state.clear()

async def handle_show_settings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    validator = get_smart_validator()
    
    text = "üíæ <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
    text += f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {validator.check_interval // 60} –º–∏–Ω\n"
    text += f"üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {validator.max_concurrent_checks}\n"
    text += f"üîß –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {validator.max_concurrent_recoveries}\n"
    text += f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {validator.recovery_cooldown // 60} –º–∏–Ω\n"
    
    await message.answer(text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
async def handle_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.message.delete()
    await state.clear()
    await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if WEB_TELEGRAM_BOT_TOKEN == 'YOUR_NEW_BOT_TOKEN_HERE':
        logger.error(
            "‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n"
            "1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram\n"
            "2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞\n" 
            "3. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ config.py –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é WEB_TELEGRAM_BOT_TOKEN\n"
            "   –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEB_TELEGRAM_BOT_TOKEN"
        )
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=WEB_TELEGRAM_BOT_TOKEN)
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    dp.message.register(cmd_start, Command("start"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    dp.message.register(handle_accounts_menu, F.text == "üì± –ê–∫–∫–∞—É–Ω—Ç—ã")
    dp.message.register(handle_validation_menu, F.text == "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è")
    dp.message.register(handle_statistics_menu, F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    dp.message.register(handle_settings_menu, F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    dp.message.register(handle_main_menu, F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    dp.message.register(handle_list_accounts, F.text == "üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    dp.message.register(handle_add_account, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    dp.message.register(handle_check_all, F.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ")
    dp.message.register(handle_check_selected, F.text == "üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π")
    dp.message.register(handle_validation_status, F.text == "üìà –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    dp.message.register(handle_validation_settings, F.text == "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    dp.message.register(handle_check_interval, F.text == "‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏")
    dp.message.register(handle_show_settings, F.text == "üíæ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.message.register(process_username, StateFilter(AccountStates.waiting_for_username))
    dp.message.register(process_password, StateFilter(AccountStates.waiting_for_password))
    dp.message.register(process_email, StateFilter(AccountStates.waiting_for_email))
    dp.message.register(process_email_password, StateFilter(AccountStates.waiting_for_email_password))
    dp.message.register(process_new_value, StateFilter(AccountStates.waiting_for_new_value))
    dp.message.register(process_check_interval, StateFilter(SettingsStates.waiting_for_check_interval))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback
    dp.callback_query.register(handle_edit_account, F.data.startswith("edit_"))
    dp.callback_query.register(handle_edit_field, F.data.startswith("editfield_"))
    dp.callback_query.register(handle_delete_account, F.data.startswith("delete_"))
    dp.callback_query.register(handle_confirm_delete, F.data.startswith("confirm_delete_"))
    dp.callback_query.register(handle_check_account, F.data.startswith("check_"))
    dp.callback_query.register(handle_cancel, F.data.in_(["cancel_edit", "cancel_delete"]))
    
    # –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    validator = get_smart_validator()
    if not validator.is_running:
        validator.start()
        logger.info("‚úÖ Smart Validator –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main()) 