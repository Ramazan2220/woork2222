#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è rotating –ø—Ä–æ–∫—Å–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω–æ–π IP
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç residential –ø—Ä–æ–∫—Å–∏ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Å–µ—Å—Å–∏–π
"""

import time
import hashlib
import random
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Tuple

logger = logging.getLogger(__name__)

class RotatingProxyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è rotating –ø—Ä–æ–∫—Å–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω–æ–π IP"""
    
    def __init__(self):
        self.session_cache = {}  # –ö—ç—à —Å–µ—Å—Å–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.last_rotation = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ–Ω—ã IP –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        
    def generate_session_id(self, account_id: int, rotation_type: str = "time") -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π session ID –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏ IP
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            rotation_type: –¢–∏–ø —Ä–æ—Ç–∞—Ü–∏–∏ ('time', 'request', 'manual')
            
        Returns:
            –£–Ω–∏–∫–∞–ª—å–Ω—ã–π session ID
        """
        if rotation_type == "request":
            # –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è –Ω–∞ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
            timestamp = str(time.time())
            random_part = str(random.randint(100000, 999999))
            session_data = f"{account_id}-{timestamp}-{random_part}"
            
        elif rotation_type == "time":
            # –°–º–µ–Ω–∞ IP –∫–∞–∂–¥—ã–µ 5-15 –º–∏–Ω—É—Ç
            current_time = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ —Ä–æ—Ç–∞—Ü–∏—è
            if account_id in self.last_rotation:
                time_diff = current_time - self.last_rotation[account_id]
                if time_diff < timedelta(minutes=5):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
                    return self.session_cache.get(account_id, f"session-{account_id}-{int(time.time())}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            rotation_interval = random.randint(5, 15)  # 5-15 –º–∏–Ω—É—Ç
            session_timestamp = int(current_time.timestamp() // (rotation_interval * 60))
            session_data = f"{account_id}-{session_timestamp}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            self.last_rotation[account_id] = current_time
            
        elif rotation_type == "manual":
            # –†—É—á–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É
            session_data = f"{account_id}-manual-{int(time.time())}"
            
        else:
            # –ë–∞–∑–æ–≤–∞—è —Å–µ—Å—Å–∏—è –±–µ–∑ —Ä–æ—Ç–∞—Ü–∏–∏
            session_data = f"{account_id}-static"
        
        # –°–æ–∑–¥–∞–µ–º —Ö—ç—à –¥–ª—è session ID
        session_hash = hashlib.md5(session_data.encode()).hexdigest()[:8]
        session_id = f"user-session-{session_hash}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        self.session_cache[account_id] = session_id
        
        logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {session_id} (—Ç–∏–ø: {rotation_type})")
        return session_id
    
    def build_rotating_proxy_url(self, proxy_config: Dict, account_id: int, 
                                rotation_type: str = "time") -> str:
        """
        –°—Ç—Ä–æ–∏—Ç URL –ø—Ä–æ–∫—Å–∏ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π IP
        
        Args:
            proxy_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ {protocol, host, port, username, password}
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram
            rotation_type: –¢–∏–ø —Ä–æ—Ç–∞—Ü–∏–∏ IP
            
        Returns:
            –ü–æ–ª–Ω—ã–π URL –ø—Ä–æ–∫—Å–∏ —Å —Å–µ—Å—Å–∏–µ–π
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session ID
        session_id = self.generate_session_id(account_id, rotation_type)
        
        # –°—Ç—Ä–æ–∏–º URL –ø—Ä–æ–∫—Å–∏
        protocol = proxy_config.get('protocol', 'http')
        host = proxy_config['host']
        port = proxy_config['port']
        base_username = proxy_config.get('username', 'user')
        password = proxy_config.get('password', '')
        
        # –î–ª—è residential –ø—Ä–æ–∫—Å–∏ –¥–æ–±–∞–≤–ª—è–µ–º session ID –∫ username
        if 'session' in base_username or 'user-' in base_username:
            # –ü—Ä–æ–∫—Å–∏ —É–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏–∏
            rotating_username = session_id
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º session –∫ –±–∞–∑–æ–≤–æ–º—É username
            rotating_username = f"{base_username}-{session_id}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π URL
        if password:
            proxy_url = f"{protocol}://{rotating_username}:{password}@{host}:{port}"
        else:
            proxy_url = f"{protocol}://{rotating_username}@{host}:{port}"
        
        logger.info(f"üåê –°–æ–∑–¥–∞–Ω rotating proxy URL –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {protocol}://{rotating_username}:***@{host}:{port}")
        return proxy_url
    
    def force_rotation(self, account_id: int) -> None:
        """
        –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç —Å–º–µ–Ω—É IP –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è IP –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if account_id in self.session_cache:
            del self.session_cache[account_id]
        if account_id in self.last_rotation:
            del self.last_rotation[account_id]
    
    def get_proxy_stats(self, account_id: int) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        current_session = self.session_cache.get(account_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏")
        last_rotation_time = self.last_rotation.get(account_id, "–ù–∏–∫–æ–≥–¥–∞")
        
        if isinstance(last_rotation_time, datetime):
            time_since_rotation = datetime.now() - last_rotation_time
            minutes_since_rotation = int(time_since_rotation.total_seconds() / 60)
        else:
            minutes_since_rotation = "N/A"
        
        return {
            "account_id": account_id,
            "current_session": current_session,
            "last_rotation": last_rotation_time,
            "minutes_since_rotation": minutes_since_rotation
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
rotating_proxy_manager = RotatingProxyManager()

def get_rotating_proxy_url(proxy_config: Dict, account_id: int, 
                          rotation_type: str = "time") -> str:
    """
    –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è rotating proxy URL
    
    Args:
        proxy_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
        account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
        rotation_type: –¢–∏–ø —Ä–æ—Ç–∞—Ü–∏–∏ ('time', 'request', 'manual')
    
    Returns:
        URL –ø—Ä–æ–∫—Å–∏ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    """
    return rotating_proxy_manager.build_rotating_proxy_url(
        proxy_config, account_id, rotation_type
    )

def force_proxy_rotation(account_id: int) -> None:
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ IP –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
    
    Args:
        account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
    """
    rotating_proxy_manager.force_rotation(account_id)

def get_proxy_rotation_stats(account_id: int) -> Dict:
    """
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
    
    Args:
        account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
    
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏
    """
    return rotating_proxy_manager.get_proxy_stats(account_id) 