"""
–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –∞–¥–º–∏–Ω-–±–æ—Ç–æ–º –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
"""

import os
import sys
import logging
from datetime import datetime
from typing import Optional, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ admin_bot –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'admin_bot'))

from admin_bot.services.user_service import UserService
from admin_bot.models.user import User, UserStatus, SubscriptionPlan, PLAN_INFO

logger = logging.getLogger(__name__)

class SubscriptionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"""
    
    def __init__(self):
        self.user_service = UserService()
        logger.info("üîê SubscriptionService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def check_user_access(self, telegram_id: int) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–∏—Å—Ç–µ–º–µ
        
        Returns:
            dict: {
                'has_access': bool,
                'status': str,
                'plan': str,
                'days_remaining': int,
                'is_trial': bool,
                'user': User or None
            }
        """
        try:
            user = self.user_service.get_user(telegram_id)
            
            if not user:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç—Ä–∏–∞–ª
                return {
                    'has_access': False,
                    'status': 'not_registered',
                    'plan': None,
                    'days_remaining': 0,
                    'is_trial': False,
                    'user': None,
                    'message': '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ'
                }
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            self._update_expired_subscription(user)
            
            if user.status == UserStatus.BLOCKED:
                return {
                    'has_access': False,
                    'status': 'blocked',
                    'plan': user.subscription_plan.value if user.subscription_plan else None,
                    'days_remaining': 0,
                    'is_trial': user.is_trial,
                    'user': user,
                    'message': 'üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                }
            
            if user.status == UserStatus.EXPIRED:
                return {
                    'has_access': False,
                    'status': 'expired',
                    'plan': user.subscription_plan.value if user.subscription_plan else None,
                    'days_remaining': 0,
                    'is_trial': user.is_trial,
                    'user': user,
                    'message': '‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞'
                }
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
            if user.is_active:
                return {
                    'has_access': True,
                    'status': 'active',
                    'plan': user.subscription_plan.value if user.subscription_plan else None,
                    'days_remaining': user.days_remaining,
                    'is_trial': user.is_trial,
                    'user': user,
                    'message': f'‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω ({user.days_remaining} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å)' if user.days_remaining != float('inf') else '‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø'
                }
            
            return {
                'has_access': False,
                'status': 'inactive',
                'plan': user.subscription_plan.value if user.subscription_plan else None,
                'days_remaining': 0,
                'is_trial': user.is_trial,
                'user': user,
                'message': '‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return {
                'has_access': False,
                'status': 'error',
                'plan': None,
                'days_remaining': 0,
                'is_trial': False,
                'user': None,
                'message': '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏'
            }
    
    def ensure_user_exists(self, telegram_id: int, username: str = None):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            from admin_bot.services.user_service import UserService
            user_service = UserService()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = user_service.get_user(telegram_id)
            if existing_user:
                # –û–±–Ω–æ–≤–ª—è–µ–º username –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
                if username and existing_user.username != username:
                    existing_user.username = username
                    user_service.update_user(existing_user)
                    logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω username –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {username}")
                return existing_user
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
            new_user = user_service.create_user(telegram_id, username)
            logger.info(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id} (@{username})")
            return new_user
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return None

    def _update_expired_subscription(self, user: User):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        if (user.subscription_end and 
            user.subscription_end < datetime.now() and 
            user.status == UserStatus.ACTIVE):
            
            user.status = UserStatus.EXPIRED
            self.user_service.update_user(user)
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∞—è")
    
    def create_trial_user(self, telegram_id: int, username: str = None, plan: SubscriptionPlan = SubscriptionPlan.FREE_TRIAL_1_DAY) -> User:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç—Ä–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        try:
            user = self.user_service.create_user(telegram_id, username)
            user.set_subscription(plan)
            self.user_service.update_user(user)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —Å –ø–ª–∞–Ω–æ–º {plan.value}")
            return user
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return None
    
    def get_user_stats(self, telegram_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        access_info = self.check_user_access(telegram_id)
        
        if not access_info['user']:
            return access_info
        
        user = access_info['user']
        plan_info = PLAN_INFO.get(user.subscription_plan, {})
        
        return {
            **access_info,
            'plan_name': plan_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω'),
            'plan_price': plan_info.get('price', 0),
            'subscription_start': user.subscription_start.strftime('%d.%m.%Y') if user.subscription_start else None,
            'subscription_end': user.subscription_end.strftime('%d.%m.%Y') if user.subscription_end else None,
            'accounts_count': user.accounts_count,
            'last_activity': user.last_activity.strftime('%d.%m.%Y %H:%M') if user.last_activity else None
        }
    
    def update_user_activity(self, telegram_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.user_service.update_user_activity(telegram_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
    
    def get_available_plans(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
        return [
            {
                'plan': plan,
                'info': info
            }
            for plan, info in PLAN_INFO.items()
        ]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
subscription_service = SubscriptionService() 