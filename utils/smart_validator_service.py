#!/usr/bin/env python3
"""
–£–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞–≥—Ä—É–∑–∫–æ–π
"""

import asyncio
import time
import logging
import threading
import queue
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Set
from concurrent.futures import ThreadPoolExecutor
from dataclasses import dataclass
from enum import Enum
import random

from database.db_manager import get_session, get_instagram_accounts, update_instagram_account
from database.models import InstagramAccount
from instagram.client import get_instagram_client

logger = logging.getLogger(__name__)

class ValidationPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    CRITICAL = 1  # –ê–∫–∫–∞—É–Ω—Ç –Ω—É–∂–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    HIGH = 2      # –ê–∫–∫–∞—É–Ω—Ç —Å–∫–æ—Ä–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
    NORMAL = 3    # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    LOW = 4       # –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

class AccountStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    VALID = "valid"
    INVALID = "invalid"
    CHECKING = "checking"
    RECOVERING = "recovering"
    FAILED = "failed"
    COOLDOWN = "cooldown"

@dataclass
class ValidationTask:
    """–ó–∞–¥–∞—á–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    account_id: int
    priority: ValidationPriority
    retry_count: int = 0
    last_check: Optional[datetime] = None
    next_check: Optional[datetime] = None
    status: AccountStatus = AccountStatus.VALID

@dataclass
class SystemLoad:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
    active_tasks: int = 0
    active_recoveries: int = 0
    cpu_usage: float = 0.0
    memory_usage: float = 0.0
    
    @property
    def is_high_load(self) -> bool:
        """–í—ã—Å–æ–∫–∞—è –ª–∏ –Ω–∞–≥—Ä—É–∑–∫–∞"""
        return (
            self.active_tasks > 15 or 
            self.active_recoveries > 3 or
            self.cpu_usage > 85 or
            self.memory_usage > 90
        )

class SmartValidatorService:
    """–£–º–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
    
    def __init__(self, 
                 check_interval_minutes: int = 180,  # üîÑ 3 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 30 –º–∏–Ω—É—Ç
                 max_concurrent_checks: int = 2,     # üîß –ú–µ–Ω—å—à–µ –ø—Ä–æ–≤–µ—Ä–æ–∫
                 max_concurrent_recoveries: int = 1,
                 recovery_cooldown_minutes: int = 360):  # üîÑ 6 —á–∞—Å–æ–≤ cooldown
        """
        Args:
            check_interval_minutes: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            max_concurrent_checks: –ú–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            max_concurrent_recoveries: –ú–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
            recovery_cooldown_minutes: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        self.check_interval = check_interval_minutes * 60
        self.max_concurrent_checks = max_concurrent_checks
        self.max_concurrent_recoveries = max_concurrent_recoveries
        self.recovery_cooldown = recovery_cooldown_minutes * 60
        
        # –û—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
        self.check_queue = queue.PriorityQueue()
        self.recovery_queue = queue.PriorityQueue()
        
        # –°—Ç–∞—Ç—É—Å—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        self.account_statuses: Dict[int, ValidationTask] = {}
        self.active_checks: Set[int] = set()
        self.active_recoveries: Set[int] = set()
        
        # –ü–æ—Ç–æ–∫–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
        self.is_running = False
        self._check_thread = None
        self._recovery_thread = None
        self._monitor_thread = None
        self._check_executor = ThreadPoolExecutor(max_workers=max_concurrent_checks)
        self._recovery_executor = ThreadPoolExecutor(max_workers=max_concurrent_recoveries)
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self._status_lock = threading.Lock()
        self._load_lock = threading.Lock()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä—É–∑–∫–µ
        self.system_load = SystemLoad()
        
        # Callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.on_status_change = None
        
        logger.info(
            f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É–º–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä "
            f"(–ø—Ä–æ–≤–µ—Ä–∫–∏: {max_concurrent_checks}, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {max_concurrent_recoveries})"
        )
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        if self.is_running:
            logger.warning("–°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
        self._check_thread = threading.Thread(target=self._check_worker, daemon=True)
        self._recovery_thread = threading.Thread(target=self._recovery_worker, daemon=True)
        self._monitor_thread = threading.Thread(target=self._monitor_system, daemon=True)
        
        self._check_thread.start()
        self._recovery_thread.start()
        self._monitor_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        threading.Thread(target=self._periodic_check, daemon=True).start()
        
        logger.info("‚úÖ –£–º–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.is_running = False
        self._check_executor.shutdown(wait=True)
        self._recovery_executor.shutdown(wait=True)
        logger.info("üõë –£–º–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def request_validation(self, account_id: int, priority: ValidationPriority = ValidationPriority.NORMAL):
        """
        –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        with self._status_lock:
            task = self.account_statuses.get(account_id)
            
            # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
            if task and task.status in [AccountStatus.CHECKING, AccountStatus.RECOVERING]:
                logger.debug(f"–ê–∫–∫–∞—É–Ω—Ç {account_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
                return
            
            # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤ cooldown –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if task and task.status == AccountStatus.COOLDOWN:
                if task.next_check and datetime.now() < task.next_check:
                    logger.debug(f"–ê–∫–∫–∞—É–Ω—Ç {account_id} –≤ cooldown –¥–æ {task.next_check}")
                    return
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            if not task:
                task = ValidationTask(account_id=account_id, priority=priority)
                self.account_statuses[account_id] = task
            else:
                task.priority = min(task.priority, priority)  # –ü–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–≤–µ—Ä–∫–∏
            self.check_queue.put((priority.value, account_id))
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º {priority.name}")
    
    def get_account_status(self, account_id: int) -> Optional[AccountStatus]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        with self._status_lock:
            task = self.account_statuses.get(account_id)
            return task.status if task else None
    
    def is_account_valid(self, account_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∞–ª–∏–¥–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç"""
        status = self.get_account_status(account_id)
        return status == AccountStatus.VALID if status else True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
    
    def get_system_load(self) -> SystemLoad:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä—É–∑–∫–µ"""
        with self._load_lock:
            return SystemLoad(
                active_tasks=len(self.active_checks),
                active_recoveries=len(self.active_recoveries),
                cpu_usage=self.system_load.cpu_usage,
                memory_usage=self.system_load.memory_usage
            )
    
    def _check_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                priority, account_id = self.check_queue.get(timeout=1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
                if self.system_load.is_high_load and priority > ValidationPriority.HIGH.value:
                    # –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
                    self.check_queue.put((priority, account_id))
                    time.sleep(5)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ª–∏ —É–∂–µ
                with self._status_lock:
                    if account_id in self.active_checks:
                        continue
                    self.active_checks.add(account_id)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                self._check_executor.submit(self._check_account, account_id)
                
            except queue.Empty:
                continue
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ check_worker: {e}")
    
    def _recovery_worker(self):
        """–í–æ—Ä–∫–µ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                priority, account_id = self.recovery_queue.get(timeout=1)
                
                # –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                if self.system_load.is_high_load:
                    self.recovery_queue.put((priority, account_id))
                    time.sleep(10)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ
                with self._status_lock:
                    if account_id in self.active_recoveries:
                        continue
                    if len(self.active_recoveries) >= self.max_concurrent_recoveries:
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
                        self.recovery_queue.put((priority, account_id))
                        time.sleep(2)
                        continue
                    self.active_recoveries.add(account_id)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                self._recovery_executor.submit(self._recover_account, account_id)
                
            except queue.Empty:
                continue
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ recovery_worker: {e}")
    
    def _check_account(self, account_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            with self._status_lock:
                task = self.account_statuses.get(account_id)
                if task:
                    task.status = AccountStatus.CHECKING
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
                    if task.last_check:
                        time_since_check = (datetime.now() - task.last_check).total_seconds()
                        if time_since_check < 7200:  # üîÑ –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 2 —á–∞—Å–∞ (–±—ã–ª–æ 5 –º–∏–Ω)
                            logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É @{account_id}, –ø—Ä–æ—à–ª–æ —Ç–æ–ª—å–∫–æ {time_since_check:.0f} —Å–µ–∫")
                            task.status = AccountStatus.VALID  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –≤—Å–µ –æ–∫
                            self.active_checks.discard(account_id)
                            return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            time.sleep(random.uniform(1, 3))
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î
            session = get_session()
            account = session.query(InstagramAccount).filter_by(id=account_id).first()
            session.close()
            
            if not account:
                logger.error(f"–ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            logger.info(f"üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ @{account.username}")
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ª–µ–≥–∫–∏–π –∑–∞–ø—Ä–æ—Å
            is_valid = self._quick_check(account)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            with self._status_lock:
                task = self.account_statuses[account_id]
                task.last_check = datetime.now()
                
                if is_valid:
                    task.status = AccountStatus.VALID
                    task.retry_count = 0
                    logger.info(f"‚úÖ @{account.username} –≤–∞–ª–∏–¥–µ–Ω")
                else:
                    task.status = AccountStatus.INVALID
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                    self.recovery_queue.put((task.priority.value, account_id))
                    logger.warning(f"‚ùå @{account.username} –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
            update_instagram_account(
                account_id,
                is_active=is_valid,
                last_check=datetime.now()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            if self.on_status_change:
                self.on_status_change(account_id, AccountStatus.VALID if is_valid else AccountStatus.INVALID)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        finally:
            with self._status_lock:
                self.active_checks.discard(account_id)
    
    def _recover_account(self, account_id: int):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            with self._status_lock:
                task = self.account_statuses.get(account_id)
                if task:
                    task.status = AccountStatus.RECOVERING
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ë–î
            session = get_session()
            account = session.query(InstagramAccount).filter_by(id=account_id).first()
            session.close()
            
            if not account:
                logger.error(f"–ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            logger.info(f"üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ @{account.username}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            success = self._attempt_recovery(account)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            with self._status_lock:
                task = self.account_statuses[account_id]
                
                if success:
                    task.status = AccountStatus.VALID
                    task.retry_count = 0
                    logger.info(f"‚úÖ @{account.username} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    task.retry_count += 1
                    if task.retry_count >= 3:
                        task.status = AccountStatus.FAILED
                        logger.error(f"‚ùå @{account.username} –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
                    else:
                        task.status = AccountStatus.COOLDOWN
                        task.next_check = datetime.now() + timedelta(seconds=self.recovery_cooldown)
                        logger.warning(f"‚è≥ @{account.username} –≤ cooldown –¥–æ {task.next_check}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
            update_instagram_account(
                account_id,
                is_active=success,
                last_check=datetime.now(),
                last_error=None if success else "Recovery failed"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            if self.on_status_change:
                self.on_status_change(account_id, task.status)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        finally:
            with self._status_lock:
                self.active_recoveries.discard(account_id)
    
    def _quick_check(self, account: InstagramAccount) -> bool:
        """
        –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (–±–µ–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
        """
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            client = get_instagram_client(account.id, skip_recovery=True)
            if not client:
                return False
            
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º—ã–π –ª–µ–≥–∫–∏–π –º–µ—Ç–æ–¥
                client.get_timeline_feed()
                return True
            except Exception as e:
                error_msg = str(e).lower()
                # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —á–µ–ª–ª–µ–Ω–¥–∂ –∏–ª–∏ –ª–æ–≥–∏–Ω - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
                if any(x in error_msg for x in ['challenge', 'login_required', 'checkpoint']):
                    return False
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ @{account.username}: {e}")
            return False
    
    def _attempt_recovery(self, account: InstagramAccount) -> bool:
        """
        –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å IMAP
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if not account.email or not account.email_password:
                logger.warning(f"–£ @{account.username} –Ω–µ—Ç email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                update_instagram_account(
                    account.id,
                    is_active=False,
                    status="no_email_data",
                    last_error="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                    last_check=datetime.now()
                )
                return False
            
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è @{account.username}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            from instagram.email_utils_optimized import get_verification_code_from_email
            from instagram.client import InstagramClient
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            instagram_client = InstagramClient(account.id)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –ø–æ—á—Ç—ã
            verification_code = get_verification_code_from_email(
                account.email, 
                account.email_password, 
                max_attempts=3, 
                delay_between_attempts=15
            )
            
            if verification_code:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {verification_code} –¥–ª—è @{account.username}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                login_success = instagram_client.login_with_challenge_code(verification_code)
                if login_success:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è @{account.username}")
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                try:
                    instagram_client.client.get_timeline_feed()
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
                    update_instagram_account(
                        account.id,
                        is_active=True,
                        status="active",
                        last_error=None,
                        last_check=datetime.now()
                    )
                    return True
                except Exception as verify_error:
                    logger.warning(f"‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ @{account.username} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                    update_instagram_account(
                        account.id,
                        is_active=False,
                        status="recovery_verify_failed",
                        last_error=f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}",
                        last_check=datetime.now()
                    )
                    return False
                else:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                    update_instagram_account(
                        account.id,
                        is_active=False,
                        status="recovery_login_failed",
                        last_error="–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                        last_check=datetime.now()
                    )
                    return False
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                update_instagram_account(
                    account.id,
                    is_active=False,
                    status="email_code_failed",
                    last_error="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ email",
                    last_check=datetime.now()
                )
            return False
            
        except Exception as e:
            error_msg = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è @{account.username}: {e}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            if "challenge_required" in error_msg.lower():
                error_type = "challenge_required"
            elif "login_required" in error_msg.lower():
                error_type = "login_required"
            elif "email" in error_msg.lower():
                error_type = "email_error"
            else:
                error_type = "recovery_error"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            update_instagram_account(
                account.id,
                is_active=False,
                status=error_type,
                last_error=error_msg,
                last_check=datetime.now()
            )
            return False
    
    def _monitor_system(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        while self.is_running:
            try:
                import psutil
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
                cpu_percent = psutil.cpu_percent(interval=1)
                memory_percent = psutil.virtual_memory().percent
                
                with self._load_lock:
                    self.system_load.cpu_usage = cpu_percent
                    self.system_load.memory_usage = memory_percent
                
                # –õ–æ–≥–∏—Ä—É–µ–º –µ—Å–ª–∏ –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
                if self.system_load.is_high_load:
                    logger.warning(
                        f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: CPU {cpu_percent}%, RAM {memory_percent}%, "
                        f"–ø—Ä–æ–≤–µ—Ä–æ–∫: {len(self.active_checks)}, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {len(self.active_recoveries)}"
                    )
                
                time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(30)
    
    def _periodic_check(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        while self.is_running:
            try:
                time.sleep(self.check_interval)
                
                if self.system_load.is_high_load:
                    logger.info("‚è∏Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
                    continue
                
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                accounts = get_instagram_accounts()
                
                for account in accounts:
                    # üîÑ –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
                    if account.is_active and account.status == 'active':
                        # –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –º–∞–∫—Å–∏–º—É–º
                        with self._status_lock:
                            task = self.account_statuses.get(account.id)
                            if task and task.last_check:
                                time_since_check = (datetime.now() - task.last_check).total_seconds()
                                if time_since_check < 86400:  # 24 —á–∞—Å–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö
                                    continue
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
                        with self._status_lock:
                            task = self.account_statuses.get(account.id)
                            if task and task.last_check:
                                time_since_check = (datetime.now() - task.last_check).total_seconds()
                                if time_since_check < 10800:  # 3 —á–∞—Å–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
                                    continue
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                    self.request_validation(account.id, ValidationPriority.LOW)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã"""
        with self._status_lock:
            status_counts = {}
            for status in AccountStatus:
                status_counts[status.value] = sum(
                    1 for task in self.account_statuses.values() 
                    if task.status == status
                )
            
            return {
                'total_accounts': len(self.account_statuses),
                'status_counts': status_counts,
                'active_checks': len(self.active_checks),
                'active_recoveries': len(self.active_recoveries),
                'check_queue_size': self.check_queue.qsize(),
                'recovery_queue_size': self.recovery_queue.qsize(),
                'system_load': {
                    'cpu': self.system_load.cpu_usage,
                    'memory': self.system_load.memory_usage,
                    'is_high': self.system_load.is_high_load
                }
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_smart_validator_instance: Optional[SmartValidatorService] = None
_instance_lock = threading.Lock()

def get_smart_validator() -> SmartValidatorService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —É–º–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
    global _smart_validator_instance
    if _smart_validator_instance is None:
        with _instance_lock:
            if _smart_validator_instance is None:
                _smart_validator_instance = SmartValidatorService()
    return _smart_validator_instance

def validate_before_use(account_id: int, priority: ValidationPriority = ValidationPriority.HIGH) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    
    Returns:
        True –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    """
    validator = get_smart_validator()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    status = validator.get_account_status(account_id)
    
    # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º
    if status == AccountStatus.VALID:
        return True
    
    # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è - –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    if status in [AccountStatus.CHECKING, AccountStatus.RECOVERING]:
        for _ in range(10):  # –ñ–¥–µ–º –¥–æ 10 —Å–µ–∫—É–Ω–¥
            time.sleep(1)
            status = validator.get_account_status(account_id)
            if status == AccountStatus.VALID:
                return True
            elif status not in [AccountStatus.CHECKING, AccountStatus.RECOVERING]:
                break
    
    # –ï—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    if status in [None, AccountStatus.INVALID]:
        validator.request_validation(account_id, priority)
        # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if priority == ValidationPriority.CRITICAL:
            for _ in range(30):  # –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
                time.sleep(1)
                if validator.is_account_valid(account_id):
                    return True
    
    return False 