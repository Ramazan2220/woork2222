import logging
import random
import time
import asyncio
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Set
from sqlalchemy.orm import Session
from instagrapi import Client
from instagrapi.types import User, UserShort

from database.models import FollowTask, FollowHistory, FollowTaskStatus, FollowSourceType
from database.db_manager import get_session
from instagram.client import get_instagram_client

logger = logging.getLogger(__name__)


class FollowManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    
    def __init__(self, task_id: int):
        self.task_id = task_id
        self.session = get_session()
        self.task = self.session.query(FollowTask).filter_by(id=task_id).first()
        if not self.task:
            raise ValueError(f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        self.client = None
        self.instagram_client = None
        self._executor = ThreadPoolExecutor(max_workers=1)
        
    def __enter__(self):
        return self
        
    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            self.session.close()
    
    def initialize_client(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Instagram –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
            from utils.smart_validator_service import validate_before_use, ValidationPriority
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {self.task.account_id} –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫")
            
            if not validate_before_use(self.task.account_id, ValidationPriority.HIGH):
                logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {self.task.account_id} –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤")
                return False
            
            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {self.task.account_id} –≤–∞–ª–∏–¥–µ–Ω")
            
            client = get_instagram_client(self.task.account_id)
            if not client:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.task.account_id}")
                return False
            
            self.client = client
            self.instagram_client = self.client
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    def get_unique_targets(self, all_targets: List[UserShort]) -> List[UserShort]:
        """–ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —ç—Ç–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            followed_user_ids = self.session.query(FollowHistory.target_user_id).filter_by(
                account_id=self.task.account_id
            ).all()
            
            followed_set = {str(user_id[0]) for user_id in followed_user_ids}
            
            # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ
            processed_set = set(self.task.processed_users or [])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏
            unique_targets = []
            for target in all_targets:
                target_id = str(target.pk)
                if target_id not in followed_set and target_id not in processed_set:
                    unique_targets.append(target)
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(unique_targets)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –∏–∑ {len(all_targets)} –æ–±—â–∏—Ö")
            return unique_targets
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π: {e}")
            return all_targets
    
    def apply_filters(self, users: List[UserShort]) -> List[UserShort]:
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.task.filters:
            return users
        
        filtered_users = []
        filters = self.task.filters
        
        for user in users:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                if hasattr(user, 'is_private') and hasattr(user, 'follower_count'):
                    # –£ –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    user_info = user
                else:
                    # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    user_info = self.instagram_client.user_info(user.pk)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                if filters.get('skip_private', False) and user_info.is_private:
                    self.task.skipped_count += 1
                    continue
                
                if filters.get('skip_no_avatar', False) and not user_info.profile_pic_url:
                    self.task.skipped_count += 1
                    continue
                
                if filters.get('only_business', False) and not getattr(user_info, 'is_business', False):
                    self.task.skipped_count += 1
                    continue
                
                # –§–∏–ª—å—Ç—Ä—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
                min_followers = filters.get('min_followers', 0)
                max_followers = filters.get('max_followers', float('inf'))
                
                if user_info.follower_count < min_followers or user_info.follower_count > max_followers:
                    self.task.skipped_count += 1
                    continue
                
                filtered_users.append(user)
                
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {e}")
                continue
        
        logger.info(f"üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_users)} –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return filtered_users
    
    def get_source_users(self) -> List[UserShort]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            source_type = self.task.source_type
            source_value = self.task.source_value.strip().replace('@', '').replace('#', '')
            
            users = []
            
            if source_type == FollowSourceType.FOLLOWERS:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞
                user_id = self.instagram_client.user_id_from_username(source_value)
                users = self.instagram_client.user_followers(user_id, amount=1000)
                
            elif source_type == FollowSourceType.FOLLOWING:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
                user_id = self.instagram_client.user_id_from_username(source_value)
                users = self.instagram_client.user_following(user_id, amount=1000)
                
            elif source_type == FollowSourceType.HASHTAG:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ö–µ—à—Ç–µ–≥—É
                medias = self.instagram_client.hashtag_medias_recent(source_value, amount=50)
                user_ids_seen = set()
                for media in medias:
                    if media.user.pk not in user_ids_seen:
                        users.append(media.user)
                        user_ids_seen.add(media.user.pk)
                
            elif source_type == FollowSourceType.LOCATION:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–æ—Å—Ç–æ–≤ –ø–æ –ª–æ–∫–∞—Ü–∏–∏
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ª–æ–∫–∞—Ü–∏—é
                locations = self.instagram_client.fbsearch_places(source_value)
                if locations:
                    location_pk = locations[0].pk
                    medias = self.instagram_client.location_medias_recent(location_pk, amount=50)
                    user_ids_seen = set()
                    for media in medias:
                        if media.user.pk not in user_ids_seen:
                            users.append(media.user)
                            user_ids_seen.add(media.user.pk)
                
            elif source_type == FollowSourceType.LIKERS:
                # –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–Ω—É–≤—à–∏—Ö –ø–æ—Å—Ç
                # –ò–∑–≤–ª–µ–∫–∞–µ–º media_id –∏–∑ URL
                media_pk = self.instagram_client.media_pk_from_url(source_value)
                users = self.instagram_client.media_likers(media_pk)
                
            elif source_type == FollowSourceType.COMMENTERS:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞
                media_pk = self.instagram_client.media_pk_from_url(source_value)
                comments = self.instagram_client.media_comments(media_pk)
                user_ids_seen = set()
                for comment in comments:
                    if comment.user.pk not in user_ids_seen:
                        users.append(comment.user)
                        user_ids_seen.add(comment.user.pk)
            
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_type.value}: {source_value}")
            return users
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
            return []
    
    def follow_user(self, user: UserShort) -> bool:
        """–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ username
            user_info = self.instagram_client.user_info_by_username(user.username)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ª–∏ —É–∂–µ
            if user_info.friendship_status.following:
                logger.info(f"‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ @{user.username}")
                return False
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            result = self.instagram_client.user_follow(user.pk)
            
            if result:
                logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ @{user.username}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                history = FollowHistory(
                    account_id=self.task.account_id,
                    target_user_id=str(user.pk),
                    target_username=user.username,
                    task_id=self.task.id
                )
                self.session.add(history)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á–∏
                self.task.followed_count += 1
                self.task.last_action_at = datetime.now()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                if not self.task.processed_users:
                    self.task.processed_users = []
                self.task.processed_users.append(str(user.pk))
                
                self.session.commit()
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @{user.username}")
                self.task.failed_count += 1
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ @{user.username}: {e}")
            self.task.failed_count += 1
            self.session.commit()
            return False
    
    def calculate_delay(self) -> int:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
        # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏—Å—Ö–æ–¥—è –∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏
        base_delay = 3600 / self.task.follows_per_hour
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ¬±30%
        min_delay = int(base_delay * 0.7)
        max_delay = int(base_delay * 1.3)
        
        return random.randint(min_delay, max_delay)
    
    def should_continue(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.session.refresh(self.task)
        if self.task.status != FollowTaskStatus.RUNNING:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if self.task.followed_count >= self.task.follow_limit:
            logger.info(f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫: {self.task.followed_count}/{self.task.follow_limit}")
            self.task.status = FollowTaskStatus.COMPLETED
            self.task.completed_at = datetime.now()
            self.session.commit()
            return False
        
        return True
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ #{self.task.id}: {self.task.name}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
            if not self.initialize_client():
                self.task.status = FollowTaskStatus.FAILED
                self.task.error = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Instagram –∫–ª–∏–µ–Ω—Ç"
                self.session.commit()
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.task.status = FollowTaskStatus.RUNNING
            self.task.started_at = datetime.now()
            self.session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–∞–∫–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
            if self.task.source_value == 'batch_follow' and self.task.filters:
                target_accounts = self.task.filters.get('target_accounts', [])
                if target_accounts:
                    logger.info(f"üìã –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {len(target_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    self.run_batch_follow(target_accounts)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            all_users = self.get_source_users()
            if not all_users:
                self.task.status = FollowTaskStatus.FAILED
                self.task.error = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"
                self.session.commit()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏
            unique_users = self.get_unique_targets(all_users)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_users = self.apply_filters(unique_users)
            
            if not filtered_users:
                self.task.status = FollowTaskStatus.COMPLETED
                self.task.completed_at = datetime.now()
                self.task.error = "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"
                self.session.commit()
                return
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
            random.shuffle(filtered_users)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            for user in filtered_users:
                if not self.should_continue():
                    break
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                success = self.follow_user(user)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
                if success:
                    delay = self.calculate_delay()
                    logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏...")
                    time.sleep(delay)
                else:
                    # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    time.sleep(random.randint(5, 15))
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            if self.task.status == FollowTaskStatus.RUNNING:
                self.task.status = FollowTaskStatus.COMPLETED
                self.task.completed_at = datetime.now()
                self.session.commit()
            
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–¥–ø–∏—Å–æ–∫: {self.task.followed_count}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.task.skipped_count}, –û—à–∏–±–æ–∫: {self.task.failed_count}")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {e}")
            self.task.status = FollowTaskStatus.FAILED
            self.task.error = str(e)
            self.session.commit()
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            if self.client:
                self.client.close()
    
    def run_batch_follow(self, target_accounts: List[str]):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            unique_follows = self.task.filters.get('unique_follows', True)
            
            for target_username in target_accounts:
                if not self.should_continue():
                    break
                
                try:
                    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
                    username = target_username.strip().replace('@', '')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_info = self.instagram_client.user_info_by_username(username)
                    if not user_info:
                        logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        self.task.failed_count += 1
                        self.session.commit()
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if unique_follows:
                        existing = self.session.query(FollowHistory).filter_by(
                            account_id=self.task.account_id,
                            target_user_id=str(user_info.pk)
                        ).first()
                        
                        if existing:
                            logger.info(f"‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ @{username} —Ä–∞–Ω–µ–µ")
                            self.task.skipped_count += 1
                            self.session.commit()
                            continue
                    
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                    user_short = UserShort(
                        pk=user_info.pk,
                        username=user_info.username,
                        full_name=user_info.full_name,
                        profile_pic_url=user_info.profile_pic_url,
                        is_private=user_info.is_private,
                        is_verified=user_info.is_verified
                    )
                    
                    success = self.follow_user(user_short)
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
                    if success:
                        delay_min = self.task.filters.get('delay_min', 30)
                        delay_max = self.task.filters.get('delay_max', 90)
                        delay = random.randint(delay_min, delay_max)
                        logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏...")
                        time.sleep(delay)
                    else:
                        # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        time.sleep(random.randint(5, 15))
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ @{target_username}: {e}")
                    self.task.failed_count += 1
                    self.session.commit()
                    continue
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            if self.task.status == FollowTaskStatus.RUNNING:
                self.task.status = FollowTaskStatus.COMPLETED
                self.task.completed_at = datetime.now()
                self.session.commit()
            
            logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–¥–ø–∏—Å–æ–∫: {self.task.followed_count}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.task.skipped_count}, –û—à–∏–±–æ–∫: {self.task.failed_count}")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
            self.task.status = FollowTaskStatus.FAILED
            self.task.error = str(e)
            self.session.commit()

    async def execute_follow_task(self, task: FollowTask):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #{task.id}: {task.name}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
            if not self.initialize_client():
                self.task.status = FollowTaskStatus.FAILED
                self.task.error = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Instagram –∫–ª–∏–µ–Ω—Ç"
                self.session.commit()
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.task.status = FollowTaskStatus.RUNNING
            self.task.started_at = datetime.now()
            self.session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–∞–∫–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
            if self.task.source_value == 'batch_follow' and self.task.filters:
                target_accounts = self.task.filters.get('target_accounts', [])
                if target_accounts:
                    logger.info(f"üìã –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø–∞–∫–µ—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {len(target_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
                    await self.async_run_batch_follow(target_accounts)
                    return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            all_users = await self.async_get_source_users()
            if not all_users:
                self.task.status = FollowTaskStatus.FAILED
                self.task.error = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"
                self.session.commit()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏
            unique_users = await self.async_get_unique_targets(all_users)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filtered_users = await self.async_apply_filters(unique_users)
            
            if not filtered_users:
                self.task.status = FollowTaskStatus.COMPLETED
                self.task.completed_at = datetime.now()
                self.task.error = "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"
                self.session.commit()
                return
            
            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
            random.shuffle(filtered_users)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
            for user in filtered_users:
                if not await self.async_should_continue():
                    break
                
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                success = await self.async_follow_user(user)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
                if success:
                    delay = self.calculate_delay()
                    logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏...")
                    await asyncio.sleep(delay)
                else:
                    # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    await asyncio.sleep(random.randint(5, 15))
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            if self.task.status == FollowTaskStatus.RUNNING:
                self.task.status = FollowTaskStatus.COMPLETED
                self.task.completed_at = datetime.now()
                self.session.commit()
            
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–¥–ø–∏—Å–æ–∫: {self.task.followed_count}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.task.skipped_count}, –û—à–∏–±–æ–∫: {self.task.failed_count}")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ: {e}")
            self.task.status = FollowTaskStatus.FAILED
            self.task.error = str(e)
            self.session.commit()
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            if self.client:
                self.client.close()
    
    async def _run_in_executor(self, func, *args):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(self._executor, func, *args)
    
    async def check_if_already_following(self, account_id: int, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫
            existing = self.session.query(FollowHistory).filter_by(
                account_id=account_id,
                target_user_id=str(user_id)
            ).first()
            
            return existing is not None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False
    
    async def save_follow_history(self, account_id: int, user_id: str, username: str, task_id: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            history = FollowHistory(
                account_id=account_id,
                target_user_id=str(user_id),
                target_username=username,
                task_id=task_id,
                followed_at=datetime.now()
            )
            self.session.add(history)
            self.session.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    async def async_get_source_users(self) -> List[UserShort]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        try:
            source_type = self.task.source_type
            source_value = self.task.source_value.strip().replace('@', '').replace('#', '')
            
            users = []
            
            if source_type == FollowSourceType.FOLLOWERS:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞
                user_id = await self._run_in_executor(
                    self.instagram_client.user_id_from_username, source_value
                )
                users = await self._run_in_executor(
                    self.instagram_client.user_followers, user_id, amount=1000
                )
                
            elif source_type == FollowSourceType.FOLLOWING:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
                user_id = await self._run_in_executor(
                    self.instagram_client.user_id_from_username, source_value
                )
                users = await self._run_in_executor(
                    self.instagram_client.user_following, user_id, amount=1000
                )
                
            elif source_type == FollowSourceType.HASHTAG:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ö–µ—à—Ç–µ–≥—É
                medias = await self._run_in_executor(
                    self.instagram_client.hashtag_medias_recent, source_value, amount=50
                )
                user_ids_seen = set()
                for media in medias:
                    if media.user.pk not in user_ids_seen:
                        users.append(media.user)
                        user_ids_seen.add(media.user.pk)
                
            elif source_type == FollowSourceType.LOCATION:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–æ—Å—Ç–æ–≤ –ø–æ –ª–æ–∫–∞—Ü–∏–∏
                locations = await self._run_in_executor(
                    self.instagram_client.fbsearch_places, source_value
                )
                if locations:
                    location_pk = locations[0].pk
                    medias = await self._run_in_executor(
                        self.instagram_client.location_medias_recent, location_pk, amount=50
                    )
                    user_ids_seen = set()
                    for media in medias:
                        if media.user.pk not in user_ids_seen:
                            users.append(media.user)
                            user_ids_seen.add(media.user.pk)
                
            elif source_type == FollowSourceType.LIKERS:
                # –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–Ω—É–≤—à–∏—Ö –ø–æ—Å—Ç
                media_pk = await self._run_in_executor(
                    self.instagram_client.media_pk_from_url, source_value
                )
                users = await self._run_in_executor(
                    self.instagram_client.media_likers, media_pk
                )
                
            elif source_type == FollowSourceType.COMMENTERS:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤ –ø–æ—Å—Ç–∞
                media_pk = await self._run_in_executor(
                    self.instagram_client.media_pk_from_url, source_value
                )
                comments = await self._run_in_executor(
                    self.instagram_client.media_comments, media_pk
                )
                user_ids_seen = set()
                for comment in comments:
                    if comment.user.pk not in user_ids_seen:
                        users.append(comment.user)
                        user_ids_seen.add(comment.user.pk)
            
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_type.value}: {source_value}")
            return users
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}")
            return []
    
    async def async_get_unique_targets(self, all_targets: List[UserShort]) -> List[UserShort]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        return await self._run_in_executor(self.get_unique_targets, all_targets)
    
    async def async_apply_filters(self, users: List[UserShort]) -> List[UserShort]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        return await self._run_in_executor(self.apply_filters, users)
    
    async def async_should_continue(self) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        return await self._run_in_executor(self.should_continue)
    
    async def async_follow_user(self, user: UserShort) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ username
            user_info = await self._run_in_executor(
                self.instagram_client.user_info_by_username, user.username
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ª–∏ —É–∂–µ
            if user_info.friendship_status.following:
                logger.info(f"‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ @{user.username}")
                return False
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            result = await self._run_in_executor(
                self.instagram_client.user_follow, user.pk
            )
            
            if result:
                logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ @{user.username}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                history = FollowHistory(
                    account_id=self.task.account_id,
                    target_user_id=str(user.pk),
                    target_username=user.username,
                    task_id=self.task.id
                )
                self.session.add(history)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á–∏
                self.task.followed_count += 1
                self.task.last_action_at = datetime.now()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                if not self.task.processed_users:
                    self.task.processed_users = []
                self.task.processed_users.append(str(user.pk))
                
                self.session.commit()
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @{user.username}")
                self.task.failed_count += 1
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ @{user.username}: {e}")
            self.task.failed_count += 1
            self.session.commit()
            return False
    
    async def async_run_batch_follow(self, target_accounts: List[str]):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            unique_follows = self.task.filters.get('unique_follows', True)
            
            for target_username in target_accounts:
                if not await self.async_should_continue():
                    break
                
                try:
                    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
                    username = target_username.strip().replace('@', '')
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_info = await self._run_in_executor(
                        self.instagram_client.user_info_by_username, username
                    )
                    if not user_info:
                        logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        self.task.failed_count += 1
                        self.session.commit()
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if unique_follows:
                        existing = await self._run_in_executor(
                            lambda: self.session.query(FollowHistory).filter_by(
                                account_id=self.task.account_id,
                                target_user_id=str(user_info.pk)
                            ).first()
                        )
                        
                        if existing:
                            logger.info(f"‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ @{username} —Ä–∞–Ω–µ–µ")
                            self.task.skipped_count += 1
                            self.session.commit()
                            continue
                    
                    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                    user_short = UserShort(
                        pk=user_info.pk,
                        username=user_info.username,
                        full_name=user_info.full_name,
                        profile_pic_url=user_info.profile_pic_url,
                        is_private=user_info.is_private,
                        is_verified=user_info.is_verified
                    )
                    
                    success = await self.async_follow_user(user_short)
                    
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
                    if success:
                        delay_min = self.task.filters.get('delay_min', 30)
                        delay_max = self.task.filters.get('delay_max', 90)
                        delay = random.randint(delay_min, delay_max)
                        logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏...")
                        await asyncio.sleep(delay)
                    else:
                        # –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        await asyncio.sleep(random.randint(5, 15))
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ @{target_username}: {e}")
                    self.task.failed_count += 1
                    self.session.commit()
                    continue
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            if self.task.status == FollowTaskStatus.RUNNING:
                self.task.status = FollowTaskStatus.COMPLETED
                self.task.completed_at = datetime.now()
                self.session.commit()
            
            logger.info(f"‚úÖ –ü–∞–∫–µ—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–¥–ø–∏—Å–æ–∫: {self.task.followed_count}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.task.skipped_count}, –û—à–∏–±–æ–∫: {self.task.failed_count}")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ: {e}")
            self.task.status = FollowTaskStatus.FAILED
            self.task.error = str(e)
            self.session.commit() 