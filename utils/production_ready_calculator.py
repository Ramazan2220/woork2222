"""
üè≠ PRODUCTION-READY –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†
–£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
"""

import math
from typing import Dict, List
from dataclasses import dataclass
from datetime import datetime, timedelta

@dataclass
class LoadPattern:
    """–ü–∞—Ç—Ç–µ—Ä–Ω –Ω–∞–≥—Ä—É–∑–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏"""
    peak_hours: List[int]  # –ß–∞—Å—ã –ø–∏–∫–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    normal_hours: List[int]  # –ß–∞—Å—ã –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    low_hours: List[int]  # –ß–∞—Å—ã –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    peak_multiplier: float  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ø–∏–∫–æ–≤
    normal_multiplier: float  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    low_multiplier: float  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏

@dataclass
class SafetyMargins:
    """–ó–∞–ø–∞—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è production"""
    concurrent_users_multiplier: float = 3.0  # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    memory_safety_margin: float = 1.8  # 80% –∑–∞–ø–∞—Å –ø–∞–º—è—Ç–∏
    cpu_safety_margin: float = 2.0  # 100% –∑–∞–ø–∞—Å CPU
    disk_safety_margin: float = 1.5  # 50% –∑–∞–ø–∞—Å –¥–∏—Å–∫–∞
    network_safety_margin: float = 2.5  # 150% –∑–∞–ø–∞—Å –Ω–∞ —Å–µ—Ç—å
    system_overhead: float = 1.3  # 30% –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã

@dataclass
class AdditionalLoads:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —è –Ω–µ —É—á–∏—Ç—ã–≤–∞–ª"""
    monitoring_cpu_percent: float = 5.0  # 5% CPU –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    logging_disk_gb_per_user: float = 10.0  # 10GB –ª–æ–≥–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ—Å—è—Ü
    backup_disk_multiplier: float = 1.2  # 20% –¥–∏—Å–∫–∞ –Ω–∞ –±—ç–∫–∞–ø—ã
    captcha_solving_ram_gb: float = 2.0  # 2GB RAM –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á
    retry_mechanisms_cpu_multiplier: float = 1.4  # 40% –±–æ–ª—å—à–µ CPU –Ω–∞ retry
    anti_detection_ram_gb: float = 3.0  # 3GB RAM –Ω–∞ –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç

class ProductionReadyCalculator:
    """
    üè≠ PRODUCTION-READY –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã production —Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self):
        # –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (8:00-03:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
        self.load_pattern = LoadPattern(
            peak_hours=[8, 9, 10, 18, 19, 20, 21, 22],  # –£—Ç—Ä–æ –∏ –≤–µ—á–µ—Ä
            normal_hours=[11, 12, 13, 14, 15, 16, 17, 23, 0, 1, 2],  # –î–µ–Ω—å –∏ –ø–æ–∑–¥–Ω–∏–π –≤–µ—á–µ—Ä
            low_hours=[3, 4, 5, 6, 7],  # –ù–æ—á—å
            peak_multiplier=2.5,  # –í –ø–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∞ –≤ 2.5 —Ä–∞–∑–∞ –≤—ã—à–µ
            normal_multiplier=1.0,  # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            low_multiplier=0.3  # –ù–æ—á—å—é –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        )
        
        # –ó–∞–ø–∞—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è production
        self.safety_margins = SafetyMargins()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏
        self.additional_loads = AdditionalLoads()
        
    def calculate_realistic_peak_requirements(self, users: int, accounts_per_user: int = 300) -> Dict:
        """
        –†–∞—Å—á–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º –í–°–ï–• —Ñ–∞–∫—Ç–æ—Ä–æ–≤:
        - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∏–∫–∏ (8:00-03:00)
        - –ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å (–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)
        - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏ (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –ª–æ–≥–∏, –∏ —Ç.–¥.)
        - –ó–∞–ø–∞—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        """
        total_accounts = users * accounts_per_user
        
        # === 1. –£–ß–ò–¢–´–í–ê–ï–ú –ù–ï–ü–†–ï–î–°–ö–ê–ó–£–ï–ú–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===
        # –í —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        worst_case_active_users = users * self.safety_margins.concurrent_users_multiplier
        worst_case_active_accounts = min(
            int(total_accounts * 0.5),  # –ú–∞–∫—Å–∏–º—É–º 50% –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ (—Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç)
            int(worst_case_active_users * accounts_per_user * 0.3)  # 30% –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        )
        
        # === 2. –£–ß–ò–¢–´–í–ê–ï–ú –í–†–ï–ú–ï–ù–ù–´–ï –ü–ò–ö–ò ===
        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–∏–∫–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        peak_active_accounts = int(worst_case_active_accounts * self.load_pattern.peak_multiplier)
        peak_requests_per_hour = peak_active_accounts * 20  # 20 –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –≤ –ø–∏–∫–µ
        
        # === 3. –ë–ê–ó–û–í–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –° –ü–£–õ–ê–ú–ò (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤) ===
        base_requirements = self._calculate_base_with_pools(users, peak_active_accounts)
        
        # === 4. –î–û–ë–ê–í–õ–Ø–ï–ú –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–ì–†–£–ó–ö–ò ===
        enhanced_requirements = self._add_additional_loads(base_requirements, users, total_accounts)
        
        # === 5. –ü–†–ò–ú–ï–ù–Ø–ï–ú –ó–ê–ü–ê–°–´ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===
        production_requirements = self._apply_safety_margins(enhanced_requirements)
        
        # === 6. –î–û–ë–ê–í–õ–Ø–ï–ú –ú–ï–¢–ê–î–ê–ù–ù–´–ï ===
        production_requirements['load_analysis'] = {
            'total_accounts': total_accounts,
            'worst_case_active_accounts': worst_case_active_accounts,
            'peak_active_accounts': peak_active_accounts,
            'peak_requests_per_hour': peak_requests_per_hour,
            'active_hours_per_day': 19,  # 8:00-03:00
            'peak_hours_per_day': len(self.load_pattern.peak_hours),
            'concurrent_users_assumption': f'{self.safety_margins.concurrent_users_multiplier}x worst case'
        }
        
        return production_requirements
    
    def _calculate_base_with_pools(self, users: int, active_accounts: int) -> Dict:
        """–ë–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å –ø—É–ª–∞–º–∏ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤)"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
        client_pool_memory_reduction = 0.65
        sleeping_memory_multiplier = 0.2
        
        return {
            'database_proxy': {
                'ram_gb': 4 + (users * 0.1),
                'cpu_cores': 2 + (users // 50),
                'disk_gb': 20 + (users * 2),
            },
            'content_publishing': {
                'ram_gb': 2 + (active_accounts * 0.004) * (1 - client_pool_memory_reduction),
                'cpu_cores': 1 + (active_accounts // 3000),
                'disk_gb': 50 + (users * 5),
            },
            'scheduled_publishing': {
                'ram_gb': 1 + (active_accounts * 0.001),
                'cpu_cores': 1,
                'disk_gb': 10 + (users * 1),
            },
            'account_warmup': {
                'ram_gb': 2 + (int(active_accounts * 0.2) * 0.003),
                'cpu_cores': 1 + (int(active_accounts * 0.2) // 1000),
                'disk_gb': 10 + (users * 2),
            },
            'account_processing': {
                'ram_gb': 2 + (users * 0.05),
                'cpu_cores': 1 + (users // 100),
                'disk_gb': 20 + (users * 3),
            },
            'profile_design': {
                'ram_gb': 3 + (users * 0.02),
                'cpu_cores': 2 + (users // 200),
                'disk_gb': 30 + (users * 10),
            }
        }
    
    def _add_additional_loads(self, requirements: Dict, users: int, total_accounts: int) -> Dict:
        """–î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —è –∑–∞–±—ã–ª"""
        enhanced = {}
        
        for service_name, service_req in requirements.items():
            enhanced[service_name] = {
                'ram_gb': service_req['ram_gb'],
                'cpu_cores': service_req['cpu_cores'],
                'disk_gb': service_req['disk_gb']
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏
        additional_loads = {
            'monitoring_logging': {
                'ram_gb': 4 + (users * 0.1),  # Prometheus, Grafana, ELK stack
                'cpu_cores': 2 + int(users * self.additional_loads.monitoring_cpu_percent / 100),
                'disk_gb': users * self.additional_loads.logging_disk_gb_per_user,
                'description': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞–ª–µ—Ä—Ç—ã'
            },
            'security_captcha': {
                'ram_gb': self.additional_loads.captcha_solving_ram_gb + self.additional_loads.anti_detection_ram_gb,
                'cpu_cores': 1 + (total_accounts // 5000),  # CPU –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á
                'disk_gb': 20 + (users * 2),  # –ö–∞–ø—á–∏ –∏ –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç –¥–∞–Ω–Ω—ã–µ
                'description': '–†–µ—à–µ–Ω–∏–µ –∫–∞–ø—á, –∞–Ω—Ç–∏-–¥–µ—Ç–µ–∫—Ç, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
            },
            'backup_maintenance': {
                'ram_gb': 2,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è RAM –¥–ª—è backup –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                'cpu_cores': 1,  # CPU –¥–ª—è backup
                'disk_gb': sum(req['disk_gb'] for req in requirements.values()) * (self.additional_loads.backup_disk_multiplier - 1),
                'description': '–ë—ç–∫–∞–ø—ã, –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        enhanced.update(additional_loads)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º CPU –Ω–∞ retry –º–µ—Ö–∞–Ω–∏–∑–º—ã
        for service_name in requirements.keys():
            enhanced[service_name]['cpu_cores'] = math.ceil(
                enhanced[service_name]['cpu_cores'] * self.additional_loads.retry_mechanisms_cpu_multiplier
            )
        
        return enhanced
    
    def _apply_safety_margins(self, requirements: Dict) -> Dict:
        """–ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–ø–∞—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        production_ready = {}
        
        for service_name, service_req in requirements.items():
            production_ready[service_name] = {
                'ram_gb': math.ceil(service_req['ram_gb'] * self.safety_margins.memory_safety_margin),
                'cpu_cores': math.ceil(service_req['cpu_cores'] * self.safety_margins.cpu_safety_margin),
                'disk_gb': math.ceil(service_req['disk_gb'] * self.safety_margins.disk_safety_margin),
            }
            
            if 'description' in service_req:
                production_ready[service_name]['description'] = service_req['description']
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
        for service_name in requirements.keys():
            if service_name in ['database_proxy', 'content_publishing']:  # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
                production_ready[service_name]['ram_gb'] = math.ceil(
                    production_ready[service_name]['ram_gb'] * self.safety_margins.system_overhead
                )
        
        return production_ready
    
    def calculate_production_servers(self, requirements: Dict) -> Dict:
        """–†–∞—Å—á–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è production —Å —É—á–µ—Ç–æ–º –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
        from utils.realistic_microservices_calculator import REAL_SERVERS
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        critical_services = ['database_proxy', 'content_publishing']  # –ù—É–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        standard_services = [k for k in requirements.keys() 
                           if k not in critical_services and 'description' in requirements[k]]
        
        servers_layout = []
        total_cost = 0
        
        # === –ö–†–ò–¢–ò–ß–ù–´–ï –°–ï–†–í–ò–°–´ (—Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º) ===
        for service_name in critical_services:
            if service_name in requirements:
                service_req = requirements[service_name]
                server = self._find_best_server(service_req)
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
                servers_layout.append({
                    'role': f'{service_name}_primary',
                    'server_type': server,
                    'services': [service_name],
                    'redundancy': 'Primary',
                    'monthly_cost': server.monthly_cost
                })
                
                # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä (–¥–ª—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏)
                servers_layout.append({
                    'role': f'{service_name}_backup',
                    'server_type': server,
                    'services': [service_name],
                    'redundancy': 'Backup',
                    'monthly_cost': server.monthly_cost
                })
                
                total_cost += server.monthly_cost * 2  # –û—Å–Ω–æ–≤–Ω–æ–π + —Ä–µ–∑–µ—Ä–≤–Ω—ã–π
        
        # === –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –°–ï–†–í–ò–°–´ (–º–æ–∂–Ω–æ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å) ===
        remaining_services = []
        for service_name in standard_services:
            if service_name in requirements:
                remaining_services.append((service_name, requirements[service_name]))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (—Å–Ω–∞—á–∞–ª–∞ –±–æ–ª—å—à–∏–µ)
        remaining_services.sort(key=lambda x: x[1]['ram_gb'] * x[1]['cpu_cores'], reverse=True)
        
        for service_name, service_req in remaining_services:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
            placed = False
            for server_config in servers_layout:
                if (server_config['redundancy'] != 'Backup' and 
                    self._can_fit_service_on_server(server_config, service_req)):
                    server_config['services'].append(service_name)
                    placed = True
                    break
            
            if not placed:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
                server = self._find_best_server(service_req)
                servers_layout.append({
                    'role': f'{service_name}_dedicated',
                    'server_type': server,
                    'services': [service_name],
                    'redundancy': 'Single',
                    'monthly_cost': server.monthly_cost
                })
                total_cost += server.monthly_cost
        
        return {
            'servers': servers_layout,
            'total_servers': len(servers_layout),
            'total_cost': total_cost,
            'redundancy_info': {
                'critical_services_duplicated': len(critical_services) * 2,
                'standard_services': len(standard_services),
                'estimated_uptime': '99.9%+'
            }
        }
    
    def _find_best_server(self, service_req: Dict):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞"""
        from utils.realistic_microservices_calculator import REAL_SERVERS
        
        required_ram = service_req['ram_gb'] * 1.1  # 10% –∑–∞–ø–∞—Å
        required_cpu = service_req['cpu_cores']
        required_disk = service_req['disk_gb'] * 1.1
        
        for server in REAL_SERVERS.values():
            if (server.ram_gb >= required_ram and 
                server.cpu_cores >= required_cpu and 
                server.disk_gb >= required_disk):
                return server
        
        return REAL_SERVERS['xxlarge']  # –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
    
    def _can_fit_service_on_server(self, server_config: Dict, service_req: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–±–æ–ª—å—à–∏–µ
        return len(server_config['services']) < 2  # –ú–∞–∫—Å–∏–º—É–º 2 —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    
    def calculate_full_production_cost(self, users: int, accounts_per_user: int = 300) -> Dict:
        """–ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç production —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        requirements = self.calculate_realistic_peak_requirements(users, accounts_per_user)
        load_analysis = requirements.pop('load_analysis')
        
        server_layout = self.calculate_production_servers(requirements)
        
        cost_per_user = server_layout['total_cost'] / users
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏
        from utils.realistic_microservices_calculator import calculate_realistic_microservices
        optimistic_result = calculate_realistic_microservices(users, accounts_per_user)
        
        return {
            'production_ready': {
                'requirements': requirements,
                'server_layout': server_layout,
                'total_cost': server_layout['total_cost'],
                'cost_per_user': round(cost_per_user, 2),
                'load_analysis': load_analysis
            },
            'optimistic_microservices': {
                'cost_per_user': optimistic_result['microservices']['cost_per_user']
            },
            'reality_check': {
                'cost_increase_ratio': round(cost_per_user / optimistic_result['microservices']['cost_per_user'], 2),
                'additional_cost': round(cost_per_user - optimistic_result['microservices']['cost_per_user'], 2),
                'factors_included': [
                    '–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∏–∫–∏ (8:00-03:00)',
                    '–ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (3x)',
                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏ (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –∫–∞–ø—á–∏, –±—ç–∫–∞–ø—ã)',
                    '–ó–∞–ø–∞—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (80% –ø–∞–º—è—Ç—å, 100% CPU)',
                    '–û—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤)',
                    '–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã'
                ]
            }
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
production_calculator = ProductionReadyCalculator()

def calculate_production_ready_cost(users: int = 100, accounts_per_user: int = 300) -> Dict:
    """–†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π production —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    return production_calculator.calculate_full_production_cost(users, accounts_per_user) 