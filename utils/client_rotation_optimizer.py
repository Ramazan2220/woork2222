"""
üîÑ –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† –†–û–¢–ê–¶–ò–ò –ö–õ–ò–ï–ù–¢–û–í
–°–Ω–∏–∂–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ RAM –Ω–∞ 60% —á–µ—Ä–µ–∑ —Ä–æ—Ç–∞—Ü–∏—é Instagram –∫–ª–∏–µ–Ω—Ç–æ–≤
"""

import time
import threading
import logging
from typing import Dict, List, Optional
from dataclasses import dataclass, field
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

@dataclass
class ClientMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id: str
    created_at: float = field(default_factory=time.time)
    last_activity: float = field(default_factory=time.time)
    requests_count: int = 0
    memory_usage_mb: float = 4.0  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    is_active: bool = True

class ClientRotationOptimizer:
    """
    üîÑ –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† –†–û–¢–ê–¶–ò–ò –ö–õ–ò–ï–ù–¢–û–í
    
    –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
    1. –ú–∞–∫—Å–∏–º—É–º 50 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
    3. –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    4. –ú–µ—Ç—Ä–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    
    def __init__(self, 
                 max_active_clients: int = 50,
                 inactive_timeout_minutes: int = 30,
                 cleanup_interval_minutes: int = 5):
        
        self.max_active_clients = max_active_clients
        self.inactive_timeout = inactive_timeout_minutes * 60  # –í —Å–µ–∫—É–Ω–¥–∞—Ö
        self.cleanup_interval = cleanup_interval_minutes * 60
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.client_metrics: Dict[str, ClientMetrics] = {}
        self.clients_queue: List[str] = []  # LRU –æ—á–µ—Ä–µ–¥—å
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self._lock = threading.RLock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_clients_created': 0,
            'clients_rotated_out': 0,
            'memory_saved_mb': 0.0,
            'last_cleanup': time.time()
        }
        
        # –§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
        self._cleanup_thread = None
        self._shutdown = False
        self._start_cleanup_thread()
    
    def register_client_access(self, client_id: str) -> bool:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∏–µ–Ω—Ç—É
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        """
        with self._lock:
            current_time = time.time()
            
            # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if client_id in self.client_metrics:
                metrics = self.client_metrics[client_id]
                metrics.last_activity = current_time
                metrics.requests_count += 1
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏ (–Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π)
                if client_id in self.clients_queue:
                    self.clients_queue.remove(client_id)
                self.clients_queue.append(client_id)
                
                logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–ª–∏–µ–Ω—Ç—É {client_id}")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            if len(self.client_metrics) >= self.max_active_clients:
                # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
                if not self._remove_oldest_inactive():
                    logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ ({self.max_active_clients})")
                    return False
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            metrics = ClientMetrics(client_id=client_id)
            self.client_metrics[client_id] = metrics
            self.clients_queue.append(client_id)
            self.stats['total_clients_created'] += 1
            
            logger.info(f"‚ûï –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç {client_id}")
            return True
    
    def should_rotate_client(self, client_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ —Ä–æ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç"""
        with self._lock:
            if client_id not in self.client_metrics:
                return False
            
            metrics = self.client_metrics[client_id]
            current_time = time.time()
            
            # –†–æ—Ç–∏—Ä—É–µ–º –µ—Å–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª—å—à–µ —Ç–∞–π–º–∞—É—Ç–∞
            if current_time - metrics.last_activity > self.inactive_timeout:
                return True
            
            return False
    
    def rotate_client(self, client_id: str) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–æ—Ç–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç"""
        with self._lock:
            if client_id not in self.client_metrics:
                return False
            
            metrics = self.client_metrics[client_id]
            self.client_metrics.pop(client_id)
            
            if client_id in self.clients_queue:
                self.clients_queue.remove(client_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['clients_rotated_out'] += 1
            self.stats['memory_saved_mb'] += metrics.memory_usage_mb
            
            logger.info(f"üîÑ –†–æ—Ç–∏—Ä–æ–≤–∞–Ω –∫–ª–∏–µ–Ω—Ç {client_id}, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {metrics.memory_usage_mb}MB")
            return True
    
    def _remove_oldest_inactive(self) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç"""
        current_time = time.time()
        
        # –ò—â–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        oldest_client_id = None
        oldest_activity = current_time
        
        for client_id, metrics in self.client_metrics.items():
            if (current_time - metrics.last_activity > 300 and  # 5 –º–∏–Ω—É—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                metrics.last_activity < oldest_activity):
                oldest_activity = metrics.last_activity
                oldest_client_id = client_id
        
        if oldest_client_id:
            self.rotate_client(oldest_client_id)
            return True
        
        return False
    
    def _start_cleanup_thread(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏"""
        if self._cleanup_thread is not None:
            return
        
        def cleanup_worker():
            while not self._shutdown:
                try:
                    self._cleanup_inactive_clients()
                    time.sleep(self.cleanup_interval)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ cleanup –ø–æ—Ç–æ–∫–µ: {e}")
        
        self._cleanup_thread = threading.Thread(target=cleanup_worker, daemon=True)
        self._cleanup_thread.start()
        logger.info("üßπ –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    def _cleanup_inactive_clients(self):
        """–û—á–∏—â–∞–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã"""
        with self._lock:
            current_time = time.time()
            clients_to_remove = []
            
            for client_id, metrics in self.client_metrics.items():
                if current_time - metrics.last_activity > self.inactive_timeout:
                    clients_to_remove.append(client_id)
            
            cleaned_count = 0
            memory_freed = 0.0
            
            for client_id in clients_to_remove:
                if self.rotate_client(client_id):
                    cleaned_count += 1
                    memory_freed += 4.0  # –ü—Ä–∏–º–µ—Ä–Ω–æ 4MB –Ω–∞ –∫–ª–∏–µ–Ω—Ç
            
            if cleaned_count > 0:
                logger.info(f"üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ {cleaned_count} –∫–ª–∏–µ–Ω—Ç–æ–≤, "
                           f"–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {memory_freed:.1f}MB")
            
            self.stats['last_cleanup'] = current_time
    
    def get_optimization_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        with self._lock:
            current_active = len(self.client_metrics)
            total_memory_usage = current_active * 4.0  # MB
            
            return {
                'active_clients': current_active,
                'max_clients_limit': self.max_active_clients,
                'total_created': self.stats['total_clients_created'],
                'total_rotated': self.stats['clients_rotated_out'],
                'memory_usage_mb': total_memory_usage,
                'memory_saved_mb': self.stats['memory_saved_mb'],
                'memory_efficiency': (self.stats['memory_saved_mb'] / 
                                    max(1, self.stats['memory_saved_mb'] + total_memory_usage)) * 100,
                'last_cleanup': datetime.fromtimestamp(self.stats['last_cleanup']).isoformat()
            }
    
    def get_client_info(self, client_id: str) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ"""
        with self._lock:
            if client_id not in self.client_metrics:
                return None
            
            metrics = self.client_metrics[client_id]
            current_time = time.time()
            
            return {
                'client_id': client_id,
                'created_at': datetime.fromtimestamp(metrics.created_at).isoformat(),
                'last_activity': datetime.fromtimestamp(metrics.last_activity).isoformat(),
                'inactive_seconds': current_time - metrics.last_activity,
                'requests_count': metrics.requests_count,
                'memory_usage_mb': metrics.memory_usage_mb,
                'should_rotate': self.should_rotate_client(client_id)
            }
    
    def force_cleanup(self) -> Dict:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        logger.info("üßπ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏...")
        
        before_count = len(self.client_metrics)
        before_memory = before_count * 4.0
        
        self._cleanup_inactive_clients()
        
        after_count = len(self.client_metrics)
        after_memory = after_count * 4.0
        
        cleaned = before_count - after_count
        memory_freed = before_memory - after_memory
        
        result = {
            'clients_before': before_count,
            'clients_after': after_count,
            'clients_cleaned': cleaned,
            'memory_freed_mb': memory_freed,
            'efficiency_gain': (memory_freed / max(1, before_memory)) * 100
        }
        
        logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                   f"—É–¥–∞–ª–µ–Ω–æ {cleaned} –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {memory_freed:.1f}MB")
        
        return result
    
    def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ —Ä–æ—Ç–∞—Ü–∏–∏...")
        self._shutdown = True
        
        if self._cleanup_thread:
            self._cleanup_thread.join(timeout=5)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
_rotation_optimizer = None

def get_rotation_optimizer() -> ClientRotationOptimizer:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
    global _rotation_optimizer
    if _rotation_optimizer is None:
        _rotation_optimizer = ClientRotationOptimizer()
    return _rotation_optimizer

def init_rotation_optimizer(max_active_clients: int = 50,
                           inactive_timeout_minutes: int = 30) -> ClientRotationOptimizer:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ —Ä–æ—Ç–∞—Ü–∏–∏"""
    global _rotation_optimizer
    _rotation_optimizer = ClientRotationOptimizer(
        max_active_clients=max_active_clients,
        inactive_timeout_minutes=inactive_timeout_minutes
    )
    logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ä–æ—Ç–∞—Ü–∏–∏: "
               f"max_clients={max_active_clients}, timeout={inactive_timeout_minutes}–º–∏–Ω")
    return _rotation_optimizer 