#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import logging
import threading
import queue
import time
import json
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
warmup_executor = None
warmup_queue_running = False
active_tasks = {}
task_lock = threading.Lock()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_MAX_WORKERS = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
MAX_CONCURRENT_ACCOUNTS = 5  # –ú–∞–∫—Å–∏–º—É–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ


class AsyncWarmupQueue:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self, max_workers: int = DEFAULT_MAX_WORKERS):
        self.max_workers = max_workers
        self.executor = ThreadPoolExecutor(max_workers=max_workers)
        self.task_queue = queue.Queue()
        self.running = False
        self.active_accounts = set()
        self.queued_tasks = set()  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏
        self.lock = threading.Lock()
        
    def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å"""
        self.running = True
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ —Å {self.max_workers} –ø–æ—Ç–æ–∫–∞–º–∏")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
        threading.Thread(target=self._process_queue, daemon=True).start()
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞...")
        self.running = False
        self.executor.shutdown(wait=True)
        
    def add_task(self, task):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å"""
        with self.lock:
            if task.id not in self.queued_tasks:
                self.task_queue.put(task)
                self.queued_tasks.add(task.id)
                logger.info(f"‚ûï –ó–∞–¥–∞—á–∞ #{task.id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
            
    def _process_queue(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""
        futures = {}
        
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                completed_futures = []
                for future in list(futures.keys()):
                    if future.done():
                        completed_futures.append(future)
                        
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                for future in completed_futures:
                    task = futures.pop(future)
                    try:
                        result = future.result()
                        logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                        with self.lock:
                            self.active_accounts.discard(task.account_id)
                            self.queued_tasks.discard(task.id)  # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ #{task.id}: {e}")
                        with self.lock:
                            self.active_accounts.discard(task.account_id)
                            self.queued_tasks.discard(task.id)  # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
                while len(futures) < self.max_workers and not self.task_queue.empty():
                    try:
                        task = self.task_queue.get_nowait()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç
                        with self.lock:
                            if task.account_id in self.active_accounts:
                                logger.info(f"‚è≥ –ê–∫–∫–∞—É–Ω—Ç {task.account_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º")
                                self.task_queue.put(task)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                                continue
                                
                            self.active_accounts.add(task.account_id)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        future = self.executor.submit(self._process_task, task)
                        futures[future] = task
                        logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ #{task.id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {task.account_id}")
                        
                    except queue.Empty:
                        break
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                time.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
                time.sleep(5)
                
    def _process_task(self, task):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –ø—Ä–æ–≥—Ä–µ–≤–∞"""
        try:
            from database.db_manager import get_session
            from database.models import WarmupStatus, WarmupTask
            from instagram.client import InstagramClient
            from utils.warmup_manager import WarmupManager
            
            session = get_session()
            
            try:
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                task = session.query(WarmupTask).filter_by(id=task.id).first()
                if not task:
                    logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ #{task.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ #{task.id} –Ω–∞ RUNNING")
                task.status = WarmupStatus.RUNNING
                task.started_at = datetime.now()
                session.commit()
                logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ #{task.id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {task.status.value}")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                settings = json.loads(task.settings)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Instagram
                client = InstagramClient(task.account_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥
                if not client.check_login():
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç {task.account_id}")
                
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç {task.account_id} –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞")
                
                # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≥—Ä–µ–≤–∞
                warmup_manager = WarmupManager(
                    account_id=task.account_id,
                    client=client,
                    warmup_speed=settings.get('warmup_speed', 'NORMAL')
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                warmup_manager.set_task_id(task.id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É
                warmup_manager.current_phase = settings.get('current_phase', 'phase1')
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞
                logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {task.account_id}")
                result = warmup_manager.perform_human_warmup_session(settings)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = task.progress or {}
                progress['sessions_count'] = progress.get('sessions_count', 0) + 1
                progress['current_phase'] = warmup_manager.current_phase
                progress['last_session'] = datetime.now().isoformat()
                progress['last_session_results'] = result
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                for action, count in result['actions_performed'].items():
                    if action not in progress.get('total_actions', {}):
                        if 'total_actions' not in progress:
                            progress['total_actions'] = {}
                        progress['total_actions'][action] = 0
                    progress['total_actions'][action] += count
                
                task.progress = progress
                session.commit()
                
                logger.info(f"üìä –ê–∫–∫–∞—É–Ω—Ç {task.account_id} - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–π: {result['actions_performed']}")
                
            finally:
                session.close()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ #{task.id}: {e}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ FAILED
            try:
                session = get_session()
                task.status = WarmupStatus.FAILED
                task.error = str(e)
                task.completed_at = datetime.now()
                session.commit()
                session.close()
            except:
                pass
            raise


def start_async_warmup_queue(max_workers: int = DEFAULT_MAX_WORKERS):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    global warmup_executor, warmup_queue_running
    
    if warmup_queue_running:
        logger.info("üîÑ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–≥—Ä–µ–≤–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
        return
    
    warmup_executor = AsyncWarmupQueue(max_workers=max_workers)
    warmup_executor.start()
    warmup_queue_running = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ –ë–î
    threading.Thread(target=_load_tasks_from_db, daemon=True).start()
    

def stop_async_warmup_queue():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å"""
    global warmup_executor, warmup_queue_running
    
    if warmup_executor:
        warmup_executor.stop()
        warmup_executor = None
    
    warmup_queue_running = False
    

def _load_tasks_from_db():
    """–ó–∞–≥—Ä—É–∂–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î –≤ –æ—á–µ—Ä–µ–¥—å"""
    from database.db_manager import get_session
    from database.models import WarmupTask, WarmupStatus
    
    while warmup_queue_running:
        try:
            session = get_session()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
            tasks = session.query(WarmupTask).filter(
                WarmupTask.status.in_([WarmupStatus.PENDING, WarmupStatus.RUNNING])
            ).all()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            for task in tasks:
                if warmup_executor and task.account_id not in warmup_executor.active_accounts:
                    warmup_executor.add_task(task)
            
            session.close()
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            time.sleep(10)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á: {e}")
            time.sleep(30)


def set_max_workers(max_workers: int):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤"""
    global warmup_executor
    
    if warmup_executor:
        logger.info(f"üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤ —Å {warmup_executor.max_workers} –Ω–∞ {max_workers}")
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Ç–æ–∫–æ–≤
        stop_async_warmup_queue()
        time.sleep(2)
        start_async_warmup_queue(max_workers=max_workers)
    else:
        logger.info(f"üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {max_workers}")
