"""
üèóÔ∏è –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ú–ò–ö–†–û–°–ï–†–í–ò–°–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´
–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
"""

import math
from typing import Dict, List
from dataclasses import dataclass
from datetime import datetime, timedelta

@dataclass
class ServerConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    name: str
    description: str
    ram_gb: int
    cpu_cores: int
    disk_gb: int
    traffic_tb: float
    monthly_cost: float
    peak_load_multiplier: float = 1.0  # –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–∏–∫–æ–≤—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫

@dataclass
class UserActivity:
    """–ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    accounts_upload_per_month: int = 1
    profile_redesign_per_month: int = 2
    quick_warmup_per_week: int = 20
    advanced_warmup_per_week: int = 7
    publications_per_account_per_day: int = 5

class MicroservicesCalculator:
    """
    üèóÔ∏è –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ú–ò–ö–†–û–°–ï–†–í–ò–°–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´
    –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º
    """
    
    def __init__(self):
        # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –∑–∞ —Ä–µ—Å—É—Ä—Å—ã
        self.ram_price_per_gb = 2.5    # $2.5/GB RAM (–¥–µ—à–µ–≤–ª–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤)
        self.cpu_price_per_core = 6.0  # $6/—è–¥—Ä–æ CPU
        self.disk_price_per_gb = 0.12  # $0.12/GB SSD  
        self.traffic_price_per_tb = 4.0 # $4/TB —Ç—Ä–∞—Ñ–∏–∫–∞
        self.base_cost_per_server = 15  # $15 –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.activity_patterns = UserActivity()
        
    def calculate_server_loads(self, users: int, accounts_per_user: int = 300) -> Dict:
        """–†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä"""
        total_accounts = users * accounts_per_user
        
        # === –°–ï–†–í–ï–† 1: –ë–ê–ó–ê –î–ê–ù–ù–´–• –ò –ü–†–û–ö–°–ò ===
        db_load = self._calculate_database_server(users, total_accounts)
        
        # === –°–ï–†–í–ï–† 2: –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –ö–û–ù–¢–ï–ù–¢–ê ===
        publishing_load = self._calculate_publishing_server(users, total_accounts)
        
        # === –°–ï–†–í–ï–† 3: –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –ü–£–ë–õ–ò–ö–ê–¶–ò–ò ===
        scheduled_load = self._calculate_scheduled_server(users, total_accounts)
        
        # === –°–ï–†–í–ï–† 4: –ü–†–û–ì–†–ï–í ===
        warmup_load = self._calculate_warmup_server(users, total_accounts)
        
        # === –°–ï–†–í–ï–† 5: –û–ë–†–ê–ë–û–¢–ö–ê –ê–ö–ö–ê–£–ù–¢–û–í (IMAP) ===
        account_processing_load = self._calculate_account_processing_server(users, total_accounts)
        
        # === –°–ï–†–í–ï–† 6: –û–§–û–†–ú–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–û–í ===
        profile_design_load = self._calculate_profile_design_server(users, total_accounts)
        
        return {
            'database_proxy': db_load,
            'publishing': publishing_load,
            'scheduled': scheduled_load,
            'warmup': warmup_load,
            'account_processing': account_processing_load,
            'profile_design': profile_design_load,
            'summary': {
                'users': users,
                'total_accounts': total_accounts,
                'total_servers': 6
            }
        }
    
    def _calculate_database_server(self, users: int, total_accounts: int) -> Dict:
        """üóÑÔ∏è –°–µ—Ä–≤–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–∫—Å–∏"""
        # –ù–∞–≥—Ä—É–∑–∫–∞: –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –ë–î
        daily_requests = total_accounts * 5 * 5  # 5 –ø—É–±–ª–∏–∫–∞—Ü–∏–π √ó 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        concurrent_connections = min(200, users * 5)  # 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –ü—Ä–æ–∫—Å–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–æ–∫—Å–∏
        proxy_management_load = total_accounts * 0.1  # –†–æ—Ç–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        # –†–µ—Å—É—Ä—Å—ã
        ram_needed = 4 + (concurrent_connections * 0.02) + (total_accounts * 0.001)  # –ë–∞–∑–æ–≤–∞—è + —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è + –¥–∞–Ω–Ω—ã–µ
        cpu_needed = 2 + (daily_requests / 100000)  # 2 –±–∞–∑–æ–≤—ã—Ö + –Ω–∞–≥—Ä—É–∑–∫–∞ –æ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        disk_needed = 50 + (total_accounts * 0.5)  # –ë–∞–∑–æ–≤–∞—è –ë–î + –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        traffic_needed = (daily_requests * 2) / (1024**3) * 30  # 2KB –Ω–∞ –∑–∞–ø—Ä–æ—Å √ó –º–µ—Å—è—Ü
        
        return {
            'name': 'Database & Proxy Server',
            'description': '–û—Å–Ω–æ–≤–Ω–∞—è –ë–î, –ø—Ä–æ–∫—Å–∏-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'workload': {
                'daily_requests': int(daily_requests),
                'concurrent_connections': concurrent_connections,
                'proxy_accounts': total_accounts
            },
            'resources': {
                'ram_gb': math.ceil(ram_needed),
                'cpu_cores': math.ceil(cpu_needed),
                'disk_gb': math.ceil(disk_needed),
                'traffic_tb': round(traffic_needed, 3)
            },
            'peak_multiplier': 1.3  # –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø–∏–∫–æ–≤—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
        }
    
    def _calculate_publishing_server(self, users: int, total_accounts: int) -> Dict:
        """üì§ –°–µ—Ä–≤–µ—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 5 –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –≤ –¥–µ–Ω—å
        daily_publications = total_accounts * self.activity_patterns.publications_per_account_per_day
        peak_publications_per_hour = daily_publications / 16  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞ 16 –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∏–¥–µ–æ)
        media_processing_load = daily_publications * 0.3  # 30% —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        # –†–µ—Å—É—Ä—Å—ã
        ram_needed = 3 + (peak_publications_per_hour * 0.01)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –ø–∞–º—è—Ç–∏
        cpu_needed = 1.5 + (media_processing_load / 1000)  # CPU –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞
        disk_needed = 100 + (users * 50)  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞
        traffic_needed = (daily_publications * 5) / (1024**3) * 30  # 5MB –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        
        return {
            'name': 'Content Publishing Server',
            'description': '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤, –∏—Å—Ç–æ—Ä–∏–π, reels –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
            'workload': {
                'daily_publications': int(daily_publications),
                'peak_hour_publications': int(peak_publications_per_hour),
                'media_processing_jobs': int(media_processing_load)
            },
            'resources': {
                'ram_gb': math.ceil(ram_needed),
                'cpu_cores': math.ceil(cpu_needed),
                'disk_gb': math.ceil(disk_needed),
                'traffic_tb': round(traffic_needed, 3)
            },
            'peak_multiplier': 1.8  # –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø–∏–∫–∏ –ø—Ä–∏ –º–∞—Å—Å–æ–≤—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö
        }
    
    def _calculate_scheduled_server(self, users: int, total_accounts: int) -> Dict:
        """‚è∞ –°–µ—Ä–≤–µ—Ä –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –Ω–æ –ª–µ–≥—á–µ —á–µ–º –ø—Ä—è–º—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        daily_scheduled_checks = total_accounts * 24  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
        estimated_scheduled_posts = total_accounts * 2  # 2 –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –≤ –¥–µ–Ω—å
        
        # –†–µ—Å—É—Ä—Å—ã
        ram_needed = 2 + (total_accounts * 0.002)  # –õ–µ–≥–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        cpu_needed = 1 + (estimated_scheduled_posts / 5000)  # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –æ—á–µ–Ω—å –Ω–∞–≥—Ä—É–∂–∞–µ—Ç CPU
        disk_needed = 30 + (estimated_scheduled_posts * 0.1)  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
        traffic_needed = (estimated_scheduled_posts * 3) / (1024**3) * 30  # –ú–µ–Ω—å—à–µ —Ç—Ä–∞—Ñ–∏–∫–∞
        
        return {
            'name': 'Scheduled Publishing Server',
            'description': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π, –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã',
            'workload': {
                'daily_schedule_checks': int(daily_scheduled_checks),
                'scheduled_publications': int(estimated_scheduled_posts)
            },
            'resources': {
                'ram_gb': math.ceil(ram_needed),
                'cpu_cores': math.ceil(cpu_needed),
                'disk_gb': math.ceil(disk_needed),
                'traffic_tb': round(traffic_needed, 3)
            },
            'peak_multiplier': 1.5  # –ù–µ–±–æ–ª—å—à–∏–µ –ø–∏–∫–∏
        }
    
    def _calculate_warmup_server(self, users: int, total_accounts: int) -> Dict:
        """üî• –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ–≤–∞
        weekly_quick_warmups = users * self.activity_patterns.quick_warmup_per_week
        weekly_advanced_warmups = users * self.activity_patterns.advanced_warmup_per_week
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –ø—Ä–æ–≥—Ä–µ–≤ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç 30% –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        active_warmup_accounts = int(total_accounts * 0.3)
        warmup_requests_per_hour = active_warmup_accounts * 15  # 15 –∑–∞–ø—Ä–æ—Å–æ–≤/—á–∞—Å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ
        
        # –†–µ—Å—É—Ä—Å—ã
        ram_needed = 2 + (active_warmup_accounts * 0.003)  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
        cpu_needed = 1 + (warmup_requests_per_hour / 2000)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞
        disk_needed = 40 + (users * 10)  # –õ–æ–≥–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        traffic_needed = (warmup_requests_per_hour * 24 * 2) / (1024**3) * 30  # 2KB –Ω–∞ –∑–∞–ø—Ä–æ—Å
        
        return {
            'name': 'Account Warmup Server',
            'description': '–ë—ã—Å—Ç—Ä—ã–π –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ–≥—Ä–µ–≤, –ø—Ä–æ–≥—Ä–µ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º',
            'workload': {
                'weekly_quick_warmups': weekly_quick_warmups,
                'weekly_advanced_warmups': weekly_advanced_warmups,
                'active_warmup_accounts': active_warmup_accounts,
                'warmup_requests_per_hour': warmup_requests_per_hour
            },
            'resources': {
                'ram_gb': math.ceil(ram_needed),
                'cpu_cores': math.ceil(cpu_needed),
                'disk_gb': math.ceil(disk_needed),
                'traffic_tb': round(traffic_needed, 3)
            },
            'peak_multiplier': 1.6  # –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–µ–≤–∞
        }
    
    def _calculate_account_processing_server(self, users: int, total_accounts: int) -> Dict:
        """üìß –°–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (IMAP, –≤—Ö–æ–¥)"""
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü
        monthly_account_uploads = users * self.activity_patterns.accounts_upload_per_month
        accounts_per_upload = total_accounts / monthly_account_uploads  # –í —Å—Ä–µ–¥–Ω–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É
        
        # IMAP –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
        daily_imap_checks = total_accounts * 2  # 2 –ø—Ä–æ–≤–µ—Ä–∫–∏ IMAP –≤ –¥–µ–Ω—å –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        email_processing_load = total_accounts * 0.1  # 10% –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ email
        
        # –†–µ—Å—É—Ä—Å—ã
        ram_needed = 3 + (email_processing_load * 0.005)  # IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
        cpu_needed = 2 + (daily_imap_checks / 10000)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ email –∑–∞–Ω–∏–º–∞–µ—Ç CPU
        disk_needed = 60 + (total_accounts * 0.1)  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        traffic_needed = (daily_imap_checks * 1) / (1024**3) * 30  # 1KB –Ω–∞ IMAP –ø—Ä–æ–≤–µ—Ä–∫—É
        
        return {
            'name': 'Account Processing Server',
            'description': 'IMAP –æ–±—Ä–∞–±–æ—Ç–∫–∞, –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç—ã, –∑–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤',
            'workload': {
                'monthly_uploads': monthly_account_uploads,
                'daily_imap_checks': int(daily_imap_checks),
                'email_processing_accounts': int(email_processing_load)
            },
            'resources': {
                'ram_gb': math.ceil(ram_needed),
                'cpu_cores': math.ceil(cpu_needed),
                'disk_gb': math.ceil(disk_needed),
                'traffic_tb': round(traffic_needed, 3)
            },
            'peak_multiplier': 2.0  # –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø–∏–∫–∏ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        }
    
    def _calculate_profile_design_server(self, users: int, total_accounts: int) -> Dict:
        """üé® –°–µ—Ä–≤–µ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ 2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü
        monthly_profile_updates = users * self.activity_patterns.profile_redesign_per_month
        accounts_per_redesign = total_accounts  # –û–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        # –ù–µ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞ –º–µ—Å—è—Ü
        daily_profile_jobs = (monthly_profile_updates * accounts_per_redesign) / 30
        
        # –†–µ—Å—É—Ä—Å—ã (–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã)
        ram_needed = 4 + (daily_profile_jobs / 10000)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –ø–∞–º—è—Ç–∏
        cpu_needed = 2 + (daily_profile_jobs / 5000)   # CPU –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        disk_needed = 80 + (users * 30)  # –®–∞–±–ª–æ–Ω—ã, –º–µ–¥–∏–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
        traffic_needed = (daily_profile_jobs * 30 * 0.5) / (1024**3)  # 0.5MB –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        
        return {
            'name': 'Profile Design Server',
            'description': '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤, –±–∏–æ',
            'workload': {
                'monthly_profile_updates': monthly_profile_updates,
                'daily_profile_jobs': int(daily_profile_jobs)
            },
            'resources': {
                'ram_gb': math.ceil(ram_needed),
                'cpu_cores': math.ceil(cpu_needed),
                'disk_gb': math.ceil(disk_needed),
                'traffic_tb': round(traffic_needed, 3)
            },
            'peak_multiplier': 1.8  # –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø–∏–∫–∏ –ø—Ä–∏ —Ä–µ–¥–∏–∑–∞–π–Ω–µ
        }
    
    def calculate_server_costs(self, server_loads: Dict) -> Dict:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        servers_cost = {}
        total_cost = 0
        
        for server_key, server_data in server_loads.items():
            if server_key == 'summary':
                continue
                
            resources = server_data['resources']
            peak_mult = server_data['peak_multiplier']
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∏–∫–æ–≤—ã–π –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –∫ —Ä–µ—Å—É—Ä—Å–∞–º
            peak_ram = math.ceil(resources['ram_gb'] * peak_mult)
            peak_cpu = math.ceil(resources['cpu_cores'] * peak_mult)
            peak_disk = math.ceil(resources['disk_gb'] * 1.2)  # –î–∏—Å–∫ –º–µ–Ω—å—à–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–∏–∫–æ–≤
            peak_traffic = resources['traffic_tb'] * 1.5  # –¢—Ä–∞—Ñ–∏–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–∏–∫–∞—Ö
            
            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            cost = (self.base_cost_per_server +
                   peak_ram * self.ram_price_per_gb +
                   peak_cpu * self.cpu_price_per_core +
                   peak_disk * self.disk_price_per_gb +
                   peak_traffic * self.traffic_price_per_tb)
            
            servers_cost[server_key] = {
                'name': server_data['name'],
                'description': server_data['description'],
                'workload': server_data['workload'],
                'base_resources': resources,
                'peak_resources': {
                    'ram_gb': peak_ram,
                    'cpu_cores': peak_cpu,
                    'disk_gb': peak_disk,
                    'traffic_tb': round(peak_traffic, 3)
                },
                'monthly_cost': round(cost, 2),
                'peak_multiplier': peak_mult
            }
            
            total_cost += cost
        
        servers_cost['total_infrastructure'] = {
            'total_monthly_cost': round(total_cost, 2),
            'servers_count': len([k for k in server_loads.keys() if k != 'summary']),
            'users': server_loads['summary']['users'],
            'cost_per_user': round(total_cost / server_loads['summary']['users'], 2)
        }
        
        return servers_cost
    
    def calculate_microservices_efficiency(self, users: int, accounts_per_user: int = 300) -> Dict:
        """–ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
        server_loads = self.calculate_server_loads(users, accounts_per_user)
        server_costs = self.calculate_server_costs(server_loads)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–æ–Ω–æ–ª–∏—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
        from utils.cost_calculator import cost_calculator
        monolith_cost = cost_calculator.calculate_cost_per_user(users, accounts_per_user)
        
        microservices_cost_per_user = server_costs['total_infrastructure']['cost_per_user']
        monolith_cost_per_user = monolith_cost['server_options']['optimal']['cost_per_user']
        
        return {
            'microservices': {
                'servers': server_costs,
                'cost_per_user': microservices_cost_per_user
            },
            'monolith': {
                'cost_per_user': monolith_cost_per_user
            },
            'comparison': {
                'microservices_vs_monolith_ratio': round(microservices_cost_per_user / monolith_cost_per_user, 2),
                'cost_difference': round(microservices_cost_per_user - monolith_cost_per_user, 2),
                'is_microservices_cheaper': microservices_cost_per_user < monolith_cost_per_user,
                'scalability_advantage': '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã –ª—É—á—à–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É—é—Ç—Å—è –∏ –±–æ–ª–µ–µ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã',
                'maintenance_complexity': '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã —Ç—Ä–µ–±—É—é—Ç –±–æ–ª—å—à–µ DevOps –Ω–∞–≤—ã–∫–æ–≤'
            }
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
microservices_calculator = MicroservicesCalculator()

def calculate_microservices_cost(users: int = 100, accounts_per_user: int = 300) -> Dict:
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    return microservices_calculator.calculate_microservices_efficiency(users, accounts_per_user) 