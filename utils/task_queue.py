import threading
import logging
import queue
import time
from datetime import datetime
import concurrent.futures
import traceback
import random
import json
import os
from typing import List

from database.db_manager import update_publish_task_status, get_publish_task, update_task_status
from database.models import TaskStatus, TaskType
from instagram.post_manager import PostManager
from instagram.reels_manager import ReelsManager
from instagram.story_manager import StoryManager
from instagram.client_patch import add_account_to_cache
from utils.content_uniquifier import uniquify_for_publication
from utils.system_monitor import get_adaptive_limits  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∫—Ä—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
task_queue = queue.Queue()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
task_results = {}

# –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
# –¢–µ–ø–µ—Ä—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫—É
MAX_WORKERS = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ)
executor = concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–¥–∞—á
active_task_batches = {}

def get_task_adaptive_limits():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä—É—Ç–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –Ω–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∫—Ä—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        limits = get_adaptive_limits()
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –ø–æ–¥ —Ç–µ–∫—É—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É
        adaptive_workers = min(limits.max_workers, MAX_WORKERS)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
        delay_between_tasks = limits.delay_between_batches
        
        logger.debug(f"üîß –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –æ—Ç –∫—Ä—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã: –ø–æ—Ç–æ–∫–æ–≤={adaptive_workers}, –∑–∞–¥–µ—Ä–∂–∫–∞={delay_between_tasks}—Å, –æ–ø–∏—Å–∞–Ω–∏–µ='{limits.description}'")
        
        return adaptive_workers, delay_between_tasks, limits
        
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –Ω–∞–≥—Ä—É–∑–∫–∏: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
        class BasicLimits:
            max_workers = MAX_WORKERS
            delay_between_batches = 5.0
            description = "–ë–∞–∑–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)"
        return MAX_WORKERS, 5.0, BasicLimits()

def check_system_overload():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —á–µ—Ä–µ–∑ –∫—Ä—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        limits = get_adaptive_limits()
        
        # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≤ –∑–∞—â–∏—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        is_emergency = (
            "–ó–ê–©–ò–¢–ù–´–ô –†–ï–ñ–ò–ú" in limits.description or 
            "–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê" in limits.description
        )
        
        if is_emergency:
            logger.warning(f"üö® –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞! –£—Ä–æ–≤–µ–Ω—å: '{limits.description}' | –ü–æ—Ç–æ–∫–æ–≤: {limits.max_workers} | –ó–∞–¥–µ—Ä–∂–∫–∞: {limits.delay_between_batches}—Å")
            return True
            
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def process_task(task_id, chat_id, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–¥–∞—á–∏
        if check_system_overload():
            logger.warning(f"‚è∏Ô∏è –ó–∞–¥–∞—á–∞ #{task_id} –æ—Ç–ª–æ–∂–µ–Ω–∞ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
            time.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ (–±—ã–ª–æ 60)
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
            if check_system_overload():
                logger.error(f"üö® –°–∏—Å—Ç–µ–º–∞ –≤—Å–µ –µ—â–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞, –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É #{task_id}")
                update_publish_task_status(task_id, TaskStatus.FAILED, error_message="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
                return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ë–î
        task_data = get_publish_task(task_id)
        if not task_data:
            logger.error(f"–ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # –ï—Å–ª–∏ chat_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ –∑–∞–¥–∞—á–∏
        if not chat_id and task_data.get('user_id'):
            chat_id = task_data['user_id']
            logger.info(f"üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {chat_id}")

        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ #{task_id} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {task_data['account_username']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        from utils.smart_validator_service import validate_before_use, ValidationPriority
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ @{task_data['account_username']} –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π")
        
        if not validate_before_use(task_data['account_id'], ValidationPriority.CRITICAL):
            logger.warning(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç @{task_data['account_username']} –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤")
            update_publish_task_status(task_id, TaskStatus.FAILED, error_message="–ê–∫–∫–∞—É–Ω—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if bot and chat_id:
                try:
                    bot.send_message(
                        chat_id,
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é!\n"
                        f"–ê–∫–∫–∞—É–Ω—Ç: @{task_data['account_username']}\n"
                        f"–ü—Ä–∏—á–∏–Ω–∞: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                    )
                except:
                    pass
            
            return False
        
        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{task_data['account_username']} –≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –∫—ç—à –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        add_account_to_cache(
            task_data['account_id'],
            task_data['account_username'],
            task_data['account_email'],
            task_data['account_email_password']
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        update_publish_task_status(task_id, TaskStatus.PROCESSING)

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        _, adaptive_delay, system_limits = get_task_adaptive_limits()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        base_delay = random.uniform(2, 5)  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2-5 —Å–µ–∫—É–Ω–¥
        total_delay = base_delay + (adaptive_delay * 0.1)  # –î–æ–±–∞–≤–ª—è–µ–º 10% –æ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        
        logger.info(f"‚è≥ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ {total_delay:.2f} —Å–µ–∫—É–Ω–¥ (–±–∞–∑–æ–≤–∞—è: {base_delay:.2f}—Å, —Å–∏—Å—Ç–µ–º–Ω–∞—è: {adaptive_delay:.1f}—Å) | –£—Ä–æ–≤–µ–Ω—å: {system_limits.description}")
        time.sleep(total_delay)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        task_type = task_data['task_type']
        media_path = task_data['media_path']
        caption = task_data['caption'] or ""
        hashtags = task_data['hashtags'] or ""
        options = task_data['options'] or {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        success = False
        media_id = None

        # –ï—Å–ª–∏ options —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        if isinstance(options, str):
            try:
                logger.info(f"üîç –ü–∞—Ä—Å–∏–º options JSON: {options[:200]}...")
                options = json.loads(options) if options else {}
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ options: {list(options.keys())}")
            except Exception as parse_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ options JSON: {parse_error}")
                options = {}

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º caption –∏ hashtags
        full_caption = caption
        if hashtags:
            full_caption = f"{caption}\n\n{hashtags}" if caption else hashtags

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è
        uniquify_content = options.get('uniquify_content', False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        file_extension = os.path.splitext(media_path)[1].lower()
        is_video = file_extension in ['.mp4', '.mov', '.avi', '.mkv', '.webm']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        if task_type == TaskType.CAROUSEL:
            content_type = 'carousel'
        elif task_type == TaskType.REEL or is_video:
            content_type = 'reel'
        elif task_type == TaskType.STORY:
            content_type = 'story'
        else:
            content_type = 'photo'
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if uniquify_content:
            logger.info(f"üé® –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–∏–ø–∞: {content_type}")
            
            # –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø—É—Ç–∏
            if task_type == TaskType.CAROUSEL:
                try:
                    media_paths = json.loads(media_path)
                    if not isinstance(media_paths, list):
                        media_paths = [media_path]
                except:
                    media_paths = [media_path]
                
                # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å
                unique_paths, unique_caption = uniquify_for_publication(media_paths, content_type, full_caption)
                media_path = json.dumps(unique_paths)  # –û–±—Ä–∞—Ç–Ω–æ –≤ JSON
                full_caption = unique_caption
            else:
                # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª
                unique_path, unique_caption = uniquify_for_publication(media_path, content_type, full_caption)
                media_path = unique_path
                full_caption = unique_caption
                
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üìã –¢–∏–ø –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î: {task_type}")
        logger.info(f"üìÑ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_extension}")
        logger.info(f"üé¨ –≠—Ç–æ –≤–∏–¥–µ–æ: {is_video}")
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ Reels –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ
        is_reels = (
            task_type in ['reel', 'reels'] or 
            task_type == TaskType.REEL or 
            (task_type == TaskType.VIDEO and is_video and any(key in options for key in ['hide_from_feed', 'usertags', 'music_track']))
        )
        
        if is_reels:
            # –î–ª—è –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º ReelsManager
            logger.info(f"üìπ –ò—Å–ø–æ–ª—å–∑—É–µ–º ReelsManager –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ/—Ä–∏–ª—Å")
            manager = ReelsManager(task_data['account_id'])
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            reels_data = {
                'hashtags': options.get('hashtags', []),
                'usertags': options.get('usertags', []),
                'location': options.get('location'),
                'cover_time': options.get('cover_time', 0),
                'uniquify_content': options.get('uniquify_content', False)
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
            distributed_usertags = options.get('distributed_usertags', [])
            if distributed_usertags:
                # –ò—â–µ–º —Ç–µ–≥–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                account_tags = None
                for item in distributed_usertags:
                    if item['account_id'] == task_data['account_id']:
                        account_tags = item['tags']
                        break
                
                if account_tags:
                    reels_data['usertags'] = account_tags
                    logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {task_data['account_id']}: {len(account_tags)} —Ç–µ–≥–æ–≤")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–ª–æ–∂–∫—É
            thumbnail_path = options.get('thumbnail_path')
            if thumbnail_path:
                reels_data['thumbnail_path'] = thumbnail_path
                logger.info(f"üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –æ–±–ª–æ–∂–∫–∞: {thumbnail_path}")
            
            logger.info(f"üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Reels: {reels_data}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏
            if reels_data['usertags']:
                logger.info(f"üë• –î–æ–±–∞–≤–ª—è—é —Ç–µ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Reels: {len(reels_data['usertags'])} —à—Ç.")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
            if reels_data['location']:
                logger.info(f"üìç –î–æ–±–∞–≤–ª—è—é –ª–æ–∫–∞—Ü–∏—é –≤ Reels: {reels_data['location']}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É
            if reels_data.get('thumbnail_path'):
                logger.info(f"üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –æ–±–ª–æ–∂–∫–∞")
            elif reels_data['cover_time'] > 0:
                logger.info(f"üñºÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–ª–æ–∂–∫–∏ –Ω–∞ {reels_data['cover_time']} —Å–µ–∫—É–Ω–¥")
            
            # –ü—É–±–ª–∏–∫—É–µ–º Reels
            success, result = manager.publish_reel(
                video_path=media_path,
                caption=full_caption,
                thumbnail_path=reels_data.get('thumbnail_path'),
                usertags=reels_data['usertags'],
                location=reels_data['location'],
                hashtags=reels_data['hashtags'],
                cover_time=reels_data['cover_time']
            )
            
            # ReelsManager –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (success, media_id_or_error)
            if success:
                media_id = result
            else:
                # –ï—Å–ª–∏ success=False, —Ç–æ result —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É
                media_id = None
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–æ–π –æ—à–∏–±–∫–æ–π
                if isinstance(result, str) and result.startswith("ERROR"):
                    success = False
                    logger.error(f"‚ùå –°–µ—Ä—å–µ–∑–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels: {result}")
                else:
                    success = False
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels: {result}")
        elif task_type == TaskType.STORY:
            # –î–ª—è –∏—Å—Ç–æ—Ä–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º StoryManager
            logger.info(f"üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º StoryManager –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏")
            manager = StoryManager(task_data['account_id'])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π –∏–∑ options (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ!)
            story_params = {}
            story_options = options  # options —É–∂–µ –ø–∞—Ä—Å–∏—Ç—Å—è –≤—ã—à–µ
            
            logger.info(f"üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Stories: {story_options}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
            if 'mentions' in story_options and story_options['mentions']:
                story_params['mentions'] = story_options['mentions']
                logger.info(f"üë• –î–æ–±–∞–≤–ª—è—é —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {len(story_options['mentions'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û
            if 'link' in story_options and story_options['link']:
                story_params['link'] = story_options['link']
                logger.info(f"üîó –î–æ–±–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é: {story_options['link']}")
            elif 'story_link' in story_options and story_options['story_link']:
                story_params['link'] = story_options['story_link']
                logger.info(f"üîó –î–æ–±–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é: {story_options['story_link']}")
            

            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–≤–µ—Ä—Ö —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ
            if 'story_text' in story_options and story_options['story_text']:
                story_params['story_text'] = story_options['story_text']
                story_params['story_text_color'] = story_options.get('story_text_color', '#ffffff')
                story_params['story_text_position'] = story_options.get('story_text_position', {})
                logger.info(f"üí¨ –î–æ–±–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é: {story_options['story_text']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∞–ª—å–±–æ–º –∏—Å—Ç–æ—Ä–∏–π –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω–∞—è
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –º–∞—Å—Å–∏–≤
                media_paths = json.loads(media_path)
                if isinstance(media_paths, list) and len(media_paths) > 1:
                    # –ê–ª—å–±–æ–º –∏—Å—Ç–æ—Ä–∏–π
                    result = manager.publish_story_album(
                        media_paths, 
                        caption=full_caption,
                        mentions=story_params.get('mentions'),
                        link=story_params.get('link'),
                        story_text=story_params.get('story_text'),
                        story_text_color=story_params.get('story_text_color'),
                        story_text_position=story_params.get('story_text_position')
                    )
                else:
                    # –û–¥–∏–Ω–æ—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
                    if isinstance(media_paths, list):
                        media_path = media_paths[0]
                    result = manager.publish_story(
                        media_path, 
                        caption=full_caption,
                        mentions=story_params.get('mentions'),
                        link=story_params.get('link'),
                        story_text=story_params.get('story_text'),
                        story_text_color=story_params.get('story_text_color'),
                        story_text_position=story_params.get('story_text_position')
                    )
            except:
                # –ï—Å–ª–∏ –Ω–µ JSON, —Ç–æ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª
                result = manager.publish_story(
                    media_path, 
                    caption=full_caption,
                    mentions=story_params.get('mentions'),
                    link=story_params.get('link'),
                    story_text=story_params.get('story_text'),
                    story_text_color=story_params.get('story_text_color'),
                    story_text_position=story_params.get('story_text_position')
                )
            
            # StoryManager –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (success, media_id)
            if isinstance(result, tuple):
                success, media_id = result
            else:
                success = result
                media_id = None
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º PostManager
            logger.info(f"üì∏ –ò—Å–ø–æ–ª—å–∑—É–µ–º PostManager –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {task_type}")
            manager = PostManager(task_data['account_id'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if task_type == 'photo' or task_type == TaskType.PHOTO:
                result = manager.publish_photo(
                    media_path,
                    caption=full_caption
                )
            elif task_type == 'carousel' or task_type == TaskType.CAROUSEL:
                # –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ media_path —Å–æ–¥–µ—Ä–∂–∏—Ç JSON —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π
                try:
                    media_paths = json.loads(media_path)
                    if not isinstance(media_paths, list):
                        media_paths = [media_path]
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø—É—Ç—å
                    media_paths = options.get('media_paths', [media_path])
                
                result = manager.publish_carousel(
                    media_paths,
                    caption=full_caption
                )
            elif task_type == 'mosaic' or task_type == TaskType.MOSAIC:
                result = manager.publish_mosaic(
                    media_path,
                    caption=full_caption,
                    crop_to_square=options.get('crop_to_square', False)
                )
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É–±–ª–∏–∫—É–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                result = manager.publish_photo(
                    media_path,
                    caption=full_caption
                )
            
            # PostManager –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (success, media_id)
            if isinstance(result, tuple):
                success, media_id = result
            else:
                success = result
                media_id = None

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if success:
            # media_id —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ –≤—ã—à–µ
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ
            if media_id is not None:
                media_id = str(media_id)
            
            update_publish_task_status(task_id, TaskStatus.COMPLETED, media_id=media_id)
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ—Ç
            if bot and chat_id:
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    if media_id:
                        if task_type == TaskType.VIDEO or task_type == 'reel':
                            media_url = f"https://www.instagram.com/reel/{media_id}/"
                        elif task_type == TaskType.STORY:
                            media_url = f"https://www.instagram.com/stories/highlight/{media_id}/"
                        else:
                            # –î–ª—è –ø–æ—Å—Ç–æ–≤, –∫–∞—Ä—É—Å–µ–ª–µ–π –∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
                            media_url = f"https://www.instagram.com/p/{media_id}/"
                    else:
                        media_url = "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    content_type = "Reels" if task_type == TaskType.VIDEO or task_type == 'reel' else str(task_type).title()
                    
                    bot.send_message(
                        chat_id,
                        f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                        f"–ê–∫–∫–∞—É–Ω—Ç: @{task_data['account_username']}\n"
                        f"–¢–∏–ø: {content_type}\n"
                        f"–°—Å—ã–ª–∫–∞: {media_url}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        else:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
            update_publish_task_status(task_id, TaskStatus.FAILED, error_message=error_msg)
            logger.error(f"‚ùå –ó–∞–¥–∞—á–∞ #{task_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if bot and chat_id:
                try:
                    bot.send_message(
                        chat_id,
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!\n"
                        f"–ê–∫–∫–∞—É–Ω—Ç: @{task_data['account_username']}\n"
                        f"–û—à–∏–±–∫–∞: {error_msg}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        check_and_send_batch_report(task_id, chat_id, bot)

        return success

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #{task_id}: {e}")
        logger.error(f"Traceback:\n{traceback.format_exc()}")
        update_publish_task_status(task_id, TaskStatus.FAILED, str(e))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if bot and chat_id:
            bot.send_message(
                chat_id,
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #{task_id}:\n{str(e)}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        check_and_send_batch_report(task_id, chat_id, bot)
        
        return False

def register_task_batch(task_ids: List[int], chat_id: int, bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    if not task_ids:
        return
        
    batch_id = f"{chat_id}_{int(time.time())}"
    active_task_batches[batch_id] = {
        'task_ids': task_ids,
        'chat_id': chat_id,
        'bot': bot,
        'completed_tasks': set(),
        'failed_tasks': set(),
        'created_at': time.time()
    }
    
    logger.info(f"üì¶ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞–∫–µ—Ç –∑–∞–¥–∞—á {batch_id}: {len(task_ids)} –∑–∞–¥–∞—á")

def check_and_send_batch_report(task_id: int, chat_id: int, bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –∑–∞–¥–∞—á –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    if not chat_id or not bot:
        return
        
    # –ò—â–µ–º –ø–∞–∫–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —ç—Ç—É –∑–∞–¥–∞—á—É
    batch_to_update = None
    for batch_id, batch_data in active_task_batches.items():
        if task_id in batch_data['task_ids'] and batch_data['chat_id'] == chat_id:
            batch_to_update = batch_id
            break
    
    if not batch_to_update:
        return
        
    batch_data = active_task_batches[batch_to_update]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    task_data = get_publish_task(task_id)
    if not task_data:
        return
        
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –ø–∞–∫–µ—Ç–µ
    if task_data['status'] == TaskStatus.COMPLETED:
        batch_data['completed_tasks'].add(task_id)
    elif task_data['status'] == TaskStatus.FAILED:
        batch_data['failed_tasks'].add(task_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏
    total_tasks = len(batch_data['task_ids'])
    completed_count = len(batch_data['completed_tasks'])
    failed_count = len(batch_data['failed_tasks'])
    finished_count = completed_count + failed_count
    
    if finished_count >= total_tasks:
        # –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        try:
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            
            report_message = f"üìä **–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
            report_message += f"üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
            report_message += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {completed_count}\n"
            report_message += f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n\n"
            
            if completed_count > 0:
                report_message += f"üéâ –£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ {completed_count} –∞–∫–∫–∞—É–Ω—Ç–∞—Ö!\n"
            
            if failed_count > 0:
                report_message += f"‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤ {failed_count} –∞–∫–∫–∞—É–Ω—Ç–∞—Ö\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            success_rate = (completed_count / total_tasks) * 100
            report_message += f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_time = time.time() - batch_data['created_at']
            report_message += f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.1f} —Å–µ–∫—É–Ω–¥"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = [
                [InlineKeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="publication_history")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            bot.send_message(
                chat_id,
                report_message,
                reply_markup=reply_markup
            )
            
            logger.info(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø–∞–∫–µ—Ç–∞ {batch_to_update}: {completed_count}/{total_tasks} —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
        del active_task_batches[batch_to_update]

def task_worker():
    """–§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
    logger.info("üöÄ –ó–∞–ø—É—â–µ–Ω –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á")

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
    futures = {}
    last_load_check = 0
    current_max_workers = MAX_WORKERS

    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É —Å–∏—Å—Ç–µ–º—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            current_time = time.time()
            if current_time - last_load_check > 30:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –æ—Ç –∫—Ä—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    adaptive_workers, system_delay, system_limits = get_task_adaptive_limits()
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                    if adaptive_workers != current_max_workers:
                        logger.info(f"üîß –ê–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏: –ø–æ—Ç–æ–∫–æ–≤ {current_max_workers} ‚Üí {adaptive_workers} | –£—Ä–æ–≤–µ–Ω—å: {system_limits.description}")
                        current_max_workers = adaptive_workers
                        
                        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤, –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö
                        if len(futures) > current_max_workers:
                            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(futures) - current_max_workers} –∑–∞–¥–∞—á –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏")
                    
                    last_load_check = current_time
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏: {e}")
                    last_load_check = current_time

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            done_futures = []
            for future, task_info in list(futures.items()):
                if future.done():
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                        future.result()
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task_info}: {e}")
                        logger.error(traceback.format_exc())
                    done_futures.append(future)

            # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            for future in done_futures:
                del futures[future]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏
            if check_system_overload():
                logger.warning("üö® –°–∏—Å—Ç–µ–º–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞! –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
                time.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–≥—Ä—É–∑–∫–µ (–±—ã–ª–æ 60)
                continue

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ –≤ –ø—É–ª–µ
            if len(futures) < current_max_workers:
                try:
                    # –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    task = task_queue.get(block=True, timeout=1.0)

                    if task is None:
                        # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        break

                    task_id, chat_id, bot = task

                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤
                    future = executor.submit(process_task, task_id, chat_id, bot)
                    futures[future] = (task_id, chat_id)

                    # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤–∑—è—Ç—É—é –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                    task_queue.task_done()
                    
                    logger.debug(f"üìã –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #{task_id} ({len(futures)}/{current_max_workers} –ø–æ—Ç–æ–∫–æ–≤)")

                except queue.Empty:
                    # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
                    pass
            else:
                # –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–Ω—è—Ç—ã, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                time.sleep(0.5)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
            logger.error(traceback.format_exc())
            time.sleep(1)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
worker_thread = None

def start_task_queue():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á"""
    global worker_thread

    if worker_thread is None or not worker_thread.is_alive():
        worker_thread = threading.Thread(target=task_worker, daemon=True)
        worker_thread.start()
        logger.info("–ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á")
    else:
        logger.info("–ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

def stop_task_queue():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á"""
    global worker_thread, executor

    if worker_thread and worker_thread.is_alive():
        task_queue.put(None)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        worker_thread.join(timeout=5.0)

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
        executor.shutdown(wait=False)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        executor = concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS)

        logger.info("–ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def add_task_to_queue(task_id, chat_id=None, bot=None, delay_seconds=0):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    
    Args:
        task_id: ID –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        delay_seconds: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        task = get_publish_task(task_id)
        if not task:
            logger.error(f"–ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        update_publish_task_status(task_id, TaskStatus.PROCESSING)

        if delay_seconds > 0:
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–µ—Ä–æ–º
            def delayed_add():
                time.sleep(delay_seconds)
                task_queue.put((task_id, chat_id, bot))
                logger.info(f"–ó–∞–¥–∞—á–∞ #{task_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ {delay_seconds}—Å")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            delay_thread = threading.Thread(target=delayed_add, daemon=True)
            delay_thread.start()
            logger.info(f"–ó–∞–¥–∞—á–∞ #{task_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay_seconds} —Å–µ–∫—É–Ω–¥")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            task_queue.put((task_id, chat_id, bot))
            logger.info(f"–ó–∞–¥–∞—á–∞ #{task_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")

        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #{task_id} –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
        logger.error(traceback.format_exc())
        return False

def get_task_status(task_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    try:
        if task_id in task_results:
            return task_results[task_id]

        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        task = get_publish_task(task_id)
        if task:
            return {
                'success': task.status == TaskStatus.COMPLETED,
                'result': task.error_message or "–í –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                'completed_at': task.updated_at
            }

        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ #{task_id}: {e}")
        return {'success': False, 'result': f"–û—à–∏–±–∫–∞: {str(e)}"}

def get_queue_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á —Å —É—á–µ—Ç–æ–º –∫—Ä—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –æ—Ç –∫—Ä—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        adaptive_workers, system_delay, system_limits = get_task_adaptive_limits()
        
        return {
            'queue_size': task_queue.qsize(),
            'max_workers': MAX_WORKERS,
            'current_max_workers': adaptive_workers,
            'system_delay': system_delay,
            'load_level': system_limits.description,
            'is_overloaded': check_system_overload(),
            'timeout_multiplier': system_limits.timeout_multiplier if hasattr(system_limits, 'timeout_multiplier') else 1.0,
            'batch_size': system_limits.batch_size if hasattr(system_limits, 'batch_size') else 1
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
        return {
            'queue_size': task_queue.qsize(),
            'max_workers': MAX_WORKERS,
            'current_max_workers': MAX_WORKERS,
            'system_delay': 5.0,
            'load_level': "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
            'is_overloaded': False,
            'timeout_multiplier': 1.0,
            'batch_size': 1
        }