import logging
import time
import threading
import schedule
import datetime
import random
import os

from database.db_manager import get_pending_tasks, update_publish_task_status, get_all_accounts
from instagram.profile_manager import ProfileManager
from instagram.post_manager import PostManager
from instagram.reels_manager import ReelsManager
from database.db_manager import get_scheduled_tasks
from utils.task_queue import add_task_to_queue
from instagram.client import Client

logger = logging.getLogger(__name__)

def execute_task(task):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    try:
        logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ {task.id} —Ç–∏–ø–∞ {task.task_type}")

        # –í—ã–±–∏—Ä–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        if task.task_type == 'profile':
            manager = ProfileManager(task.account_id)
            success, error = manager.execute_profile_task(task)
        elif task.task_type in ['post', 'mosaic']:
            manager = PostManager(task.account_id)
            success, error = manager.execute_post_task(task)
        elif task.task_type == 'reel':
            manager = ReelsManager(task.account_id)
            success, error = manager.execute_reel_task(task)
        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task.task_type}")
            update_publish_task_status(task.id, 'failed', error_message=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task.task_type}")
            return

        if success:
            logger.info(f"–ó–∞–¥–∞—á–∞ {task.id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error(f"–ó–∞–¥–∞—á–∞ {task.id} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {error}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task.id}: {e}")
        update_publish_task_status(task.id, 'failed', error_message=str(e))

def check_scheduled_tasks(bot=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
        now = datetime.datetime.now()
        
        logger.debug(f"üïê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks = get_scheduled_tasks()
        
        logger.debug(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")

        for task in tasks:
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—É–ø–∏–ª–æ –∏–ª–∏ –ø—Ä–æ—à–ª–æ
            if task.scheduled_time and task.scheduled_time <= now:
                logger.info(f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ #{task.id} –Ω–∞—Å—Ç—É–ø–∏–ª–æ! –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {task.scheduled_time}, –°–µ–π—á–∞—Å: {now}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
                if bot:
                    logger.info(f"üì§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #{task.id} (—Ç–∏–ø: {task.task_type}) –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á")
                    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    user_id = task.user_id if hasattr(task, 'user_id') else None
                    logger.info(f"üìß User ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {user_id}")
                    add_task_to_queue(task.id, user_id, bot)
                else:
                    # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –µ—Å–ª–∏ –Ω–µ—Ç –±–æ—Ç–∞
                    logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ #{task.id} –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (fallback)")
                    threading.Thread(target=execute_task, args=(task,)).start()
            else:
                if task.scheduled_time:
                    time_diff = task.scheduled_time - now
                    logger.debug(f"‚è≥ –ó–∞–¥–∞—á–∞ #{task.id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {task.scheduled_time} (—á–µ—Ä–µ–∑ {time_diff})")
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
        import traceback
        logger.error(traceback.format_exc())

def refresh_account_sessions():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        accounts = get_all_accounts()

        for account in accounts:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
                session_path = f"Data/accounts/{account.username}_session.json"
                if not os.path.exists(session_path):
                    logger.warning(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
                client = Client(username=account.username, password=account.password, proxy=account.proxy)

                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
                if client.load_session_from_file():
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
                    client.get_timeline_feed()
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                    client.save_session_to_file()
                    logger.info(f"–°–µ—Å—Å–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}")

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                time.sleep(random.uniform(5, 15))

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}: {e}")

        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")

def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        from telegram.ext import Updater
        from config import TELEGRAM_TOKEN

        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        bot = updater.bot

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        schedule.every(1).minutes.do(check_scheduled_tasks, bot=bot)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
        schedule.every(12).hours.do(refresh_account_sessions)

        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        while True:
            schedule.run_pending()
            time.sleep(10)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–¥–∞—á: {e}")