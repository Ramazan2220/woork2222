"""
üèóÔ∏è –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ú–ò–ö–†–û–°–ï–†–í–ò–°–û–í
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –æ–¥–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
"""

from typing import Dict, List
from dataclasses import dataclass

@dataclass 
class RealServer:
    """–†–µ–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    name: str
    ram_gb: int
    cpu_cores: int
    disk_gb: int
    monthly_cost: float
    
# –†–µ–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
REAL_SERVERS = {
    'small': RealServer('Hetzner CX31', 8, 2, 80, 7.5),
    'medium': RealServer('Hetzner CX41', 16, 4, 160, 15.5), 
    'large': RealServer('Hetzner CX51', 32, 8, 240, 30),
    'xlarge': RealServer('Hetzner CCX33', 64, 8, 320, 60),
    'xxlarge': RealServer('Hetzner CCX53', 128, 16, 640, 120)
}

class RealisticMicroservicesCalculator:
    """
    üéØ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ú–ò–ö–†–û–°–ï–†–í–ò–°–û–í
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    """
    
    def __init__(self):
        pass
    
    def calculate_real_requirements(self, users: int, accounts_per_user: int = 300) -> Dict:
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ —Ä–µ—Å—É—Ä—Å–∞–º –° –£–ß–ï–¢–û–ú –ü–£–õ–û–í –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô"""
        total_accounts = users * accounts_per_user
        
        # === –ü–†–ò–ú–ï–ù–Ø–ï–ú –¢–ï –ñ–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ß–¢–û –ò –í –ú–û–ù–û–õ–ò–¢–ï ===
        # 1. –¢–æ–ª—å–∫–æ 25% –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        active_accounts = int(total_accounts * 0.25)
        sleeping_accounts = int(total_accounts * 0.50)  # 50% –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ
        inactive_accounts = total_accounts - active_accounts - sleeping_accounts  # 25% –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
        
        # 2. Instagram Client Pool - —ç–∫–æ–Ω–æ–º–∏—è 65% –ø–∞–º—è—Ç–∏
        client_pool_memory_reduction = 0.65
        
        # 3. –°–ø—è—â–∏–π —Ä–µ–∂–∏–º - —ç–∫–æ–Ω–æ–º–∏—è 80% –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–ø—è—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        sleeping_memory_multiplier = 0.2  # 20% –æ—Ç –æ–±—ã—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        
        # === –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø–ú–ò ===
        requirements = {
            'database_proxy': {
                'name': 'Database & Proxy',
                'description': 'PostgreSQL + Redis + Proxy rotation + Connection Pool',
                'ram_gb': 4 + (users * 0.1),  # 4GB –±–∞–∑–æ–≤–∞—è + 0.1GB –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'cpu_cores': 2 + (users // 50),  # 2 –±–∞–∑–æ–≤—ã—Ö + 1 –Ω–∞ –∫–∞–∂–¥—ã–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                'disk_gb': 20 + (users * 2),   # 20GB –±–∞–∑–æ–≤–∞—è + 2GB –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'daily_requests': active_accounts * 20,  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                'concurrent_users': min(users, 50)  # –ú–∞–∫—Å–∏–º—É–º 50 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö
            },
            
            'content_publishing': {
                'name': 'Content Publishing',
                'description': '–ü—É–±–ª–∏–∫–∞—Ü–∏—è + Instagram Client Pool + —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º',
                # –ü–ê–ú–Ø–¢–¨: –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã + —Å–ø—è—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
                'ram_gb': 2 + (
                    (active_accounts * 0.004) * (1 - client_pool_memory_reduction) +  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å –ø—É–ª–æ–º
                    (sleeping_accounts * 0.004 * sleeping_memory_multiplier)  # –°–ø—è—â–∏–µ
                ),
                'cpu_cores': 1 + (active_accounts // 3000),  # CPU —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö
                'disk_gb': 50 + (users * 5),   # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞
                'daily_publications': active_accounts * 5,  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫—É—é—Ç
                'peak_per_hour': (active_accounts * 5) // 16,
                'optimizations': 'Client Pool + Sleeping Mode'
            },
            
            'scheduled_publishing': {
                'name': 'Scheduled Publishing',
                'description': '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ + –æ—á–µ—Ä–µ–¥—å —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π',
                'ram_gb': 1 + (active_accounts * 0.001),  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥–∏
                'cpu_cores': 1,  # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –º–Ω–æ–≥–æ CPU
                'disk_gb': 10 + (users * 1),   # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
                'scheduled_jobs': active_accounts * 2,  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
                'queue_size': active_accounts // 10
            },
            
            'account_warmup': {
                'name': 'Account Warmup',
                'description': '–ü—Ä–æ–≥—Ä–µ–≤ + Activity Optimizer + —Ä–æ—Ç–∞—Ü–∏—è',
                # –ü—Ä–æ–≥—Ä–µ–≤ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç –µ—â–µ –º–µ–Ω—å—à–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - —Ç–æ–ª—å–∫–æ 20% –æ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö
                'warmup_accounts': int(active_accounts * 0.2),
                'ram_gb': 2 + (int(active_accounts * 0.2) * 0.003),  # –¢–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –ø—Ä–æ–≥—Ä–µ–≤–µ
                'cpu_cores': 1 + (int(active_accounts * 0.2) // 1000),  # CPU –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞–µ–º—ã—Ö
                'disk_gb': 10 + (users * 2),   # –õ–æ–≥–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
                'warmup_requests_per_hour': int(active_accounts * 0.2 * 10),
                'optimizations': 'Activity Optimizer + —Ä–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 45 –º–∏–Ω'
            },
            
            'account_processing': {
                'name': 'Account Processing',
                'description': 'IMAP + –∑–∞–≥—Ä—É–∑–∫–∞ + IMAP Pool',
                'ram_gb': 2 + (users * 0.05),  # 50MB –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
                'cpu_cores': 1 + (users // 100),  # 1 —è–¥—Ä–æ –Ω–∞ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                'disk_gb': 20 + (users * 3),   # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                'daily_imap_checks': active_accounts * 2,  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è
                'monthly_uploads': users,
                'optimizations': 'IMAP Connection Pool'
            },
            
            'profile_design': {
                'name': 'Profile Design',
                'description': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π (–ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)',
                # –ü—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω - –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, –Ω–µ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
                'ram_gb': 3 + (users * 0.02),  # 20MB –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                'cpu_cores': 2 + (users // 200),  # CPU –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                'disk_gb': 30 + (users * 10),  # –®–∞–±–ª–æ–Ω—ã –∏ –º–µ–¥–∏–∞
                'monthly_design_jobs': users * 2 * 300,  # 2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü √ó 300 –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                'daily_design_jobs': (users * 2 * 300) // 30,  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ –¥–Ω—è–º
                'optimizations': '–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ + –æ—á–µ—Ä–µ–¥—å'
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è—Ö
        requirements['optimization_summary'] = {
            'total_accounts': total_accounts,
            'active_accounts': active_accounts,
            'sleeping_accounts': sleeping_accounts,
            'inactive_accounts': inactive_accounts,
            'client_pool_memory_savings': f'{client_pool_memory_reduction * 100}%',
            'sleeping_mode_savings': f'{(1 - sleeping_memory_multiplier) * 100}%',
            'activity_optimizer': '–†–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 45 –º–∏–Ω'
        }
        
        return requirements
    
    def pack_services_to_servers(self, requirements: Dict) -> Dict:
        """–£–ø–∞–∫–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å—ã (–∏—Å–∫–ª—é—á–∞–µ–º optimization_summary)
        services = [service for key, service in requirements.items() 
                   if key != 'optimization_summary' and 'ram_gb' in service]
        servers_needed = []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ —Ç—è–∂–µ–ª—ã–µ)
        services.sort(key=lambda x: x['ram_gb'] * x['cpu_cores'], reverse=True)
        
        for service in services:
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            best_server = self._find_best_server_for_service(service)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
            placed = False
            for server_config in servers_needed:
                if self._can_fit_service(server_config, service):
                    server_config['services'].append(service)
                    server_config['used_ram'] += service['ram_gb']
                    server_config['used_cpu'] += service['cpu_cores']
                    server_config['used_disk'] += service['disk_gb']
                    placed = True
                    break
            
            if not placed:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
                servers_needed.append({
                    'server_type': best_server,
                    'services': [service],
                    'used_ram': service['ram_gb'],
                    'used_cpu': service['cpu_cores'],
                    'used_disk': service['disk_gb'],
                    'total_ram': best_server.ram_gb,
                    'total_cpu': best_server.cpu_cores,
                    'total_disk': best_server.disk_gb,
                    'monthly_cost': best_server.monthly_cost
                })
        
        return {
            'servers': servers_needed,
            'total_servers': len(servers_needed),
            'total_cost': sum(s['monthly_cost'] for s in servers_needed)
        }
    
    def _find_best_server_for_service(self, service: Dict) -> RealServer:
        """–ù–∞—Ö–æ–¥–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä —Å–ø–æ—Å–æ–±–Ω—ã–π –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"""
        required_ram = service['ram_gb'] * 1.2  # 20% –∑–∞–ø–∞—Å
        required_cpu = service['cpu_cores']
        required_disk = service['disk_gb'] * 1.1  # 10% –∑–∞–ø–∞—Å
        
        for server in REAL_SERVERS.values():
            if (server.ram_gb >= required_ram and 
                server.cpu_cores >= required_cpu and 
                server.disk_gb >= required_disk):
                return server
        
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –æ–¥–∏–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
        return REAL_SERVERS['xxlarge']
    
    def _can_fit_service(self, server_config: Dict, service: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä"""
        new_ram = server_config['used_ram'] + service['ram_gb']
        new_cpu = server_config['used_cpu'] + service['cpu_cores']
        new_disk = server_config['used_disk'] + service['disk_gb']
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º 20% –∑–∞–ø–∞—Å
        return (new_ram <= server_config['total_ram'] * 0.8 and
                new_cpu <= server_config['total_cpu'] * 0.8 and
                new_disk <= server_config['total_disk'] * 0.9)
    
    def calculate_realistic_cost(self, users: int, accounts_per_user: int = 300) -> Dict:
        """–ü–æ–ª–Ω—ã–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
        requirements = self.calculate_real_requirements(users, accounts_per_user)
        server_layout = self.pack_services_to_servers(requirements)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–æ–Ω–æ–ª–∏—Ç–æ–º
        from utils.cost_calculator import cost_calculator
        monolith_cost = cost_calculator.calculate_cost_per_user(users, accounts_per_user)
        
        cost_per_user = server_layout['total_cost'] / users
        monolith_cost_per_user = monolith_cost['server_options']['optimal']['cost_per_user']
        
        return {
            'microservices': {
                'requirements': requirements,
                'server_layout': server_layout,
                'total_cost': server_layout['total_cost'],
                'cost_per_user': round(cost_per_user, 2),
                'servers_count': server_layout['total_servers']
            },
            'monolith': {
                'cost_per_user': monolith_cost_per_user
            },
            'comparison': {
                'ratio': round(cost_per_user / monolith_cost_per_user, 2),
                'difference': round(cost_per_user - monolith_cost_per_user, 2),
                'is_microservices_cheaper': cost_per_user < monolith_cost_per_user
            }
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
realistic_calculator = RealisticMicroservicesCalculator()

def calculate_realistic_microservices(users: int = 100, accounts_per_user: int = 300) -> Dict:
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤"""
    return realistic_calculator.calculate_realistic_cost(users, accounts_per_user) 