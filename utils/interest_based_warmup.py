#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
–£–º–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
"""

import logging
import random
import time
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)


class InterestCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    LIFESTYLE = "lifestyle"
    FITNESS = "fitness"
    FOOD = "food"
    TRAVEL = "travel"
    FASHION = "fashion"
    TECHNOLOGY = "technology"
    BUSINESS = "business"
    ART = "art"
    MUSIC = "music"
    PHOTOGRAPHY = "photography"
    BEAUTY = "beauty"
    MOTIVATION = "motivation"
    EDUCATION = "education"
    ENTERTAINMENT = "entertainment"
    GAMING = "gaming"
    SPORTS = "sports"
    HEALTH = "health"
    FINANCE = "finance"
    AUTOMOTIVE = "automotive"
    REAL_ESTATE = "real_estate"


@dataclass
class InterestProfile:
    """–ü—Ä–æ—Ñ–∏–ª—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    primary_interests: List[InterestCategory]  # 2-3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞
    secondary_interests: List[InterestCategory]  # 3-5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
    target_hashtags: List[str]  # –¶–µ–ª–µ–≤—ã–µ —Ö–µ—à—Ç–µ–≥–∏
    target_accounts: List[str]  # –¶–µ–ª–µ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    interaction_weights: Dict[str, float]  # –í–µ—Å–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    language: str = "en"  # –Ø–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞


class InterestBasedWarmup:
    """–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
    
    # –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    INTEREST_PROFILES = {
        InterestCategory.FITNESS: {
            "hashtags": [
                "fitness", "workout", "gym", "bodybuilding", "motivation",
                "fitnessmotivation", "training", "muscle", "strength", "cardio",
                "weightloss", "transformation", "fitspo", "exercise", "sport",
                "healthylifestyle", "nutrition", "protein", "abs", "goals"
            ],
            "accounts": [
                "therock", "mrolympia", "stephencurry30", "kingjames",
                "cristiano", "nike", "underarmour", "gymshark"
            ],
            "interaction_weights": {
                "like": 0.8, "comment": 0.4, "save": 0.6, "follow": 0.3,
                "view_story": 0.7, "watch_reel": 0.9
            }
        },
        
        InterestCategory.FOOD: {
            "hashtags": [
                "food", "foodie", "cooking", "recipe", "delicious",
                "foodphotography", "chef", "restaurant", "foodblogger", "yummy",
                "homemade", "healthy", "vegan", "dessert", "breakfast",
                "dinner", "lunch", "tasty", "foodstagram", "culinary"
            ],
            "accounts": [
                "gordongram", "jamieoliver", "buzzfeedtasty", "foodnetwork",
                "thefoodbabe", "minimalistbaker", "delish", "bonappetitmag"
            ],
            "interaction_weights": {
                "like": 0.9, "comment": 0.5, "save": 0.8, "follow": 0.4,
                "view_story": 0.6, "watch_reel": 0.8
            }
        },
        
        InterestCategory.TRAVEL: {
            "hashtags": [
                "travel", "wanderlust", "adventure", "explore", "vacation",
                "travelgram", "instatravel", "backpacking", "nature", "photography",
                "landscape", "sunset", "beach", "mountains", "city",
                "culture", "trip", "journey", "nomad", "passport"
            ],
            "accounts": [
                "natgeo", "beautifuldestinations", "earthpix", "lonelyplanet",
                "wonderful_places", "backpacker", "hostelworld", "airbnb"
            ],
            "interaction_weights": {
                "like": 0.8, "comment": 0.3, "save": 0.9, "follow": 0.5,
                "view_story": 0.8, "watch_reel": 0.7
            }
        },
        
        InterestCategory.TECHNOLOGY: {
            "hashtags": [
                "technology", "tech", "innovation", "ai", "startup",
                "coding", "programming", "developer", "software", "gadgets",
                "apple", "android", "google", "microsoft", "tesla",
                "blockchain", "cryptocurrency", "iot", "machinelearning", "data"
            ],
            "accounts": [
                "elonmusk", "apple", "google", "microsoft", "tesla",
                "techcrunch", "verge", "wired", "mashable"
            ],
            "interaction_weights": {
                "like": 0.7, "comment": 0.6, "save": 0.7, "follow": 0.6,
                "view_story": 0.5, "watch_reel": 0.6
            }
        },
        
        InterestCategory.BUSINESS: {
            "hashtags": [
                "business", "entrepreneur", "startup", "success", "motivation",
                "leadership", "marketing", "finance", "investment", "money",
                "wealth", "mindset", "goals", "productivity", "networking",
                "innovation", "strategy", "growth", "sales", "ceo"
            ],
            "accounts": [
                "garyvee", "elonmusk", "richardbranson", "oprah", "jeffweiner",
                "forbes", "entrepreneur", "inc", "fastcompany"
            ],
            "interaction_weights": {
                "like": 0.8, "comment": 0.7, "save": 0.8, "follow": 0.7,
                "view_story": 0.6, "watch_reel": 0.5
            }
        }
    }
    
    def __init__(self, account_id: int, client, interest_profile: InterestProfile):
        self.account_id = account_id
        self.client = client
        self.interest_profile = interest_profile
        self.session_stats = {
            'hashtags_explored': [],
            'accounts_visited': [],
            'content_interactions': [],
            'total_actions': 0
        }
    
    def perform_interest_warmup_session(self, duration_minutes: int = 30) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
        logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω)")
        
        session_start = time.time()
        session_results = {
            'interests_explored': [],
            'actions_performed': {},
            'session_duration': 0,
            'target_achieved': False
        }
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        action_plan = self._plan_interest_session(duration_minutes)
        logger.info(f"üìã –ü–ª–∞–Ω —Å–µ—Å—Å–∏–∏: {action_plan}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –ø–ª–∞–Ω—É
        for action_type, targets in action_plan.items():
            if action_type == 'explore_hashtags':
                result = self._explore_interest_hashtags(targets)
                session_results['actions_performed']['hashtag_exploration'] = result
                
            elif action_type == 'study_accounts':
                result = self._study_target_accounts(targets)
                session_results['actions_performed']['account_study'] = result
                
            elif action_type == 'interact_with_content':
                result = self._interact_with_interest_content(targets)
                session_results['actions_performed']['content_interaction'] = result
                
            elif action_type == 'discover_similar':
                result = self._discover_similar_content()
                session_results['actions_performed']['content_discovery'] = result
        
        session_results['session_duration'] = time.time() - session_start
        session_results['interests_explored'] = list(set(self.session_stats['hashtags_explored']))
        
        logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {session_results['session_duration']:.1f}—Å")
        return session_results
    
    def _plan_interest_session(self, duration_minutes: int) -> Dict[str, List]:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
        
        # –í—ã–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        primary_interest = random.choice(self.interest_profile.primary_interests)
        secondary_interest = random.choice(self.interest_profile.secondary_interests) if self.interest_profile.secondary_interests else None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        primary_data = self.INTEREST_PROFILES.get(primary_interest, {})
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏ –∞–∫–∫–∞—É–Ω—Ç—ã
        target_hashtags = random.sample(
            primary_data.get('hashtags', []), 
            min(3, len(primary_data.get('hashtags', [])))
        )
        
        target_accounts = random.sample(
            primary_data.get('accounts', []), 
            min(2, len(primary_data.get('accounts', [])))
        )
        
        plan = {
            'explore_hashtags': target_hashtags,
            'study_accounts': target_accounts,
            'interact_with_content': [primary_interest.value],
            'discover_similar': ['explore_page']
        }
        
        return plan
    
    def _explore_interest_hashtags(self, hashtags: List[str]) -> int:
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
        explored_count = 0
        
        for hashtag in hashtags:
            try:
                logger.info(f"üîç –ò—Å—Å–ª–µ–¥—É–µ–º —Ö–µ—à—Ç–µ–≥ #{hashtag}")
                
                # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –ø–æ —Ö–µ—à—Ç–µ–≥—É
                medias = self.client.hashtag_medias_recent(hashtag, amount=20)
                
                if medias:
                    # –ò–∑—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    for i, media in enumerate(medias[:5]):
                        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
                        view_time = random.randint(2, 8)
                        time.sleep(view_time)
                        
                        # –ò–Ω–æ–≥–¥–∞ –ª–∞–π–∫–∞–µ–º (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤)
                        if random.random() < 0.3:  # 30% —à–∞–Ω—Å
                            try:
                                self.client.media_like(media.id)
                                logger.info(f"‚ù§Ô∏è –õ–∞–π–∫–Ω—É–ª–∏ –ø–æ—Å—Ç –ø–æ #{hashtag}")
                                self.session_stats['content_interactions'].append({
                                    'type': 'like',
                                    'hashtag': hashtag,
                                    'media_id': media.id
                                })
                            except:
                                pass
                        
                        # –ò–Ω–æ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                        if random.random() < 0.2:  # 20% —à–∞–Ω—Å
                            try:
                                self.client.media_save(media.id)
                                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–æ—Å—Ç –ø–æ #{hashtag}")
                                self.session_stats['content_interactions'].append({
                                    'type': 'save',
                                    'hashtag': hashtag,
                                    'media_id': media.id
                                })
                            except:
                                pass
                    
                    explored_count += 1
                    self.session_stats['hashtags_explored'].append(hashtag)
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ö–µ—à—Ç–µ–≥–∞–º–∏
                    time.sleep(random.randint(10, 30))
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ #{hashtag}: {e}")
        
        return explored_count
    
    def _study_target_accounts(self, accounts: List[str]) -> int:
        """–ò–∑—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        studied_count = 0
        
        for username in accounts:
            try:
                logger.info(f"üë§ –ò–∑—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç @{username}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
                user_info = self.client.user_info_by_username(username)
                
                if user_info:
                    # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                    time.sleep(random.randint(5, 15))
                    
                    # –ò–∑—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
                    medias = self.client.user_medias(user_info.pk, amount=10)
                    
                    for media in medias[:3]:
                        # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ—Å—Ç
                        time.sleep(random.randint(3, 10))
                        
                        # –ò–Ω–æ–≥–¥–∞ –ª–∞–π–∫–∞–µ–º
                        if random.random() < 0.4:  # 40% —à–∞–Ω—Å
                            try:
                                self.client.media_like(media.id)
                                logger.info(f"‚ù§Ô∏è –õ–∞–π–∫–Ω—É–ª–∏ –ø–æ—Å—Ç @{username}")
                            except:
                                pass
                    
                    # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º Stories –µ—Å–ª–∏ –µ—Å—Ç—å
                    try:
                        stories = self.client.user_stories(user_info.pk)
                        if stories:
                            # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º 1-3 —Å—Ç–æ—Ä–∏—Å
                            stories_to_watch = min(3, len(stories))
                            for i in range(stories_to_watch):
                                time.sleep(random.randint(8, 20))
                                logger.info(f"üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ–ª–∏ —Å—Ç–æ—Ä–∏—Å @{username}")
                    except:
                        pass
                    
                    studied_count += 1
                    self.session_stats['accounts_visited'].append(username)
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                    time.sleep(random.randint(15, 45))
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ @{username}: {e}")
        
        return studied_count
    
    def _interact_with_interest_content(self, interests: List[str]) -> int:
        """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
        interactions = 0
        
        for interest in interests:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞
                interest_enum = InterestCategory(interest)
                hashtags = self.INTEREST_PROFILES.get(interest_enum, {}).get('hashtags', [])
                
                if hashtags:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–µ—à—Ç–µ–≥
                    hashtag = random.choice(hashtags)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –º–µ–¥–∏–∞
                    try:
                        medias = self.client.hashtag_medias_top(hashtag, amount=10)
                    except:
                        medias = self.client.hashtag_medias_recent(hashtag, amount=10)
                    
                    if medias:
                        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º —Å 2-3 –ø–æ—Å—Ç–∞–º–∏
                        for media in medias[:3]:
                            # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º
                            time.sleep(random.randint(5, 15))
                            
                            # –õ–∞–π–∫–∞–µ–º
                            if random.random() < 0.5:
                                try:
                                    self.client.media_like(media.id)
                                    interactions += 1
                                except:
                                    pass
                            
                            # –ò–Ω–æ–≥–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
                            if random.random() < 0.1:  # 10% —à–∞–Ω—Å
                                try:
                                    comments = self._get_interest_comments(interest)
                                    comment = random.choice(comments)
                                    self.client.media_comment(media.id, comment)
                                    logger.info(f"üí¨ –û—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É {interest}")
                                    interactions += 1
                                except:
                                    pass
                            
                            time.sleep(random.randint(3, 8))
            
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º {interest}: {e}")
        
        return interactions
    
    def _discover_similar_content(self) -> int:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ" –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        discoveries = 0
        
        try:
            logger.info("üîç –ò–∑—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ'")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            explore_data = self.client.get_explore_feed()
            
            if explore_data and 'items' in explore_data:
                # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                for item in explore_data['items'][:5]:
                    if 'media' in item:
                        media = item['media']
                        
                        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
                        time.sleep(random.randint(3, 12))
                        
                        # –ò–Ω–æ–≥–¥–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º
                        if random.random() < 0.3:
                            try:
                                if 'id' in media:
                                    self.client.media_like(media['id'])
                                    discoveries += 1
                                    logger.info("‚ù§Ô∏è –õ–∞–π–∫–Ω—É–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç")
                            except:
                                pass
                
                logger.info(f"‚úÖ –ò–∑—É—á–∏–ª–∏ {len(explore_data['items'][:5])} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        
        return discoveries
    
    def _get_interest_comments(self, interest: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞"""
        comment_templates = {
            'fitness': [
                "Great workout! üí™", "Amazing transformation! üî•", "Keep it up! üíØ",
                "Inspiring! üôå", "Goals! üéØ", "So motivated! ‚ö°"
            ],
            'food': [
                "Looks delicious! üòã", "Recipe please! üôè", "Yummy! ü§§",
                "Amazing! üî•", "Perfect! üëå", "I need this! üòç"
            ],
            'travel': [
                "Beautiful place! üòç", "Adding to my bucket list! ‚úàÔ∏è", "Amazing view! üåÖ",
                "Wanderlust! üó∫Ô∏è", "Goals! üéØ", "So beautiful! üíï"
            ],
            'technology': [
                "Awesome tech! üöÄ", "Innovation at its best! üí°", "Game changer! üî•",
                "The future is now! ‚ö°", "Impressive! üëè", "Love this! üíª"
            ],
            'business': [
                "Great advice! üí°", "So true! üíØ", "Exactly! üéØ",
                "Inspiring! üôå", "Thank you for sharing! üôè", "Valuable content! üìö"
            ]
        }
        
        return comment_templates.get(interest, [
            "Great content! üëç", "Love this! ‚ù§Ô∏è", "Amazing! ‚ú®",
            "So good! üî•", "Perfect! üíØ", "Awesome! üôå"
        ])
    
    @staticmethod
    def create_interest_profile(primary_interests: List[str], 
                              secondary_interests: List[str] = None,
                              custom_hashtags: List[str] = None,
                              custom_accounts: List[str] = None) -> InterestProfile:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ enum
        primary_enums = []
        for interest in primary_interests:
            try:
                primary_enums.append(InterestCategory(interest.lower()))
            except ValueError:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å: {interest}")
        
        secondary_enums = []
        if secondary_interests:
            for interest in secondary_interests:
                try:
                    secondary_enums.append(InterestCategory(interest.lower()))
                except ValueError:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å: {interest}")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏ –∞–∫–∫–∞—É–Ω—Ç—ã
        all_hashtags = custom_hashtags or []
        all_accounts = custom_accounts or []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        for interest in primary_enums + secondary_enums:
            profile_data = InterestBasedWarmup.INTEREST_PROFILES.get(interest, {})
            all_hashtags.extend(profile_data.get('hashtags', []))
            all_accounts.extend(profile_data.get('accounts', []))
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        all_hashtags = list(set(all_hashtags))
        all_accounts = list(set(all_accounts))
        
        return InterestProfile(
            primary_interests=primary_enums,
            secondary_interests=secondary_enums,
            target_hashtags=all_hashtags,
            target_accounts=all_accounts,
            interaction_weights={
                'like': 0.8, 'comment': 0.3, 'save': 0.6, 'follow': 0.4,
                'view_story': 0.7, 'watch_reel': 0.8
            }
        ) 
 
 
 
 
 
 
# -*- coding: utf-8 -*-

"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
–£–º–Ω—ã–π —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
"""

import logging
import random
import time
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)


class InterestCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    LIFESTYLE = "lifestyle"
    FITNESS = "fitness"
    FOOD = "food"
    TRAVEL = "travel"
    FASHION = "fashion"
    TECHNOLOGY = "technology"
    BUSINESS = "business"
    ART = "art"
    MUSIC = "music"
    PHOTOGRAPHY = "photography"
    BEAUTY = "beauty"
    MOTIVATION = "motivation"
    EDUCATION = "education"
    ENTERTAINMENT = "entertainment"
    GAMING = "gaming"
    SPORTS = "sports"
    HEALTH = "health"
    FINANCE = "finance"
    AUTOMOTIVE = "automotive"
    REAL_ESTATE = "real_estate"


@dataclass
class InterestProfile:
    """–ü—Ä–æ—Ñ–∏–ª—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    primary_interests: List[InterestCategory]  # 2-3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞
    secondary_interests: List[InterestCategory]  # 3-5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
    target_hashtags: List[str]  # –¶–µ–ª–µ–≤—ã–µ —Ö–µ—à—Ç–µ–≥–∏
    target_accounts: List[str]  # –¶–µ–ª–µ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
    interaction_weights: Dict[str, float]  # –í–µ—Å–∞ –¥–ª—è —Ç–∏–ø–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    language: str = "en"  # –Ø–∑—ã–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞


class InterestBasedWarmup:
    """–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
    
    # –ì–æ—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
    INTEREST_PROFILES = {
        InterestCategory.FITNESS: {
            "hashtags": [
                "fitness", "workout", "gym", "bodybuilding", "motivation",
                "fitnessmotivation", "training", "muscle", "strength", "cardio",
                "weightloss", "transformation", "fitspo", "exercise", "sport",
                "healthylifestyle", "nutrition", "protein", "abs", "goals"
            ],
            "accounts": [
                "therock", "mrolympia", "stephencurry30", "kingjames",
                "cristiano", "nike", "underarmour", "gymshark"
            ],
            "interaction_weights": {
                "like": 0.8, "comment": 0.4, "save": 0.6, "follow": 0.3,
                "view_story": 0.7, "watch_reel": 0.9
            }
        },
        
        InterestCategory.FOOD: {
            "hashtags": [
                "food", "foodie", "cooking", "recipe", "delicious",
                "foodphotography", "chef", "restaurant", "foodblogger", "yummy",
                "homemade", "healthy", "vegan", "dessert", "breakfast",
                "dinner", "lunch", "tasty", "foodstagram", "culinary"
            ],
            "accounts": [
                "gordongram", "jamieoliver", "buzzfeedtasty", "foodnetwork",
                "thefoodbabe", "minimalistbaker", "delish", "bonappetitmag"
            ],
            "interaction_weights": {
                "like": 0.9, "comment": 0.5, "save": 0.8, "follow": 0.4,
                "view_story": 0.6, "watch_reel": 0.8
            }
        },
        
        InterestCategory.TRAVEL: {
            "hashtags": [
                "travel", "wanderlust", "adventure", "explore", "vacation",
                "travelgram", "instatravel", "backpacking", "nature", "photography",
                "landscape", "sunset", "beach", "mountains", "city",
                "culture", "trip", "journey", "nomad", "passport"
            ],
            "accounts": [
                "natgeo", "beautifuldestinations", "earthpix", "lonelyplanet",
                "wonderful_places", "backpacker", "hostelworld", "airbnb"
            ],
            "interaction_weights": {
                "like": 0.8, "comment": 0.3, "save": 0.9, "follow": 0.5,
                "view_story": 0.8, "watch_reel": 0.7
            }
        },
        
        InterestCategory.TECHNOLOGY: {
            "hashtags": [
                "technology", "tech", "innovation", "ai", "startup",
                "coding", "programming", "developer", "software", "gadgets",
                "apple", "android", "google", "microsoft", "tesla",
                "blockchain", "cryptocurrency", "iot", "machinelearning", "data"
            ],
            "accounts": [
                "elonmusk", "apple", "google", "microsoft", "tesla",
                "techcrunch", "verge", "wired", "mashable"
            ],
            "interaction_weights": {
                "like": 0.7, "comment": 0.6, "save": 0.7, "follow": 0.6,
                "view_story": 0.5, "watch_reel": 0.6
            }
        },
        
        InterestCategory.BUSINESS: {
            "hashtags": [
                "business", "entrepreneur", "startup", "success", "motivation",
                "leadership", "marketing", "finance", "investment", "money",
                "wealth", "mindset", "goals", "productivity", "networking",
                "innovation", "strategy", "growth", "sales", "ceo"
            ],
            "accounts": [
                "garyvee", "elonmusk", "richardbranson", "oprah", "jeffweiner",
                "forbes", "entrepreneur", "inc", "fastcompany"
            ],
            "interaction_weights": {
                "like": 0.8, "comment": 0.7, "save": 0.8, "follow": 0.7,
                "view_story": 0.6, "watch_reel": 0.5
            }
        }
    }
    
    def __init__(self, account_id: int, client, interest_profile: InterestProfile):
        self.account_id = account_id
        self.client = client
        self.interest_profile = interest_profile
        self.session_stats = {
            'hashtags_explored': [],
            'accounts_visited': [],
            'content_interactions': [],
            'total_actions': 0
        }
    
    def perform_interest_warmup_session(self, duration_minutes: int = 30) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
        logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_minutes} –º–∏–Ω)")
        
        session_start = time.time()
        session_results = {
            'interests_explored': [],
            'actions_performed': {},
            'session_duration': 0,
            'target_achieved': False
        }
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        action_plan = self._plan_interest_session(duration_minutes)
        logger.info(f"üìã –ü–ª–∞–Ω —Å–µ—Å—Å–∏–∏: {action_plan}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –ø–ª–∞–Ω—É
        for action_type, targets in action_plan.items():
            if action_type == 'explore_hashtags':
                result = self._explore_interest_hashtags(targets)
                session_results['actions_performed']['hashtag_exploration'] = result
                
            elif action_type == 'study_accounts':
                result = self._study_target_accounts(targets)
                session_results['actions_performed']['account_study'] = result
                
            elif action_type == 'interact_with_content':
                result = self._interact_with_interest_content(targets)
                session_results['actions_performed']['content_interaction'] = result
                
            elif action_type == 'discover_similar':
                result = self._discover_similar_content()
                session_results['actions_performed']['content_discovery'] = result
        
        session_results['session_duration'] = time.time() - session_start
        session_results['interests_explored'] = list(set(self.session_stats['hashtags_explored']))
        
        logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {session_results['session_duration']:.1f}—Å")
        return session_results
    
    def _plan_interest_session(self, duration_minutes: int) -> Dict[str, List]:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
        
        # –í—ã–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        primary_interest = random.choice(self.interest_profile.primary_interests)
        secondary_interest = random.choice(self.interest_profile.secondary_interests) if self.interest_profile.secondary_interests else None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        primary_data = self.INTEREST_PROFILES.get(primary_interest, {})
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏ –∞–∫–∫–∞—É–Ω—Ç—ã
        target_hashtags = random.sample(
            primary_data.get('hashtags', []), 
            min(3, len(primary_data.get('hashtags', [])))
        )
        
        target_accounts = random.sample(
            primary_data.get('accounts', []), 
            min(2, len(primary_data.get('accounts', [])))
        )
        
        plan = {
            'explore_hashtags': target_hashtags,
            'study_accounts': target_accounts,
            'interact_with_content': [primary_interest.value],
            'discover_similar': ['explore_page']
        }
        
        return plan
    
    def _explore_interest_hashtags(self, hashtags: List[str]) -> int:
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
        explored_count = 0
        
        for hashtag in hashtags:
            try:
                logger.info(f"üîç –ò—Å—Å–ª–µ–¥—É–µ–º —Ö–µ—à—Ç–µ–≥ #{hashtag}")
                
                # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –ø–æ —Ö–µ—à—Ç–µ–≥—É
                medias = self.client.hashtag_medias_recent(hashtag, amount=20)
                
                if medias:
                    # –ò–∑—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                    for i, media in enumerate(medias[:5]):
                        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
                        view_time = random.randint(2, 8)
                        time.sleep(view_time)
                        
                        # –ò–Ω–æ–≥–¥–∞ –ª–∞–π–∫–∞–µ–º (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤)
                        if random.random() < 0.3:  # 30% —à–∞–Ω—Å
                            try:
                                self.client.media_like(media.id)
                                logger.info(f"‚ù§Ô∏è –õ–∞–π–∫–Ω—É–ª–∏ –ø–æ—Å—Ç –ø–æ #{hashtag}")
                                self.session_stats['content_interactions'].append({
                                    'type': 'like',
                                    'hashtag': hashtag,
                                    'media_id': media.id
                                })
                            except:
                                pass
                        
                        # –ò–Ω–æ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                        if random.random() < 0.2:  # 20% —à–∞–Ω—Å
                            try:
                                self.client.media_save(media.id)
                                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–æ—Å—Ç –ø–æ #{hashtag}")
                                self.session_stats['content_interactions'].append({
                                    'type': 'save',
                                    'hashtag': hashtag,
                                    'media_id': media.id
                                })
                            except:
                                pass
                    
                    explored_count += 1
                    self.session_stats['hashtags_explored'].append(hashtag)
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ö–µ—à—Ç–µ–≥–∞–º–∏
                    time.sleep(random.randint(10, 30))
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ #{hashtag}: {e}")
        
        return explored_count
    
    def _study_target_accounts(self, accounts: List[str]) -> int:
        """–ò–∑—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        studied_count = 0
        
        for username in accounts:
            try:
                logger.info(f"üë§ –ò–∑—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç @{username}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
                user_info = self.client.user_info_by_username(username)
                
                if user_info:
                    # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                    time.sleep(random.randint(5, 15))
                    
                    # –ò–∑—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
                    medias = self.client.user_medias(user_info.pk, amount=10)
                    
                    for media in medias[:3]:
                        # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø–æ—Å—Ç
                        time.sleep(random.randint(3, 10))
                        
                        # –ò–Ω–æ–≥–¥–∞ –ª–∞–π–∫–∞–µ–º
                        if random.random() < 0.4:  # 40% —à–∞–Ω—Å
                            try:
                                self.client.media_like(media.id)
                                logger.info(f"‚ù§Ô∏è –õ–∞–π–∫–Ω—É–ª–∏ –ø–æ—Å—Ç @{username}")
                            except:
                                pass
                    
                    # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º Stories –µ—Å–ª–∏ –µ—Å—Ç—å
                    try:
                        stories = self.client.user_stories(user_info.pk)
                        if stories:
                            # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º 1-3 —Å—Ç–æ—Ä–∏—Å
                            stories_to_watch = min(3, len(stories))
                            for i in range(stories_to_watch):
                                time.sleep(random.randint(8, 20))
                                logger.info(f"üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ–ª–∏ —Å—Ç–æ—Ä–∏—Å @{username}")
                    except:
                        pass
                    
                    studied_count += 1
                    self.session_stats['accounts_visited'].append(username)
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                    time.sleep(random.randint(15, 45))
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ @{username}: {e}")
        
        return studied_count
    
    def _interact_with_interest_content(self, interests: List[str]) -> int:
        """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º"""
        interactions = 0
        
        for interest in interests:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞
                interest_enum = InterestCategory(interest)
                hashtags = self.INTEREST_PROFILES.get(interest_enum, {}).get('hashtags', [])
                
                if hashtags:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–µ—à—Ç–µ–≥
                    hashtag = random.choice(hashtags)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –º–µ–¥–∏–∞
                    try:
                        medias = self.client.hashtag_medias_top(hashtag, amount=10)
                    except:
                        medias = self.client.hashtag_medias_recent(hashtag, amount=10)
                    
                    if medias:
                        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º —Å 2-3 –ø–æ—Å—Ç–∞–º–∏
                        for media in medias[:3]:
                            # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º
                            time.sleep(random.randint(5, 15))
                            
                            # –õ–∞–π–∫–∞–µ–º
                            if random.random() < 0.5:
                                try:
                                    self.client.media_like(media.id)
                                    interactions += 1
                                except:
                                    pass
                            
                            # –ò–Ω–æ–≥–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
                            if random.random() < 0.1:  # 10% —à–∞–Ω—Å
                                try:
                                    comments = self._get_interest_comments(interest)
                                    comment = random.choice(comments)
                                    self.client.media_comment(media.id, comment)
                                    logger.info(f"üí¨ –û—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É {interest}")
                                    interactions += 1
                                except:
                                    pass
                            
                            time.sleep(random.randint(3, 8))
            
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º {interest}: {e}")
        
        return interactions
    
    def _discover_similar_content(self) -> int:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ" –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        discoveries = 0
        
        try:
            logger.info("üîç –ò–∑—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ'")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            explore_data = self.client.get_explore_feed()
            
            if explore_data and 'items' in explore_data:
                # –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                for item in explore_data['items'][:5]:
                    if 'media' in item:
                        media = item['media']
                        
                        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä
                        time.sleep(random.randint(3, 12))
                        
                        # –ò–Ω–æ–≥–¥–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º
                        if random.random() < 0.3:
                            try:
                                if 'id' in media:
                                    self.client.media_like(media['id'])
                                    discoveries += 1
                                    logger.info("‚ù§Ô∏è –õ–∞–π–∫–Ω—É–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç")
                            except:
                                pass
                
                logger.info(f"‚úÖ –ò–∑—É—á–∏–ª–∏ {len(explore_data['items'][:5])} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        
        return discoveries
    
    def _get_interest_comments(self, interest: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞"""
        comment_templates = {
            'fitness': [
                "Great workout! üí™", "Amazing transformation! üî•", "Keep it up! üíØ",
                "Inspiring! üôå", "Goals! üéØ", "So motivated! ‚ö°"
            ],
            'food': [
                "Looks delicious! üòã", "Recipe please! üôè", "Yummy! ü§§",
                "Amazing! üî•", "Perfect! üëå", "I need this! üòç"
            ],
            'travel': [
                "Beautiful place! üòç", "Adding to my bucket list! ‚úàÔ∏è", "Amazing view! üåÖ",
                "Wanderlust! üó∫Ô∏è", "Goals! üéØ", "So beautiful! üíï"
            ],
            'technology': [
                "Awesome tech! üöÄ", "Innovation at its best! üí°", "Game changer! üî•",
                "The future is now! ‚ö°", "Impressive! üëè", "Love this! üíª"
            ],
            'business': [
                "Great advice! üí°", "So true! üíØ", "Exactly! üéØ",
                "Inspiring! üôå", "Thank you for sharing! üôè", "Valuable content! üìö"
            ]
        }
        
        return comment_templates.get(interest, [
            "Great content! üëç", "Love this! ‚ù§Ô∏è", "Amazing! ‚ú®",
            "So good! üî•", "Perfect! üíØ", "Awesome! üôå"
        ])
    
    @staticmethod
    def create_interest_profile(primary_interests: List[str], 
                              secondary_interests: List[str] = None,
                              custom_hashtags: List[str] = None,
                              custom_accounts: List[str] = None) -> InterestProfile:
        """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ enum
        primary_enums = []
        for interest in primary_interests:
            try:
                primary_enums.append(InterestCategory(interest.lower()))
            except ValueError:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å: {interest}")
        
        secondary_enums = []
        if secondary_interests:
            for interest in secondary_interests:
                try:
                    secondary_enums.append(InterestCategory(interest.lower()))
                except ValueError:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å: {interest}")
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏ –∞–∫–∫–∞—É–Ω—Ç—ã
        all_hashtags = custom_hashtags or []
        all_accounts = custom_accounts or []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        for interest in primary_enums + secondary_enums:
            profile_data = InterestBasedWarmup.INTEREST_PROFILES.get(interest, {})
            all_hashtags.extend(profile_data.get('hashtags', []))
            all_accounts.extend(profile_data.get('accounts', []))
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        all_hashtags = list(set(all_hashtags))
        all_accounts = list(set(all_accounts))
        
        return InterestProfile(
            primary_interests=primary_enums,
            secondary_interests=secondary_enums,
            target_hashtags=all_hashtags,
            target_accounts=all_accounts,
            interaction_weights={
                'like': 0.8, 'comment': 0.3, 'save': 0.6, 'follow': 0.4,
                'view_story': 0.7, 'watch_reel': 0.8
            }
        ) 
 
 
 
 
 