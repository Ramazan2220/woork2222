#!/usr/bin/env python3
"""
–§–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import asyncio
import time
import logging
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from concurrent.futures import ThreadPoolExecutor

from database.db_manager import get_session, get_instagram_accounts, update_instagram_account
from database.models import InstagramAccount
from instagram.client import get_instagram_client
from instagram.email_utils import get_code_from_generic_email

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
_validator_service_instance = None
_service_lock = threading.Lock()

class AccountValidatorService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    
    def __init__(self, check_interval_minutes: int = 30, 
                 max_threads: int = 1,
                 auto_repair: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            check_interval_minutes: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            max_threads: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            auto_repair: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—ã—Ç–∞—Ç—å—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        """
        self.check_interval = check_interval_minutes * 60  # –í —Å–µ–∫—É–Ω–¥–∞—Ö
        self.max_threads = max_threads
        self.auto_repair = auto_repair
        self.is_running = False
        self._thread = None
        self._executor = ThreadPoolExecutor(max_workers=max_threads)
        self._last_check_results = {}
        
        logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {check_interval_minutes} –º–∏–Ω)")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        if self.is_running:
            logger.warning("–°–µ—Ä–≤–∏—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        self._thread = threading.Thread(target=self._run_background_loop, daemon=True)
        self._thread.start()
        logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        self.is_running = False
        if self._thread:
            self._thread.join(timeout=5)
        self._executor.shutdown(wait=True)
        logger.info("üõë –§–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _run_background_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        initial_delay = 120  # 2 –º–∏–Ω—É—Ç—ã –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {initial_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
        time.sleep(initial_delay)
        
        consecutive_errors = 0
        max_consecutive_errors = 3
        
        while self.is_running:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
                results = self._check_all_accounts()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self._last_check_results = results
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                valid_count = len(results.get('valid', []))
                invalid_count = len(results.get('invalid', []))
                repaired_count = len(results.get('repaired', []))
                
                logger.info(
                    f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                    f"–≤–∞–ª–∏–¥–Ω—ã—Ö: {valid_count}, "
                    f"–Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {invalid_count}, "
                    f"–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {repaired_count}"
                )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                consecutive_errors = 0
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–º–∏–Ω–∏–º—É–º 30 –º–∏–Ω—É—Ç)
                actual_interval = max(self.check_interval, 1800)  # –ú–∏–Ω–∏–º—É–º 30 –º–∏–Ω—É—Ç
                logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {actual_interval // 60} –º–∏–Ω—É—Ç")
                time.sleep(actual_interval)
                
            except Exception as e:
                consecutive_errors += 1
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (#{consecutive_errors}): {e}")
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
                if consecutive_errors >= max_consecutive_errors:
                    error_delay = 600  # 10 –º–∏–Ω—É—Ç –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
                    logger.warning(f"‚ö†Ô∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ {error_delay // 60} –º–∏–Ω—É—Ç")
                else:
                    error_delay = 120  # 2 –º–∏–Ω—É—Ç—ã –ø—Ä–∏ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
                
                time.sleep(error_delay)
    
    def _check_all_accounts(self) -> Dict[str, List]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        results = {
            'valid': [],
            'invalid': [],
            'repaired': [],
            'failed_repair': []
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            accounts = get_instagram_accounts()
            if not accounts:
                logger.warning("–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return results
            
            logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
            for i, account in enumerate(accounts):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ –ª–∏ –º—ã —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–¥–∞–≤–Ω–æ
                    if hasattr(account, 'last_check') and account.last_check:
                        time_since_check = (datetime.now() - account.last_check).total_seconds()
                        if time_since_check < 1800:  # –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 30 –º–∏–Ω—É—Ç
                            logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º @{account.username}, –ø—Ä–æ–≤–µ—Ä–µ–Ω {time_since_check//60:.0f} –º–∏–Ω –Ω–∞–∑–∞–¥")
                            results['valid'].append(account)  # –°—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
                            continue
                    
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {i+1}/{len(accounts)}: @{account.username}")
                    is_valid, was_repaired = self._check_account(account)
                    
                    if is_valid:
                        if was_repaired:
                            results['repaired'].append(account)
                        else:
                            results['valid'].append(account)
                    else:
                        results['invalid'].append(account)
                        if self.auto_repair:
                            results['failed_repair'].append(account)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 30-60 —Å–µ–∫—É–Ω–¥)
                    if i < len(accounts) - 1:
                        import random
                        delay = random.randint(30, 60)  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 30-60 —Å–µ–∫—É–Ω–¥
                        logger.debug(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
                        time.sleep(delay)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {account.username}: {e}")
                    results['invalid'].append(account)
            
            return results
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            return results
    
    def _check_account(self, account: InstagramAccount) -> Tuple[bool, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Returns:
            (is_valid, was_repaired) - –≤–∞–ª–∏–¥–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∏ –±—ã–ª –ª–∏ –æ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        """
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ - –µ—Å–ª–∏ –æ–Ω –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if hasattr(account, 'status') and account.status == 'problematic':
                logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç {account.username}")
                return False, False
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç
            client = get_instagram_client(account.id)
            
            if client:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                try:
                    user_info = client.user_info(client.user_id)
                    if user_info:
                        logger.info(f"‚úÖ {account.username} - –≤–∞–ª–∏–¥–Ω—ã–π")
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        update_instagram_account(
                            account.id, 
                            is_active=True,
                            last_error=None,
                            last_check=datetime.now()
                        )
                        return True, False
                except Exception as api_error:
                    logger.warning(f"‚ö†Ô∏è {account.username} - –æ—à–∏–±–∫–∞ API: {api_error}")
                    
                    # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —É –Ω–∞—Å –µ—Å—Ç—å email
                    if self.auto_repair and self._needs_verification(str(api_error)):
                        if account.email and account.email_password:
                            logger.info(f"üîß –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {account.username}")
                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                            if self._repair_account(account):
                                return True, True
                            else:
                                # –ï—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {account.username}, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π")
                                update_instagram_account(
                                    account.id, 
                                    is_active=False,
                                    status='problematic',
                                    last_error="–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ challenge",
                                    last_check=datetime.now()
                                )
                                return False, False
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ - –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
            logger.warning(f"‚ùå {account.username} - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π")
            update_instagram_account(
                account.id, 
                is_active=False,
                last_error="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                last_check=datetime.now()
            )
            return False, False
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {account.username}: {e}")
            update_instagram_account(
                account.id, 
                is_active=False,
                last_error=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                last_check=datetime.now()
            )
            return False, False
    
    def _needs_verification(self, error_message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"""
        verification_keywords = [
            'challenge',
            'verification',
            'verify',
            'confirm',
            'code',
            'checkpoint'
        ]
        error_lower = error_message.lower()
        return any(keyword in error_lower for keyword in verification_keywords)
    
    def _repair_account(self, account: InstagramAccount) -> bool:
        """
        –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ email –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
        """
        try:
            logger.info(f"üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            from instagram.client import remove_instagram_account
            import os
            session_file = os.path.join("accounts", str(account.id), "session.json")
            if os.path.exists(session_file):
                try:
                    os.remove(session_file)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è {account.username}")
                except:
                    pass
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ
            # –§—É–Ω–∫—Ü–∏—è get_instagram_client –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ email
            client = get_instagram_client(account.id)
            
            if client:
                try:
                    user_info = client.user_info(client.user_id)
                    if user_info:
                        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.username} —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        update_instagram_account(
                            account.id,
                            is_active=True,
                            last_error=None,
                            last_check=datetime.now()
                        )
                        return True
                except:
                    pass
            
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {account.username}")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ {account.username}: {e}")
            return False
    
    def get_last_results(self) -> Dict[str, List]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        return self._last_check_results.copy()
    
    def check_now(self) -> Dict[str, List]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        return self._check_all_accounts()

    def check_account_validity(self, account: InstagramAccount) -> Tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
        
        Returns:
            (is_valid, error_message)
        """
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ @{account.username}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç
            client = get_instagram_client(account.id)
            
            if not client:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç –¥–ª—è @{account.username}")
                return False, "Failed to create client"
            
            # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = client.user_info(client.user_id)
                
                # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é - –∞–∫–∫–∞—É–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã–π
                logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{account.username} –≤–∞–ª–∏–¥–Ω—ã–π")
                return True, None
                
            except Exception as e:
                error_msg = str(e).lower()
                
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
                if "login_required" in error_msg:
                    logger.warning(f"‚ö†Ô∏è @{account.username} - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥")
                    return False, "login_required"
                elif "challenge_required" in error_msg:
                    logger.warning(f"‚ö†Ô∏è @{account.username} - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è")
                    return False, "challenge_required"
                elif "'data'" in error_msg or "keyerror" in error_msg:
                    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                    try:
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å timeline –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                        client.get_timeline_feed()
                        logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{account.username} –≤–∞–ª–∏–¥–Ω—ã–π (—á–µ—Ä–µ–∑ timeline)")
                        return True, None
                    except Exception as timeline_error:
                        logger.warning(f"‚ö†Ô∏è @{account.username} - –æ—à–∏–±–∫–∞ API: {str(timeline_error)[:100]}")
                        return False, f"api_error: {str(timeline_error)[:50]}"
                else:
                    logger.warning(f"‚ö†Ô∏è @{account.username} - –æ—à–∏–±–∫–∞: {error_msg[:100]}")
                    return False, error_msg[:100]
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ @{account.username}: {e}")
            return False, f"critical_error: {str(e)[:50]}"


def get_validator_service() -> AccountValidatorService:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    global _validator_service_instance
    if _validator_service_instance is None:
        with _service_lock:
            if _validator_service_instance is None:
                _validator_service_instance = AccountValidatorService()
    return _validator_service_instance


def start_account_validator(check_interval_minutes: int = 30,
                          max_threads: int = 1,
                          auto_repair: bool = True) -> AccountValidatorService:
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    
    Args:
        check_interval_minutes: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
        max_threads: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
        auto_repair: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    """
    global _validator_service_instance
    
    with _service_lock:
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if _validator_service_instance and _validator_service_instance.is_running:
            logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä")
            return _validator_service_instance
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not _validator_service_instance:
            _validator_service_instance = AccountValidatorService(
                check_interval_minutes=check_interval_minutes,
                max_threads=max_threads,
                auto_repair=auto_repair
            )
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            _validator_service_instance.check_interval = check_interval_minutes * 60
            _validator_service_instance.max_threads = max_threads
            _validator_service_instance.auto_repair = auto_repair
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        _validator_service_instance.start()
        logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
        
        return _validator_service_instance


def stop_account_validator():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å"""
    service = get_validator_service()
    service.stop() 