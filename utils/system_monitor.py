#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
–ì–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —à–∫–∞–ª–æ–π 0-100% –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
"""

import psutil
import time
import logging
import threading
from typing import Dict, Tuple, List
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class SystemMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    cpu_percent: float
    memory_percent: float
    disk_io_read: float
    disk_io_write: float
    network_io_sent: float
    network_io_recv: float
    temperature: float
    load_average: float

@dataclass
class WorkloadLimits:
    """–õ–∏–º–∏—Ç—ã —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏"""
    max_workers: int
    batch_size: int
    delay_between_batches: float
    timeout_multiplier: float
    description: str

@dataclass
class LoadLevel:
    """–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    name: str
    min_load: int  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ (0-100)
    max_load: int  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ (0-100)
    emoji: str
    color: str
    workload: WorkloadLimits

class SystemResourceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –≥–∏–±–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self, hardware_profile: str = "macbook"):
        self.is_monitoring = False
        self.monitor_thread = None
        self.current_metrics = None
        self.metrics_lock = threading.Lock()
        self.hardware_profile = hardware_profile
        
        # –ó–∞—â–∏—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã - —Å–∏—Å—Ç–µ–º–∞ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è
        self.safety_limits = {
            "max_cpu_percent": 95,      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π CPU 95% (–±—ã–ª–æ 80%)
            "max_memory_percent": 92,   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å 92% (–±—ã–ª–æ 85%)
            "max_load_average": 25.0,   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ 25.0 (–±—ã–ª–æ 12.0) - –¥–ª—è MacBook —Å –º–Ω–æ–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
            "max_temperature": 80,      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 80¬∞C
            "emergency_cooldown": 30,   # –í—Ä–µ–º—è –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è 30 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 60)
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∂–µ–ª–µ–∑–∞
        self.hardware_profiles = {
            "macbook": {
                "cpu_weight": 0.4,      # –í—ã—Å–æ–∫–∏–π –≤–µ—Å CPU (MacBook –±—ã—Å—Ç—Ä–æ –≥—Ä–µ–µ—Ç—Å—è)
                "memory_weight": 0.3,   # –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å –ø–∞–º—è—Ç–∏
                "temp_weight": 0.2,     # –í–∞–∂–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                "load_weight": 0.1,     # –ù–∏–∑–∫–∏–π –≤–µ—Å load average
                "temp_critical": 85,    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è MacBook
            },
            "server": {
                "cpu_weight": 0.3,      # –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å CPU (—Å–µ—Ä–≤–µ—Ä –≤—ã–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É)
                "memory_weight": 0.4,   # –í—ã—Å–æ–∫–∏–π –≤–µ—Å –ø–∞–º—è—Ç–∏ (–º–Ω–æ–≥–æ RAM)
                "temp_weight": 0.1,     # –ù–∏–∑–∫–∏–π –≤–µ—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—Ö–æ—Ä–æ—à–µ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ)
                "load_weight": 0.2,     # –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å load average
                "temp_critical": 95,    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
            },
            "vps": {
                "cpu_weight": 0.35,     # –°—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∏–π –≤–µ—Å CPU
                "memory_weight": 0.35,  # –°—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∏–π –≤–µ—Å –ø–∞–º—è—Ç–∏
                "temp_weight": 0.05,    # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –≤–µ—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è)
                "load_weight": 0.25,    # –í—ã—Å–æ–∫–∏–π –≤–µ—Å load average
                "temp_critical": 90,    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è VPS
            }
        }
        
        # 8 —É—Ä–æ–≤–Ω–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã (0-100%)
        self.load_levels = [
            LoadLevel(
                name="–ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø",
                min_load=0, max_load=10,
                emoji="üü¢", color="green",
                workload=WorkloadLimits(
                    max_workers=8, batch_size=12, delay_between_batches=2.0,
                    timeout_multiplier=0.6, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞"
                )
            ),
            LoadLevel(
                name="–û–ß–ï–ù–¨ –ù–ò–ó–ö–ê–Ø", 
                min_load=11, max_load=20,
                emoji="üü¢", color="green",
                workload=WorkloadLimits(
                    max_workers=6, batch_size=10, delay_between_batches=3.0,
                    timeout_multiplier=0.7, description="–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞"
                )
            ),
            LoadLevel(
                name="–ù–ò–ó–ö–ê–Ø",
                min_load=21, max_load=35,
                emoji="üü°", color="yellow", 
                workload=WorkloadLimits(
                    max_workers=5, batch_size=8, delay_between_batches=5.0,
                    timeout_multiplier=0.8, description="–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞"
                )
            ),
            LoadLevel(
                name="–£–ú–ï–†–ï–ù–ù–ê–Ø",
                min_load=36, max_load=50,
                emoji="üü°", color="yellow",
                workload=WorkloadLimits(
                    max_workers=4, batch_size=6, delay_between_batches=8.0,
                    timeout_multiplier=1.0, description="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞"
                )
            ),
            LoadLevel(
                name="–°–†–ï–î–ù–Ø–Ø",
                min_load=51, max_load=65,
                emoji="üü†", color="orange",
                workload=WorkloadLimits(
                    max_workers=3, batch_size=5, delay_between_batches=12.0,
                    timeout_multiplier=1.2, description="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞"
                )
            ),
            LoadLevel(
                name="–ü–û–í–´–®–ï–ù–ù–ê–Ø",
                min_load=66, max_load=75,
                emoji="üü†", color="orange",
                workload=WorkloadLimits(
                    max_workers=2, batch_size=4, delay_between_batches=18.0,
                    timeout_multiplier=1.5, description="–°–Ω–∏–∂–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞"
                )
            ),
            LoadLevel(
                name="–í–´–°–û–ö–ê–Ø",
                min_load=76, max_load=85,
                emoji="üî¥", color="red",
                workload=WorkloadLimits(
                    max_workers=2, batch_size=3, delay_between_batches=25.0,
                    timeout_multiplier=2.0, description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞"
                )
            ),
            LoadLevel(
                name="–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø",
                min_load=86, max_load=100,
                emoji="üî¥", color="red",
                workload=WorkloadLimits(
                    max_workers=1, batch_size=1, delay_between_batches=60.0,
                    timeout_multiplier=3.0, description="–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê - –∑–∞—â–∏—Ç–∞ —Å–∏—Å—Ç–µ–º—ã"
                )
            )
        ]
        
        # –ó–∞—â–∏—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ safety_limits
        self.emergency_level = LoadLevel(
            name="–ó–ê–©–ò–¢–ù–´–ô –†–ï–ñ–ò–ú",
            min_load=101, max_load=200,  # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            emoji="üö®", color="emergency",
            workload=WorkloadLimits(
                max_workers=1, batch_size=1, delay_between_batches=120.0,
                timeout_multiplier=5.0, description="–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê - —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞"
            )
        )
        
                 # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è cooldown
        self.last_emergency_time = 0
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞ - —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–Ω–∏–∂–µ–Ω–∏—è (0-100%)
        self.adaptive_reduction_level = 0  # 0 = –Ω–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏—è, 100 = –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
        self.last_adaptation_time = 0
        self.adaptation_interval = 30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã
        self.adaptive_settings = {
            "warning_threshold": 0.85,      # –ü—Ä–∏ 85% –æ—Ç –ª–∏–º–∏—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∏–∂–µ–Ω–∏–µ
            "critical_threshold": 0.95,     # –ü—Ä–∏ 95% –æ—Ç –ª–∏–º–∏—Ç–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
            "adaptation_step": 10,          # –®–∞–≥ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ (10%)
            "recovery_step": 5,             # –®–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (5%)
            "max_reduction": 80,            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ (80%)
            "stability_time": 60,           # –í—Ä–µ–º—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        }
    
    def set_hardware_profile(self, profile: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∂–µ–ª–µ–∑–∞"""
        if profile in self.hardware_profiles:
            self.hardware_profile = profile
            logger.info(f"üñ•Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –∂–µ–ª–µ–∑–∞: {profile}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∂–µ–ª–µ–∑–∞: {profile}")
    
    def check_safety_limits(self, metrics: SystemMetrics) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏ –∑–∞—â–∏—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã"""
        if not metrics:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ª–∏–º–∏—Ç
        limits_exceeded = []
        
        if metrics.cpu_percent > self.safety_limits["max_cpu_percent"]:
            limits_exceeded.append(f"CPU: {metrics.cpu_percent:.1f}% > {self.safety_limits['max_cpu_percent']}%")
        
        if metrics.memory_percent > self.safety_limits["max_memory_percent"]:
            limits_exceeded.append(f"RAM: {metrics.memory_percent:.1f}% > {self.safety_limits['max_memory_percent']}%")
        
        if metrics.load_average > self.safety_limits["max_load_average"]:
            limits_exceeded.append(f"Load: {metrics.load_average:.2f} > {self.safety_limits['max_load_average']}")
        
        if metrics.temperature > 0 and metrics.temperature > self.safety_limits["max_temperature"]:
            limits_exceeded.append(f"Temp: {metrics.temperature:.1f}¬∞C > {self.safety_limits['max_temperature']}¬∞C")
        
        if limits_exceeded:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è
            self.last_emergency_time = time.time()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ
            logger.critical(f"üö® –ü–†–ï–í–´–®–ï–ù–´ –ó–ê–©–ò–¢–ù–´–ï –õ–ò–ú–ò–¢–´: {', '.join(limits_exceeded)}")
            logger.critical(f"üö® –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ó–ê–©–ò–¢–ù–´–ô –†–ï–ñ–ò–ú - —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∞")
            
            return True
        
        return False
    
    def is_in_cooldown(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≤ —Ä–µ–∂–∏–º–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è"""
        if self.last_emergency_time == 0:
            return False
        
        cooldown_remaining = self.safety_limits["emergency_cooldown"] - (time.time() - self.last_emergency_time)
        return cooldown_remaining > 0
    
    def calculate_system_stress(self, metrics: SystemMetrics) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π —Å—Ç—Ä–µ—Å—Å —Å–∏—Å—Ç–µ–º—ã (0.0 - 1.0)"""
        if not metrics:
            return 0.0
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∂–¥—É—é –º–µ—Ç—Ä–∏–∫—É –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É 0-1 –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ª–∏–º–∏—Ç–æ–≤
        cpu_stress = min(1.0, metrics.cpu_percent / self.safety_limits["max_cpu_percent"])
        memory_stress = min(1.0, metrics.memory_percent / self.safety_limits["max_memory_percent"])
        load_stress = min(1.0, metrics.load_average / self.safety_limits["max_load_average"])
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Å—Ç—Ä–µ—Å—Å (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        temp_stress = 0.0
        if metrics.temperature > 0:
            temp_stress = min(1.0, metrics.temperature / self.safety_limits["max_temperature"])
        
        # –ü—Ä–æ—Ñ–∏–ª—å –∂–µ–ª–µ–∑–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        profile_weights = self.hardware_profiles[self.hardware_profile]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å
        total_stress = (
            cpu_stress * profile_weights["cpu_weight"] +
            memory_stress * profile_weights["memory_weight"] +
            temp_stress * profile_weights["temp_weight"] +
            load_stress * profile_weights["load_weight"]
        )
        
        return min(1.0, total_stress)
    
    def adapt_protection_level(self, metrics: SystemMetrics) -> int:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–µ—Å—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
        if current_time - self.last_adaptation_time < self.adaptation_interval:
            return self.adaptive_reduction_level
        
        self.last_adaptation_time = current_time
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–µ—Å—Å
        stress_level = self.calculate_system_stress(metrics)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if stress_level >= self.adaptive_settings["critical_threshold"]:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å - –±—ã—Å—Ç—Ä–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
            increase = self.adaptive_settings["adaptation_step"] * 2
            self.adaptive_reduction_level = min(
                self.adaptive_settings["max_reduction"],
                self.adaptive_reduction_level + increase
            )
            logger.warning(f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –°–¢–†–ï–°–° ({stress_level:.1%}) - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É –¥–æ {self.adaptive_reduction_level}%")
            
        elif stress_level >= self.adaptive_settings["warning_threshold"]:
            # –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
            increase = self.adaptive_settings["adaptation_step"]
            self.adaptive_reduction_level = min(
                self.adaptive_settings["max_reduction"],
                self.adaptive_reduction_level + increase
            )
            logger.info(f"üü° –ü–û–í–´–®–ï–ù–ù–´–ô –°–¢–†–ï–°–° ({stress_level:.1%}) - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞—â–∏—Ç—É –¥–æ {self.adaptive_reduction_level}%")
            
        else:
            # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å - –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            if self.adaptive_reduction_level > 0:
                decrease = self.adaptive_settings["recovery_step"]
                self.adaptive_reduction_level = max(0, self.adaptive_reduction_level - decrease)
                logger.info(f"üü¢ –ù–û–†–ú–ê–õ–¨–ù–´–ô –°–¢–†–ï–°–° ({stress_level:.1%}) - —Å–Ω–∏–∂–∞–µ–º –∑–∞—â–∏—Ç—É –¥–æ {self.adaptive_reduction_level}%")
        
        return self.adaptive_reduction_level
    
    def apply_adaptive_reduction(self, base_workload: WorkloadLimits, reduction_percent: int) -> WorkloadLimits:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –∫ –±–∞–∑–æ–≤—ã–º –ª–∏–º–∏—Ç–∞–º"""
        if reduction_percent == 0:
            return base_workload
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–Ω–∏–∂–µ–Ω–∏—è (0.0 - 1.0)
        reduction_factor = reduction_percent / 100.0
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–Ω–∏–∂–µ–Ω–∏–µ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        reduced_workers = max(1, int(base_workload.max_workers * (1 - reduction_factor * 0.8)))
        reduced_batch = max(1, int(base_workload.batch_size * (1 - reduction_factor * 0.6)))
        increased_delay = base_workload.delay_between_batches * (1 + reduction_factor * 2.0)
        increased_timeout = base_workload.timeout_multiplier * (1 + reduction_factor * 1.5)
        
        return WorkloadLimits(
            max_workers=reduced_workers,
            batch_size=reduced_batch,
            delay_between_batches=increased_delay,
            timeout_multiplier=increased_timeout,
            description=f"{base_workload.description} (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ —Å–Ω–∏–∂–µ–Ω–æ –Ω–∞ {reduction_percent}%)"
        )
    
    def get_system_metrics(self) -> SystemMetrics:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # CPU
            cpu_percent = psutil.cpu_percent(interval=1)
            
            # –ü–∞–º—è—Ç—å
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            
            # –î–∏—Å–∫ I/O
            disk_io = psutil.disk_io_counters()
            disk_io_read = disk_io.read_bytes / (1024 * 1024) if disk_io else 0  # MB
            disk_io_write = disk_io.write_bytes / (1024 * 1024) if disk_io else 0  # MB
            
            # –°–µ—Ç—å I/O
            net_io = psutil.net_io_counters()
            network_io_sent = net_io.bytes_sent / (1024 * 1024) if net_io else 0  # MB
            network_io_recv = net_io.bytes_recv / (1024 * 1024) if net_io else 0  # MB
            
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            temperature = self._get_temperature()
            
            # –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞
            load_average = psutil.getloadavg()[0] if hasattr(psutil, 'getloadavg') else 0
            
            return SystemMetrics(
                cpu_percent=cpu_percent,
                memory_percent=memory_percent,
                disk_io_read=disk_io_read,
                disk_io_write=disk_io_write,
                network_io_sent=network_io_sent,
                network_io_recv=network_io_recv,
                temperature=temperature,
                load_average=load_average
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return None
    
    def _get_temperature(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)"""
        try:
            if hasattr(psutil, "sensors_temperatures"):
                temps = psutil.sensors_temperatures()
                if temps:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                    for name, entries in temps.items():
                        if entries:
                            return entries[0].current
            return 0.0
        except:
            return 0.0
    
    def calculate_system_load_percentage(self) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã (0-100%)"""
        metrics = self.get_system_metrics()
        if not metrics:
            return 50  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback
        
        with self.metrics_lock:
            self.current_metrics = metrics
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∂–µ–ª–µ–∑–∞
        profile = self.hardware_profiles.get(self.hardware_profile, self.hardware_profiles["macbook"])
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫ —à–∫–∞–ª–µ 0-100
        cpu_load = min(metrics.cpu_percent, 100)
        memory_load = min(metrics.memory_percent, 100)
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (0-100% –æ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã)
        temp_load = 0
        if metrics.temperature > 0:
            temp_load = min((metrics.temperature / profile["temp_critical"]) * 100, 100)
        
        # Load average –Ω–∞–≥—Ä—É–∑–∫–∞ (–ø—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º)
        # –î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–∏—Å—Ç–µ–º load average > 4 —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        load_avg_load = min((metrics.load_average / 4.0) * 100, 100)
        
        # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ–±—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        total_load = (
            cpu_load * profile["cpu_weight"] +
            memory_load * profile["memory_weight"] +
            temp_load * profile["temp_weight"] +
            load_avg_load * profile["load_weight"]
        )
        
        return int(min(max(total_load, 0), 100))
    
    def get_load_level(self) -> LoadLevel:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≥—Ä—É–∑–∫–∏ —Å —É—á–µ—Ç–æ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã"""
        metrics = self.current_metrics
        if not metrics:
            metrics = self.get_system_metrics()
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ª–∏–º–∏—Ç—ã (–ø–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞)
        if metrics and self.check_safety_limits(metrics):
            logger.critical("üö® –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ó–ê–©–ò–¢–ù–´–ô –†–ï–ñ–ò–ú - –ø—Ä–µ–≤—ã—à–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ª–∏–º–∏—Ç—ã!")
            return self.emergency_level
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
        if self.is_in_cooldown():
            cooldown_remaining = self.safety_limits["emergency_cooldown"] - (time.time() - self.last_emergency_time)
            logger.warning(f"‚ùÑÔ∏è –†–ï–ñ–ò–ú –û–•–õ–ê–ñ–î–ï–ù–ò–Ø: –æ—Å—Ç–∞–ª–æ—Å—å {cooldown_remaining:.0f}—Å –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            return self.emergency_level
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞ (–ø–ª–∞–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ)
        reduction_level = self.adapt_protection_level(metrics)
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 4: –û–±—ã—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏
        load_percentage = self.calculate_system_load_percentage()
        
        # –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        base_level = None
        for level in self.load_levels:
            if level.min_load <= load_percentage <= level.max_load:
                base_level = level
                break
        
        if not base_level:
            base_level = self.load_levels[4]  # –°–†–ï–î–ù–Ø–Ø
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
        if reduction_level > 0:
            adapted_workload = self.apply_adaptive_reduction(base_level.workload, reduction_level)
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            adapted_level = LoadLevel(
                name=f"{base_level.name} (‚ö°{reduction_level}%)",
                min_load=base_level.min_load,
                max_load=base_level.max_load,
                emoji="‚ö°",
                color="adaptive",
                workload=adapted_workload
            )
            
            return adapted_level
        
        return base_level
    
    def get_workload_limits(self) -> WorkloadLimits:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞–≥—Ä—É–∑–∫–∏"""
        level = self.get_load_level()
        return level.workload
    
    def get_system_status(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        metrics = self.current_metrics
        if not metrics:
            metrics = self.get_system_metrics()
        
        if not metrics:
            return {"status": "unknown", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏"}
        
        load_percentage = self.calculate_system_load_percentage()
        level = self.get_load_level()
        limits = level.workload
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—â–∏—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
        safety_status = "OK"
        safety_warnings = []
        
        if metrics:
            if metrics.cpu_percent > self.safety_limits["max_cpu_percent"] * 0.9:  # 90% –æ—Ç –ª–∏–º–∏—Ç–∞
                safety_warnings.append("CPU –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ª–∏–º–∏—Ç—É")
            if metrics.memory_percent > self.safety_limits["max_memory_percent"] * 0.9:
                safety_warnings.append("RAM –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ª–∏–º–∏—Ç—É")
            if metrics.load_average > self.safety_limits["max_load_average"] * 0.9:
                safety_warnings.append("Load –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ª–∏–º–∏—Ç—É")
            if metrics.temperature > 0 and metrics.temperature > self.safety_limits["max_temperature"] * 0.9:
                safety_warnings.append("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∫ –ª–∏–º–∏—Ç—É")
        
        if safety_warnings:
            safety_status = "WARNING"
        
        if level.name == "–ó–ê–©–ò–¢–ù–´–ô –†–ï–ñ–ò–ú":
            safety_status = "EMERGENCY"
        elif self.adaptive_reduction_level > 0:
            safety_status = "ADAPTIVE"
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–µ—Å—Å —Å–∏—Å—Ç–µ–º—ã
        stress_level = self.calculate_system_stress(metrics) if metrics else 0.0
        
        return {
            "load_percentage": load_percentage,
            "level": level,
            "hardware_profile": self.hardware_profile,
            "status": level.name.lower().replace(" ", "_"),
            "emoji": level.emoji,
            "message": f"{level.emoji} –ù–ê–ì–†–£–ó–ö–ê –°–ò–°–¢–ï–ú–´: {load_percentage}% ({level.name}) - {limits.description}",
            "safety_status": safety_status,
            "safety_warnings": safety_warnings,
            "is_in_cooldown": self.is_in_cooldown(),
            "cooldown_remaining": max(0, self.safety_limits["emergency_cooldown"] - (time.time() - self.last_emergency_time)) if self.last_emergency_time > 0 else 0,
            "adaptive_protection": {
                "reduction_level": self.adaptive_reduction_level,
                "stress_level": stress_level,
                "is_active": self.adaptive_reduction_level > 0,
                "next_adaptation": max(0, self.adaptation_interval - (time.time() - self.last_adaptation_time)) if self.last_adaptation_time > 0 else 0,
            },
            "metrics": {
                "cpu": f"{metrics.cpu_percent:.1f}%",
                "memory": f"{metrics.memory_percent:.1f}%",
                "temperature": f"{metrics.temperature:.1f}¬∞C" if metrics.temperature > 0 else "N/A",
                "load_avg": f"{metrics.load_average:.2f}",
            },
            "safety_limits": {
                "max_cpu": f"{self.safety_limits['max_cpu_percent']}%",
                "max_memory": f"{self.safety_limits['max_memory_percent']}%",
                "max_load": f"{self.safety_limits['max_load_average']:.1f}",
                "max_temp": f"{self.safety_limits['max_temperature']}¬∞C",
                "cooldown": f"{self.safety_limits['emergency_cooldown']}s",
            },
            "limits": {
                "max_workers": limits.max_workers,
                "batch_size": limits.batch_size,
                "delay_between_batches": f"{limits.delay_between_batches:.1f}s",
                "timeout_multiplier": f"{limits.timeout_multiplier:.1f}x",
            }
        }
    
    def start_monitoring(self, interval: float = 10.0):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_monitoring:
            return
        
        self.is_monitoring = True
        self.monitor_thread = threading.Thread(
            target=self._monitor_loop,
            args=(interval,),
            daemon=True
        )
        self.monitor_thread.start()
        logger.info(f"üñ•Ô∏è –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (–ø—Ä–æ—Ñ–∏–ª—å: {self.hardware_profile})")
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.is_monitoring = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=5.0)
        logger.info("üñ•Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _monitor_loop(self, interval: float):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_monitoring:
            try:
                metrics = self.get_system_metrics()
                if metrics:
                    with self.metrics_lock:
                        self.current_metrics = metrics
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                    if int(time.time()) % 60 == 0:
                        status = self.get_system_status()
                        logger.info(f"üñ•Ô∏è {status['message']} | "
                                  f"CPU: {status['metrics']['cpu']} | "
                                  f"RAM: {status['metrics']['memory']} | "
                                  f"Temp: {status['metrics']['temperature']}")
                
                time.sleep(interval)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(interval)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
system_monitor = SystemResourceMonitor()

def set_hardware_profile(profile: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∂–µ–ª–µ–∑–∞"""
    system_monitor.set_hardware_profile(profile)

def get_adaptive_limits() -> WorkloadLimits:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞–≥—Ä—É–∑–∫–∏"""
    return system_monitor.get_workload_limits()

def get_system_status() -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    return system_monitor.get_system_status()

def get_system_load_percentage() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    return system_monitor.calculate_system_load_percentage()

def start_system_monitoring():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    system_monitor.start_monitoring()

def stop_system_monitoring():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    system_monitor.stop_monitoring()

def set_safety_limits(max_cpu=None, max_memory=None, max_load=None, max_temp=None, cooldown=None):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞—â–∏—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã"""
    if max_cpu is not None:
        system_monitor.safety_limits["max_cpu_percent"] = max_cpu
    if max_memory is not None:
        system_monitor.safety_limits["max_memory_percent"] = max_memory
    if max_load is not None:
        system_monitor.safety_limits["max_load_average"] = max_load
    if max_temp is not None:
        system_monitor.safety_limits["max_temperature"] = max_temp
    if cooldown is not None:
        system_monitor.safety_limits["emergency_cooldown"] = cooldown
    
    logger.info(f"üõ°Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞—â–∏—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã: CPU‚â§{system_monitor.safety_limits['max_cpu_percent']}%, "
               f"RAM‚â§{system_monitor.safety_limits['max_memory_percent']}%, "
               f"Load‚â§{system_monitor.safety_limits['max_load_average']}, "
               f"Temp‚â§{system_monitor.safety_limits['max_temperature']}¬∞C")

def get_safety_limits():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞—â–∏—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã"""
    return system_monitor.safety_limits.copy()

def force_cooldown():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è"""
    system_monitor.last_emergency_time = time.time()
    logger.warning("‚ùÑÔ∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è")

def reset_cooldown():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ä–µ–∂–∏–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è"""
    system_monitor.last_emergency_time = 0
    logger.info("‚úÖ –†–µ–∂–∏–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω")

def get_adaptive_protection_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç–µ"""
    return {
        "reduction_level": system_monitor.adaptive_reduction_level,
        "settings": system_monitor.adaptive_settings.copy(),
        "last_adaptation": system_monitor.last_adaptation_time,
        "next_adaptation": max(0, system_monitor.adaptation_interval - (time.time() - system_monitor.last_adaptation_time)) if system_monitor.last_adaptation_time > 0 else 0,
    }

def set_adaptive_protection_settings(warning_threshold=None, critical_threshold=None, 
                                   adaptation_step=None, recovery_step=None, 
                                   max_reduction=None, adaptation_interval=None):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã"""
    if warning_threshold is not None:
        system_monitor.adaptive_settings["warning_threshold"] = warning_threshold
    if critical_threshold is not None:
        system_monitor.adaptive_settings["critical_threshold"] = critical_threshold
    if adaptation_step is not None:
        system_monitor.adaptive_settings["adaptation_step"] = adaptation_step
    if recovery_step is not None:
        system_monitor.adaptive_settings["recovery_step"] = recovery_step
    if max_reduction is not None:
        system_monitor.adaptive_settings["max_reduction"] = max_reduction
    if adaptation_interval is not None:
        system_monitor.adaptation_interval = adaptation_interval
    
    logger.info(f"‚ö° –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã: {system_monitor.adaptive_settings}")

def reset_adaptive_protection():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∑–∞—â–∏—Ç—É"""
    system_monitor.adaptive_reduction_level = 0
    system_monitor.last_adaptation_time = 0
    logger.info("‚ö° –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞")

def force_adaptive_protection(reduction_level: int):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã"""
    system_monitor.adaptive_reduction_level = max(0, min(100, reduction_level))
    system_monitor.last_adaptation_time = time.time()
    logger.info(f"‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –∑–∞—â–∏—Ç—ã: {reduction_level}%") 