"""
üí∞ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –°–¢–û–ò–ú–û–°–¢–ò
–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å —É—á–µ—Ç–æ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
"""

import math
from typing import Dict, NamedTuple
from dataclasses import dataclass

@dataclass
class ServerSpecs:
    """–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    ram_gb: int
    cpu_cores: int
    disk_gb: int
    traffic_tb: float
    monthly_cost: float

@dataclass
class OptimizationImpact:
    """–í–ª–∏—è–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã"""
    client_pool_memory_reduction: float = 0.65  # 65% —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    activity_optimizer_cpu_reduction: float = 0.40  # 40% —ç–∫–æ–Ω–æ–º–∏–∏ CPU
    structured_logging_disk_reduction: float = 0.70  # 70% —ç–∫–æ–Ω–æ–º–∏–∏ –¥–∏—Å–∫–∞
    sleep_mode_memory_reduction: float = 0.80  # 80% —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ —Å–ø—è—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö

class CostCalculator:
    """
    üí∞ –¢–û–ß–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –°–¢–û–ò–ú–û–°–¢–ò
    –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """
    
    def __init__(self):
        # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        self.base_memory_per_client = 4.0  # MB
        self.sleeping_memory_per_client = 0.8  # MB (—Å–ø—è—â–∏–π —Ä–µ–∂–∏–º)
        self.requests_per_active_account = 10  # –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω
        self.cpu_per_request = 0.002  # —Å–µ–∫—É–Ω–¥ CPU –Ω–∞ –∑–∞–ø—Ä–æ—Å
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.optimizations = OptimizationImpact()
        
    def calculate_realistic_load(self, users: int, accounts_per_user: int = 300) -> Dict:
        """
        –†–∞—Å—á–µ—Ç –†–ï–ê–õ–¨–ù–û–ô –Ω–∞–≥—Ä—É–∑–∫–∏ —Å —É—á–µ—Ç–æ–º:
        - –¢–æ–ª—å–∫–æ 25% –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        - –°–ø—è—â–∏–π —Ä–µ–∂–∏–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        - –†–æ—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        total_accounts = users * accounts_per_user
        
        # –†–µ–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        active_accounts = int(total_accounts * 0.25)  # 25% –∞–∫—Ç–∏–≤–Ω—ã—Ö
        sleeping_accounts = int(total_accounts * 0.50)  # 50% –≤ —Å–ø—è—â–µ–º —Ä–µ–∂–∏–º–µ
        inactive_accounts = total_accounts - active_accounts - sleeping_accounts  # 25% –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
        
        # –ü–∞–º—è—Ç—å
        memory_active = active_accounts * self.base_memory_per_client
        memory_sleeping = sleeping_accounts * self.sleeping_memory_per_client
        memory_clients_total = memory_active + memory_sleeping
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é Client Pool
        memory_clients_optimized = memory_clients_total * (1 - self.optimizations.client_pool_memory_reduction)
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å
        memory_system = 2000  # 2GB —Å–∏—Å—Ç–µ–º–∞ + –ë–î + –ø—Ä–æ—á–µ–µ
        memory_total = memory_clients_optimized + memory_system
        
        # CPU –Ω–∞–≥—Ä—É–∑–∫–∞
        requests_per_second = (active_accounts * self.requests_per_active_account) / 60
        cpu_load_base = requests_per_second * self.cpu_per_request
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é Activity Optimizer
        cpu_load_optimized = cpu_load_base * (1 - self.optimizations.activity_optimizer_cpu_reduction)
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU
        cpu_system = 0.5  # –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        cpu_total = cpu_load_optimized + cpu_system
        
        # –¢—Ä–∞—Ñ–∏–∫ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã)
        traffic_per_hour_gb = (active_accounts * self.requests_per_active_account * 60 * 6) / (1024**3)  # ~6KB –Ω–∞ –∑–∞–ø—Ä–æ—Å
        traffic_per_day_gb = traffic_per_hour_gb * 12  # 12 —á–∞—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        traffic_per_month_gb = traffic_per_day_gb * 30
        
        # –î–∏—Å–∫ (—Å —É—á–µ—Ç–æ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        disk_logs_base = users * 50  # 50GB –ª–æ–≥–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ—Å—è—Ü
        disk_logs_optimized = disk_logs_base * (1 - self.optimizations.structured_logging_disk_reduction)
        disk_media = users * 20  # 20GB –º–µ–¥–∏–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        disk_total = disk_logs_optimized + disk_media + 30  # +30GB —Å–∏—Å—Ç–µ–º–∞
        
        return {
            'users': users,
            'total_accounts': total_accounts,
            'active_accounts': active_accounts,
            'sleeping_accounts': sleeping_accounts,
            'inactive_accounts': inactive_accounts,
            'memory': {
                'clients_mb': round(memory_clients_optimized, 1),
                'system_mb': memory_system,
                'total_mb': round(memory_total, 1),
                'total_gb': round(memory_total / 1024, 2)
            },
            'cpu': {
                'load_cores': round(cpu_total, 2),
                'utilization_percent': round((cpu_total / 8) * 100, 1)  # –ò–∑ 8 —è–¥–µ—Ä
            },
            'traffic': {
                'gb_per_month': round(traffic_per_month_gb, 1),
                'tb_per_month': round(traffic_per_month_gb / 1024, 3)
            },
            'disk': {
                'total_gb': round(disk_total, 1)
            }
        }
    
    def calculate_server_cost(self, load_data: Dict) -> Dict:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫—É (—Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏)"""
        memory_gb = load_data['memory']['total_gb']
        cpu_cores = max(2, math.ceil(load_data['cpu']['load_cores'] * 1.5))  # 50% –∑–∞–ø–∞—Å
        disk_gb = load_data['disk']['total_gb']
        traffic_tb = load_data['traffic']['tb_per_month']
        
        # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã (–∑–∞ —Ä–µ—Å—É—Ä—Å)
        ram_price_per_gb = 3.0    # $3/GB RAM
        cpu_price_per_core = 8.0  # $8/—è–¥—Ä–æ CPU  
        disk_price_per_gb = 0.15  # $0.15/GB SSD
        traffic_price_per_tb = 5.0 # $5/TB —Ç—Ä–∞—Ñ–∏–∫–∞
        base_cost = 20  # $20 –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ —Ä–µ—Å—É—Ä—Å–∞–º
        def calculate_cost(ram_mult, cpu_mult, disk_mult, traffic_mult):
            actual_ram = max(4, math.ceil(memory_gb * ram_mult))
            actual_cpu = max(2, cpu_cores + cpu_mult)
            actual_disk = max(50, math.ceil(disk_gb * disk_mult))
            actual_traffic = max(1, math.ceil(traffic_tb * traffic_mult))
            
            cost = (base_cost + 
                   actual_ram * ram_price_per_gb +
                   actual_cpu * cpu_price_per_core +
                   actual_disk * disk_price_per_gb +
                   actual_traffic * traffic_price_per_tb)
            
            return ServerSpecs(
                ram_gb=actual_ram,
                cpu_cores=actual_cpu,
                disk_gb=actual_disk,
                traffic_tb=actual_traffic,
                monthly_cost=round(cost, 0)
            )
        
        # –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–µ—Ä–≤–µ—Ä–æ–≤ (–æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ)
        servers = {
            'budget': calculate_cost(1.2, 1, 1.3, 1.5),      # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–ø–∞—Å—ã
            'optimal': calculate_cost(1.5, 2, 1.5, 2),       # –†–∞–∑—É–º–Ω—ã–µ –∑–∞–ø–∞—Å—ã  
            'premium': calculate_cost(2.0, 4, 2.0, 3)        # –ë–æ–ª—å—à–∏–µ –∑–∞–ø–∞—Å—ã
        }
        
        return servers
    
    def calculate_cost_per_user(self, users: int, accounts_per_user: int = 300) -> Dict:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        load_data = self.calculate_realistic_load(users, accounts_per_user)
        servers = self.calculate_server_cost(load_data)
        
        results = {}
        for server_type, specs in servers.items():
            cost_per_user = specs.monthly_cost / users
            profit_margin = ((200 - cost_per_user) / 200) * 100  # –ü—Ä–∏ —Ü–µ–Ω–µ $200/–º–µ—Å—è—Ü
            
            results[server_type] = {
                'server_cost': specs.monthly_cost,
                'cost_per_user': round(cost_per_user, 2),
                'profit_margin_percent': round(profit_margin, 1),
                'specs': specs
            }
            
        return {
            'load_analysis': load_data,
            'server_options': results
        }
    
    def compare_with_without_optimizations(self, users: int) -> Dict:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ –∏ –±–µ–∑"""
        # –° –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        with_opt = self.calculate_cost_per_user(users)
        
        # –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º)
        original_opts = self.optimizations
        self.optimizations = OptimizationImpact(0, 0, 0, 0)  # –ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        
        without_opt = self.calculate_cost_per_user(users)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.optimizations = original_opts
        
        return {
            'with_optimizations': with_opt,
            'without_optimizations': without_opt,
            'savings': {
                'memory_mb': without_opt['load_analysis']['memory']['total_mb'] - with_opt['load_analysis']['memory']['total_mb'],
                'cpu_cores': without_opt['load_analysis']['cpu']['load_cores'] - with_opt['load_analysis']['cpu']['load_cores'],
                'cost_savings_optimal': without_opt['server_options']['optimal']['server_cost'] - with_opt['server_options']['optimal']['server_cost']
            }
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
cost_calculator = CostCalculator()

def calculate_user_cost(users: int = 10, accounts_per_user: int = 300) -> Dict:
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return cost_calculator.calculate_cost_per_user(users, accounts_per_user)

def get_optimization_savings(users: int = 10) -> Dict:
    """–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
    return cost_calculator.compare_with_without_optimizations(users) 