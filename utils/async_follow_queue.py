import logging
import threading
import queue
import time
import asyncio
from typing import Optional
from concurrent.futures import ThreadPoolExecutor

from database.db_manager import get_session
from database.models import FollowTask, FollowTaskStatus
from utils.follow_manager import FollowManager

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
follow_queue: Optional[queue.Queue] = None
follow_executor: Optional[ThreadPoolExecutor] = None
follow_thread: Optional[threading.Thread] = None
is_running = False


def process_follow_task(task_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏"""
    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∏ #{task_id}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        try:
            with FollowManager(task_id) as manager:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                loop.run_until_complete(manager.execute_follow_task(manager.task))
        finally:
            loop.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ #{task_id}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ FAILED
        session = get_session()
        try:
            task = session.query(FollowTask).filter_by(id=task_id).first()
            if task and task.status == FollowTaskStatus.RUNNING:
                task.status = FollowTaskStatus.FAILED
                task.error = str(e)
                session.commit()
        finally:
            session.close()


def follow_queue_worker():
    """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á"""
    logger.info("üöÄ –ó–∞–ø—É—â–µ–Ω —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –æ—á–µ—Ä–µ–¥–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫")
    
    while is_running:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            task_id = follow_queue.get(timeout=1)
            
            if task_id is None:  # –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                break
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
            follow_executor.submit(process_follow_task, task_id)
            
        except queue.Empty:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –ë–î
            check_pending_tasks()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø–æ—Ç–æ–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
            time.sleep(1)
    
    logger.info("üõë –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –æ—á–µ—Ä–µ–¥–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def check_pending_tasks():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –≤ –ë–î –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å"""
    session = get_session()
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º PENDING
        pending_tasks = session.query(FollowTask).filter_by(
            status=FollowTaskStatus.PENDING
        ).all()
        
        for task in pending_tasks:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ RUNNING
            task.status = FollowTaskStatus.RUNNING
            session.commit()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            follow_queue.put(task.id)
            logger.info(f"üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #{task.id} –≤ –æ—á–µ—Ä–µ–¥—å")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")
    finally:
        session.close()


def start_async_follow_queue(max_workers: int = 5):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á"""
    global follow_queue, follow_executor, follow_thread, is_running
    
    if is_running:
        logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    try:
        session = get_session()
        active_tasks = session.query(FollowTask).filter(
            FollowTask.status.in_([FollowTaskStatus.PENDING, FollowTaskStatus.RUNNING])
        ).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–¥–∞—á
        max_threads_from_tasks = 1
        for task in active_tasks:
            if task.filters:
                threads = task.filters.get('threads', 1)
                max_threads_from_tasks = max(max_threads_from_tasks, threads)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º—É–º –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–¥–∞—á
        max_workers = max(max_workers, max_threads_from_tasks)
        session.close()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–æ–≤ –∏–∑ –∑–∞–¥–∞—á: {e}")
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫ —Å {max_workers} –ø–æ—Ç–æ–∫–∞–º–∏")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    follow_queue = queue.Queue()
    follow_executor = ThreadPoolExecutor(max_workers=max_workers)
    is_running = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫
    follow_thread = threading.Thread(target=follow_queue_worker, daemon=True)
    follow_thread.start()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
    check_pending_tasks()
    
    logger.info("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞")


def stop_async_follow_queue():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å"""
    global is_running
    
    if not is_running:
        logger.warning("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return
    
    logger.info("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫...")
    
    # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    is_running = False
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
    if follow_queue:
        follow_queue.put(None)
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞
    if follow_thread:
        follow_thread.join(timeout=5)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤
    if follow_executor:
        follow_executor.shutdown(wait=True)
    
    logger.info("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


def add_task_to_queue(task_id: int):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å"""
    if not is_running:
        logger.error("‚ùå –û—á–µ—Ä–µ–¥—å –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
        return False
    
    follow_queue.put(task_id)
    logger.info(f"üìã –ó–∞–¥–∞—á–∞ #{task_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
    return True 