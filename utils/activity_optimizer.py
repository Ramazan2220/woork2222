"""
üîÑ –ú–û–î–£–õ–¨ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ê–ö–¢–ò–í–ù–û–°–¢–ò
–£–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
"""

import time
import random
from typing import Dict, List, Optional, Set
from dataclasses import dataclass, field
from datetime import datetime, timedelta
import logging
from threading import Lock
import json

logger = logging.getLogger(__name__)

@dataclass
class AccountActivity:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    account_id: str
    user_id: int
    last_activity: float = 0
    total_requests_today: int = 0
    priority: int = 1  # 1-–Ω–∏–∑–∫–∏–π, 5-–≤—ã—Å–æ–∫–∏–π
    max_requests_per_hour: int = 20
    active_hours: List[int] = field(default_factory=lambda: list(range(8, 22)))  # 8:00-22:00
    cooldown_until: float = 0
    is_warming_up: bool = False

@dataclass
class UserQuota:
    """–ö–≤–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    max_concurrent_accounts: int = 75  # 25% –æ—Ç 300
    max_requests_per_minute: int = 300  # 75 accounts * 4 req/min
    current_active_accounts: int = 0
    priority_boost: float = 1.0  # –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

class ActivityOptimizer:
    """
    üéØ –£–ú–ù–´–ô –û–ü–¢–ò–ú–ò–ó–ê–¢–û–† –ê–ö–¢–ò–í–ù–û–°–¢–ò:
    - –†–æ—Ç–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    """
    
    def __init__(self):
        self.accounts: Dict[str, AccountActivity] = {}
        self.user_quotas: Dict[int, UserQuota] = {}
        self.active_accounts: Set[str] = set()
        self.waiting_queue: List[str] = []
        self._lock = Lock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_rotations = 0
        self.total_optimizations = 0
        self.memory_saved_mb = 0
        
        logger.info("üîÑ ActivityOptimizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def register_account(self, account_id: str, user_id: int, priority: int = 1, 
                        max_requests_per_hour: int = 20):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–µ"""
        with self._lock:
            self.accounts[account_id] = AccountActivity(
                account_id=account_id,
                user_id=user_id,
                priority=priority,
                max_requests_per_hour=max_requests_per_hour
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–≤–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ—Ç
            if user_id not in self.user_quotas:
                self.user_quotas[user_id] = UserQuota(user_id=user_id)
                
        logger.debug(f"üìù –ê–∫–∫–∞—É–Ω—Ç {account_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (user: {user_id}, priority: {priority})")

    def should_activate_account(self, account_id: str) -> Dict[str, any]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å–µ–π—á–∞—Å
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {'allowed': bool, 'reason': str, 'wait_time': int}
        """
        if account_id not in self.accounts:
            return {'allowed': False, 'reason': 'Account not registered', 'wait_time': 0}
            
        account = self.accounts[account_id]
        user_quota = self.user_quotas.get(account.user_id)
        current_time = time.time()
        current_hour = datetime.now().hour
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
        if current_time < account.cooldown_until:
            wait_time = int(account.cooldown_until - current_time)
            return {'allowed': False, 'reason': f'Cooldown for {wait_time}s', 'wait_time': wait_time}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
        if current_hour not in account.active_hours:
            wait_time = self._calculate_next_active_hour(current_hour, account.active_hours) * 3600
            return {'allowed': False, 'reason': 'Outside active hours', 'wait_time': wait_time}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_quota and user_quota.current_active_accounts >= user_quota.max_concurrent_accounts:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–µ–Ω–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã
            if account.priority > 3:  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                replaced_account = self._try_replace_low_priority_account(account.user_id, account.priority)
                if replaced_account:
                    logger.info(f"üîÑ –ó–∞–º–µ–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç {replaced_account} –Ω–∞ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π {account_id}")
                    self._deactivate_account(replaced_account)
                    return {'allowed': True, 'reason': 'Replaced low priority account', 'wait_time': 0}
            
            return {'allowed': False, 'reason': 'User quota exceeded', 'wait_time': 300}  # 5 min
        
        return {'allowed': True, 'reason': 'All checks passed', 'wait_time': 0}

    def activate_account(self, account_id: str) -> bool:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        with self._lock:
            activation_check = self.should_activate_account(account_id)
            
            if not activation_check['allowed']:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if account_id not in self.waiting_queue:
                    self.waiting_queue.append(account_id)
                logger.debug(f"‚è≥ –ê–∫–∫–∞—É–Ω—Ç {account_id} –≤ –æ—á–µ—Ä–µ–¥–∏: {activation_check['reason']}")
                return False
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
            self.active_accounts.add(account_id)
            account = self.accounts[account_id]
            account.last_activity = time.time()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_quota = self.user_quotas[account.user_id]
            user_quota.current_active_accounts += 1
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
            if account_id in self.waiting_queue:
                self.waiting_queue.remove(account_id)
                
            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(self.active_accounts)})")
            return True

    def deactivate_account(self, account_id: str, cooldown_minutes: int = 30):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∫—É–ª–¥–∞—É–Ω–æ–º"""
        self._deactivate_account(account_id, cooldown_minutes)

    def _deactivate_account(self, account_id: str, cooldown_minutes: int = 30):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        with self._lock:
            if account_id in self.active_accounts:
                self.active_accounts.remove(account_id)
                
                account = self.accounts[account_id]
                account.cooldown_until = time.time() + (cooldown_minutes * 60)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–≤–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_quota = self.user_quotas[account.user_id]
                user_quota.current_active_accounts = max(0, user_quota.current_active_accounts - 1)
                
                self.total_rotations += 1
                self.memory_saved_mb += 4  # ~4MB –Ω–∞ –∫–∞–∂–¥—É—é –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é
                
                logger.info(f"üí§ –ê–∫–∫–∞—É–Ω—Ç {account_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {cooldown_minutes} –º–∏–Ω")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏
                self._try_activate_from_queue()

    def _try_activate_from_queue(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è"""
        if not self.waiting_queue:
            return
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        self.waiting_queue.sort(key=lambda acc_id: self.accounts[acc_id].priority, reverse=True)
        
        for account_id in self.waiting_queue.copy():
            if self.activate_account(account_id):
                break

    def _try_replace_low_priority_account(self, user_id: int, new_priority: int) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –Ω–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã"""
        user_active_accounts = [
            acc_id for acc_id in self.active_accounts 
            if self.accounts[acc_id].user_id == user_id
        ]
        
        # –ò—â–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∏–∂–µ –Ω–æ–≤–æ–≥–æ
        for account_id in user_active_accounts:
            if self.accounts[account_id].priority < new_priority:
                return account_id
                
        return None

    def _calculate_next_active_hour(self, current_hour: int, active_hours: List[int]) -> int:
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Å–∞"""
        for hour in active_hours:
            if hour > current_hour:
                return hour - current_hour
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π
        return (24 - current_hour) + min(active_hours)

    def optimize_all_activities(self):
        """
        –ü–æ–ª–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:
        - –†–æ—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
        - –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫—É–ª–¥–∞—É–Ω–æ–≤
        """
        current_time = time.time()
        optimizations_made = 0
        
        with self._lock:
            # 1. –û—á–∏—â–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∫—É–ª–¥–∞—É–Ω—ã
            for account in self.accounts.values():
                if account.cooldown_until <= current_time:
                    account.cooldown_until = 0
            
            # 2. –†–æ—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            for account_id in list(self.active_accounts):
                account = self.accounts[account_id]
                inactive_time = current_time - account.last_activity
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (45 –º–∏–Ω)
                if inactive_time > 2700:  # 45 –º–∏–Ω—É—Ç
                    self._deactivate_account(account_id, cooldown_minutes=15)
                    optimizations_made += 1
            
            # 3. –ü—Ä–æ–±—É–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            self._try_activate_from_queue()
            
            self.total_optimizations += optimizations_made
            
        if optimizations_made > 0:
            logger.info(f"üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {optimizations_made} –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

    def get_optimization_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        with self._lock:
            total_accounts = len(self.accounts)
            active_accounts = len(self.active_accounts)
            waiting_accounts = len(self.waiting_queue)
            
            return {
                'total_accounts': total_accounts,
                'active_accounts': active_accounts,
                'waiting_accounts': waiting_accounts,
                'utilization_percent': (active_accounts / max(total_accounts, 1)) * 100,
                'total_rotations': self.total_rotations,
                'total_optimizations': self.total_optimizations,
                'memory_saved_mb': self.memory_saved_mb,
                'estimated_resource_savings_percent': min(75, (self.total_rotations / max(total_accounts, 1)) * 100)
            }

    def set_user_premium_status(self, user_id: int, is_premium: bool = True):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤"""
        if user_id not in self.user_quotas:
            self.user_quotas[user_id] = UserQuota(user_id=user_id)
            
        quota = self.user_quotas[user_id]
        if is_premium:
            quota.max_concurrent_accounts = 100  # 30% –≤–º–µ—Å—Ç–æ 25%
            quota.max_requests_per_minute = 400  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç
            quota.priority_boost = 1.5
        else:
            quota.max_concurrent_accounts = 75   # –ë–∞–∑–æ–≤—ã–µ 25%
            quota.max_requests_per_minute = 300
            quota.priority_boost = 1.0
            
        logger.info(f"üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} {'–ø—Ä–µ–º–∏—É–º' if is_premium else '–±–∞–∑–æ–≤—ã–π'} —Å—Ç–∞—Ç—É—Å")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
activity_optimizer = ActivityOptimizer()

def get_activity_optimizer() -> ActivityOptimizer:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    return activity_optimizer

def init_activity_optimizer():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    global activity_optimizer
    activity_optimizer = ActivityOptimizer()
    logger.info("üîÑ Activity Optimizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
def optimize_account_activity():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)"""
    activity_optimizer.optimize_all_activities() 