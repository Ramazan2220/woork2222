# -*- coding: utf-8 -*-
"""
Structured Logging —Å Sampling - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
- –£–º–Ω—ã–π —Å—ç–º–ø–ª–∏–Ω–≥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –æ–±—ä–µ–º–∞ –ª–æ–≥–æ–≤
- –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—ç–º–ø–ª–∏–Ω–≥–∞ (—á–∞—Å—Ç–æ—Ç–∞, –≤—Ä–µ–º—è, —Ö—ç—à)
- –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è–º–∏ –ª–æ–≥–æ–≤
"""

import json
import time
import logging
import hashlib
import threading
from typing import Dict, Any, Optional, Union, List
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum

logger = logging.getLogger(__name__)

class SamplingStrategy(Enum):
    """–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—ç–º–ø–ª–∏–Ω–≥–∞ –ª–æ–≥–æ–≤"""
    FREQUENCY = "frequency"      # –ö–∞–∂–¥—ã–π N-–π –ª–æ–≥
    TIME_WINDOW = "time_window"  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    HASH_BASED = "hash_based"    # –ù–∞ –æ—Å–Ω–æ–≤–µ —Ö—ç—à–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    ADAPTIVE = "adaptive"        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—ç–º–ø–ª–∏–Ω–≥
    NONE = "none"               # –ë–µ–∑ —Å—ç–º–ø–ª–∏–Ω–≥–∞

@dataclass
class SamplingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—ç–º–ø–ª–∏–Ω–≥–∞"""
    strategy: SamplingStrategy = SamplingStrategy.ADAPTIVE
    frequency: int = 10          # –ö–∞–∂–¥—ã–π 10-–π –ª–æ–≥ (–¥–ª—è FREQUENCY)
    time_window: int = 60        # –û–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è TIME_WINDOW)
    max_logs_per_window: int = 100  # –ú–∞–∫—Å–∏–º—É–º –ª–æ–≥–æ–≤ –≤ –æ–∫–Ω–µ
    hash_sample_rate: float = 0.1   # 10% –ª–æ–≥–æ–≤ (–¥–ª—è HASH_BASED)
    min_level: int = logging.INFO   # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å—ç–º–ø–ª–∏–Ω–≥–∞

@dataclass
class LoggingStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    total_logs: int = 0
    sampled_logs: int = 0
    discarded_logs: int = 0
    logs_by_level: Dict[str, int] = field(default_factory=dict)
    logs_by_category: Dict[str, int] = field(default_factory=dict)
    avg_log_size: float = 0.0
    last_reset: float = field(default_factory=time.time)

class StructuredLogger:
    """Structured Logger —Å —É–º–Ω—ã–º —Å—ç–º–ø–ª–∏–Ω–≥–æ–º"""
    
    def __init__(self, name: str = "structured_logger", 
                 config: Optional[SamplingConfig] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Structured Logger
        
        Args:
            name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—ç–º–ø–ª–∏–Ω–≥–∞
        """
        self.name = name
        self.config = config or SamplingConfig()
        self.logger = logging.getLogger(name)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.stats = LoggingStats()
        self._lock = threading.RLock()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å—ç–º–ø–ª–∏–Ω–≥–∞
        self._frequency_counter = 0
        self._time_window_logs: Dict[int, int] = {}  # timestamp -> count
        self._adaptive_rates: Dict[str, float] = {}  # category -> rate
        
        logger.info(f"üìù Structured Logger '{name}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π: {config.strategy.value}")
    
    def log_structured(self, level: int, message: str, 
                      category: str = "general",
                      extra_data: Optional[Dict[str, Any]] = None,
                      force: bool = False) -> bool:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (logging.INFO, etc.)
            message: –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–≥–∞
            extra_data: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—ç–º–ø–ª–∏–Ω–≥)
            
        Returns:
            True –µ—Å–ª–∏ –ª–æ–≥ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω, False –µ—Å–ª–∏ –æ—Ç–±—Ä–æ—à–µ–Ω
        """
        with self._lock:
            self.stats.total_logs += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
            if not force and not self._should_log(level, message, category):
                self.stats.discarded_logs += 1
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥
            log_entry = self._create_log_entry(level, message, category, extra_data)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥
            self._write_log(level, log_entry)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_stats(level, category, log_entry)
            self.stats.sampled_logs += 1
            
            return True
    
    def _should_log(self, level: int, message: str, category: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        if level < self.config.min_level:
            return False
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º
        if level >= logging.ERROR:
            return True
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å—ç–º–ø–ª–∏–Ω–≥–∞
        if self.config.strategy == SamplingStrategy.NONE:
            return True
        elif self.config.strategy == SamplingStrategy.FREQUENCY:
            return self._frequency_sampling()
        elif self.config.strategy == SamplingStrategy.TIME_WINDOW:
            return self._time_window_sampling()
        elif self.config.strategy == SamplingStrategy.HASH_BASED:
            return self._hash_based_sampling(message)
        elif self.config.strategy == SamplingStrategy.ADAPTIVE:
            return self._adaptive_sampling(category, level)
        
        return True
    
    def _frequency_sampling(self) -> bool:
        """–°—ç–º–ø–ª–∏–Ω–≥ –ø–æ —á–∞—Å—Ç–æ—Ç–µ"""
        self._frequency_counter += 1
        return (self._frequency_counter % self.config.frequency) == 0
    
    def _time_window_sampling(self) -> bool:
        """–°—ç–º–ø–ª–∏–Ω–≥ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –æ–∫–Ω—É"""
        current_window = int(time.time()) // self.config.time_window
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–∫–Ω–∞
        self._cleanup_time_windows(current_window)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
        current_count = self._time_window_logs.get(current_window, 0)
        if current_count < self.config.max_logs_per_window:
            self._time_window_logs[current_window] = current_count + 1
            return True
        
        return False
    
    def _hash_based_sampling(self, message: str) -> bool:
        """–°—ç–º–ø–ª–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö—ç—à–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_hash = hashlib.md5(message.encode()).hexdigest()
        hash_value = int(message_hash[:8], 16) / 0xffffffff
        return hash_value < self.config.hash_sample_rate
    
    def _adaptive_sampling(self, category: str, level: int) -> bool:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å—ç–º–ø–ª–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω—è"""
        # –ë–∞–∑–æ–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        base_rate = {
            logging.DEBUG: 0.05,    # 5% debug –ª–æ–≥–æ–≤
            logging.INFO: 0.2,      # 20% info –ª–æ–≥–æ–≤  
            logging.WARNING: 0.7,   # 70% warning –ª–æ–≥–æ–≤
            logging.ERROR: 1.0,     # 100% error –ª–æ–≥–æ–≤
            logging.CRITICAL: 1.0   # 100% critical –ª–æ–≥–æ–≤
        }.get(level, 0.1)
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category not in self._adaptive_rates:
            self._adaptive_rates[category] = base_rate
        else:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            current_rate = self._adaptive_rates[category]
            
            # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –ª–æ–≥–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Å–Ω–∏–∂–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            category_count = self.stats.logs_by_category.get(category, 0)
            if category_count > 1000:
                current_rate *= 0.9
            elif category_count < 100:
                current_rate *= 1.1
            
            self._adaptive_rates[category] = max(0.01, min(1.0, current_rate))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        import random
        return random.random() < self._adaptive_rates[category]
    
    def _cleanup_time_windows(self, current_window: int):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω"""
        cutoff = current_window - 5  # –•—Ä–∞–Ω–∏–º 5 –æ–∫–æ–Ω
        keys_to_remove = [k for k in self._time_window_logs.keys() if k < cutoff]
        for key in keys_to_remove:
            del self._time_window_logs[key]
    
    def _create_log_entry(self, level: int, message: str, 
                         category: str, extra_data: Optional[Dict[str, Any]]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞"""
        entry = {
            "timestamp": datetime.utcnow().isoformat(),
            "level": logging.getLevelName(level),
            "message": message,
            "category": category,
            "logger": self.name
        }
        
        if extra_data:
            entry["data"] = extra_data
        
        return entry
    
    def _write_log(self, level: int, log_entry: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤ —Ñ–∞–π–ª/–∫–æ–Ω—Å–æ–ª—å"""
        json_message = json.dumps(log_entry, ensure_ascii=False, separators=(',', ':'))
        self.logger.log(level, json_message)
    
    def _update_stats(self, level: int, category: str, log_entry: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        level_name = logging.getLevelName(level)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        if level_name not in self.stats.logs_by_level:
            self.stats.logs_by_level[level_name] = 0
        self.stats.logs_by_level[level_name] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if category not in self.stats.logs_by_category:
            self.stats.logs_by_category[category] = 0
        self.stats.logs_by_category[category] += 1
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
        log_size = len(json.dumps(log_entry))
        if self.stats.avg_log_size == 0:
            self.stats.avg_log_size = log_size
        else:
            self.stats.avg_log_size = (self.stats.avg_log_size * 0.9 + log_size * 0.1)
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        with self._lock:
            return {
                "logger_name": self.name,
                "sampling_strategy": self.config.strategy.value,
                "total_logs": self.stats.total_logs,
                "sampled_logs": self.stats.sampled_logs,
                "discarded_logs": self.stats.discarded_logs,
                "sampling_rate": self.stats.sampled_logs / max(1, self.stats.total_logs),
                "logs_by_level": dict(self.stats.logs_by_level),
                "logs_by_category": dict(self.stats.logs_by_category),
                "avg_log_size_bytes": round(self.stats.avg_log_size, 2),
                "adaptive_rates": dict(self._adaptive_rates) if self.config.strategy == SamplingStrategy.ADAPTIVE else None,
                "uptime_seconds": time.time() - self.stats.last_reset
            }
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self._lock:
            self.stats = LoggingStats()
            self._frequency_counter = 0
            self._time_window_logs.clear()
            self._adaptive_rates.clear()
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Structured Logger '{self.name}' —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def update_config(self, config: SamplingConfig):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—ç–º–ø–ª–∏–Ω–≥–∞"""
        with self._lock:
            old_strategy = self.config.strategy
            self.config = config
            logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—ç–º–ø–ª–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {old_strategy.value} ‚Üí {config.strategy.value}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ª–æ–≥–≥–µ—Ä–æ–≤
_loggers: Dict[str, StructuredLogger] = {}
_default_logger: Optional[StructuredLogger] = None

def get_structured_logger(name: str = "default", 
                         config: Optional[SamplingConfig] = None) -> StructuredLogger:
    """–ü–æ–ª—É—á–∏—Ç—å Structured Logger –ø–æ –∏–º–µ–Ω–∏"""
    global _loggers, _default_logger
    
    if name not in _loggers:
        _loggers[name] = StructuredLogger(name, config)
        
    if name == "default" and _default_logger is None:
        _default_logger = _loggers[name]
    
    return _loggers[name]

def log_structured(level: int, message: str, category: str = "general",
                  extra_data: Optional[Dict[str, Any]] = None,
                  logger_name: str = "default") -> bool:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger_instance = get_structured_logger(logger_name)
    return logger_instance.log_structured(level, message, category, extra_data)

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
def log_debug(message: str, category: str = "debug", **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ debug —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return log_structured(logging.DEBUG, message, category, kwargs)

def log_info(message: str, category: str = "info", **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ info —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return log_structured(logging.INFO, message, category, kwargs)

def log_warning(message: str, category: str = "warning", **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ warning —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return log_structured(logging.WARNING, message, category, kwargs)

def log_error(message: str, category: str = "error", **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ error —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return log_structured(logging.ERROR, message, category, kwargs)

# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Instagram –±–æ—Ç–∞
def log_instagram_action(action: str, account_id: int, success: bool, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π Instagram"""
    return log_structured(
        logging.INFO, 
        f"Instagram action: {action}", 
        "instagram",
        {"action": action, "account_id": account_id, "success": success, **kwargs}
    )

def log_telegram_interaction(user_id: int, command: str, success: bool, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π Telegram"""
    return log_structured(
        logging.INFO,
        f"Telegram command: {command}",
        "telegram", 
        {"user_id": user_id, "command": command, "success": success, **kwargs}
    )

def log_performance_metric(metric_name: str, value: float, unit: str = "", **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    return log_structured(
        logging.INFO,
        f"Performance metric: {metric_name}",
        "performance",
        {"metric": metric_name, "value": value, "unit": unit, **kwargs}
    )

def get_all_logger_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ª–æ–≥–≥–µ—Ä–æ–≤"""
    return {name: logger.get_stats() for name, logger in _loggers.items()}

def reset_all_stats():
    """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ª–æ–≥–≥–µ—Ä–æ–≤"""
    for logger_instance in _loggers.values():
        logger_instance.reset_stats()

def init_structured_logging(configs: Optional[Dict[str, SamplingConfig]] = None):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏"""
    default_configs = {
        "default": SamplingConfig(SamplingStrategy.ADAPTIVE),
        "instagram": SamplingConfig(SamplingStrategy.ADAPTIVE, min_level=logging.INFO),
        "telegram": SamplingConfig(SamplingStrategy.TIME_WINDOW, max_logs_per_window=50),
        "performance": SamplingConfig(SamplingStrategy.FREQUENCY, frequency=5),
        "debug": SamplingConfig(SamplingStrategy.HASH_BASED, hash_sample_rate=0.05)
    }
    
    if configs:
        default_configs.update(configs)
    
    for name, config in default_configs.items():
        get_structured_logger(name, config)
    
    logger.info("üìù Structured Logging –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–æ–≥–≥–µ—Ä–∞–º–∏")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —É–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
init_structured_logging()

logger.info("üì¶ Structured Logger –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω") 