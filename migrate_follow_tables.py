#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫
"""

import logging
from sqlalchemy import inspect
from database.db_manager import engine, init_db
from database.models import Base, FollowTask, FollowHistory

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def migrate_database():
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        logger.info("üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
        inspector = inspect(engine)
        existing_tables = inspector.get_table_names()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ —Ç–∞–±–ª–∏—Ü—ã
        tables_to_create = []
        
        if 'follow_tasks' not in existing_tables:
            tables_to_create.append('follow_tasks')
            logger.info("üìã –¢–∞–±–ª–∏—Ü–∞ follow_tasks –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞")
        else:
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ follow_tasks —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        if 'follow_history' not in existing_tables:
            tables_to_create.append('follow_history')
            logger.info("üìã –¢–∞–±–ª–∏—Ü–∞ follow_history –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞")
        else:
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ follow_history —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        if tables_to_create:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            Base.metadata.create_all(engine, checkfirst=True)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables_to_create)}")
        else:
            logger.info("‚ÑπÔ∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        inspector = inspect(engine)
        new_tables = inspector.get_table_names()
        
        if 'follow_tasks' in new_tables and 'follow_history' in new_tables:
            logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü
            logger.info("\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã follow_tasks:")
            columns = inspector.get_columns('follow_tasks')
            for col in columns:
                logger.info(f"  - {col['name']}: {col['type']}")
            
            logger.info("\nüìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã follow_history:")
            columns = inspector.get_columns('follow_history')
            for col in columns:
                logger.info(f"  - {col['name']}: {col['type']}")
        else:
            logger.error("‚ùå –ù–µ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise


if __name__ == '__main__':
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞—Å—Ç –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã)
        init_db()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        migrate_database()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1) 