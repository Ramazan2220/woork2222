#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
"""

import asyncio
import logging
from database.db_manager import get_instagram_accounts
from instagram.profile_manager import ProfileManager
from utils.system_monitor import system_monitor
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_single_profile_update():
    """–¢–µ—Å—Ç –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    logger.info("=== –¢–µ—Å—Ç –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è ===")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    accounts = [acc for acc in get_instagram_accounts() if acc.is_active]
    if not accounts:
        logger.error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    account = accounts[0]
    logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç: @{account.username}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º ProfileManager
        pm = ProfileManager(account.id)
        
        # –¢–µ—Å—Ç 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        logger.info("–¢–µ—Å—Ç 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏")
        success, message = pm.update_profile_name("Test Name üéØ")
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {success}, {message}")
        time.sleep(2)
        
        # –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–æ
        logger.info("–¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–æ")
        success, message = pm.update_biography("Test Bio üìù\nLine 2\n#test")
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {success}, {message}")
        time.sleep(2)
        
        # –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        logger.info("–¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏")
        success, message = pm.update_profile_links("https://example.com")
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {success}, {message}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def test_batch_profile_update():
    """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    logger.info("\n=== –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π ===")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    accounts = [acc for acc in get_instagram_accounts() if acc.is_active][:5]
    if not accounts:
        logger.error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    account_ids = [acc.id for acc in accounts]
    logger.info(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(account_ids)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
    workload_limits = system_monitor.get_workload_limits()
    max_workers = min(workload_limits.max_workers, len(account_ids))
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º {max_workers} –ø–æ—Ç–æ–∫–æ–≤ (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ system_monitor)")
    
    def progress_callback(processed, total, success, errors):
        logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {processed}/{total}, –£—Å–ø–µ—à–Ω–æ: {success}, –û—à–∏–±–æ–∫: {errors}")
    
    # –¢–µ—Å—Ç 1: –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω —Å —à–∞–±–ª–æ–Ω–æ–º
    logger.info("\n–¢–µ—Å—Ç 1: –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω —Å —à–∞–±–ª–æ–Ω–æ–º")
    success_count, errors = ProfileManager.batch_update_profiles(
        account_ids=account_ids,
        update_type='edit_name',
        value='{Creative|Amazing|Awesome} {Studio|Lab|Team}',
        max_workers=max_workers,
        progress_callback=progress_callback
    )
    
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ {success_count}/{len(account_ids)}")
    if errors:
        for error in errors:
            logger.error(f"–û—à–∏–±–∫–∞: {error}")
    
    time.sleep(5)
    
    # –¢–µ—Å—Ç 2: –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–æ
    logger.info("\n–¢–µ—Å—Ç 2: –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–æ")
    bio_template = """üåü {Welcome|Hello|Hi}!
üì∏ {Photography|Content|Creative} 
üéØ {Follow|DM|Contact} for more
@username"""
    
    success_count, errors = ProfileManager.batch_update_profiles(
        account_ids=account_ids,
        update_type='edit_bio',
        value=bio_template,
        max_workers=max_workers,
        progress_callback=progress_callback
    )
    
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ {success_count}/{len(account_ids)}")
    if errors:
        for error in errors:
            logger.error(f"–û—à–∏–±–∫–∞: {error}")

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    logger.info("\n=== –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===")
    
    # –¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
    fake_account_ids = [99999, 88888]
    
    success_count, errors = ProfileManager.batch_update_profiles(
        account_ids=fake_account_ids,
        update_type='edit_name',
        value='Test',
        max_workers=2
    )
    
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –£—Å–ø–µ—à–Ω–æ {success_count}/{len(fake_account_ids)}")
    logger.info(f"–û—à–∏–±–æ–∫: {len(errors)}")
    for error in errors:
        logger.info(f"–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: {error}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ü–†–û–§–ò–õ–ï–ô")
    
    # –¢–µ—Å—Ç 1: –ï–¥–∏–Ω–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    test_single_profile_update()
    
    # –ñ–¥–µ–º –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    time.sleep(5)
    
    # –¢–µ—Å—Ç 2: –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    test_batch_profile_update()
    
    # –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    test_error_handling()
    
    logger.info("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    main() 