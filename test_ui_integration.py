#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UI —Å Advanced Warmup 2.0
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞
"""

import sys
import unittest
from unittest.mock import Mock, patch, MagicMock
from telegram import Update, CallbackQuery, Message, User, Chat
from telegram.ext import CallbackContext

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('.')

class TestUIIntegration(unittest.TestCase):
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UI –∫–Ω–æ–ø–æ–∫"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è Telegram –æ–±—ä–µ–∫—Ç–æ–≤
        self.user = Mock(spec=User)
        self.user.id = 12345
        self.user.first_name = "Test"
        self.user.username = "testuser"
        
        self.chat = Mock(spec=Chat)
        self.chat.id = 67890
        
        self.message = Mock(spec=Message)
        self.message.chat = self.chat
        self.message.message_id = 1
        
        self.context = Mock(spec=CallbackContext)
        self.context.user_data = {}
        self.context.bot = Mock()
        
    def create_callback_update(self, callback_data):
        """–°–æ–∑–¥–∞–µ—Ç Update —Å callback_query"""
        query = Mock(spec=CallbackQuery)
        query.data = callback_data
        query.message = self.message
        query.edit_message_text = Mock()
        query.answer = Mock()
        
        update = Mock(spec=Update)
        update.callback_query = query
        update.effective_user = self.user
        update.effective_chat = self.chat
        
        return update
    
    def test_warmup_buttons_routing(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—É—Ç–∏–Ω–≥–∞ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞"""
        print("\nüß™ –¢–µ—Å—Ç 1: –†–æ—É—Ç–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞")
        print("="*50)
        
        test_cases = [
            ("smart_warmup", "smart_warm_command"),
            ("smart_warm_menu", "smart_warm_command"), 
            ("status", "status_command"),
            ("limits", "limits_command"),
            ("warmup_status", "status_command"),
            ("warmup_settings", "limits_command")
        ]
        
        for callback_data, expected_function in test_cases:
            with self.subTest(callback_data=callback_data):
                update = self.create_callback_update(callback_data)
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º handlers.py
                    with patch('telegram_bot.handlers.automation_handlers.smart_warm_command') as mock_smart:
                        with patch('telegram_bot.handlers.automation_handlers.status_command') as mock_status:
                            with patch('telegram_bot.handlers.automation_handlers.limits_command') as mock_limits:
                                
                                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                                from telegram_bot.handlers import handle_callback
                                handle_callback(update, self.context)
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–∑–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
                                if expected_function == "smart_warm_command":
                                    mock_smart.assert_called_once()
                                    print(f"  ‚úÖ {callback_data} ‚Üí {expected_function}")
                                elif expected_function == "status_command":
                                    mock_status.assert_called_once()
                                    print(f"  ‚úÖ {callback_data} ‚Üí {expected_function}")
                                elif expected_function == "limits_command":
                                    mock_limits.assert_called_once()
                                    print(f"  ‚úÖ {callback_data} ‚Üí {expected_function}")
                                    
                except Exception as e:
                    print(f"  ‚ùå {callback_data} ‚Üí –û—à–∏–±–∫–∞: {e}")
    
    def test_account_selection_flow(self):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        print("\nüß™ –¢–µ—Å—Ç 2: –í—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print("="*50)
        
        # –ú–æ–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with patch('database.db_manager.get_instagram_accounts') as mock_accounts:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            mock_account1 = Mock()
            mock_account1.id = 1
            mock_account1.username = "test_account1"
            mock_account1.is_active = True
            mock_account1.status = "active"
            
            mock_account2 = Mock()
            mock_account2.id = 7
            mock_account2.username = "fischercarmen3096194"
            mock_account2.is_active = True
            mock_account2.status = "active"
            
            mock_accounts.return_value = [mock_account1, mock_account2]
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É smart_warm
            update = self.create_callback_update("smart_warm_menu")
            
            try:
                with patch('telegram_bot.utils.account_selection.AccountSelector') as mock_selector:
                    mock_selector_instance = Mock()
                    mock_selector.return_value = mock_selector_instance
                    
                    from telegram_bot.handlers.automation_handlers import smart_warm_command
                    smart_warm_command(update, self.context)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    mock_selector.assert_called_once()
                    mock_selector_instance.show_accounts_list.assert_called_once()
                    
                    call_args = mock_selector_instance.show_accounts_list.call_args
                    callback_prefix = call_args[1]['callback_prefix']
                    
                    self.assertEqual(callback_prefix, "warm_account_")
                    print(f"  ‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: {callback_prefix}")
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
    
    def test_account_callback_handling(self):
        """–¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        print("\nüß™ –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print("="*50)
        
        test_account_callbacks = [
            "warm_account_1",
            "warm_account_7", 
            "warm_account_23"
        ]
        
        for callback_data in test_account_callbacks:
            with self.subTest(callback_data=callback_data):
                update = self.create_callback_update(callback_data)
                
                # –ú–æ–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
                with patch('database.db_manager.get_instagram_account') as mock_get_account:
                    mock_account = Mock()
                    mock_account.id = int(callback_data.split('_')[-1])
                    mock_account.username = f"test_account_{mock_account.id}"
                    mock_account.is_active = True
                    mock_get_account.return_value = mock_account
                    
                    # –ú–æ–∫–∞–µ–º automation_service
                    with patch('services.account_automation.automation_service.get_account_status') as mock_status:
                        mock_status.return_value = {
                            'health_score': 85,
                            'ban_risk_score': 15,
                            'status': 'EXCELLENT',
                            'can_warm': True
                        }
                        
                        # –ú–æ–∫–∞–µ–º advanced_warmup
                        with patch('services.advanced_warmup.advanced_warmup.determine_time_pattern') as mock_pattern:
                            mock_pattern.return_value = {
                                'intensity': 1.0,
                                'duration': (20, 45)
                            }
                            
                            try:
                                from telegram_bot.handlers.automation_handlers import warm_account_callback
                                warm_account_callback(update, self.context)
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
                                update.callback_query.edit_message_text.assert_called_once()
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                                call_args = update.callback_query.edit_message_text.call_args
                                message_text = call_args[0][0]
                                
                                self.assertIn(mock_account.username, message_text)
                                self.assertIn("–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω", message_text)
                                self.assertIn("100%", message_text)
                                
                                print(f"  ‚úÖ {callback_data} ‚Üí –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                                
                            except Exception as e:
                                print(f"  ‚ùå {callback_data} ‚Üí –û—à–∏–±–∫–∞: {e}")
    
    def test_warmup_duration_selection(self):
        """–¢–µ—Å—Ç 4: –í—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞"""
        print("\nüß™ –¢–µ—Å—Ç 4: –í—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞")
        print("="*50)
        
        duration_callbacks = [
            ("start_warm_7_15", 7, 15),
            ("start_warm_1_30", 1, 30),
            ("start_warm_23_60", 23, 60)
        ]
        
        for callback_data, expected_account_id, expected_duration in duration_callbacks:
            with self.subTest(callback_data=callback_data):
                update = self.create_callback_update(callback_data)
                
                # –ú–æ–∫–∞–µ–º advanced_warmup —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è —Ä–µ–∞–ª—å–Ω–æ
                with patch('services.advanced_warmup.advanced_warmup.start_warmup') as mock_warmup:
                    mock_warmup.return_value = (True, "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç")
                    
                    with patch('threading.Thread') as mock_thread:
                        try:
                            from telegram_bot.handlers.automation_handlers import start_warm_callback
                            start_warm_callback(update, self.context)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞
                            mock_thread.assert_called_once()
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
                            update.callback_query.edit_message_text.assert_called_once()
                            
                            call_args = update.callback_query.edit_message_text.call_args
                            message_text = call_args[0][0]
                            
                            self.assertIn("–ü—Ä–æ–≥—Ä–µ–≤ –∑–∞–ø—É—â–µ–Ω", message_text)
                            self.assertIn(str(expected_duration), message_text)
                            
                            print(f"  ‚úÖ {callback_data} ‚Üí –ê–∫–∫–∞—É–Ω—Ç {expected_account_id}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {expected_duration} –º–∏–Ω")
                            
                        except Exception as e:
                            print(f"  ‚ùå {callback_data} ‚Üí –û—à–∏–±–∫–∞: {e}")
    
    def test_interests_selection(self):
        """–¢–µ—Å—Ç 5: –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        print("\nüß™ –¢–µ—Å—Ç 5: –í—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")
        print("="*50)
        
        # –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ "–° –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏"
        update = self.create_callback_update("warm_interests_7")
        
        try:
            from telegram_bot.handlers.automation_handlers import warm_interests_callback
            warm_interests_callback(update, self.context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –º–µ–Ω—é –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            update.callback_query.edit_message_text.assert_called_once()
            
            call_args = update.callback_query.edit_message_text.call_args
            message_text = call_args[0][0]
            
            self.assertIn("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã", message_text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å reply_markup —Å –∫–Ω–æ–ø–∫–∞–º–∏
            reply_markup = call_args[1]['reply_markup']
            self.assertIsNotNone(reply_markup)
            
            print("  ‚úÖ –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞
        update2 = self.create_callback_update("add_interest_7_travel")
        
        try:
            from telegram_bot.handlers.automation_handlers import add_interest_callback
            add_interest_callback(update2, self.context)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ user_data
            key = 'warm_interests_7'
            self.assertIn(key, self.context.user_data)
            self.assertIn('travel', self.context.user_data[key])
            
            print("  ‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å 'travel' –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞: {e}")

def run_ui_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö UI —Ç–µ—Å—Ç–æ–≤"""
    print("üî• –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–°–¢ UI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("Advanced Warmup 2.0 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    suite.addTest(TestUIIntegration('test_warmup_buttons_routing'))
    suite.addTest(TestUIIntegration('test_account_selection_flow'))
    suite.addTest(TestUIIntegration('test_account_callback_handling'))
    suite.addTest(TestUIIntegration('test_warmup_duration_selection'))
    suite.addTest(TestUIIntegration('test_interests_selection'))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=0, stream=open('/dev/null', 'w'))
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"  ‚ùå –û—à–∏–±–æ–∫: {len(result.errors)}")
    print(f"  ‚ö†Ô∏è  –ù–µ—É–¥–∞—á: {len(result.failures)}")
    
    if result.errors:
        print("\n‚ùå –û–®–ò–ë–ö–ò:")
        for test, error in result.errors:
            print(f"  ‚Ä¢ {test}: {error.splitlines()[-1]}")
    
    if result.failures:
        print("\n‚ö†Ô∏è  –ù–ï–£–î–ê–ß–ò:")
        for test, failure in result.failures:
            print(f"  ‚Ä¢ {test}: {failure.splitlines()[-1]}")
    
    if not result.errors and not result.failures:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üöÄ UI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
    print("="*60)
    
    return len(result.errors) == 0 and len(result.failures) == 0

if __name__ == "__main__":
    success = run_ui_tests()
    sys.exit(0 if success else 1) 