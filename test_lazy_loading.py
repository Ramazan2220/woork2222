#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã Lazy Loading –¥–ª—è Instagram –∫–ª–∏–µ–Ω—Ç–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ —ç–∫–æ–Ω–æ–º–∏—é –ø–∞–º—è—Ç–∏
"""

import os
import sys
import time
import json
import psutil
import threading
from typing import List
from concurrent.futures import ThreadPoolExecutor

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from instagram.lazy_client_factory import (
    init_lazy_factory, get_lazy_client, get_lazy_factory_stats,
    cleanup_lazy_clients, shutdown_lazy_factory, LazyInstagramClient
)
from database.db_manager import init_db, get_all_accounts


def get_memory_usage_mb():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –≤ MB"""
    process = psutil.Process()
    return process.memory_info().rss / 1024 / 1024


def print_separator(title: str):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"""
    print("\n" + "=" * 70)
    print(f"üîç {title}")
    print("=" * 70)


def test_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print_separator("–¢–ï–°–¢ 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å")
    
    print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ lazy –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    all_accounts = get_all_accounts()
    accounts = all_accounts[:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
    if not accounts:
        print("‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º lazy –∫–ª–∏–µ–Ω—Ç—ã
        lazy_clients = []
        for account in accounts:
            client = get_lazy_client(account.id)
            lazy_clients.append(client)
            print(f"‚úÖ Lazy –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.id} (@{account.username})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ lazy
        for client in lazy_clients:
            assert not client.is_active, f"–ö–ª–∏–µ–Ω—Ç {client.account_id} –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º"
            assert client.memory_footprint_mb < 0.01, f"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä lazy –∫–ª–∏–µ–Ω—Ç–∞"
        
        print(f"‚úÖ –í—Å–µ {len(lazy_clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω—ã –∫–∞–∫ lazy")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–π—Å—Ç–≤–∞–º –±–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        for client in lazy_clients:
            account_data = client.account
            print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞ {account_data.username} –±–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_memory_comparison():
    """–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    print_separator("–¢–ï–°–¢ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏")
    
    all_accounts = get_all_accounts()
    accounts = all_accounts[:10]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10
    if len(accounts) < 5:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ –ø–∞–º—è—Ç–∏ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5)")
        return False
    
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏...")
    
    # –ò–∑–º–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    baseline_memory = get_memory_usage_mb()
    print(f"üîç –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {baseline_memory:.1f} MB")
    
    try:
        # –°–æ–∑–¥–∞–µ–º lazy –∫–ª–∏–µ–Ω—Ç—ã
        print("\nüì± –°–æ–∑–¥–∞–µ–º lazy –∫–ª–∏–µ–Ω—Ç—ã...")
        lazy_clients = []
        for account in accounts:
            client = get_lazy_client(account.id)
            lazy_clients.append(client)
        
        lazy_memory = get_memory_usage_mb()
        lazy_overhead = lazy_memory - baseline_memory
        print(f"‚úÖ {len(lazy_clients)} lazy –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω—ã")
        print(f"üíæ –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è lazy –∫–ª–∏–µ–Ω—Ç–æ–≤: {lazy_memory:.1f} MB (+{lazy_overhead:.1f} MB)")
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–∞—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤
        print("\n‚ö° –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º 3 –∫–ª–∏–µ–Ω—Ç–∞...")
        activated_clients = []
        for i in range(min(3, len(lazy_clients))):
            client = lazy_clients[i]
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å user_id (—ç—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç)
                _ = client.user_id
                activated_clients.append(client)
                print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client.account_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç {client.account_id}: {e}")
        
        active_memory = get_memory_usage_mb()
        active_overhead = active_memory - lazy_memory
        print(f"üíæ –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {len(activated_clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤: {active_memory:.1f} MB (+{active_overhead:.1f} MB)")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—é
        if len(activated_clients) > 0:
            memory_per_active_client = active_overhead / len(activated_clients)
            estimated_full_memory = baseline_memory + (len(accounts) * memory_per_active_client)
            current_memory = active_memory
            saved_memory = estimated_full_memory - current_memory
            save_percentage = (saved_memory / estimated_full_memory) * 100
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print(f"‚Ä¢ –ü–∞–º—è—Ç—å –Ω–∞ 1 –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç: ~{memory_per_active_client:.1f} MB")
            print(f"‚Ä¢ –ï—Å–ª–∏ –±—ã –≤—Å–µ {len(accounts)} –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã: ~{estimated_full_memory:.1f} MB")
            print(f"‚Ä¢ –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {current_memory:.1f} MB")
            print(f"‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏: {saved_memory:.1f} MB ({save_percentage:.1f}%)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–∞–º—è—Ç–∏: {e}")
        return False


def test_concurrent_access():
    """–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    print_separator("–¢–ï–°–¢ 3: –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø")
    
    all_accounts = get_all_accounts()
    accounts = all_accounts[:5]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5
    if len(accounts) < 3:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
        return False
    
    print(f"‚ö° –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø —Å {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏...")
    
    results = []
    errors = []
    
    def worker(account_id: int, worker_id: int):
        """–†–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            print(f"üë∑ Worker {worker_id}: –Ω–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = get_lazy_client(account_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            account_data = client.account
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
            start_time = time.time()
            try:
                # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç
                _ = client.user_id
                activation_time = time.time() - start_time
                
                results.append({
                    'worker_id': worker_id,
                    'account_id': account_id,
                    'activation_time': activation_time,
                    'success': True
                })
                print(f"‚úÖ Worker {worker_id}: –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∑–∞ {activation_time:.2f}—Å")
                
            except Exception as e:
                results.append({
                    'worker_id': worker_id,
                    'account_id': account_id,
                    'activation_time': 0,
                    'success': False,
                    'error': str(e)
                })
                print(f"‚ö†Ô∏è Worker {worker_id}: –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ - {e}")
            
        except Exception as e:
            errors.append(f"Worker {worker_id}: {e}")
            print(f"‚ùå Worker {worker_id}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤
        with ThreadPoolExecutor(max_workers=len(accounts)) as executor:
            futures = []
            for i, account in enumerate(accounts):
                future = executor.submit(worker, account.id, i+1)
                futures.append(future)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
            for future in futures:
                future.result()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful = [r for r in results if r['success']]
        failed = [r for r in results if not r['success']]
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ù–ö–£–†–ï–ù–¢–ù–û–ì–û –î–û–°–¢–£–ü–ê:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {len(successful)}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {len(failed)}")
        print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫: {len(errors)}")
        
        if successful:
            avg_time = sum(r['activation_time'] for r in successful) / len(successful)
            max_time = max(r['activation_time'] for r in successful)
            min_time = min(r['activation_time'] for r in successful)
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: –º–∏–Ω={min_time:.2f}—Å, –º–∞–∫—Å={max_time:.2f}—Å, —Å—Ä–µ–¥–Ω–µ–µ={avg_time:.2f}—Å")
        
        return len(errors) == 0 and len(successful) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}")
        return False


def test_statistics_and_cleanup():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏"""
    print_separator("–¢–ï–°–¢ 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        initial_stats = get_lazy_factory_stats()
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {initial_stats.total_created}")
        print(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: {initial_stats.currently_active}")
        print(f"‚Ä¢ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: {initial_stats.memory_saved_mb:.1f} MB")
        
        # –°–æ–∑–¥–∞–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
        all_accounts = get_all_accounts()
        accounts = all_accounts[:3]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
        test_clients = []
        
        print(f"\nüîß –°–æ–∑–¥–∞–µ–º {len(accounts)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...")
        for account in accounts:
            client = get_lazy_client(account.id)
            test_clients.append(client)
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π
            if len(test_clients) % 2 == 0:
                try:
                    _ = client.user_id
                    print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {account.id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                except:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç {account.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updated_stats = get_lazy_factory_stats()
        print(f"\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {updated_stats.total_created}")
        print(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: {updated_stats.currently_active}")
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {updated_stats.avg_creation_time:.3f}—Å")
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {updated_stats.avg_operation_time:.3f}—Å")
        print(f"‚Ä¢ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: {updated_stats.memory_saved_mb:.1f} MB")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
        print(f"\nüßπ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏–≤ –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞ –≤ –ø—Ä–æ—à–ª–æ–µ
        for client in test_clients[:2]:
            if client.is_active:
                client._last_access = time.time() - 7200  # 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
        
        cleanup_lazy_clients()
        
        final_stats = get_lazy_factory_stats()
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
        print(f"‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ: {final_stats.total_destroyed}")
        print(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: {final_stats.currently_active}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False


def test_performance_benchmark():
    """–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print_separator("–¢–ï–°–¢ 5: –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    all_accounts = get_all_accounts()
    accounts = all_accounts[:10]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10
    if len(accounts) < 5:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞")
        return False
    
    print(f"üöÄ –ü—Ä–æ–≤–æ–¥–∏–º –±–µ–Ω—á–º–∞—Ä–∫ —Å {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏...")
    
    try:
        # –¢–µ—Å—Ç 1: –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è lazy –∫–ª–∏–µ–Ω—Ç–æ–≤
        start_time = time.time()
        lazy_clients = []
        for account in accounts:
            client = get_lazy_client(account.id)
            lazy_clients.append(client)
        lazy_creation_time = time.time() - start_time
        
        print(f"‚ö° –°–æ–∑–¥–∞–Ω–∏–µ {len(accounts)} lazy –∫–ª–∏–µ–Ω—Ç–æ–≤: {lazy_creation_time:.3f}—Å")
        print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ lazy –∫–ª–∏–µ–Ω—Ç: {lazy_creation_time/len(accounts)*1000:.1f}–º—Å")
        
        # –¢–µ—Å—Ç 2: –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
        activation_times = []
        successful_activations = 0
        
        for i, client in enumerate(lazy_clients[:5]):  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ 5
            try:
                start_time = time.time()
                _ = client.account.username  # –î–æ—Å—Ç—É–ø –±–µ–∑ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                no_activation_time = time.time() - start_time
                
                start_time = time.time()
                _ = client.user_id  # –≠—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç
                activation_time = time.time() - start_time
                
                activation_times.append(activation_time)
                successful_activations += 1
                
                print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {i+1}: –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º {no_activation_time:.3f}—Å, –∞–∫—Ç–∏–≤–∞—Ü–∏—è {activation_time:.3f}—Å")
                
            except Exception as e:
                print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {i+1}: –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ - {e}")
        
        if activation_times:
            avg_activation = sum(activation_times) / len(activation_times)
            max_activation = max(activation_times)
            min_activation = min(activation_times)
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–ï–ù–ß–ú–ê–†–ö–ê:")
            print(f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {successful_activations}/{len(lazy_clients[:5])}")
            print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {avg_activation:.3f}—Å")
            print(f"‚Ä¢ –ú–∏–Ω/–º–∞–∫—Å –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {min_activation:.3f}—Å / {max_activation:.3f}—Å")
            print(f"‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {1200/avg_activation:.0f} –æ–ø–µ—Ä–∞—Ü–∏–π/—á–∞—Å –Ω–∞ –∫–ª–∏–µ–Ω—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–µ–Ω—á–º–∞—Ä–∫–µ: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê LAZY LOADING –°–ò–°–¢–ï–ú–´")
    print("=" * 70)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        init_db()
        init_lazy_factory(max_active_clients=50, cleanup_interval=300)  # 5 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        tests = [
            ("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", test_basic_functionality),
            ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏", test_memory_comparison),
            ("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø", test_concurrent_access),
            ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞", test_statistics_and_cleanup),
            ("–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", test_performance_benchmark),
        ]
        
        results = []
        
        for test_name, test_func in tests:
            print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            try:
                result = test_func()
                results.append((test_name, result))
                status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
                print(f"üèÅ {test_name}: {status}")
            except Exception as e:
                results.append((test_name, False))
                print(f"üèÅ {test_name}: ‚ùå –û–®–ò–ë–ö–ê - {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print_separator("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        
        passed = sum(1 for _, result in results if result)
        total = len(results)
        
        for test_name, result in results:
            status = "‚úÖ" if result else "‚ùå"
            print(f"{status} {test_name}")
        
        print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Lazy Loading —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_stats = get_lazy_factory_stats()
        current_memory = get_memory_usage_mb()
        
        print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {final_stats.total_created}")
        print(f"‚Ä¢ –í—Å–µ–≥–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ: {final_stats.total_destroyed}")
        print(f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–π—á–∞—Å: {final_stats.currently_active}")
        print(f"‚Ä¢ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: {final_stats.memory_saved_mb:.1f} MB")
        print(f"‚Ä¢ –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {current_memory:.1f} MB")
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {final_stats.avg_creation_time:.3f}—Å")
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {final_stats.avg_operation_time:.3f}—Å")
        
        return passed == total
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False
    
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
        print("\nüßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        try:
            shutdown_lazy_factory()
            print("‚úÖ Lazy factory –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 