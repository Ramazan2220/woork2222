import asyncio
import logging
import re
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from config import VERIFICATION_BOT_TOKEN, VERIFICATION_BOT_ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–¥–∞
CODE_FILE = "verification_code.txt"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
last_verification_code = None
code_event = asyncio.Event()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=VERIFICATION_BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if str(message.from_user.id) != str(VERIFICATION_BOT_ADMIN_ID):
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è Instagram.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫—É –∫–æ–¥."
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if str(message.from_user.id) != str(VERIFICATION_BOT_ADMIN_ID):
        return

    await message.answer(
        "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
        "1. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç Instagram\n"
        "2. –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫—É –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞\n"
        "3. –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
    )

@dp.message(Command("status"))
async def cmd_status(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if str(message.from_user.id) != str(VERIFICATION_BOT_ADMIN_ID):
        return

    global last_verification_code

    if last_verification_code:
        await message.answer(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥: {last_verification_code}")
    else:
        await message.answer("‚ùå –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω")

@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if str(message.from_user.id) != str(VERIFICATION_BOT_ADMIN_ID):
        return

    global last_verification_code, code_event

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text or message.caption or ""

    # –ò—â–µ–º 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –≤ —Ç–µ–∫—Å—Ç–µ
    code_match = re.search(r'\b\d{6}\b', text)

    if code_match:
        # –ù–∞—à–ª–∏ –∫–æ–¥
        verification_code = code_match.group(0)
        last_verification_code = verification_code
        code_event.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Ñ–∞–π–ª
        try:
            with open(CODE_FILE, "w") as f:
                f.write(verification_code)
            logger.info(f"–ö–æ–¥ {verification_code} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª {CODE_FILE}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞ –≤ —Ñ–∞–π–ª: {str(e)}")

        await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {verification_code}")
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {verification_code}")
    else:
        # –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é
        await message.answer(
            "üîç –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é (6 —Ü–∏—Ñ—Ä)."
        )

async def get_verification_code(timeout=300):
    """
    –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

    Args:
        timeout (int): –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    Returns:
        str: –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ None, –µ—Å–ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ
    """
    global last_verification_code, code_event

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –∏ —Å–æ–±—ã—Ç–∏–µ
    last_verification_code = None
    code_event.clear()

    try:
        # –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –∏—Å—Ç–µ—á–µ—Ç —Ç–∞–π–º–∞—É—Ç
        await asyncio.wait_for(code_event.wait(), timeout=timeout)
        return last_verification_code
    except asyncio.TimeoutError:
        logger.warning(f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ ({timeout} —Å–µ–∫—É–Ω–¥)")
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if not VERIFICATION_BOT_TOKEN:
        logger.error("–û—à–∏–±–∫–∞: VERIFICATION_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.py")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not VERIFICATION_BOT_ADMIN_ID:
        logger.error("–û—à–∏–±–∫–∞: VERIFICATION_BOT_ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ config.py")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())