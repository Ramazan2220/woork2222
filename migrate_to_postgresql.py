#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–≥—Ä–∞—Ü–∏—è —Å SQLite –Ω–∞ PostgreSQL
"""

import os
import logging
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL
POSTGRES_CONFIG = {
    'host': os.getenv('POSTGRES_HOST', 'localhost'),
    'port': os.getenv('POSTGRES_PORT', '5432'),
    'database': os.getenv('POSTGRES_DB', 'instagram_bot'),
    'user': os.getenv('POSTGRES_USER', 'instagram_bot'),
    'password': os.getenv('POSTGRES_PASSWORD', 'secure_password')
}

def create_postgres_database():
    """–°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        conn = psycopg2.connect(
            host=POSTGRES_CONFIG['host'],
            port=POSTGRES_CONFIG['port'],
            user=POSTGRES_CONFIG['user'],
            password=POSTGRES_CONFIG['password'],
            database='postgres'  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ë–î
        )
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
        cursor.execute(
            "SELECT 1 FROM pg_database WHERE datname = %s",
            (POSTGRES_CONFIG['database'],)
        )
        
        if not cursor.fetchone():
            # –°–æ–∑–¥–∞–µ–º –ë–î
            cursor.execute(f"CREATE DATABASE {POSTGRES_CONFIG['database']}")
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {POSTGRES_CONFIG['database']} —Å–æ–∑–¥–∞–Ω–∞")
        else:
            logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {POSTGRES_CONFIG['database']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
        raise

def migrate_data():
    """–ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ PostgreSQL"""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
        sqlite_engine = create_engine('sqlite:///data/database.sqlite')
        SqliteSession = sessionmaker(bind=sqlite_engine)
        sqlite_session = SqliteSession()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        postgres_url = f"postgresql://{POSTGRES_CONFIG['user']}:{POSTGRES_CONFIG['password']}@{POSTGRES_CONFIG['host']}:{POSTGRES_CONFIG['port']}/{POSTGRES_CONFIG['database']}"
        postgres_engine = create_engine(postgres_url)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        from database.models import Base, InstagramAccount, Proxy, PublishTask, TelegramUser, Setting
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL
        Base.metadata.create_all(postgres_engine)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –≤ PostgreSQL")
        
        PostgresSession = sessionmaker(bind=postgres_engine)
        postgres_session = PostgresSession()
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
        tables_to_migrate = [
            (Proxy, "–ø—Ä–æ–∫—Å–∏"),
            (InstagramAccount, "–∞–∫–∫–∞—É–Ω—Ç—ã"),
            (PublishTask, "–∑–∞–¥–∞—á–∏"),
            (TelegramUser, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
            (Setting, "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        ]
        
        for model, name in tables_to_migrate:
            logger.info(f"üìã –ú–∏–≥—Ä–∞—Ü–∏—è {name}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ SQLite
            records = sqlite_session.query(model).all()
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ PostgreSQL
            for record in records:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏
                new_record = model()
                for column in model.__table__.columns:
                    setattr(new_record, column.name, getattr(record, column.name))
                
                postgres_session.add(new_record)
            
            postgres_session.commit()
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π {name}")
        
        sqlite_session.close()
        postgres_session.close()
        
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º config.py
        config_update = f"""
# –û–±–Ω–æ–≤–∏—Ç–µ DATABASE_URL –≤ config.py:
DATABASE_URL = "postgresql://{POSTGRES_CONFIG['user']}:{POSTGRES_CONFIG['password']}@{POSTGRES_CONFIG['host']}:{POSTGRES_CONFIG['port']}/{POSTGRES_CONFIG['database']}"
"""
        logger.info(config_update)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise

if __name__ == "__main__":
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ù–ê PostgreSQL")
    print("\n–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
    print("1. PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
    print("2. –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–∞–≤–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ë–î")
    print("3. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω psycopg2: pip install psycopg2-binary")
    print("4. –°–¥–µ–ª–∞–Ω –±—ç–∫–∞–ø SQLite –ë–î")
    
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
    
    if response.lower() == 'yes':
        create_postgres_database()
        migrate_data()
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞") 