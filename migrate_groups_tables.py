#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≥—Ä—É–ø–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import sys
import logging
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('.')

from config import DATABASE_URL
from database.models import Base, AccountGroup

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_database():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≥—Ä—É–ø–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        engine = create_engine(DATABASE_URL)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç)
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≥—Ä—É–ø–ø...")
        Base.metadata.create_all(engine)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
        Session = sessionmaker(bind=engine)
        session = Session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≥—Ä—É–ø–ø
        result = session.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='account_groups_table'"))
        if result.fetchone():
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ account_groups_table —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ account_groups_table –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
        result = session.execute(text("SELECT name FROM sqlite_master WHERE type='table' AND name='account_groups'"))
        if result.fetchone():
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ account_groups —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ account_groups –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        
        default_groups = [
            ("üî• –ê–∫—Ç–∏–≤–Ω—ã–µ", "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã", "üî•"),
            ("üÜï –ù–æ–≤—ã–µ", "–ù–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞", "üÜï"),
            ("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ", "–ê–∫–∫–∞—É–Ω—Ç—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏", "‚ö†Ô∏è"),
            ("üíé VIP", "–í–∞–∂–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã", "üíé"),
            ("üß™ –¢–µ—Å—Ç–æ–≤—ã–µ", "–ê–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "üß™"),
        ]
        
        for name, description, icon in default_groups:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞
            existing = session.query(AccountGroup).filter_by(name=name).first()
            if not existing:
                group = AccountGroup(name=name, description=description, icon=icon)
                session.add(group)
                logger.info(f"  + –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {icon} {name}")
            else:
                logger.info(f"  - –ì—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {icon} {name}")
        
        session.commit()
        session.close()
        
        logger.info("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    if migrate_database():
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥—Ä—É–ø–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
        print("\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:")
        print("1. –°–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print("2. –î–æ–±–∞–≤–ª—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –≤ –≥—Ä—É–ø–ø—ã")
        print("3. –£–ø—Ä–∞–≤–ª—è—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º")
        print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ê–∫–∫–∞—É–Ω—Ç—ã' -> '–ì—Ä—É–ø–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤'")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1) 