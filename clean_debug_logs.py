#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ DEBUG –ª–æ–≥–æ–≤ –∏–∑ –∫–æ–¥–∞
"""

import os
import re
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def clean_debug_logs(directory="."):
    """–û—á–∏—Å—Ç–∏—Ç—å DEBUG –ª–æ–≥–∏ –∏–∑ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤"""
    
    patterns_to_remove = [
        r'print\(f?\[?"?\[?DEBUG\]?.*?\)',  # print(f"[DEBUG]...")
        r'logger\.debug\(.*?\)',  # logger.debug(...)
        r'logging\.debug\(.*?\)',  # logging.debug(...)
    ]
    
    files_processed = 0
    lines_removed = 0
    
    for root, dirs, files in os.walk(directory):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–ø–∫–∏
        dirs[:] = [d for d in dirs if d not in ['.venv', 'venv', '__pycache__', '.git', 'bot_env_working']]
        
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    original_content = content
                    
                    # –£–¥–∞–ª—è–µ–º DEBUG —Å—Ç—Ä–æ–∫–∏
                    for pattern in patterns_to_remove:
                        matches = len(re.findall(pattern, content, re.MULTILINE | re.DOTALL))
                        if matches > 0:
                            content = re.sub(pattern + r'\s*\n?', '', content, flags=re.MULTILINE | re.DOTALL)
                            lines_removed += matches
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if content != original_content:
                        with open(filepath, 'w', encoding='utf-8') as f:
                            f.write(content)
                        files_processed += 1
                        logger.info(f"‚úÖ –û—á–∏—â–µ–Ω —Ñ–∞–π–ª: {filepath}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filepath}: {e}")
    
    logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_processed}")
    logger.info(f"   –£–¥–∞–ª–µ–Ω–æ DEBUG —Å—Ç—Ä–æ–∫: {lines_removed}")

def convert_critical_debugs():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ DEBUG –≤ INFO"""
    
    # –°–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö debug —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ INFO
    important_patterns = [
        (r'logger\.debug\((.*?[Ss]uccessful.*?)\)', r'logger.info(\1)'),
        (r'logger\.debug\((.*?[Ee]rror.*?)\)', r'logger.warning(\1)'),
        (r'logger\.debug\((.*?[Ff]ailed.*?)\)', r'logger.warning(\1)'),
    ]
    
    converted = 0
    
    for root, dirs, files in os.walk("."):
        dirs[:] = [d for d in dirs if d not in ['.venv', 'venv', '__pycache__', '.git', 'bot_env_working']]
        
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    original_content = content
                    
                    for pattern, replacement in important_patterns:
                        matches = len(re.findall(pattern, content))
                        if matches > 0:
                            content = re.sub(pattern, replacement, content)
                            converted += matches
                    
                    if content != original_content:
                        with open(filepath, 'w', encoding='utf-8') as f:
                            f.write(content)
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {filepath}: {e}")
    
    logger.info(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤–∞–∂–Ω—ã—Ö DEBUG –≤ INFO: {converted}")

if __name__ == "__main__":
    print("üßπ –û—á–∏—Å—Ç–∫–∞ DEBUG –ª–æ–≥–æ–≤ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞")
    print("‚ö†Ô∏è  –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ debug —Å–æ–æ–±—â–µ–Ω–∏—è!")
    
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
    
    if response.lower() == 'yes':
        # –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ
        convert_critical_debugs()
        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        clean_debug_logs()
    else:
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞") 