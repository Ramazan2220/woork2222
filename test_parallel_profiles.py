#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
"""

import time
import logging
from database.db_manager import get_instagram_accounts
from instagram.profile_manager import ProfileManager
from utils.system_monitor import system_monitor
import concurrent.futures
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_parallel_update():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    all_accounts = get_instagram_accounts()
    accounts = [acc for acc in all_accounts if acc.is_active][:5]
    if not accounts:
        logger.error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
    workload_limits = system_monitor.get_workload_limits()
    max_workers = min(workload_limits.max_workers, len(accounts))
    
    logger.info(f"üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    logger.info(f"  - –ú–∞–∫—Å–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤: {workload_limits.max_workers}")
    logger.info(f"  - –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–æ–≤: {max_workers}")
    logger.info(f"  - –û–ø–∏—Å–∞–Ω–∏–µ: {workload_limits.description}")
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –∏–º—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    test_name = f"Test Update {int(time.time())}"
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    success_count = 0
    errors = []
    lock = threading.Lock()
    start_time = time.time()
    
    def update_single_profile(account):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å"""
        nonlocal success_count
        thread_start = time.time()
        try:
            logger.info(f"[Thread-{threading.current_thread().name}] –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ @{account.username}")
            
            profile_manager = ProfileManager(account.id)
            success, message = profile_manager.update_profile_name(test_name)
            
            with lock:
                if success:
                    success_count += 1
                    logger.info(f"‚úÖ @{account.username}: –£—Å–ø–µ—à–Ω–æ –∑–∞ {time.time()-thread_start:.1f}—Å")
                else:
                    errors.append(f"@{account.username}: {message}")
                    logger.error(f"‚ùå @{account.username}: {message}")
                    
        except Exception as e:
            with lock:
                error_msg = str(e)
                errors.append(f"@{account.username}: {error_msg}")
                logger.error(f"‚ùå @{account.username}: {error_msg}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    logger.info(f"\nüöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å {max_workers} –ø–æ—Ç–æ–∫–∞–º–∏...\n")
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = {executor.submit(update_single_profile, acc): acc for acc in accounts}
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        concurrent.futures.wait(futures)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_time = time.time() - start_time
    logger.info(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    logger.info(f"  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    logger.info(f"  - –£—Å–ø–µ—à–Ω–æ: {success_count}")
    logger.info(f"  - –û—à–∏–±–æ–∫: {len(errors)}")
    logger.info(f"  - –í—Ä–µ–º—è: {total_time:.1f}—Å")
    logger.info(f"  - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {total_time/len(accounts):.1f}—Å")
    
    if errors:
        logger.info("\n‚ùå –û—à–∏–±–∫–∏:")
        for error in errors:
            logger.info(f"  - {error}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    sequential_time = len(accounts) * (total_time / len(accounts) * max_workers)
    logger.info(f"\n‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {sequential_time/total_time:.1f}x –±—ã—Å—Ç—Ä–µ–µ —á–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ")

if __name__ == "__main__":
    test_parallel_update() 