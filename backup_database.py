#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î
"""

import os
import shutil
import logging
from datetime import datetime
import schedule
import time
import gzip

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DatabaseBackup:
    def __init__(self):
        self.db_path = "data/database.sqlite"
        self.backup_dir = "data/backups"
        self.max_backups = 10  # –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
        os.makedirs(self.backup_dir, exist_ok=True)
    
    def backup(self):
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
            if not os.path.exists(self.db_path):
                logger.error(f"–ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.db_path}")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"database_backup_{timestamp}.sqlite.gz"
            backup_path = os.path.join(self.backup_dir, backup_name)
            
            # –°–æ–∑–¥–∞–µ–º —Å–∂–∞—Ç—É—é –∫–æ–ø–∏—é
            with open(self.db_path, 'rb') as f_in:
                with gzip.open(backup_path, 'wb') as f_out:
                    shutil.copyfileobj(f_in, f_out)
            
            logger.info(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
            self._cleanup_old_backups()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            return False
    
    def _cleanup_old_backups(self):
        """–£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—ç–∫–∞–ø–æ–≤
            backups = []
            for filename in os.listdir(self.backup_dir):
                if filename.startswith("database_backup_") and filename.endswith(".sqlite.gz"):
                    filepath = os.path.join(self.backup_dir, filename)
                    backups.append((filepath, os.path.getctime(filepath)))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
            backups.sort(key=lambda x: x[1], reverse=True)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
            for backup_path, _ in backups[self.max_backups:]:
                os.remove(backup_path)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {backup_path}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {e}")
    
    def restore(self, backup_filename):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î –∏–∑ –±—ç–∫–∞–ø–∞"""
        try:
            backup_path = os.path.join(self.backup_dir, backup_filename)
            
            if not os.path.exists(backup_path):
                logger.error(f"–ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_path}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –ë–î
            if os.path.exists(self.db_path):
                shutil.copy2(self.db_path, f"{self.db_path}.before_restore")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
            with gzip.open(backup_path, 'rb') as f_in:
                with open(self.db_path, 'wb') as f_out:
                    shutil.copyfileobj(f_in, f_out)
            
            logger.info(f"‚úÖ –ë–î –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑: {backup_path}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False

def run_scheduled_backups():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤"""
    backup = DatabaseBackup()
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –±—ç–∫–∞–ø —Å—Ä–∞–∑—É
    backup.backup()
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –±—ç–∫–∞–ø—ã –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    schedule.every(6).hours.do(backup.backup)
    
    logger.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã –∑–∞–ø—É—â–µ–Ω—ã (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)")
    
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

if __name__ == "__main__":
    backup = DatabaseBackup()
    
    print("1. –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø")
    print("2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3): ")
    
    if choice == "1":
        backup.backup()
    elif choice == "2":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã
        backups = [f for f in os.listdir(backup.backup_dir) 
                   if f.startswith("database_backup_") and f.endswith(".sqlite.gz")]
        
        if not backups:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤")
        else:
            print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:")
            for i, b in enumerate(backups, 1):
                print(f"{i}. {b}")
            
            idx = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –±—ç–∫–∞–ø–∞: ")) - 1
            if 0 <= idx < len(backups):
                backup.restore(backups[idx])
    elif choice == "3":
        run_scheduled_backups() 