import logging
import imaplib
import email as email_lib
from email.header import decode_header
import re
import time
from datetime import datetime, timedelta, timezone
from typing import Optional, List, Dict
from .imap_pool import get_imap_connection

logger = logging.getLogger(__name__)

class OptimizedIMAPLogger:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    
    def __init__(self, verbose: bool = False):
        self.verbose = verbose
        self.stats = {}
    
    def log_search_start(self, email_addr: str, attempt: int):
        logger.info(f"üîç –ü–æ–∏—Å–∫ –∫–æ–¥–∞ –¥–ª—è {email_addr} (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
        self.stats[email_addr] = {'start_time': datetime.now(), 'searches': 0, 'emails_found': 0}
    
    def log_folder_result(self, email_addr: str, folder: str, count: int):
        if count > 0:
            logger.info(f"üìß –ù–∞–π–¥–µ–Ω–æ {count} –ø–∏—Å–µ–º –≤ {folder}")
            self.stats[email_addr]['emails_found'] += count
        elif self.verbose:
            logger.debug(f"üîç –ü–∞–ø–∫–∞ {folder}: –ø—É—Å—Ç–æ")
        self.stats[email_addr]['searches'] += 1
    
    def log_code_found(self, email_addr: str, code: str):
        stats = self.stats[email_addr]
        duration = (datetime.now() - stats['start_time']).total_seconds()
        logger.info(f"‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω –¥–ª—è {email_addr}: {code} (–∑–∞ {duration:.1f}—Å, {stats['searches']} –ø–æ–∏—Å–∫–æ–≤)")
    
    def log_code_not_found(self, email_addr: str, attempt: int, max_attempts: int):
        stats = self.stats[email_addr]
        duration = (datetime.now() - stats['start_time']).total_seconds()
        
        if attempt >= max_attempts:
            logger.warning(f"‚ùå –ö–æ–¥ –ù–ï –Ω–∞–π–¥–µ–Ω –¥–ª—è {email_addr} –ø–æ—Å–ª–µ {attempt} –ø–æ–ø—ã—Ç–æ–∫ "
                         f"({stats['searches']} –ø–æ–∏—Å–∫–æ–≤, {stats['emails_found']} –ø–∏—Å–µ–º, {duration:.1f}—Å)")
        elif self.verbose:
            logger.debug(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts} –Ω–µ—É–¥–∞—á–Ω–∞")
    
    def log_error(self, email_addr: str, error_type: str, error_msg: str):
        logger.error(f"‚ö†Ô∏è IMAP –æ—à–∏–±–∫–∞ –¥–ª—è {email_addr} ({error_type}): {error_msg}")

def extract_verification_code_optimized(subject: str, text: str, html: str = None) -> Optional[str]:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    # –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–¥—ã
    excluded_codes = {'262626', '999999', '000000', '123456', '111111'}
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ)
    patterns = [
        r'[–ö–∫]–æ–¥(?:\s+–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è|\s+–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)?:\s*<?(\d{6})>?',
        r'[Cc]ode:\s*<?(\d{6})>?',
        r'[–í–≤]–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π\s+–∫–æ–¥:\s*<?(\d{6})>?',
        r'verification\s+code(?:\s+is)?:\s*<?(\d{6})>?',
        r'security\s+code(?:\s+is)?:\s*<?(\d{6})>?',
        r'confirm(?:ation)?\s+code(?:\s+is)?:\s*<?(\d{6})>?',
        r'(\d{6})\s*(?:is\s+your|–≤–∞—à)\s+(?:verification|security|confirmation|–∫–æ–¥)',
        r'(\d{6})\s*-\s*–≤–∞—à\s+–∫–æ–¥',
        r'code\s+(\d{6})',
        r'(\d{6})',  # –û–±—â–∏–π –ø–æ–∏—Å–∫ –ª—é–±–æ–≥–æ 6-–∑–Ω–∞—á–Ω–æ–≥–æ —á–∏—Å–ª–∞
    ]
    
    # –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –∏ HTML
    for content in [subject, text, html or ""]:
        if not content:
            continue
            
        for pattern in patterns:
            matches = re.findall(pattern, content, re.IGNORECASE)
            for match in matches:
                if match.isdigit() and len(match) == 6 and match not in excluded_codes:
                    return match
    
    return None

def get_verification_code_optimized(email_address: str, email_password: str, 
                                  since_time: datetime = None, max_attempts: int = 3, 
                                  verbose: bool = False) -> Optional[str]:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    
    Args:
        email_address: –ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
        email_password: –ü–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã  
        since_time: –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 3 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥)
        max_attempts: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
        verbose: –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    Returns:
        –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ None
    """
    
    imap_logger = OptimizedIMAPLogger(verbose=verbose)
    
    if since_time is None:
        since_time = datetime.now(timezone.utc) - timedelta(minutes=3)
    
    for attempt in range(1, max_attempts + 1):
        imap_logger.log_search_start(email_address, attempt)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            with get_imap_connection(email_address, email_password) as connection:
                if not connection:
                    imap_logger.log_error(email_address, "connection", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
                    continue
                
                mail = connection.mail
                code = None
                
                # –ü–æ–∏—Å–∫ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
                folders = ['INBOX', 'Junk']  # –£–±–∏—Ä–∞–µ–º Spam —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ —á–∞—Å—Ç–æ –Ω–µ—Ç
                
                for folder in folders:
                    try:
                        status, _ = mail.select(folder)
                        if status != 'OK':
                            continue
                        
                        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ (—Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ)
                        since_date = since_time.strftime("%d-%b-%Y")
                        search_criteria = [
                            f'(SINCE "{since_date}" FROM "security@mail.instagram.com")',
                            f'(SINCE "{since_date}" SUBJECT "Instagram")',
                            f'(SINCE "{since_date}" SUBJECT "security code")',
                            f'(SINCE "{since_date}")',  # –û–±—â–∏–π –ø–æ–∏—Å–∫ –∫–∞–∫ fallback
                        ]
                        
                        email_ids = set()
                        
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫–∏ (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ)
                        for criteria in search_criteria:
                            try:
                                status, messages = mail.search(None, criteria)
                                if status == 'OK' and messages[0]:
                                    new_ids = messages[0].split()
                                    email_ids.update(new_ids)
                                    if verbose and new_ids:
                                        logger.debug(f"üîç {criteria}: {len(new_ids)} –ø–∏—Å–µ–º")
                            except Exception as e:
                                if verbose:
                                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {criteria}: {e}")
                        
                        imap_logger.log_folder_result(email_address, folder, len(email_ids))
                        
                        if not email_ids:
                            continue
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–∞ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ)
                        emails_data = []
                        for email_id in email_ids:
                            try:
                                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                                status, msg_data = mail.fetch(email_id, "(BODY[HEADER.FIELDS (SUBJECT DATE FROM)])")
                                if status == 'OK':
                                    header_msg = email_lib.message_from_bytes(msg_data[0][1])
                                    
                                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                                    date_str = header_msg.get('Date')
                                    email_date = None
                                    if date_str:
                                        try:
                                            email_date = email_lib.utils.parsedate_to_datetime(date_str)
                                        except:
                                            pass
                                    
                                    emails_data.append({
                                        'id': email_id,
                                        'date': email_date or datetime.min.replace(tzinfo=timezone.utc),
                                        'from': header_msg.get('From', ''),
                                        'subject': header_msg.get('Subject', '')
                                    })
                            except Exception as e:
                                if verbose:
                                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {email_id}: {e}")
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                        emails_data.sort(key=lambda x: x['date'], reverse=True)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏—Å—å–º–∞
                        for email_data in emails_data:
                            try:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–∏—Å—å–º–∞
                                if email_data['date'] < since_time:
                                    if verbose:
                                        logger.debug(f"‚è∞ –ü–∏—Å—å–º–æ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ: {email_data['date']}")
                                    continue
                                
                                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
                                status, msg_data = mail.fetch(email_data['id'], "(RFC822)")
                                if status != 'OK':
                                    continue
                                
                                full_msg = email_lib.message_from_bytes(msg_data[0][1])
                                
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É
                                subject = ""
                                subject_header = full_msg.get("Subject", "")
                                if subject_header:
                                    decoded = decode_header(subject_header)
                                    for part, charset in decoded:
                                        if isinstance(part, bytes):
                                            subject += part.decode(charset or 'utf-8', 'replace')
                                        else:
                                            subject += part
                                
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                                text_content = ""
                                html_content = ""
                                
                                if full_msg.is_multipart():
                                    for part in full_msg.walk():
                                        content_type = part.get_content_type()
                                        if content_type == "text/plain":
                                            text_content = part.get_payload(decode=True).decode('utf-8', 'replace')
                                        elif content_type == "text/html":
                                            html_content = part.get_payload(decode=True).decode('utf-8', 'replace')
                                else:
                                    text_content = full_msg.get_payload(decode=True).decode('utf-8', 'replace')
                                
                                # –ò—â–µ–º –∫–æ–¥
                                code = extract_verification_code_optimized(subject, text_content, html_content)
                                
                                if code:
                                    imap_logger.log_code_found(email_address, code)
                                    return code
                                
                                if verbose:
                                    logger.debug(f"üîç –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∏—Å—å–º–µ: {subject[:50]}...")
                            
                            except Exception as e:
                                if verbose:
                                    logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏—Å—å–º–∞: {e}")
                        
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–¥ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ, –≤—ã—Ö–æ–¥–∏–º
                        if code:
                            break
                    
                    except Exception as e:
                        imap_logger.log_error(email_address, f"folder_{folder}", str(e))
                
                if code:
                    return code
        
        except Exception as e:
            imap_logger.log_error(email_address, "connection", str(e))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á—É
        imap_logger.log_code_not_found(email_address, attempt, max_attempts)
        
        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        if attempt < max_attempts:
            time.sleep(15)
    
    return None

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
def get_verification_code_from_email(email, password, max_attempts=3, delay_between_attempts=5):
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
    return get_verification_code_optimized(
        email_address=email,
        email_password=password, 
        max_attempts=max_attempts,
        verbose=False  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    ) 