from instagrapi import Client
from instagrapi.mixins.private import PrivateRequestMixin
import logging
import builtins
import re
from instagram.email_utils import get_verification_code_from_email
from database.db_manager import get_instagram_account

logger = logging.getLogger(__name__)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
original_send_private_request = PrivateRequestMixin._send_private_request

# –°–æ–∑–¥–∞–µ–º —É—Å–∏–ª–µ–Ω–Ω—ã–π –ø–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ _send_private_request
def patched_send_private_request(self, *args, **kwargs):
    """
    –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ _send_private_request, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π User-Agent –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    """
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if hasattr(self, "settings") and "user_agent" in self.settings:
        custom_user_agent = self.settings["user_agent"]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        self.user_agent = custom_user_agent
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏
        if hasattr(self, 'private') and hasattr(self.private, 'headers'):
            self.private.headers['User-Agent'] = custom_user_agent
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        if len(args) > 0 and hasattr(args[0], 'headers'):
            args[0].headers['User-Agent'] = custom_user_agent
            
        logger.info(f"üîß –ü–ê–¢–ß: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω User-Agent: {custom_user_agent}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ª–æ–≥–æ–≤
        if "device_name" in self.settings:
            logger.info(f"üì± –£–°–¢–†–û–ô–°–¢–í–û: {self.settings['device_name']}")

    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    return original_send_private_request(self, *args, **kwargs)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
PrivateRequestMixin._send_private_request = patched_send_private_request

# –ü–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ set_settings
original_set_settings = Client.set_settings

def patched_set_settings(self, settings):
    """
    –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ set_settings, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π User-Agent –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    """
    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    result = original_set_settings(self, settings)

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
    if "user_agent" in settings:
        custom_user_agent = settings["user_agent"]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        self.user_agent = custom_user_agent
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏
        if hasattr(self, 'private') and hasattr(self.private, 'headers'):
            self.private.headers['User-Agent'] = custom_user_agent
            
        # –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏
        if hasattr(self, 'private'):
            self.private.user_agent = custom_user_agent
            
        logger.info(f"üîß SET_SETTINGS: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω User-Agent: {custom_user_agent}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if "device_name" in settings:
            logger.info(f"üì± –ü–†–ò–ú–ï–ù–ï–ù–û –£–°–¢–†–û–ô–°–¢–í–û: {settings['device_name']}")

    return result

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á
Client.set_settings = patched_set_settings

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ login
original_login = Client.login

def patched_login(self, username, password=None, relogin=False):
    """
    –£—Å–∏–ª–µ–Ω–Ω—ã–π –ø–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ login, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π User-Agent –ø–µ—Ä–µ–¥ –ª–æ–≥–∏–Ω–æ–º
    """
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º User-Agent –ø–µ—Ä–µ–¥ –ª–æ–≥–∏–Ω–æ–º
    if hasattr(self, "settings") and "user_agent" in self.settings:
        custom_user_agent = self.settings["user_agent"]
        self.user_agent = custom_user_agent
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏
        if hasattr(self, 'private') and hasattr(self.private, 'headers'):
            self.private.headers['User-Agent'] = custom_user_agent
            
        logger.info(f"üîß LOGIN_PATCH: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω User-Agent –ø–µ—Ä–µ–¥ –ª–æ–≥–∏–Ω–æ–º: {custom_user_agent}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if "device_name" in self.settings:
            logger.info(f"üì± –õ–û–ì–ò–ù –° –£–°–¢–†–û–ô–°–¢–í–û–ú: {self.settings['device_name']}")

    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ login
    return original_login(self, username, password, relogin)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è login
Client.login = patched_login

# –ü–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ __init__ –∫–ª–∏–µ–Ω—Ç–∞
original_init = Client.__init__

def patched_init(self, settings=None, proxy=None, delay_range=None, **kwargs):
    """
    –ü–∞—Ç—á –¥–ª—è –º–µ—Ç–æ–¥–∞ __init__, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π User-Agent
    """
    # –ï—Å–ª–∏ settings –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ —Ä–∞–≤–Ω—ã None, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    if settings is None:
        settings = {}
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    result = original_init(self, settings, proxy, delay_range, **kwargs)
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ self.settings –Ω–µ None –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if not hasattr(self, 'settings') or self.settings is None:
        self.settings = {}
        logger.warning("üîß INIT_PATCH: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å settings")
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º User-Agent
    if settings and "user_agent" in settings:
        custom_user_agent = settings["user_agent"]
        self.user_agent = custom_user_agent
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏
        if hasattr(self, 'private') and hasattr(self.private, 'headers'):
            self.private.headers['User-Agent'] = custom_user_agent
            
        logger.info(f"üîß INIT_PATCH: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω User-Agent –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ: {custom_user_agent}")
    
    return result

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è __init__
Client.__init__ = patched_init

logger.info("üöÄ –£—Å–∏–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—á–∏ –¥–ª—è instagrapi —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é input
_original_input = builtins.input

# –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏
_is_web_mode = False

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
_current_accounts_cache = {}

# –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
_password_attempts = {}

def set_web_mode(enabled=True):
    """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –≤–µ–±-—Ä–µ–∂–∏–º"""
    global _is_web_mode
    _is_web_mode = enabled
    if enabled:
        logger.info("‚úÖ –í–∫–ª—é—á–µ–Ω –≤–µ–±-—Ä–µ–∂–∏–º - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ input()")
        apply_input_patch()
    else:
        logger.info("‚ùå –í—ã–∫–ª—é—á–µ–Ω –≤–µ–±-—Ä–µ–∂–∏–º")
        remove_input_patch()

def add_account_to_cache(account_id, username, email=None, email_password=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ –∫—ç—à –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    _current_accounts_cache[username] = {
        'account_id': account_id,
        'email': email,
        'email_password': email_password
    }
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    global _password_attempts
    if username in _password_attempts:
        _password_attempts[username] = 0
    logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—ç—à –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")

def patched_input(prompt=""):
    """–ü–∞—Ç—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è input –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏"""
    global _current_accounts_cache, _password_attempts
    
    if not _is_web_mode:
        return _original_input(prompt)
    
    prompt_str = str(prompt)
    logger.info(f"üîç –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –∑–∞–ø—Ä–æ—Å input(): {prompt_str}")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞
    logger.debug(f"üì¶ –¢–µ–∫—É—â–∏–π –∫—ç—à –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {list(_current_accounts_cache.keys())}")
    logger.debug(f"üî¢ –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ –ø–∞—Ä–æ–ª–µ–π: {_password_attempts}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    # –§–æ—Ä–º–∞—Ç—ã:
    # "Enter code (6 digits) for username (ChallengeChoice.EMAIL):"
    # "Enter code (6 digits) for username (EMAIL):"
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    code_patterns = [
        r"Enter code.*?for\s+(\w+)\s*\(.*?EMAIL.*?\)",
        r"Enter code.*?for\s+(\w+)",
        r"code.*?digits.*?for\s+(\w+)",
        r"verification.*?code.*?(\w+)"
    ]
    
    username = None
    for pattern in code_patterns:
        match = re.search(pattern, prompt_str, re.IGNORECASE)
        if match:
            username = match.group(1)
            break
    
    if username:
        logger.info(f"üìß –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {username}")
        
        # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∫—ç—à–µ
        if username in _current_accounts_cache:
            account_data = _current_accounts_cache[username]
            email = account_data.get('email')
            email_password = account_data.get('email_password')
            
            if email and email_password:
                logger.info(f"üîë –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ email {email} –¥–ª—è {username}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ –ø–æ—á—Ç—ã
                code = get_verification_code_from_email(
                    email, 
                    email_password, 
                    max_attempts=5, 
                    delay_between_attempts=10
                )
                
                if code:
                    logger.info(f"‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω: {code}")
                    return code
                else:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ email –¥–ª—è {username}")
                    return ""
            else:
                logger.warning(f"‚ö†Ô∏è Email –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {username}")
                return ""
        else:
            logger.warning(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            for cached_username in _current_accounts_cache:
                if cached_username.lower() in username.lower() or username.lower() in cached_username.lower():
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {cached_username}")
                    account_data = _current_accounts_cache[cached_username]
                    email = account_data.get('email')
                    email_password = account_data.get('email_password')
                    
                    if email and email_password:
                        code = get_verification_code_from_email(email, email_password, max_attempts=5, delay_between_attempts=10)
                        if code:
                            logger.info(f"‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω: {code}")
                            return code
            
            return ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è
    password_patterns = [
        r"password.*?for\s+(\w+)",
        r"enter.*?password.*?(\w+)"
    ]
    
    for pattern in password_patterns:
        match = re.search(pattern, prompt_str, re.IGNORECASE)
        if match:
            username = match.group(1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            if username not in _password_attempts:
                _password_attempts[username] = 0
            
            _password_attempts[username] += 1
            
            if _password_attempts[username] > 3:
                logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è {username}. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª.")
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                _password_attempts[username] = 0
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                raise KeyboardInterrupt(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è {username}")
            
            logger.info(f"üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è {username} (–ø–æ–ø—ã—Ç–∫–∞ {_password_attempts[username]}/3)")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏–∑ –ë–î
            try:
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∫—ç—à–µ
                if username in _current_accounts_cache:
                    account_id = _current_accounts_cache[username].get('account_id')
                    if account_id:
                        from database.db_manager import get_instagram_account as get_account_by_id
                        account = get_account_by_id(account_id)
                        if account and account.password:
                            logger.info(f"‚úÖ –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è {username} (ID: {account_id})")
                            return account.password
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –∫—ç—à–µ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ username
                from database.db_manager import get_session
                from database.models import InstagramAccount
                session = get_session()
                account = session.query(InstagramAccount).filter_by(username=username).first()
                session.close()
                
                if account and account.password:
                    logger.info(f"‚úÖ –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è {username}")
                    return account.password
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è –∏–∑ –ë–î: {e}")
            
            # –í –≤–µ–±-–≤–µ—Ä—Å–∏–∏ –Ω–µ –º–æ–∂–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è {username}")
            return ""
    
    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å input(): {prompt_str}")
    return ""

def reset_password_attempts():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ –ø–∞—Ä–æ–ª–µ–π"""
    global _password_attempts
    _password_attempts = {}
    logger.info("üîÑ –°—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫ –ø–∞—Ä–æ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã")

def apply_input_patch():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–∞—Ç—á –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ input"""
    builtins.input = patched_input
    logger.info("‚úÖ –ü–∞—Ç—á –¥–ª—è input() –ø—Ä–∏–º–µ–Ω–µ–Ω")

def remove_input_patch():
    """–£–¥–∞–ª—è–µ—Ç –ø–∞—Ç—á –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ input"""
    builtins.input = _original_input
    logger.info("‚ùå –ü–∞—Ç—á –¥–ª—è input() —É–¥–∞–ª–µ–Ω")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –≤–µ–±-—Ä–µ–∂–∏–º –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –∏–∑ web_api.py
import sys
import os

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ web_api.py
if any('web_api.py' in arg for arg in sys.argv) or 'web_api' in sys.modules:
    set_web_mode(True)
    logger.info("üåê –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—Å–∫ web_api.py - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω –≤–µ–±-—Ä–µ–∂–∏–º")

def patch_public_graphql_request(client):
    """–ü–∞—Ç—á–∏–º public_graphql_request –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º data"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω –ª–∏ —É–∂–µ –º–µ—Ç–æ–¥
    if hasattr(client.public_graphql_request, '_is_patched'):
        return
        
    original_method = client.public_graphql_request
    
    def patched_public_graphql_request(query_hash, variables, paginate=False):
        try:
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            return original_method(query_hash, variables, paginate)
        except KeyError as e:
            if str(e) == "'data'":
                logger.warning("üîß –ü–ê–¢–ß: Instagram –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –±–µ–∑ –ø–æ–ª—è 'data', –≤–µ—Ä–æ—è—Ç–Ω–æ –ø—Ä–æ–∫—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
                if paginate:
                    return {"edges": [], "page_info": {"has_next_page": False, "end_cursor": None}}
                return {"edges": []}
            raise
        except Exception as e:
            logger.error(f"üîß –ü–ê–¢–ß: –û—à–∏–±–∫–∞ –≤ public_graphql_request: {e}")
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if paginate:
                return {"edges": [], "page_info": {"has_next_page": False, "end_cursor": None}}
            return {"edges": []}
    
    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–ø–∞—Ç—á–µ–Ω–Ω—ã–π
    patched_public_graphql_request._is_patched = True
    
    # –ü—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –±–∏–Ω–¥–∏–Ω–≥–æ–≤
    client.public_graphql_request = patched_public_graphql_request
    logger.info("üîß –ü—Ä–æ–ø–∞—Ç—á–µ–Ω public_graphql_request –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")

def apply_all_patches(client, device_info=None):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø–∞—Ç—á–∏ –∫ –∫–ª–∏–µ–Ω—Ç—É Instagram"""
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—á–∏
    patch_user_agent(client, device_info)
    patch_headers(client)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ç—á –¥–ª—è public_graphql_request
    patch_public_graphql_request(client)
    
    return client