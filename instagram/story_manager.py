import logging
import os
import json
import traceback
import time
from pathlib import Path
import concurrent.futures
from typing import Optional, List, Dict, Tuple, Union
from datetime import datetime

from instagram.client import InstagramClient
from database.db_manager import update_task_status, get_instagram_accounts, update_instagram_account
from config import MAX_WORKERS
from database.models import TaskStatus
from instagram.email_utils import get_verification_code_from_email, mark_account_problematic

logger = logging.getLogger(__name__)

class StoryManager:
    def __init__(self, account_id):
        self.instagram = InstagramClient(account_id)

    def _ensure_login_with_recovery(self, max_attempts=3):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞"""
        account = self.instagram.account
        
        for attempt in range(max_attempts):
            try:
                logger.info(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ {attempt + 1}/{max_attempts} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                if self.instagram.check_login():
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
                    update_instagram_account(
                        account.id,
                        is_active=True,
                        status="active",
                        last_error=None,
                        last_check=datetime.now()
                    )
                    logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username} –æ–±–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π")
                    return True
                else:
                    # –ï—Å–ª–∏ check_login –≤–µ—Ä–Ω—É–ª False, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤—Ö–æ–¥–∞
                    logger.warning(f"‚ö†Ô∏è check_login –≤–µ—Ä–Ω—É–ª False –¥–ª—è {account.username}, –ø—ã—Ç–∞–µ–º—Å—è IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    if not account.email or not account.email_password:
                        logger.warning(f"‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                        mark_account_problematic(
                            account.email or account.username,
                            "no_email_data",
                            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                        )
                        return False
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email
                    try:
                        logger.info(f"üìß –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email –¥–ª—è @{account.username}")
                        verification_code = get_verification_code_from_email(
                            account.email, 
                            account.email_password, 
                            max_attempts=3, 
                            delay_between_attempts=15
                        )
                        
                        if verification_code:
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {verification_code} –¥–ª—è @{account.username}")
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            login_success = self.instagram.login_with_challenge_code(verification_code)
                            if login_success:
                                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è @{account.username}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                                try:
                                    self.instagram.client.get_timeline_feed()
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
                                    update_instagram_account(
                                        account.id,
                                        is_active=True,
                                        status="active",
                                        last_error=None,
                                        last_check=datetime.now()
                                    )
                                    logger.info(f"‚úÖ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è @{account.username}")
                                    return True
                                except Exception as verify_error:
                                    logger.warning(f"‚ùå IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ @{account.username} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}")
                                    mark_account_problematic(
                                        account.email or account.username,
                                        "recovery_verify_failed",
                                        f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}"
                                    )
                                    return False
                            else:
                                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                                mark_account_problematic(
                                    account.email or account.username,
                                    "recovery_login_failed",
                                    "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                                )
                                return False
                        else:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                            mark_account_problematic(
                                account.email or account.username,
                                "email_code_failed",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ email"
                            )
                            return False
                            
                    except Exception as recovery_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {account.username}: {recovery_error}")
                        mark_account_problematic(
                            account.email or account.username,
                            "imap_recovery_error",
                            f"–û—à–∏–±–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(recovery_error)}"
                        )
                        return False
                    
            except Exception as e:
                error_msg = str(e).lower()
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {account.username}: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                if any(keyword in error_msg for keyword in ['challenge_required', 'verification_required', 'confirm_email', 'checkpoint', 'login_required']):
                    logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ({e}), –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ IMAP –¥–ª—è @{account.username}...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    if not account.email or not account.email_password:
                        logger.warning(f"‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                        mark_account_problematic(
                            account.email or account.username,
                            "no_email_data",
                            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                        )
                        return False
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email
                    try:
                        logger.info(f"üìß –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email –¥–ª—è @{account.username}")
                        verification_code = get_verification_code_from_email(
                            account.email, 
                            account.email_password, 
                            max_attempts=3, 
                            delay_between_attempts=15
                        )
                        
                        if verification_code:
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {verification_code} –¥–ª—è @{account.username}")
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            login_success = self.instagram.login_with_challenge_code(verification_code)
                            if login_success:
                                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è @{account.username}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                                try:
                                    self.instagram.client.get_timeline_feed()
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
                                    update_instagram_account(
                                        account.id,
                                        is_active=True,
                                        status="active",
                                        last_error=None,
                                        last_check=datetime.now()
                                    )
                                    logger.info(f"‚úÖ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è @{account.username}")
                                    return True
                                except Exception as verify_error:
                                    logger.warning(f"‚ùå IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ @{account.username} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}")
                                    mark_account_problematic(
                                        account.email or account.username,
                                        "recovery_verify_failed",
                                        f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}"
                                    )
                                    return False
                            else:
                                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                                mark_account_problematic(
                                    account.email or account.username,
                                    "recovery_login_failed",
                                    "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                                )
                                return False
                        else:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                            mark_account_problematic(
                                account.email or account.username,
                                "email_code_failed",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ email"
                            )
                            return False
                            
                    except Exception as recovery_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {account.username}: {recovery_error}")
                        mark_account_problematic(
                            account.email or account.username,
                            "imap_recovery_error",
                            f"–û—à–∏–±–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(recovery_error)}"
                        )
                        return False
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                if attempt == max_attempts - 1:
                    logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {account.username}")
                    # –û—Ç–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                    mark_account_problematic(
                        account.email or account.username,
                        "login_failed",
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}"
                    )
                    return False
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                time.sleep(5)
        
        return False

    def publish_story(self, media_path: str, caption: Optional[str] = None, 
                     mentions: Optional[List[Dict]] = None,
                     hashtags: Optional[List[str]] = None,
                     location: Optional[Dict] = None,
                     link: Optional[str] = None,
                     story_text: Optional[str] = None,
                     story_text_color: Optional[str] = None,
                     story_text_size: Optional[str] = None,
                     story_text_position: Optional[Dict] = None,
                     location_name: Optional[str] = None) -> Tuple[bool, Union[str, int]]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –≤ Stories
        
        Args:
            media_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
            caption: –¢–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
            mentions: –°–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π [{"username": "user", "x": 0.5, "y": 0.5}]
            hashtags: –°–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥–æ–≤ ["tag1", "tag2"]
            location: –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è {"pk": "123", "name": "Place", "lat": 0.0, "lng": 0.0}
            link: –°—Å—ã–ª–∫–∞ (swipe up)
            story_text: –¢–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ
            story_text_color: –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ (#ffffff)
            story_text_size: –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ (small, medium, large)
            story_text_position: –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ {"x": 0.5, "y": 0.5, "width": 0.8, "height": 0.1}
            location_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            Tuple[bool, Union[str, int]]: (—É—Å–ø–µ—Ö, media_id –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if not self._ensure_login_with_recovery():
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story")
                return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(media_path):
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {media_path}")
                return False, f"ERROR - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {media_path}"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
            file_ext = os.path.splitext(media_path)[1].lower()
            is_video = file_ext in ['.mp4', '.mov', '.avi', '.mkv', '.webm']

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            kwargs = {}
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞–∑–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏
            final_caption = caption or ""
                
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç instagrapi
            if mentions:
                from instagrapi.types import StoryMention, UserShort
                story_mentions = []
                for mention in mentions:
                    try:
                        if isinstance(mention, dict):
                            username = mention.get('username', '').replace('@', '')
                            if username:
                                try:
                                    user_info = self.instagram.client.user_info_by_username(username)
                                    user_short = UserShort(
                                        pk=user_info.pk,
                                        username=user_info.username
                                    )
                                    story_mentions.append(StoryMention(
                                        user=user_short,
                                        x=mention.get('x', 0.5),
                                        y=mention.get('y', 0.5),
                                        width=mention.get('width', 0.5),
                                        height=mention.get('height', 0.1)
                                    ))
                                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @{username} (ID: {user_info.pk})")
                                except Exception as user_error:
                                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {user_error}")
                        elif isinstance(mention, str):
                            username = mention.replace('@', '')
                            if username:
                                try:
                                    user_info = self.instagram.client.user_info_by_username(username)
                                    user_short = UserShort(
                                        pk=user_info.pk,
                                        username=user_info.username
                                    )
                                    story_mentions.append(StoryMention(
                                        user=user_short,
                                        x=0.5, y=0.5, width=0.5, height=0.1
                                    ))
                                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @{username} (ID: {user_info.pk})")
                                except Exception as user_error:
                                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {user_error}")
                    except Exception as mention_error:
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è {mention}: {mention_error}")
                
                if story_mentions:
                    kwargs['mentions'] = story_mentions
                    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(story_mentions)} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ Story")
                
            if location:
                from instagrapi.types import StoryLocation, Location
                loc = Location(
                    pk=location.get('pk'),
                    name=location.get('name'),
                    lat=location.get('lat'),
                    lng=location.get('lng')
                )
                kwargs['locations'] = [StoryLocation(
                    location=loc,
                    x=0.5,
                    y=0.5,
                    width=0.5,
                    height=0.1
                )]
                
            # –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
            if link:
                from instagrapi.types import StoryLink
                logger.info(f"üîó –î–æ–±–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é: {link}")
                kwargs['links'] = [StoryLink(webUri=link)]

            # –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–≤–µ—Ä—Ö —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ
            if story_text:
                logger.info(f"üí¨ –î–æ–±–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö –∏—Å—Ç–æ—Ä–∏–∏: {story_text}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–¥–ø–∏—Å—å Story
                if final_caption:
                    final_caption = f"{final_caption}\n\n{story_text}"
                else:
                    final_caption = story_text
                
                logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–ø–∏—Å—å Story: {story_text}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å
            if final_caption:
                kwargs['caption'] = final_caption

            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if is_video:
                media = self.instagram.client.video_upload_to_story(
                    Path(media_path),
                    **kwargs
                )
            else:
                media = self.instagram.client.photo_upload_to_story(
                    Path(media_path),
                    **kwargs
                )

            logger.info(f"Story —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {media.pk}")
            return True, media.pk
            
        except Exception as e:
            error_msg = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story: {error_msg}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if any(keyword in error_msg.lower() for keyword in ['challenge_required', 'login_required', 'verification_required']):
                logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º...")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ check_login –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True
                account = self.instagram.account
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                if account.email and account.email_password:
                    logger.info(f"üìß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è @{account.username} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story...")
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email
                        verification_code = get_verification_code_from_email(
                            account.email, 
                            account.email_password, 
                            max_attempts=3, 
                            delay_between_attempts=15
                        )
                        
                        if verification_code:
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {verification_code} –¥–ª—è @{account.username}")
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            login_success = self.instagram.login_with_challenge_code(verification_code)
                            if login_success:
                                logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è @{account.username}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                                try:
                                    self.instagram.client.get_timeline_feed()
                                    logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è @{account.username}")
                                    
                                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é Story
                                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                                    
                                    try:
                                        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                                        if is_video:
                                            media = self.instagram.client.video_upload_to_story(
                                                Path(media_path),
                                                **kwargs
                                            )
                                        else:
                                            media = self.instagram.client.photo_upload_to_story(
                                                Path(media_path),
                                                **kwargs
                                            )
                                        
                                        if media:
                                            logger.info(f"Story —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {media.pk}")
                                            return True, media.pk
                                        else:
                                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Story –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                                            mark_account_problematic(
                                                self.instagram.account.email,
                                                "story_failed_after_imap",
                                                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Story –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                                            )
                                            return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Story –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                                            
                                    except Exception as pub_retry_error:
                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story –ø–æ—Å–ª–µ IMAP: {pub_retry_error}")
                                        mark_account_problematic(
                                            self.instagram.account.email,
                                            "story_error_after_imap",
                                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story –ø–æ—Å–ª–µ IMAP: {str(pub_retry_error)}"
                                        )
                                        return False, f"ERROR - {pub_retry_error}"
                                        
                                except Exception as verify_error:
                                    logger.warning(f"‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Story –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}")
                                    mark_account_problematic(
                                        account.email,
                                        "forced_story_recovery_verify_failed",
                                        f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Story –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}"
                                    )
                            else:
                                logger.warning(f"‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Story –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è @{account.username}")
                                mark_account_problematic(
                                    account.email,
                                    "forced_story_recovery_login_failed",
                                    "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Story –Ω–µ —É–¥–∞–ª–æ—Å—å"
                                )
                        else:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Story @{account.username}")
                            mark_account_problematic(
                                account.email,
                                "forced_story_email_code_failed",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Story"
                            )
                            
                    except Exception as forced_recovery_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Story: {forced_recovery_error}")
                        mark_account_problematic(
                            account.email,
                            "forced_story_imap_recovery_error",
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Story: {str(forced_recovery_error)}"
                        )
                
                # –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
                if self._ensure_login_with_recovery():
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞...")
                    
                    try:
                        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                        if is_video:
                            media = self.instagram.client.video_upload_to_story(
                                Path(media_path),
                                **kwargs
                            )
                        else:
                            media = self.instagram.client.photo_upload_to_story(
                                Path(media_path),
                                **kwargs
                            )
                        
                        if media:
                            logger.info(f"Story —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {media.pk}")
                            return True, media.pk
                        else:
                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Story –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ")
                            # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                            mark_account_problematic(
                                self.instagram.account.email,
                                "story_failed_retry",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Story –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ"
                            )
                            return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Story –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ"
                            
                    except Exception as retry_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story: {retry_error}")
                        # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                        mark_account_problematic(
                            self.instagram.account.email,
                            "story_error_retry",
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ Story: {str(retry_error)}"
                        )
                        return False, f"ERROR - {retry_error}"
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story")
                    # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                    mark_account_problematic(
                        self.instagram.account.email,
                        "story_login_failed_retry",
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story"
                    )
                    return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ"
            
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Ç–æ–∂–µ –ø–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
            mark_account_problematic(
                self.instagram.account.email,
                "story_error",
                f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story: {error_msg}"
            )
            
            return False, f"ERROR - {error_msg}"

    def publish_story_album(self, media_paths: List[str], caption: Optional[str] = None, **kwargs) -> Tuple[bool, Union[str, List[int]]]:
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –≤ Stories –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        
        Args:
            media_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
            caption: –¢–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—Ä–∏–π
            
        Returns:
            Tuple[bool, Union[str, List[int]]]: (—É—Å–ø–µ—Ö, —Å–ø–∏—Å–æ–∫ media_id –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
        """
        try:
            media_ids = []
            
            for media_path in media_paths:
                success, result = self.publish_story(media_path, caption, **kwargs)
                if success:
                    media_ids.append(result)
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å {media_path}: {result}")
                    
            if media_ids:
                logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {len(media_ids)} –∏–∑ {len(media_paths)} Stories")
                return True, media_ids
            else:
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–ª—å–±–æ–º–∞ Stories: {e}")
            return False, str(e)

    def execute_story_task(self, task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            update_task_status(task.id, TaskStatus.PROCESSING)

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            story_options = {}
            if hasattr(task, 'story_options') and task.story_options:
                try:
                    story_options = json.loads(task.story_options)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å story_options –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}: {e}")
            elif hasattr(task, 'additional_data') and task.additional_data:
                try:
                    additional_data = json.loads(task.additional_data)
                    story_options = additional_data
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å additional_data –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∞–ª—å–±–æ–º –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
            if isinstance(task.media_path, list) or (isinstance(task.media_path, str) and task.media_path.startswith('[')):
                # –ê–ª—å–±–æ–º Stories
                if isinstance(task.media_path, str):
                    media_paths = json.loads(task.media_path)
                else:
                    media_paths = task.media_path
                    
                success, result = self.publish_story_album(media_paths, task.caption)
            else:
                # –û–¥–∏–Ω–æ—á–Ω–∞—è Story
                success, result = self.publish_story(
                    task.media_path,
                    task.caption,
                    mentions=story_options.get('mentions'),
                    hashtags=story_options.get('hashtags'),
                    location=story_options.get('location'),
                    link=story_options.get('link')
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            if success:
                update_task_status(task.id, TaskStatus.COMPLETED, media_id=str(result))
                logger.info(f"–ó–∞–¥–∞—á–∞ {task.id} –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True, result
            else:
                update_task_status(task.id, TaskStatus.FAILED, error_message=result)
                logger.error(f"–ó–∞–¥–∞—á–∞ {task.id} –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result}")
                return False, result
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task.id} –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story: {e}")
            update_task_status(task.id, TaskStatus.FAILED, error_message=str(e))
            return False, str(e)

def publish_stories_in_parallel(media_path: Union[str, List[str]], caption: str, 
                               account_ids: List[int], **kwargs) -> Dict:
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è Stories –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    results = {}

    def publish_to_account(account_id):
        manager = StoryManager(account_id)
        if isinstance(media_path, list):
            success, result = manager.publish_story_album(media_path, caption)
        else:
            success, result = manager.publish_story(media_path, caption, **kwargs)
        return account_id, success, result

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        futures = [executor.submit(publish_to_account, account_id) for account_id in account_ids]

        for future in concurrent.futures.as_completed(futures):
            try:
                account_id, success, result = future.result()
                results[account_id] = {'success': success, 'result': result}
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Story: {e}")

    return results 