import logging
import os
import json
from pathlib import Path
import concurrent.futures
from typing import List, Dict, Optional, Tuple

from instagram.client import InstagramClient
from database.db_manager import update_task_status, get_instagram_accounts
from config import MAX_WORKERS
from instagram.clip_upload_patch import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ç—á
from database.models import TaskStatus
from utils.content_uniquifier import ContentUniquifier
from instagrapi.types import Usertag, Location

logger = logging.getLogger(__name__)

class ReelsManager:
    def __init__(self, account_id):
        self.instagram = InstagramClient(account_id)
        self.account_id = account_id
        self.uniquifier = ContentUniquifier()

    def publish_reel(self, video_path, caption=None, thumbnail_path=None, 
                    usertags=None, location=None, hashtags=None, cover_time=0):
        """
        –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ –≤ Reels —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
        
        Args:
            video_path: –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—É
            caption: –ü–æ–¥–ø–∏—Å—å –∫ Reels
            thumbnail_path: –ü—É—Ç—å –∫ –ø—Ä–µ–≤—å—é (–æ–±–ª–æ–∂–∫–µ) - –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ
            usertags: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤
            location: –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
            hashtags: –°–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥–æ–≤
            cover_time: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–¥—Ä–∞ –æ–±–ª–æ–∂–∫–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –µ—Å–ª–∏ –µ—Å—Ç—å thumbnail_path)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if not self._ensure_login_with_recovery():
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(video_path):
                logger.error(f"–§–∞–π–ª {video_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}"

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏
            full_caption = self._prepare_caption(caption, hashtags)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏
            processed_usertags = self._prepare_usertags(usertags)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
            processed_location = self._prepare_location(location)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–æ–∂–∫—É
            final_thumbnail_path = None
            generated_thumbnail = None
            
            if thumbnail_path and os.path.exists(thumbnail_path):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –æ–±–ª–æ–∂–∫—É
                final_thumbnail_path = thumbnail_path
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –æ–±–ª–æ–∂–∫–∞: {thumbnail_path}")
            elif cover_time > 0:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±–ª–æ–∂–∫—É –∏–∑ –≤–∏–¥–µ–æ
                generated_thumbnail = self._generate_thumbnail(video_path, cover_time)
                if generated_thumbnail:
                    final_thumbnail_path = generated_thumbnail
                    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –æ–±–ª–æ–∂–∫–∞ –Ω–∞ {cover_time} —Å–µ–∫—É–Ω–¥: {generated_thumbnail}")
            
            # –ü—É–±–ª–∏–∫—É–µ–º Reels
            media = self.instagram.client.clip_upload(
                Path(video_path),
                caption=full_caption,
                thumbnail=Path(final_thumbnail_path) if final_thumbnail_path else None
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ –∏ –ª–æ–∫–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if media:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏
                if processed_usertags:
                    try:
                        self.instagram.client.media_edit(media.pk, full_caption, usertags=processed_usertags)
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ –∫ Reels: {len(processed_usertags)} —à—Ç.")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏: {e}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
                if processed_location:
                    try:
                        self.instagram.client.media_edit(media.pk, full_caption, location=processed_location)
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –∫ Reels: {processed_location.name}")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é: {e}")

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –æ–±–ª–æ–∂–∫—É
            if generated_thumbnail and os.path.exists(generated_thumbnail):
                try:
                    os.remove(generated_thumbnail)
                except:
                    pass

            logger.info(f"Reels —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {media.pk}")
            return True, media.pk
            
        except Exception as e:
            error_msg = str(e) if e else "Unknown error"
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels: {error_msg}")
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–µ—Ä—å–µ–∑–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            if error_msg and ("login" in error_msg.lower() or "challenge" in error_msg.lower()):
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç {self.account_id}: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if error_msg and any(keyword in error_msg.lower() for keyword in ['challenge_required', 'login_required', 'verification_required']):
                logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º...")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ check_login –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True
                account = self.instagram.account
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                if account.email and account.email_password:
                    logger.info(f"üìß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è @{account.username} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels...")
                    
                    try:
                        from instagram.email_utils_optimized import get_verification_code_from_email
                        from instagram.email_utils import mark_account_problematic
                        from database.db_manager import update_instagram_account
                        from datetime import datetime
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email
                        verification_code = get_verification_code_from_email(
                            account.email, 
                            account.email_password, 
                            max_attempts=3, 
                            delay_between_attempts=15
                        )
                        
                        if verification_code:
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {verification_code} –¥–ª—è @{account.username}")
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            login_success = self.instagram.login_with_challenge_code(verification_code)
                            if login_success:
                                logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è @{account.username}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                                try:
                                    self.instagram.client.get_timeline_feed()
                                    logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è @{account.username}")
                                    
                                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é Reels
                                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                                    
                                    try:
                                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                                        media_retry = self.instagram.client.clip_upload(
                                            Path(video_path),
                                            caption=full_caption,
                                            thumbnail=Path(thumbnail_path) if thumbnail_path and os.path.exists(thumbnail_path) else None
                                        )
                                        
                                        if media_retry:
                                            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ –∏ –ª–æ–∫–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                                            if processed_usertags:
                                                try:
                                                    self.instagram.client.media_edit(media_retry.pk, full_caption, usertags=processed_usertags)
                                                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ –∫ Reels –ø–æ—Å–ª–µ IMAP: {len(processed_usertags)} —à—Ç.")
                                                except Exception as tag_error:
                                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ –ø–æ—Å–ª–µ IMAP: {tag_error}")
                                            
                                            if processed_location:
                                                try:
                                                    self.instagram.client.media_edit(media_retry.pk, full_caption, location=processed_location)
                                                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –∫ Reels –ø–æ—Å–ª–µ IMAP: {processed_location.name}")
                                                except Exception as loc_error:
                                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –ø–æ—Å–ª–µ IMAP: {loc_error}")
                                            
                                            logger.info(f"Reels —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {media_retry.pk}")
                                            return True, media_retry.pk
                                        else:
                                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Reels –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                                            mark_account_problematic(
                                                self.instagram.account.email,
                                                "reels_failed_after_imap",
                                                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Reels –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                                            )
                                            return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Reels –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                                            
                                    except Exception as pub_retry_error:
                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels –ø–æ—Å–ª–µ IMAP: {pub_retry_error}")
                                        mark_account_problematic(
                                            self.instagram.account.email,
                                            "reels_error_after_imap",
                                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels –ø–æ—Å–ª–µ IMAP: {str(pub_retry_error)}"
                                        )
                                        return False, f"ERROR - {pub_retry_error}"
                                        
                                except Exception as verify_error:
                                    logger.warning(f"‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Reels –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}")
                                    mark_account_problematic(
                                        account.email,
                                        "forced_reels_recovery_verify_failed",
                                        f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Reels –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}"
                                    )
                            else:
                                logger.warning(f"‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Reels –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è @{account.username}")
                                mark_account_problematic(
                                    account.email,
                                    "forced_reels_recovery_login_failed",
                                    "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Reels –Ω–µ —É–¥–∞–ª–æ—Å—å"
                                )
                        else:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Reels @{account.username}")
                            mark_account_problematic(
                                account.email,
                                "forced_reels_email_code_failed",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Reels"
                            )
                            
                    except Exception as forced_recovery_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Reels: {forced_recovery_error}")
                        mark_account_problematic(
                            account.email,
                            "forced_reels_imap_recovery_error",
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Reels: {str(forced_recovery_error)}"
                        )
                
                # –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
                if self._ensure_login_with_recovery():
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞...")
                    
                    try:
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                        media_retry = self.instagram.client.clip_upload(
                            Path(video_path),
                            caption=full_caption,
                            thumbnail=Path(thumbnail_path) if thumbnail_path and os.path.exists(thumbnail_path) else None
                        )
                        
                        if media_retry:
                            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ –∏ –ª–æ–∫–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                            if processed_usertags:
                                try:
                                    self.instagram.client.media_edit(media_retry.pk, full_caption, usertags=processed_usertags)
                                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ –∫ Reels –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: {len(processed_usertags)} —à—Ç.")
                                except Exception as tag_error:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–µ–≥–∏ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: {tag_error}")
                            
                            if processed_location:
                                try:
                                    self.instagram.client.media_edit(media_retry.pk, full_caption, location=processed_location)
                                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –∫ Reels –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: {processed_location.name}")
                                except Exception as loc_error:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: {loc_error}")
                            
                            logger.info(f"Reels —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞: {media_retry.pk}")
                            return True, media_retry.pk
                        else:
                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Reels –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞")
                            return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Reels –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"
                            
                    except Exception as retry_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels: {retry_error}")
                        return False, f"ERROR - {retry_error}"
            
            return False, str(e)

    def get_location_by_name(self, name: str) -> Optional[Location]:
        """–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        try:
            if not self._ensure_login_with_recovery():
                return None
            
            logger.info(f"üîç –ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–∏: {name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "lat,lng"
            if ',' in name and len(name.split(',')) == 2:
                try:
                    lat_str, lng_str = name.split(',')
                    lat = float(lat_str.strip())
                    lng = float(lng_str.strip())
                    logger.info(f"üìç –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lng}")
                except ValueError:
                    logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {name}")
                    return None
            else:
                # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –∏ –º–µ—Å—Ç
                city_coords = {
                    # –£–∫—Ä–∞–∏–Ω–∞
                    'kiev': (50.4501, 30.5234), '–∫–∏–µ–≤': (50.4501, 30.5234), 'kyiv': (50.4501, 30.5234),
                    'odessa': (46.4825, 30.7233), '–æ–¥–µ—Å—Å–∞': (46.4825, 30.7233),
                    'kharkiv': (49.9935, 36.2304), '—Ö–∞—Ä—å–∫–æ–≤': (49.9935, 36.2304),
                    'lviv': (49.8397, 24.0297), '–ª—å–≤–æ–≤': (49.8397, 24.0297),
                    'dnipro': (48.4647, 35.0462), '–¥–Ω–µ–ø—Ä': (48.4647, 35.0462),
                    'ukraine': (50.4501, 30.5234), '—É–∫—Ä–∞–∏–Ω–∞': (50.4501, 30.5234),
                    
                    # –†–æ—Å—Å–∏—è
                    'moscow': (55.7558, 37.6176), '–º–æ—Å–∫–≤–∞': (55.7558, 37.6176),
                    'saint petersburg': (59.9311, 30.3609), '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': (59.9311, 30.3609), 'spb': (59.9311, 30.3609),
                    'novosibirsk': (55.0084, 82.9357), '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': (55.0084, 82.9357),
                    'yekaterinburg': (56.8431, 60.6454), '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': (56.8431, 60.6454),
                    'kazan': (55.8304, 49.0661), '–∫–∞–∑–∞–Ω—å': (55.8304, 49.0661),
                    'sochi': (43.6028, 39.7342), '—Å–æ—á–∏': (43.6028, 39.7342),
                    'russia': (55.7558, 37.6176), '—Ä–æ—Å—Å–∏—è': (55.7558, 37.6176),
                    
                    # –ï–≤—Ä–æ–ø–∞
                    'london': (51.5074, -0.1278), '–ª–æ–Ω–¥–æ–Ω': (51.5074, -0.1278),
                    'paris': (48.8566, 2.3522), '–ø–∞—Ä–∏–∂': (48.8566, 2.3522),
                    'berlin': (52.5200, 13.4050), '–±–µ—Ä–ª–∏–Ω': (52.5200, 13.4050),
                    'rome': (41.9028, 12.4964), '—Ä–∏–º': (41.9028, 12.4964),
                    'madrid': (40.4168, -3.7038), '–º–∞–¥—Ä–∏–¥': (40.4168, -3.7038),
                    'amsterdam': (52.3676, 4.9041), '–∞–º—Å—Ç–µ—Ä–¥–∞–º': (52.3676, 4.9041),
                    'vienna': (48.2082, 16.3738), '–≤–µ–Ω–∞': (48.2082, 16.3738),
                    'prague': (50.0755, 14.4378), '–ø—Ä–∞–≥–∞': (50.0755, 14.4378),
                    'warsaw': (52.2297, 21.0122), '–≤–∞—Ä—à–∞–≤–∞': (52.2297, 21.0122),
                    'stockholm': (59.3293, 18.0686), '—Å—Ç–æ–∫–≥–æ–ª—å–º': (59.3293, 18.0686),
                    
                    # –ê–º–µ—Ä–∏–∫–∞
                    'new york': (40.7128, -74.0060), '–Ω—å—é-–π–æ—Ä–∫': (40.7128, -74.0060), 'nyc': (40.7128, -74.0060),
                    'los angeles': (34.0522, -118.2437), '–ª–æ—Å-–∞–Ω–¥–∂–µ–ª–µ—Å': (34.0522, -118.2437), 'la': (34.0522, -118.2437),
                    'chicago': (41.8781, -87.6298), '—á–∏–∫–∞–≥–æ': (41.8781, -87.6298),
                    'miami': (25.7617, -80.1918), '–º–∞–π–∞–º–∏': (25.7617, -80.1918),
                    'toronto': (43.6532, -79.3832), '—Ç–æ—Ä–æ–Ω—Ç–æ': (43.6532, -79.3832),
                    'vancouver': (49.2827, -123.1207), '–≤–∞–Ω–∫—É–≤–µ—Ä': (49.2827, -123.1207),
                    'mexico city': (19.4326, -99.1332), '–º–µ—Ö–∏–∫–æ': (19.4326, -99.1332),
                    
                    # –ê–∑–∏—è
                    'tokyo': (35.6762, 139.6503), '—Ç–æ–∫–∏–æ': (35.6762, 139.6503),
                    'seoul': (37.5665, 126.9780), '—Å–µ—É–ª': (37.5665, 126.9780),
                    'beijing': (39.9042, 116.4074), '–ø–µ–∫–∏–Ω': (39.9042, 116.4074),
                    'shanghai': (31.2304, 121.4737), '—à–∞–Ω—Ö–∞–π': (31.2304, 121.4737),
                    'singapore': (1.3521, 103.8198), '—Å–∏–Ω–≥–∞–ø—É—Ä': (1.3521, 103.8198),
                    'dubai': (25.2048, 55.2708), '–¥—É–±–∞–π': (25.2048, 55.2708),
                    'mumbai': (19.0760, 72.8777), '–º—É–º–±–∞–∏': (19.0760, 72.8777),
                    'bangkok': (13.7563, 100.5018), '–±–∞–Ω–≥–∫–æ–∫': (13.7563, 100.5018),
                    
                    # –ê–≤—Å—Ç—Ä–∞–ª–∏—è –∏ –û–∫–µ–∞–Ω–∏—è
                    'sydney': (-33.8688, 151.2093), '—Å–∏–¥–Ω–µ–π': (-33.8688, 151.2093),
                    'melbourne': (-37.8136, 144.9631), '–º–µ–ª—å–±—É—Ä–Ω': (-37.8136, 144.9631),
                    
                    # –ê—Ñ—Ä–∏–∫–∞
                    'cairo': (30.0444, 31.2357), '–∫–∞–∏—Ä': (30.0444, 31.2357),
                    'cape town': (-33.9249, 18.4241), '–∫–µ–π–ø—Ç–∞—É–Ω': (-33.9249, 18.4241),
                    
                    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–µ—Å—Ç–∞
                    'times square': (40.7580, -73.9855),
                    'red square': (55.7539, 37.6208), '–∫—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å': (55.7539, 37.6208),
                    'eiffel tower': (48.8584, 2.2945), '—ç–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è': (48.8584, 2.2945),
                    'big ben': (51.4994, -0.1245), '–±–∏–≥ –±–µ–Ω': (51.4994, -0.1245),
                    'colosseum': (41.8902, 12.4922), '–∫–æ–ª–∏–∑–µ–π': (41.8902, 12.4922),
                    'central park': (40.7829, -73.9654), '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫': (40.7829, -73.9654),
                    'hollywood': (34.0928, -118.3287), '–≥–æ–ª–ª–∏–≤—É–¥': (34.0928, -118.3287),
                    'las vegas': (36.1699, -115.1398), '–ª–∞—Å-–≤–µ–≥–∞—Å': (36.1699, -115.1398),
                    'machu picchu': (-13.1631, -72.5450), '–º–∞—á—É-–ø–∏–∫—á—É': (-13.1631, -72.5450)
                }
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –º–∏—Ä–∞ –¥–ª—è —à–∏—Ä–æ–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
                lat, lng = 50.0, 30.0  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
                
                name_lower = name.lower()
                for city, coords in city_coords.items():
                    if city in name_lower:
                        lat, lng = coords
                        break
            
            # –ò—â–µ–º –ª–æ–∫–∞—Ü–∏–∏ –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            locations = self.instagram.client.location_search(lat, lng)
            
            if locations:
                # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ª–æ–∫–∞—Ü–∏—é
                for location in locations:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    if any(word.lower() in location.name.lower() for word in name.split() if len(word) > 2):
                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {location.name} (ID: {location.pk})")
                        return location
                
                # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
                location = locations[0]
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è (–ø–µ—Ä–≤–∞—è): {location.name} (ID: {location.pk})")
                return location
            else:
                logger.warning(f"‚ùå –õ–æ–∫–∞—Ü–∏—è '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª–æ–∫–∞—Ü–∏–∏ '{name}': {e}")
            return None

    def _ensure_login_with_recovery(self, max_attempts=3):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞"""
        from instagram.email_utils_optimized import get_verification_code_from_email
        from instagram.email_utils import mark_account_problematic
        from database.db_manager import update_instagram_account
        from datetime import datetime
        import time
        
        account = self.instagram.account
        
        for attempt in range(max_attempts):
            try:
                logger.info(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ {attempt + 1}/{max_attempts} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                if self.instagram.check_login():
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
                    update_instagram_account(
                        account.id,
                        is_active=True,
                        status="active",
                        last_error=None,
                        last_check=datetime.now()
                    )
                    logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username} –æ–±–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π")
                    return True
                else:
                    # –ï—Å–ª–∏ check_login –≤–µ—Ä–Ω—É–ª False, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤—Ö–æ–¥–∞
                    logger.warning(f"‚ö†Ô∏è check_login –≤–µ—Ä–Ω—É–ª False –¥–ª—è {account.username}, –ø—ã—Ç–∞–µ–º—Å—è IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    if not account.email or not account.email_password:
                        logger.warning(f"‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                        mark_account_problematic(
                            account.email or account.username,
                            "no_email_data",
                            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                        )
                        return False
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email
                    try:
                        logger.info(f"üìß –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email –¥–ª—è @{account.username}")
                        verification_code = get_verification_code_from_email(
                            account.email, 
                            account.email_password, 
                            max_attempts=3, 
                            delay_between_attempts=15
                        )
                        
                        if verification_code:
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {verification_code} –¥–ª—è @{account.username}")
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            login_success = self.instagram.login_with_challenge_code(verification_code)
                            if login_success:
                                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è @{account.username}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                                try:
                                    self.instagram.client.get_timeline_feed()
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
                                    update_instagram_account(
                                        account.id,
                                        is_active=True,
                                        status="active",
                                        last_error=None,
                                        last_check=datetime.now()
                                    )
                                    logger.info(f"‚úÖ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è @{account.username}")
                                    return True
                                except Exception as verify_error:
                                    logger.warning(f"‚ùå IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ @{account.username} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}")
                                    mark_account_problematic(
                                        account.email or account.username,
                                        "recovery_verify_failed",
                                        f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}"
                                    )
                                    return False
                            else:
                                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                                mark_account_problematic(
                                    account.email or account.username,
                                    "recovery_login_failed",
                                    "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                                )
                                return False
                        else:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                            mark_account_problematic(
                                account.email or account.username,
                                "email_code_failed",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ email"
                            )
                            return False
                            
                    except Exception as recovery_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {account.username}: {recovery_error}")
                        mark_account_problematic(
                            account.email or account.username,
                            "imap_recovery_error",
                            f"–û—à–∏–±–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(recovery_error)}"
                        )
                        return False
                    
            except Exception as e:
                error_msg = str(e).lower()
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {account.username}: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                if any(keyword in error_msg for keyword in ['challenge_required', 'verification_required', 'confirm_email', 'checkpoint', 'login_required']):
                    logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ({e}), –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ IMAP –¥–ª—è @{account.username}...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    if not account.email or not account.email_password:
                        logger.warning(f"‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                        mark_account_problematic(
                            account.email or account.username,
                            "no_email_data",
                            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                        )
                        return False
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email
                    try:
                        logger.info(f"üìß –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email –¥–ª—è @{account.username}")
                        verification_code = get_verification_code_from_email(
                            account.email, 
                            account.email_password, 
                            max_attempts=3, 
                            delay_between_attempts=15
                        )
                        
                        if verification_code:
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {verification_code} –¥–ª—è @{account.username}")
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            login_success = self.instagram.login_with_challenge_code(verification_code)
                            if login_success:
                                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è @{account.username}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                                try:
                                    self.instagram.client.get_timeline_feed()
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
                                    update_instagram_account(
                                        account.id,
                                        is_active=True,
                                        status="active",
                                        last_error=None,
                                        last_check=datetime.now()
                                    )
                                    logger.info(f"‚úÖ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è @{account.username}")
                                    return True
                                except Exception as verify_error:
                                    logger.warning(f"‚ùå IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ @{account.username} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}")
                                    mark_account_problematic(
                                        account.email or account.username,
                                        "recovery_verify_failed",
                                        f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}"
                                    )
                                    return False
                            else:
                                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                                mark_account_problematic(
                                    account.email or account.username,
                                    "recovery_login_failed",
                                    "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                                )
                                return False
                        else:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                            mark_account_problematic(
                                account.email or account.username,
                                "email_code_failed",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ email"
                            )
                            return False
                            
                    except Exception as recovery_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {account.username}: {recovery_error}")
                        mark_account_problematic(
                            account.email or account.username,
                            "imap_recovery_error",
                            f"–û—à–∏–±–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(recovery_error)}"
                        )
                        return False
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                if attempt == max_attempts - 1:
                    logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {account.username}")
                    # –û—Ç–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                    mark_account_problematic(
                        account.email or account.username,
                        "login_failed",
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}"
                    )
                    return False
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                time.sleep(5)
        
        return False

    def _check_login_with_recovery(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        return self._ensure_login_with_recovery()

    def _prepare_caption(self, caption: str, hashtags: List[str] = None) -> str:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Å —Ö–µ—à—Ç–µ–≥–∞–º–∏"""
        if not caption:
            caption = ""
        
        if hashtags:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω–µ—Ü –ø–æ–¥–ø–∏—Å–∏
            hashtag_str = " ".join([f"#{tag.lstrip('#')}" for tag in hashtags])
            if caption:
                caption = f"{caption}\n\n{hashtag_str}"
            else:
                caption = hashtag_str
        
        return caption

    def _prepare_usertags(self, usertags: List[Dict] = None) -> List[Usertag]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤"""
        if not usertags:
            return []
        
        processed_tags = []
        try:
            for tag in usertags:
                username = tag.get('username', '').lstrip('@')
                if username:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    user_info = self.instagram.client.user_info_by_username(username)
                    if user_info:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º User –≤ UserShort –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
                        from instagrapi.types import UserShort
                        user_short = UserShort(
                            pk=user_info.pk,
                            username=user_info.username,
                            full_name=user_info.full_name,
                            profile_pic_url=user_info.profile_pic_url,
                            profile_pic_url_hd=user_info.profile_pic_url_hd,
                            is_verified=user_info.is_verified,
                            is_private=user_info.is_private
                        )
                        
                        usertag = Usertag(
                            user=user_short,
                            x=tag.get('x', 0.5),  # –ü–æ–∑–∏—Ü–∏—è –ø–æ X (0.0-1.0)
                            y=tag.get('y', 0.5)   # –ü–æ–∑–∏—Ü–∏—è –ø–æ Y (0.0-1.0)
                        )
                        processed_tags.append(usertag)
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤: {e}")
        
        return processed_tags

    def _prepare_location(self, location_name: str = None) -> Optional[Location]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–æ–∫–∞—Ü–∏–∏"""
        if not location_name:
            return None
        
        try:
            location = self.get_location_by_name(location_name)
            if location:
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {location_name}")
            else:
                logger.warning(f"–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {location_name}")
            return location
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ª–æ–∫–∞—Ü–∏–∏: {e}")
            return None

    def _generate_thumbnail(self, video_path: str, cover_time: float) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏ –∏–∑ –≤–∏–¥–µ–æ"""
        try:
            import cv2
            import tempfile
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            cap = cv2.VideoCapture(video_path)
            if not cap.isOpened():
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {video_path}")
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º FPS –≤–∏–¥–µ–æ
            fps = cap.get(cv2.CAP_PROP_FPS)
            if fps <= 0:
                fps = 30  # Fallback FPS
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–∞–¥—Ä–∞
            frame_number = int(cover_time * fps)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            cap.set(cv2.CAP_PROP_POS_FRAMES, frame_number)
            
            # –ß–∏—Ç–∞–µ–º –∫–∞–¥—Ä
            ret, frame = cap.read()
            cap.release()
            
            if not ret:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–∞–¥—Ä –Ω–∞ {cover_time} —Å–µ–∫—É–Ω–¥–µ")
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
                thumbnail_path = temp_file.name
            
            cv2.imwrite(thumbnail_path, frame)
            logger.info(f"–û–±–ª–æ–∂–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {thumbnail_path} (–≤—Ä–µ–º—è: {cover_time}—Å)")
            return thumbnail_path
            
        except ImportError:
            logger.warning("OpenCV –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ–±–ª–æ–∂–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
            return None

    def execute_reel_task(self, task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            update_task_status(task.id, TaskStatus.PROCESSING)

            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–¥–∞—á–∏
            options = self._parse_task_options(task)
            
            # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            video_path = task.media_path
            caption = task.caption or ""
            
            if options.get('uniquify_content', False):
                video_path, caption = self.uniquifier.uniquify_content(
                    video_path, 'reel', caption
                )

            # –ü—É–±–ª–∏–∫—É–µ–º Reels
            success, result = self.publish_reel(
                video_path=video_path,
                caption=caption,
                thumbnail_path=options.get('thumbnail_path'),
                usertags=options.get('usertags', []),
                location=options.get('location'),
                hashtags=options.get('hashtags', []),
                cover_time=options.get('cover_time', 0)
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            if success:
                update_task_status(task.id, TaskStatus.COMPLETED, media_id=result)
                logger.info(f"–ó–∞–¥–∞—á–∞ {task.id} –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True, result
            else:
                update_task_status(task.id, TaskStatus.FAILED, error_message=result)
                logger.error(f"–ó–∞–¥–∞—á–∞ {task.id} –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result}")
                return False, result
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task.id} –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels: {e}")
            update_task_status(task.id, TaskStatus.FAILED, error_message=str(e))
            return False, str(e)

    def _parse_task_options(self, task) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ–ø—Ü–∏–π –∑–∞–¥–∞—á–∏"""
        options = {}
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ options
        if hasattr(task, 'options') and task.options:
            try:
                options.update(json.loads(task.options))
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å options –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}: {e}")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ additional_data
        if hasattr(task, 'additional_data') and task.additional_data:
            try:
                options.update(json.loads(task.additional_data))
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å additional_data –¥–ª—è –∑–∞–¥–∞—á–∏ {task.id}: {e}")
        
        return options

def publish_reels_in_parallel(video_path, caption, account_ids, 
                             usertags=None, location=None, 
                             hashtags=None, cover_time=0, uniquify_content=True):
    """
    –ü—É–±–ª–∏–∫–∞—Ü–∏—è Reels –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
    """
    results = {}
    uniquifier = ContentUniquifier()

    def publish_to_account(account_id):
        manager = ReelsManager(account_id)
        
        # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        unique_video_path = video_path
        unique_caption = caption
        
        if uniquify_content and len(account_ids) > 1:
            unique_video_path, unique_caption = uniquifier.uniquify_content(
                video_path, 'reel', caption
            )
        
        success, result = manager.publish_reel(
            video_path=unique_video_path,
            caption=unique_caption,
            usertags=usertags,
            location=location,
            hashtags=hashtags,
            cover_time=cover_time
        )
        
        return account_id, success, result

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        futures = [executor.submit(publish_to_account, account_id) for account_id in account_ids]

        for future in concurrent.futures.as_completed(futures):
            try:
                account_id, success, result = future.result()
                results[account_id] = {'success': success, 'result': result}
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

    return results

