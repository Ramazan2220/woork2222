# -*- coding: utf-8 -*-
"""
Instagram Client Pool - –ü—É–ª –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ Instagram API

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤  
- –û–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
- –ú–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
"""

import time
import logging
import threading
from typing import Dict, Optional, Any
from dataclasses import dataclass
from instagrapi import Client
from database.db_manager import get_instagram_account
from utils.encryption import encryption

logger = logging.getLogger(__name__)

@dataclass
class ClientStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø—É–ª–µ"""
    created_at: float
    last_used: float
    use_count: int
    account_id: int
    username: str
    is_active: bool

@dataclass 
class PoolStats:
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞"""
    total_clients: int = 0
    active_clients: int = 0
    created_count: int = 0
    reused_count: int = 0
    removed_count: int = 0
    cache_hits: int = 0
    cache_misses: int = 0

class InstagramClientPool:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—É–ª –∫–ª–∏–µ–Ω—Ç–æ–≤ Instagram —Å –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self, 
                 initial_max_clients: int = 50,
                 max_clients_limit: int = 300,     # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
                 adaptive_scaling: bool = True,    # –í–∫–ª—é—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                 inactive_threshold: int = 2700,  # 45 min
                 old_threshold: int = 14400,      # 4 hours
                 sleep_mode_threshold: int = 7200): # 2 hours for sleep mode
        self.initial_max_clients = initial_max_clients
        self.max_clients_limit = max_clients_limit
        self.adaptive_scaling = adaptive_scaling
        self.current_max_clients = initial_max_clients  # –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π)
        self.inactive_threshold = inactive_threshold  
        self.old_threshold = old_threshold
        self.sleep_mode_threshold = sleep_mode_threshold
        self.sleeping_clients = {}  # account_id -> minimal client data
        
        self._clients: Dict[int, Client] = {}
        self._stats_map: Dict[int, ClientStats] = {}
        self._lock = threading.RLock()
        self._pool_stats = PoolStats()
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._last_scale_check = time.time()
        self._scale_check_interval = 180  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã (–±—ã–ª–æ 5)
        self._demand_history = []  # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
        
        if self.adaptive_scaling:
            logger.info(f"üèä‚Äç‚ôÇÔ∏è –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π Instagram Client Pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: start={initial_max_clients}, limit={max_clients_limit}")
        else:
            logger.info(f"üèä‚Äç‚ôÇÔ∏è Instagram Client Pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: max={initial_max_clients}, inactive={inactive_threshold//60}–º–∏–Ω, old={old_threshold//3600}—á")
    
    def get_client(self, account_id: int, force_new: bool = False) -> Optional[Client]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø—É–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
        
        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            force_new: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            
        Returns:
            Client –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        with self._lock:
            current_time = time.time()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≥—Ä—É–∑–∫–∏
            if self.adaptive_scaling:
                self._record_demand()
                self._check_and_scale()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∏–µ–Ω—Ç
            if not force_new and account_id in self._clients:
                client = self._clients[account_id]
                stats = self._stats_map[account_id]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
                if stats.is_active and (current_time - stats.last_used) < self.inactive_threshold:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    stats.last_used = current_time
                    stats.use_count += 1
                    self._pool_stats.reused_count += 1
                    self._pool_stats.cache_hits += 1
                    
                    logger.debug(f"‚ôªÔ∏è –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {stats.use_count})")
                    return client
                else:
                    # –ö–ª–∏–µ–Ω—Ç —É—Å—Ç–∞—Ä–µ–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
                    self._remove_client_unsafe(account_id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
            self._pool_stats.cache_misses += 1
            return self._create_new_client(account_id)
    
    def _create_new_client(self, account_id: int) -> Optional[Client]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
            account = get_instagram_account(account_id)
            if not account:
                logger.error(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return None
            
            # –î–µ—à–∏—Ñ—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            password = account.password
            if encryption and hasattr(encryption, 'decrypt'):
                try:
                    password = encryption.decrypt(account.password)
                except:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è {account.username}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            client = Client()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(account, 'device_settings') and account.device_settings:
                try:
                    import json
                    settings = json.loads(account.device_settings)
                    client.set_settings(settings)
                    logger.debug(f"üì± –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è {account.username}")
                except:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è {account.username}")
            
            # –õ–æ–≥–∏–Ω
            if client.login(account.username, password):
                current_time = time.time()
                
                # –û—á–∏—â–∞–µ–º –º–µ—Å—Ç–æ –µ—Å–ª–∏ –ø—É–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω
                self._cleanup_if_needed()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É–ª
                self._clients[account_id] = client
                self._stats_map[account_id] = ClientStats(
                    created_at=current_time,
                    last_used=current_time,
                    use_count=1,
                    account_id=account_id,
                    username=account.username,
                    is_active=True
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._pool_stats.total_clients = len(self._clients)
                self._pool_stats.active_clients = sum(1 for s in self._stats_map.values() if s.is_active)
                self._pool_stats.created_count += 1
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è {account.username} (–ø—É–ª: {len(self._clients)}/{self.max_clients})")
                return client
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞ –¥–ª—è {account.username}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
            return None
    
    def release_client(self, account_id: int):
        """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç (–ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π)"""
        with self._lock:
            if account_id in self._stats_map:
                self._stats_map[account_id].last_used = time.time()
                logger.debug(f"üîì –ö–ª–∏–µ–Ω—Ç {account_id} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")
    
    def remove_client(self, account_id: int):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –∏–∑ –ø—É–ª–∞"""
        with self._lock:
            self._remove_client_unsafe(account_id)
    
    def _remove_client_unsafe(self, account_id: int):
        """–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)"""
        if account_id in self._clients:
            try:
                client = self._clients[account_id]
                # –ü—ã—Ç–∞–µ–º—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
                try:
                    client.logout()
                except:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ logout
                    
                del self._clients[account_id]
                logger.debug(f"üóëÔ∏è –ö–ª–∏–µ–Ω—Ç {account_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ø—É–ª–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ {account_id}: {e}")
        
        if account_id in self._stats_map:
            del self._stats_map[account_id]
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._pool_stats.total_clients = len(self._clients)
        self._pool_stats.active_clients = sum(1 for s in self._stats_map.values() if s.is_active)
        self._pool_stats.removed_count += 1
    
    def _cleanup_if_needed(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—É–ª–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        current_time = time.time()
        
        # –ï—Å–ª–∏ –ø—É–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç)
        current_limit = self.current_max_clients if self.adaptive_scaling else self.initial_max_clients
        if len(self._clients) >= current_limit:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            sorted_accounts = sorted(
                self._stats_map.items(),
                key=lambda x: x[1].last_used
            )
            
            # –£–¥–∞–ª—è–µ–º 20% —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö
            to_remove = max(1, len(sorted_accounts) // 5)
            for i in range(to_remove):
                account_id = sorted_accounts[i][0]
                logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø—É–ª–∞: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª–∏–µ–Ω—Ç {account_id}")
                self._remove_client_unsafe(account_id)
        
        # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
        to_remove = []
        for account_id, stats in self._stats_map.items():
            # –ö–ª–∏–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ inactive_threshold
            if (current_time - stats.last_used) > self.inactive_threshold:
                to_remove.append(account_id)
            # –ö–ª–∏–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π
            elif (current_time - stats.created_at) > self.old_threshold:
                to_remove.append(account_id)
        
        for account_id in to_remove:
            logger.info(f"üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç {account_id}")
            self._remove_client_unsafe(account_id)
    
    def cleanup(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        with self._lock:
            self._cleanup_if_needed()
            logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ø—É–ª–µ: {len(self._clients)}")
    
    def _record_demand(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–≥—Ä—É–∑–∫–∏"""
        current_time = time.time()
        self._demand_history.append(current_time)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Ö—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å)
        cutoff_time = current_time - 3600
        self._demand_history = [t for t in self._demand_history if t > cutoff_time]
    
    def _check_and_scale(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –ø—É–ª –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        current_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ N –º–∏–Ω—É—Ç
        if current_time - self._last_scale_check < self._scale_check_interval:
            return
        
        self._last_scale_check = current_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç
        recent_cutoff = current_time - 1800  # 30 –º–∏–Ω—É—Ç
        recent_demands = [t for t in self._demand_history if t > recent_cutoff]
        demand_rate = len(recent_demands) / 30 if recent_demands else 0  # –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        
        # –¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—É–ª–∞
        current_usage = len(self._clients)
        usage_percentage = current_usage / self.current_max_clients if self.current_max_clients > 0 else 0
        
        # –†–µ—à–µ–Ω–∏–µ –æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏ (–†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –ü–û–†–û–ì–ò –î–õ–Ø INSTAGRAM API)
        old_max = self.current_max_clients
        
        # –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏: ~10 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        expected_load_per_client = 10
        current_expected_load = current_usage * expected_load_per_client
        capacity_load = self.current_max_clients * expected_load_per_client
        
        if usage_percentage > 0.75 and demand_rate > (capacity_load * 0.6):  # 60% –æ—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—É–ª –Ω–∞ 25% - –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            new_max = min(int(self.current_max_clients * 1.25), self.max_clients_limit)
            if new_max > self.current_max_clients:
                self.current_max_clients = new_max
                logger.info(f"üìà –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –í–í–ï–†–•: {old_max} ‚Üí {new_max} –∫–ª–∏–µ–Ω—Ç–æ–≤ (–Ω–∞–≥—Ä—É–∑–∫–∞: {usage_percentage:.1%}, –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω: {demand_rate:.1f}, –æ–∂–∏–¥–∞–µ—Ç—Å—è: {capacity_load})")
        
        elif usage_percentage < 0.4 and demand_rate < (current_expected_load * 0.3):  # 30% –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            # –£–º–µ–Ω—å—à–∞–µ–º –ø—É–ª –Ω–∞ 20% - –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ
            new_max = max(int(self.current_max_clients * 0.8), self.initial_max_clients)
            if new_max < self.current_max_clients:
                self.current_max_clients = new_max
                logger.info(f"üìâ –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –í–ù–ò–ó: {old_max} ‚Üí {new_max} –∫–ª–∏–µ–Ω—Ç–æ–≤ (–Ω–∞–≥—Ä—É–∑–∫–∞: {usage_percentage:.1%}, –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω: {demand_rate:.1f}, –æ–∂–∏–¥–∞–µ—Ç—Å—è: {current_expected_load})")
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
                self._force_scale_down()
    
    def _force_scale_down(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—ã –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –ø—É–ª–∞"""
        while len(self._clients) > self.current_max_clients:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–ª–∏–µ–Ω—Ç
            if not self._clients:
                break
                
            oldest_account = min(
                self._stats_map.items(), 
                key=lambda x: x[1].last_used
            )[0]
            
            logger.info(f"üîΩ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {oldest_account} –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏")
            self._remove_client_unsafe(oldest_account)
    
    def get_adaptive_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
        current_time = time.time()
        
        # –ù–∞–≥—Ä—É–∑–∫–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        demands_5min = [t for t in self._demand_history if t > current_time - 300]
        demands_30min = [t for t in self._demand_history if t > current_time - 1800]
        demands_1hour = [t for t in self._demand_history if t > current_time - 3600]
        
        return {
            "adaptive_enabled": self.adaptive_scaling,
            "current_max_clients": self.current_max_clients,
            "initial_max_clients": self.initial_max_clients,
            "max_clients_limit": self.max_clients_limit,
            "current_usage": len(self._clients),
            "usage_percentage": len(self._clients) / self.current_max_clients if self.current_max_clients > 0 else 0,
            "demand_rates": {
                "last_5min": len(demands_5min) / 5,
                "last_30min": len(demands_30min) / 30,
                "last_hour": len(demands_1hour) / 60
            },
            "total_demand_history": len(self._demand_history),
            "next_scale_check": self._last_scale_check + self._scale_check_interval - current_time
        }
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞"""
        with self._lock:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
            self._pool_stats.total_clients = len(self._clients)
            self._pool_stats.active_clients = sum(1 for s in self._stats_map.values() if s.is_active)
            
            return {
                'pool_stats': {
                    'total_clients': self._pool_stats.total_clients,
                    'active_clients': self._pool_stats.active_clients,
                    'created_count': self._pool_stats.created_count,
                    'reused_count': self._pool_stats.reused_count,
                    'removed_count': self._pool_stats.removed_count,
                    'cache_hits': self._pool_stats.cache_hits,
                    'cache_misses': self._pool_stats.cache_misses,
                    'hit_ratio': self._pool_stats.cache_hits / max(1, self._pool_stats.cache_hits + self._pool_stats.cache_misses)
                },
                'adaptive_stats': self.get_adaptive_stats() if self.adaptive_scaling else None,
                'client_details': [
                    {
                        'account_id': stats.account_id,
                        'username': stats.username,
                        'created_at': stats.created_at,
                        'last_used': stats.last_used,
                        'use_count': stats.use_count,
                        'is_active': stats.is_active,
                        'age_minutes': (time.time() - stats.created_at) / 60,
                        'idle_minutes': (time.time() - stats.last_used) / 60
                    }
                    for stats in self._stats_map.values()
                ],
                'sleeping_clients': len(self.sleeping_clients),
                'clients_put_to_sleep': getattr(self._pool_stats, 'clients_put_to_sleep', 0),
                'clients_woken_up': getattr(self._pool_stats, 'clients_woken_up', 0),
                'memory_saved_by_sleep_mb': getattr(self._pool_stats, 'memory_saved_by_sleep', 0),
                'total_memory_usage_mb': (len(self._clients) * 4) + (len(self.sleeping_clients) * 0.8),  # 4MB active + 0.8MB sleeping
            }
    
    def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—É–ª–∞"""
        with self._lock:
            logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Instagram Client Pool...")
            account_ids = list(self._clients.keys())
            for account_id in account_ids:
                self._remove_client_unsafe(account_id)
            logger.info("‚úÖ Instagram Client Pool –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—É–ª–∞
_client_pool: Optional[InstagramClientPool] = None

def init_client_pool(initial_max_clients: int = 50,
                    max_clients_limit: int = 300, 
                    adaptive_scaling: bool = True,
                    inactive_threshold: int = 3600,
                    old_threshold: int = 21600):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—É–ª –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    global _client_pool
    _client_pool = InstagramClientPool(
        initial_max_clients=initial_max_clients,
        max_clients_limit=max_clients_limit,
        adaptive_scaling=adaptive_scaling,
        inactive_threshold=inactive_threshold, 
        old_threshold=old_threshold
    )
    if adaptive_scaling:
        logger.info("üèä‚Äç‚ôÇÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π Instagram Client Pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    else:
        logger.info("üèä‚Äç‚ôÇÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–π Instagram Client Pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

def get_instagram_client(account_id: int, force_new: bool = False) -> Optional[Client]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞
    
    –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–µ–∑–¥–µ
    –≥–¥–µ —Ä–∞–Ω—å—à–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å –∫–ª–∏–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
    """
    if _client_pool is None:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –ø—É–ª –Ω–µ —Å–æ–∑–¥–∞–Ω
        init_client_pool()
    
    return _client_pool.get_client(account_id, force_new)

def release_instagram_client(account_id: int):
    """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø—É–ª–µ"""
    if _client_pool:
        _client_pool.release_client(account_id)

def remove_instagram_client(account_id: int):
    """–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞"""
    if _client_pool:
        _client_pool.remove_client(account_id)

def cleanup_client_pool():
    """–û—á–∏—Å—Ç–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª"""
    if _client_pool:
        _client_pool.cleanup()

def get_pool_stats() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞"""
    if _client_pool:
        return _client_pool.get_stats()
    return {'error': 'Pool not initialized'}

def shutdown_client_pool():
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞"""
    global _client_pool
    if _client_pool:
        _client_pool.shutdown()
        _client_pool = None

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
init_client_pool()

logger.info("üì¶ Instagram Client Pool –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω") 