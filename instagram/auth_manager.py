import time
import logging
import threading
import queue
from enum import Enum
from telegram import ParseMode
import asyncio

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram
try:
    from email_to_telegram import get_code_from_email_via_telegram_sync
    EMAIL_TO_TELEGRAM_AVAILABLE = True
except ImportError:
    EMAIL_TO_TELEGRAM_AVAILABLE = False
    logging.warning("–ú–æ–¥—É–ª—å email_to_telegram –Ω–µ –Ω–∞–π–¥–µ–Ω. –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

logger = logging.getLogger(__name__)

class ChallengeChoice(Enum):
    SMS = 0
    EMAIL = 1

class TelegramChallengeHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram"""

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    verification_codes = {}

    def __init__(self, bot, chat_id):
        self.bot = bot
        self.chat_id = chat_id
        self.code_queue = queue.Queue()
        self.is_waiting = False
        logger.info(f"–°–æ–∑–¥–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ
        TelegramChallengeHandler.verification_codes[chat_id] = self.code_queue

    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        self.is_waiting = False

        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        while not self.code_queue.empty():
            try:
                self.code_queue.get_nowait()
            except queue.Empty:
                break

    @classmethod
    def set_code(cls, user_id, code):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"[AUTH_MANAGER] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥ {code} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        if user_id in cls.verification_codes:
            cls.verification_codes[user_id].put(code)
            print(f"[AUTH_MANAGER] –ö–æ–¥ {code} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        return False

    def handle_challenge(self, username, choice_type, email=None, email_password=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        print(f"[AUTH_MANAGER] –í—ã–∑–≤–∞–Ω handle_challenge –¥–ª—è {username}, choice_type={choice_type}")

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω EMAIL –∏ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –º–æ–¥—É–ª—å email_to_telegram,
        # –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if (choice_type == ChallengeChoice.EMAIL and email and email_password and
            EMAIL_TO_TELEGRAM_AVAILABLE):
            print(f"[AUTH_MANAGER] –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —á–µ—Ä–µ–∑ email_to_telegram –¥–ª—è {username}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            self.bot.send_message(
                chat_id=self.chat_id,
                text=f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ *{username}* —á–µ—Ä–µ–∑ Telegram...",
                parse_mode='Markdown'
            )

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —á–µ—Ä–µ–∑ email_to_telegram
            try:
                code = get_code_from_email_via_telegram_sync(email, email_password)
                if code:
                    print(f"[AUTH_MANAGER] –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ {code} —á–µ—Ä–µ–∑ email_to_telegram –¥–ª—è {username}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
                    self.bot.send_message(
                        chat_id=self.chat_id,
                        text=f"‚úÖ –ö–æ–¥ `{code}` –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç *{username}*",
                        parse_mode='Markdown'
                    )

                    return code
                else:
                    print(f"[AUTH_MANAGER] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —á–µ—Ä–µ–∑ email_to_telegram –¥–ª—è {username}")

                    # –°–æ–æ–±—â–∞–µ–º –æ –Ω–µ—É–¥–∞—á–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É
                    self.bot.send_message(
                        chat_id=self.chat_id,
                        text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ *{username}*. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É.",
                        parse_mode='Markdown'
                    )
            except Exception as e:
                print(f"[AUTH_MANAGER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ email_to_telegram: {str(e)}")

                # –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É
                self.bot.send_message(
                    chat_id=self.chat_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞: {str(e)}. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É.",
                    parse_mode='Markdown'
                )

        # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        if choice_type == ChallengeChoice.EMAIL:
            choice_name = "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã"
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—á—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
            email_info = f"\n–ü–æ—á—Ç–∞: {email}" if email else ""
        elif choice_type == ChallengeChoice.SMS:
            choice_name = "SMS"
            email_info = ""
        else:
            choice_name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"
            email_info = ""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        message = (
            f"üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ *{username}*\n\n"
            f"Instagram –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ {choice_name}.{email_info}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (6 —Ü–∏—Ñ—Ä):"
        )

        self.bot.send_message(
            chat_id=self.chat_id,
            text=message,
            parse_mode='Markdown'
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        self.is_waiting = True
        print(f"[AUTH_MANAGER] –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è {username}, is_waiting={self.is_waiting}")

        # –ñ–¥–µ–º, –ø–æ–∫–∞ –∫–æ–¥ –Ω–µ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω (–º–∞–∫—Å–∏–º—É–º 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç)
        start_time = time.time()
        while self.is_waiting and time.time() - start_time < 300:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                code = self.code_queue.get(timeout=1)
                print(f"[AUTH_MANAGER] –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ {code} –¥–ª—è {username}")
                self.reset()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
                self.bot.send_message(
                    chat_id=self.chat_id,
                    text=f"‚úÖ –ö–æ–¥ `{code}` –ø–æ–ª—É—á–µ–Ω –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç *{username}*",
                    parse_mode='Markdown'
                )

                return code
            except queue.Empty:
                # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
                pass

        # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        self.bot.send_message(
            chat_id=self.chat_id,
            text="‚è± –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

        self.reset()
        return None