import logging
import os
import traceback
import time
from pathlib import Path
from datetime import datetime

from instagram.client import InstagramClient
from database.db_manager import update_task_status, update_instagram_account
from utils.image_splitter import split_image_for_mosaic
from database.models import TaskStatus
from instagram.email_utils_optimized import get_verification_code_from_email
from instagram.email_utils import mark_account_problematic

logger = logging.getLogger(__name__)

class PostManager:
    def __init__(self, account_id):
        self.instagram = InstagramClient(account_id)

    def _ensure_login_with_recovery(self, max_attempts=3):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞"""
        account = self.instagram.account
        
        for attempt in range(max_attempts):
            try:
                logger.info(f"üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ {attempt + 1}/{max_attempts} –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                if self.instagram.check_login():
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
                    update_instagram_account(
                        account.id,
                        is_active=True,
                        status="active",
                        last_error=None,
                        last_check=datetime.now()
                    )
                    logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username} –æ–±–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π")
                    return True
                else:
                    # –ï—Å–ª–∏ check_login –≤–µ—Ä–Ω—É–ª False, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤—Ö–æ–¥–∞
                    logger.warning(f"‚ö†Ô∏è check_login –≤–µ—Ä–Ω—É–ª False –¥–ª—è {account.username}, –ø—ã—Ç–∞–µ–º—Å—è IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    if not account.email or not account.email_password:
                        logger.warning(f"‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                        mark_account_problematic(
                            account.email or account.username,
                            "no_email_data",
                            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                        )
                        return False
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email
                    try:
                        logger.info(f"üìß –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email –¥–ª—è @{account.username}")
                        verification_code = get_verification_code_from_email(
                            account.email, 
                            account.email_password, 
                            max_attempts=3, 
                            delay_between_attempts=15
                        )
                        
                        if verification_code:
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {verification_code} –¥–ª—è @{account.username}")
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            login_success = self.instagram.login_with_challenge_code(verification_code)
                            if login_success:
                                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è @{account.username}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                                try:
                                    self.instagram.client.get_timeline_feed()
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
                                    update_instagram_account(
                                        account.id,
                                        is_active=True,
                                        status="active",
                                        last_error=None,
                                        last_check=datetime.now()
                                    )
                                    logger.info(f"‚úÖ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è @{account.username}")
                                    return True
                                except Exception as verify_error:
                                    logger.warning(f"‚ùå IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ @{account.username} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}")
                                    mark_account_problematic(
                                        account.email or account.username,
                                        "recovery_verify_failed",
                                        f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}"
                                    )
                                    return False
                            else:
                                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                                mark_account_problematic(
                                    account.email or account.username,
                                    "recovery_login_failed",
                                    "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                                )
                                return False
                        else:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                            mark_account_problematic(
                                account.email or account.username,
                                "email_code_failed",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ email"
                            )
                            return False
                            
                    except Exception as recovery_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {account.username}: {recovery_error}")
                        mark_account_problematic(
                            account.email or account.username,
                            "imap_recovery_error",
                            f"–û—à–∏–±–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(recovery_error)}"
                        )
                        return False
                    
            except Exception as e:
                error_msg = str(e).lower()
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {account.username}: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
                if any(keyword in error_msg for keyword in ['challenge_required', 'verification_required', 'confirm_email', 'checkpoint', 'login_required']):
                    logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ ({e}), –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ IMAP –¥–ª—è @{account.username}...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    if not account.email or not account.email_password:
                        logger.warning(f"‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                        mark_account_problematic(
                            account.email or account.username,
                            "no_email_data",
                            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                        )
                        return False
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email
                    try:
                        logger.info(f"üìß –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email –¥–ª—è @{account.username}")
                        verification_code = get_verification_code_from_email(
                            account.email, 
                            account.email_password, 
                            max_attempts=3, 
                            delay_between_attempts=15
                        )
                        
                        if verification_code:
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {verification_code} –¥–ª—è @{account.username}")
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            login_success = self.instagram.login_with_challenge_code(verification_code)
                            if login_success:
                                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è @{account.username}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                                try:
                                    self.instagram.client.get_timeline_feed()
                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
                                    update_instagram_account(
                                        account.id,
                                        is_active=True,
                                        status="active",
                                        last_error=None,
                                        last_check=datetime.now()
                                    )
                                    logger.info(f"‚úÖ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è @{account.username}")
                                    return True
                                except Exception as verify_error:
                                    logger.warning(f"‚ùå IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ @{account.username} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}")
                                    mark_account_problematic(
                                        account.email or account.username,
                                        "recovery_verify_failed",
                                        f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}"
                                    )
                                    return False
                            else:
                                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                                mark_account_problematic(
                                    account.email or account.username,
                                    "recovery_login_failed",
                                    "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                                )
                                return False
                        else:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è @{account.username}")
                            mark_account_problematic(
                                account.email or account.username,
                                "email_code_failed",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ email"
                            )
                            return False
                            
                    except Exception as recovery_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {account.username}: {recovery_error}")
                        mark_account_problematic(
                            account.email or account.username,
                            "imap_recovery_error",
                            f"–û—à–∏–±–∫–∞ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(recovery_error)}"
                        )
                        return False
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                if attempt == max_attempts - 1:
                    logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {account.username}")
                    # –û—Ç–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                    mark_account_problematic(
                        account.email or account.username,
                        "login_failed",
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}"
                    )
                    return False
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                time.sleep(5)
        
        return False

    def _ensure_login(self, max_attempts=3):
        """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self._ensure_login_with_recovery(max_attempts)

    def publish_photo(self, image_path, caption="", hashtags="", hide_from_feed=False):
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç —Ñ–æ—Ç–æ –≤ Instagram
        
        Args:
            image_path (str): –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            caption (str): –ü–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É
            hashtags (str): –•–µ—à—Ç–µ–≥–∏
            hide_from_feed (bool): –°–∫—Ä—ã—Ç—å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–µ–Ω—Ç—ã
        
        Returns:
            tuple: (success, media_id)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if not self._ensure_login_with_recovery():
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ")
                return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(image_path):
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
                return False, f"ERROR - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}"
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —Ö–µ—à—Ç–µ–≥–∏
            full_caption = caption
            if hashtags:
                full_caption = f"{caption}\n\n{hashtags}" if caption else hashtags

            # –ü—É–±–ª–∏–∫—É–µ–º —Ñ–æ—Ç–æ
            media = self.instagram.client.photo_upload(
                image_path,
                caption=full_caption
            )
            
            if media:
                logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {media.id}")
                return True, media.id
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ")
                # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                mark_account_problematic(
                    self.instagram.account.email,
                    "publication_failed",
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ"
                )
                return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ"
                
        except Exception as e:
            error_msg = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {error_msg}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if any(keyword in error_msg.lower() for keyword in ['challenge_required', 'login_required', 'verification_required']):
                logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º...")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ check_login –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True
                account = self.instagram.account
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                if account.email and account.email_password:
                    logger.info(f"üìß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è @{account.username} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email
                        verification_code = get_verification_code_from_email(
                            account.email, 
                            account.email_password, 
                            max_attempts=3, 
                            delay_between_attempts=15
                        )
                        
                        if verification_code:
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {verification_code} –¥–ª—è @{account.username}")
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            login_success = self.instagram.login_with_challenge_code(verification_code)
                            if login_success:
                                logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è @{account.username}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                                try:
                                    self.instagram.client.get_timeline_feed()
                                    logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è @{account.username}")
                                    
                                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                                    
                                    try:
                                        media = self.instagram.client.photo_upload(
                                            image_path,
                                            caption=full_caption
                                        )
                                        
                                        if media:
                                            logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {media.id}")
                                            return True, media.id
                                        else:
                                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                                            mark_account_problematic(
                                                self.instagram.account.email,
                                                "publication_failed_after_imap",
                                                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                                            )
                                            return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                                            
                                    except Exception as pub_retry_error:
                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ IMAP: {pub_retry_error}")
                                        mark_account_problematic(
                                            self.instagram.account.email,
                                            "publication_error_after_imap",
                                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ IMAP: {str(pub_retry_error)}"
                                        )
                                        return False, f"ERROR - {pub_retry_error}"
                                        
                                except Exception as verify_error:
                                    logger.warning(f"‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}")
                                    mark_account_problematic(
                                        account.email,
                                        "forced_recovery_verify_failed",
                                        f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}"
                                    )
                            else:
                                logger.warning(f"‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è @{account.username}")
                                mark_account_problematic(
                                    account.email,
                                    "forced_recovery_login_failed",
                                    "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å"
                                )
                        else:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è @{account.username}")
                            mark_account_problematic(
                                account.email,
                                "forced_email_code_failed",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                            )
                            
                    except Exception as forced_recovery_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {forced_recovery_error}")
                        mark_account_problematic(
                            account.email,
                            "forced_imap_recovery_error",
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(forced_recovery_error)}"
                        )
                
                # –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
                if self._ensure_login_with_recovery():
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞...")
                    
                    try:
                        media = self.instagram.client.photo_upload(
                            image_path,
                            caption=full_caption
                        )
                        
                        if media:
                            logger.info(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {media.id}")
                            return True, media.id
                        else:
                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ")
                            # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                            mark_account_problematic(
                                self.instagram.account.email,
                                "publication_failed_retry",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ"
                            )
                            return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ"
                            
                    except Exception as retry_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {retry_error}")
                        # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                        mark_account_problematic(
                            self.instagram.account.email,
                            "publication_error_retry",
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {str(retry_error)}"
                        )
                        return False, f"ERROR - {retry_error}"
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ")
                    # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                    mark_account_problematic(
                        self.instagram.account.email,
                        "login_failed_retry",
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
                    )
                    return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ"
            
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Ç–æ–∂–µ –ø–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
            mark_account_problematic(
                self.instagram.account.email,
                "publication_error",
                f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {error_msg}"
            )
            
            return False, f"ERROR - {error_msg}"

    def publish_carousel(self, media_paths, caption="", hashtags="", hide_from_feed=False):
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç –∫–∞—Ä—É—Å–µ–ª—å (–∞–ª—å–±–æ–º) –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Args:
            media_paths (list): –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
            caption (str): –ü–æ–¥–ø–∏—Å—å –∫ –ø–æ—Å—Ç—É
            hashtags (str): –•–µ—à—Ç–µ–≥–∏
            hide_from_feed (bool): –°–∫—Ä—ã—Ç—å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–µ–Ω—Ç—ã
        
        Returns:
            tuple: (success, media_id)
        """
        try:
            logger.info(f"üé† –ù–∞—á–∏–Ω–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏ –∏–∑ {len(media_paths)} —Ñ–∞–π–ª–æ–≤")
            logger.info(f"üìÅ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º: {media_paths}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if not self._ensure_login_with_recovery():
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏")
                return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            for path in media_paths:
                if not os.path.exists(path):
                    logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
                    return False, f"ERROR - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}"
                logger.info(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {path}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å –∏ —Ö–µ—à—Ç–µ–≥–∏
            full_caption = caption
            if hashtags:
                full_caption = f"{caption}\n\n{hashtags}" if caption else hashtags
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(media_paths)} —Ñ–∞–π–ª–æ–≤ –≤ Instagram API")
            
            # –ü—É–±–ª–∏–∫—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å
            media = self.instagram.client.album_upload(
                media_paths,
                caption=full_caption
            )
            
            if media:
                logger.info(f"–ö–∞—Ä—É—Å–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {media.id}")
                return True, media.id
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å")
                # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                mark_account_problematic(
                    self.instagram.account.email,
                    "carousel_publication_failed",
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å"
                )
                return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å"
                
        except Exception as e:
            error_msg = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {error_msg}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if any(keyword in error_msg.lower() for keyword in ['challenge_required', 'login_required', 'verification_required']):
                logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º...")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ check_login –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True
                account = self.instagram.account
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                if account.email and account.email_password:
                    logger.info(f"üìß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è @{account.username} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏...")
                    
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ email
                        verification_code = get_verification_code_from_email(
                            account.email, 
                            account.email_password, 
                            max_attempts=3, 
                            delay_between_attempts=15
                        )
                        
                        if verification_code:
                            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {verification_code} –¥–ª—è @{account.username}")
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            login_success = self.instagram.login_with_challenge_code(verification_code)
                            if login_success:
                                logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–ª—è @{account.username}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                                try:
                                    self.instagram.client.get_timeline_feed()
                                    logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –¥–ª—è @{account.username}")
                                    
                                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∫–∞—Ä—É—Å–µ–ª–∏
                                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –µ—â–µ —Ä–∞–∑
                                    for path in media_paths:
                                        if not os.path.exists(path):
                                            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {path}")
                                            return False, f"ERROR - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}"
                                        logger.info(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {path}")
                                    
                                    try:
                                        logger.info(f"üì§ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {len(media_paths)} —Ñ–∞–π–ª–æ–≤ –≤ Instagram API –ø–æ—Å–ª–µ IMAP")
                                        media = self.instagram.client.album_upload(
                                            media_paths,
                                            caption=full_caption
                                        )
                                        
                                        if media:
                                            logger.info(f"–ö–∞—Ä—É—Å–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {media.id}")
                                            return True, media.id
                                        else:
                                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
                                            mark_account_problematic(
                                                self.instagram.account.email,
                                                "carousel_failed_after_imap",
                                                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                                            )
                                            return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å –ø–æ—Å–ª–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                                            
                                    except Exception as pub_retry_error:
                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ—Å–ª–µ IMAP: {pub_retry_error}")
                                        mark_account_problematic(
                                            self.instagram.account.email,
                                            "carousel_error_after_imap",
                                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ—Å–ª–µ IMAP: {str(pub_retry_error)}"
                                        )
                                        return False, f"ERROR - {pub_retry_error}"
                                        
                                except Exception as verify_error:
                                    logger.warning(f"‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}")
                                    mark_account_problematic(
                                        account.email,
                                        "forced_carousel_recovery_verify_failed",
                                        f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–æ—Å—å: {verify_error}"
                                    )
                            else:
                                logger.warning(f"‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è @{account.username}")
                                mark_account_problematic(
                                    account.email,
                                    "forced_carousel_recovery_login_failed",
                                    "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—É—Å–µ–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å"
                                )
                        else:
                            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏ @{account.username}")
                            mark_account_problematic(
                                account.email,
                                "forced_carousel_email_code_failed",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏"
                            )
                            
                    except Exception as forced_recovery_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏: {forced_recovery_error}")
                        mark_account_problematic(
                            account.email,
                            "forced_carousel_imap_recovery_error",
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ IMAP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—É—Å–µ–ª–∏: {str(forced_recovery_error)}"
                        )
                
                # –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π –º–µ—Ç–æ–¥
                if self._ensure_login_with_recovery():
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –µ—â–µ —Ä–∞–∑
                    for path in media_paths:
                        if not os.path.exists(path):
                            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {path}")
                            return False, f"ERROR - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}"
                        logger.info(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {path}")
                    
                    try:
                        logger.info(f"üì§ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {len(media_paths)} —Ñ–∞–π–ª–æ–≤ –≤ Instagram API")
                        media = self.instagram.client.album_upload(
                            media_paths,
                            caption=full_caption
                        )
                        
                        if media:
                            logger.info(f"–ö–∞—Ä—É—Å–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {media.id}")
                            return True, media.id
                        else:
                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ")
                            # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                            mark_account_problematic(
                                self.instagram.account.email,
                                "carousel_failed_retry",
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ"
                            )
                            return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ"
                            
                    except Exception as retry_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {retry_error}")
                        # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                        mark_account_problematic(
                            self.instagram.account.email,
                            "carousel_error_retry",
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –∫–∞—Ä—É—Å–µ–ª–∏: {str(retry_error)}"
                        )
                        return False, f"ERROR - {retry_error}"
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏")
                    # –ü–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
                    mark_account_problematic(
                        self.instagram.account.email,
                        "carousel_login_failed_retry",
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏"
                    )
                    return False, "ERROR - –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ"
            
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∫–∞—Ä—É—Å–µ–ª–∏ —Ç–æ–∂–µ –ø–æ–º–µ—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π
            mark_account_problematic(
                self.instagram.account.email,
                "carousel_error",
                f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏: {error_msg}"
            )
            
            return False, f"ERROR - {error_msg}"

    def publish_mosaic(self, image_path, caption=None):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–æ–∑–∞–∏–∫–∏ –∏–∑ 6 —á–∞—Å—Ç–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if not self._ensure_login():
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–æ–∑–∞–∏–∫–∏")
                return False, "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(image_path):
                logger.error(f"–§–∞–π–ª {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}"

            # –†–∞–∑–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ 6 —á–∞—Å—Ç–µ–π
            split_images = split_image_for_mosaic(image_path)
            if not split_images:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏")
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏"

            # –ü—É–±–ª–∏–∫—É–µ–º —á–∞—Å—Ç–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—á—Ç–æ–±—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ)
            for i, img_path in enumerate(reversed(split_images)):
                # –î–ª—è –ø–µ—Ä–≤–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –ø—É—Å—Ç–æ–µ
                part_caption = caption if i == 0 else ""

                success, result = self.publish_photo(img_path, part_caption)
                if not success:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á–∞—Å—Ç–∏ {i+1} –º–æ–∑–∞–∏–∫–∏: {result}")
                    return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á–∞—Å—Ç–∏ {i+1} –º–æ–∑–∞–∏–∫–∏: {result}"

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
                time.sleep(5)

            logger.info(f"–ú–æ–∑–∞–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
            return True, None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–æ–∑–∞–∏–∫–∏: {e}")
            return False, str(e)

    def execute_post_task(self, task):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
            update_task_status(task.id, TaskStatus.PROCESSING)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            if task.task_type == 'post':
                success, result = self.publish_photo(task.media_path, task.caption)
            elif task.task_type == 'mosaic':
                success, result = self.publish_mosaic(task.media_path, task.caption)
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task.task_type}")
                update_task_status(task.id, TaskStatus.FAILED, error_message=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task.task_type}")
                return False, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task.task_type}"

            if success:
                update_task_status(task.id, TaskStatus.COMPLETED)
                logger.info(f"–ó–∞–¥–∞—á–∞ {task.id} –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {task.task_type} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True, None
            else:
                update_task_status(task.id, TaskStatus.FAILED, error_message=result)
                logger.error(f"–ó–∞–¥–∞—á–∞ {task.id} –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {task.task_type} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result}")
                return False, result
        except Exception as e:
            update_task_status(task.id, TaskStatus.FAILED, error_message=str(e))
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {task.id} –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {task.task_type}: {e}")
            return False, str(e)