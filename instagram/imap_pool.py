import logging
import imaplib
import threading
import time
from typing import Optional, Dict, Set, Tuple, List
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from queue import Queue, Empty
from contextlib import contextmanager

logger = logging.getLogger(__name__)

@dataclass
class IMAPConnection:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
    mail: imaplib.IMAP4_SSL
    email: str
    created_at: datetime = field(default_factory=datetime.now)
    last_used: datetime = field(default_factory=datetime.now)
    is_busy: bool = False
    use_count: int = 0

class IMAPConnectionPool:
    """–ü—É–ª IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º"""
    
    def __init__(self, 
                 max_connections_per_email: int = 2,
                 max_idle_time_minutes: int = 60,
                 max_connection_lifetime_hours: int = 12,
                 cleanup_interval_minutes: int = 5):
        
        self.max_connections_per_email = max_connections_per_email
        self.max_idle_time = timedelta(minutes=max_idle_time_minutes)
        self.max_lifetime = timedelta(hours=max_connection_lifetime_hours)
        self.cleanup_interval = timedelta(minutes=cleanup_interval_minutes)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        self._pools: Dict[str, Queue] = {}  # email -> Queue[IMAPConnection]
        self._active_connections: Dict[str, List[IMAPConnection]] = {}  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å Set –Ω–∞ List
        self._connection_count: Dict[str, int] = {}
        
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self._pool_lock = threading.RLock()
        self._cleanup_lock = threading.Lock()
        
        # –§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
        self._cleanup_thread = None
        self._shutdown = False
        # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ cleanup thread - —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω
        self._cleanup_thread_started = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'connections_created': 0,
            'connections_reused': 0,
            'connections_expired': 0,
            'cleanup_runs': 0
        }
    
    def _start_cleanup_thread(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏"""
        def cleanup_worker():
            while not self._shutdown:
                try:
                    time.sleep(self.cleanup_interval.total_seconds())
                    if not self._shutdown:
                        self._cleanup_expired_connections()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ cleanup_worker: {e}")
        
        self._cleanup_thread = threading.Thread(target=cleanup_worker, daemon=True)
        self._cleanup_thread.start()
        logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø—É–ª–∞ IMAP (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.cleanup_interval})")
    
    def _get_imap_server(self, email: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç IMAP —Å–µ—Ä–≤–µ—Ä –ø–æ email"""
        domain = email.split('@')[1].lower()
        
        # –úapp–∏–Ω–≥ –¥–æ–º–µ–Ω–æ–≤ –Ω–∞ IMAP —Å–µ—Ä–≤–µ—Ä—ã
        imap_servers = {
            'firstmail.ltd': 'imap.firstmail.ltd',
            'wildbmail.com': 'imap.firstmail.ltd',  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ç–æ—Ç –∂–µ —Å–µ—Ä–≤–µ—Ä
            'gmail.com': 'imap.gmail.com',
            'outlook.com': 'imap-mail.outlook.com',
            'hotmail.com': 'imap-mail.outlook.com',
            'yahoo.com': 'imap.mail.yahoo.com',
        }
        
        return imap_servers.get(domain, 'imap.firstmail.ltd')  # –î–µ—Ñ–æ–ª—Ç
    
    def _create_connection(self, email: str, password: str) -> Optional[IMAPConnection]:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        try:
            imap_server = self._get_imap_server(email)
            logger.debug(f"üîå –°–æ–∑–¥–∞–Ω–∏–µ IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {email} -> {imap_server}")
            
            mail = imaplib.IMAP4_SSL(imap_server, 993)
            mail.login(email, password)
            
            connection = IMAPConnection(
                mail=mail,
                email=email,
                created_at=datetime.now(),
                last_used=datetime.now()
            )
            
            with self._pool_lock:
                self.stats['connections_created'] += 1
            
            logger.info(f"‚úÖ IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è {email}")
            return connection
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è {email}: {e}")
            return None
    
    @contextmanager
    def get_connection(self, email: str, password: str):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞"""
        # –õ–µ–Ω–∏–≤—ã–π –∑–∞–ø—É—Å–∫ cleanup thread –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        if not self._cleanup_thread_started:
            self._start_cleanup_thread()
            self._cleanup_thread_started = True
            
        connection = None
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø—É–ª–∞
            connection = self._get_from_pool(email, password)
            
            if connection:
                connection.is_busy = True
                connection.last_used = datetime.now()
                connection.use_count += 1
                
                with self._pool_lock:
                    self.stats['connections_reused'] += 1
                
                logger.debug(f"‚ôªÔ∏è –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è {email} (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {connection.use_count})")
            
            yield connection
            
        finally:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—É–ª
            if connection:
                connection.is_busy = False
                connection.last_used = datetime.now()
                self._return_to_pool(connection)
    
    def _get_from_pool(self, email: str, password: str) -> Optional[IMAPConnection]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ"""
        with self._pool_lock:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è email –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if email not in self._pools:
                self._pools[email] = Queue()
                self._active_connections[email] = []
                self._connection_count[email] = 0
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            try:
                connection = self._pools[email].get_nowait()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â–µ –∂–∏–≤–æ
                if self._is_connection_valid(connection):
                    return connection
                else:
                    # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç—É—Ö–ª–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º
                    self._close_connection(connection)
                    self._connection_count[email] -= 1
            
            except Empty:
                pass
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
            if self._connection_count[email] < self.max_connections_per_email:
                connection = self._create_connection(email, password)
                if connection:
                    self._connection_count[email] += 1
                    self._active_connections[email].append(connection)
                    return connection
            
            return None
    
    def _return_to_pool(self, connection: IMAPConnection):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª"""
        if not connection:
            return
            
        with self._pool_lock:
            email = connection.email
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â–µ –≤–∞–ª–∏–¥–Ω–æ
            if self._is_connection_valid(connection):
                self._pools[email].put(connection)
                logger.debug(f"üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –ø—É–ª: {email}")
            else:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ç—É—Ö—à–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                self._close_connection(connection)
                if email in self._active_connections:
                    self._active_connections[email].remove(connection)
                self._connection_count[email] -= 1
                logger.debug(f"‚ùå –ü—Ä–æ—Ç—É—Ö—à–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {email}")
    
    def _is_connection_valid(self, connection: IMAPConnection) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not connection or not connection.mail:
            return False
        
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        if now - connection.created_at > self.max_lifetime:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º idle –≤—Ä–µ–º—è
        if now - connection.last_used > self.max_idle_time:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        try:
            connection.mail.noop()  # Ping IMAP —Å–µ—Ä–≤–µ—Ä–∞
            return True
        except:
            return False
    
    def _close_connection(self, connection: IMAPConnection):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        try:
            if connection.mail:
                connection.mail.logout()
                logger.debug(f"üîå IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è {connection.email}")
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
    
    def _cleanup_expired_connections(self):
        """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Ç—É—Ö—à–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if not self._cleanup_lock.acquire(blocking=False):
            return  # –î—Ä—É–≥–∞—è –æ—á–∏—Å—Ç–∫–∞ —É–∂–µ –∏–¥–µ—Ç
        
        try:
            with self._pool_lock:
                self.stats['cleanup_runs'] += 1
                expired_count = 0
                
                for email in list(self._pools.keys()):
                    # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ—Ç –ø—Ä–æ—Ç—É—Ö—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
                    new_queue = Queue()
                    
                    while not self._pools[email].empty():
                        try:
                            connection = self._pools[email].get_nowait()
                            if self._is_connection_valid(connection):
                                new_queue.put(connection)
                            else:
                                self._close_connection(connection)
                                self._active_connections[email].remove(connection)
                                self._connection_count[email] -= 1
                                expired_count += 1
                        except Empty:
                            break
                    
                    self._pools[email] = new_queue
                
                if expired_count > 0:
                    self.stats['connections_expired'] += expired_count
                    logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø—É–ª–∞: —É–¥–∞–ª–µ–Ω–æ {expired_count} –ø—Ä–æ—Ç—É—Ö—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
        
        finally:
            self._cleanup_lock.release()
    
    def get_stats(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞"""
        with self._pool_lock:
            total_active = sum(self._connection_count.values())
            return {
                **self.stats,
                'active_connections_total': total_active,
                'pools_count': len(self._pools),
                'active_by_email': dict(self._connection_count)
            }
    
    def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—É–ª–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã IMAP –ø—É–ª–∞...")
        
        self._shutdown = True
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è cleanup thread
        if self._cleanup_thread:
            self._cleanup_thread.join(timeout=5)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        with self._pool_lock:
            for email in list(self._pools.keys()):
                while not self._pools[email].empty():
                    try:
                        connection = self._pools[email].get_nowait()
                        self._close_connection(connection)
                    except Empty:
                        break
                
                for connection in self._active_connections[email]:
                    self._close_connection(connection)
        
        logger.info("‚úÖ IMAP –ø—É–ª –∑–∞–≤–µ—Ä—à–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—É–ª–∞
imap_pool = IMAPConnectionPool()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
def get_imap_connection(email: str, password: str):
    """–ü–æ–ª—É—á–∞–µ—Ç IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞"""
    return imap_pool.get_connection(email, password) 
