#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
"""

import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
sys.path.insert(0, str(Path(__file__).parent))

from database.db_manager import get_instagram_accounts, init_db
from instagram.health_monitor import AdvancedHealthMonitor
from instagram.lifecycle_manager import AccountLifecycleManager
from instagram.predictive_monitor import PredictiveMonitor
from instagram.advanced_verification import AdvancedVerificationSystem

def check_accounts_detailed():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    print('üîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –ê–ö–ö–ê–£–ù–¢–ê–ú')
    print('='*60)
    
    init_db()
    accounts = get_instagram_accounts()
    
    if not accounts:
        print("‚ùå –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
    health_monitor = AdvancedHealthMonitor()
    lifecycle_manager = AccountLifecycleManager()
    predictive_monitor = PredictiveMonitor()
    verification_system = AdvancedVerificationSystem()
    
    valid_accounts = []
    problematic_accounts = []
    
    print(f"üìã –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(accounts)}")
    print()
    
    for i, account in enumerate(accounts, 1):
        print(f'üë§ –ê–ö–ö–ê–£–ù–¢ {i}: {account.username}')
        print(f'üìä ID: {account.id} | –ê–∫—Ç–∏–≤–µ–Ω –≤ –ë–î: {account.is_active}')
        
        try:
            # –í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
            age_days = (datetime.now() - account.created_at).days
            print(f'üìÖ –í–æ–∑—Ä–∞—Å—Ç: {age_days} –¥–Ω–µ–π')
            
            # Health Monitor
            health_score = health_monitor.calculate_comprehensive_health_score(account.id)
            print(f'üß† Health Score: {health_score}/100')
            
            # Lifecycle Manager  
            stage = lifecycle_manager.determine_account_stage(account.id)
            print(f'üîÑ Lifecycle Stage: {stage}')
            
            # Predictive Monitor
            risk_score = predictive_monitor.calculate_ban_risk_score(account.id)
            print(f'üîÆ Risk Score: {risk_score}/100')
            
            # Verification (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
            verification_status = "‚è≥ –ü—Ä–æ–ø—É—â–µ–Ω–æ"
            print(f'üîê –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {verification_status}')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if health_score >= 40 and stage == 'ACTIVE' and risk_score <= 40:
                status = '‚úÖ –í–ê–õ–ò–î–ù–´–ô'
                valid_accounts.append({
                    'username': account.username,
                    'health': health_score,
                    'stage': stage,
                    'risk': risk_score,
                    'age': age_days
                })
            else:
                status = '‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ô'
                problematic_accounts.append({
                    'username': account.username,
                    'health': health_score,
                    'stage': stage,
                    'risk': risk_score,
                    'age': age_days,
                    'reason': get_problem_reason(health_score, stage, risk_score)
                })
            
            print(f'üéØ –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°: {status}')
            print('-' * 50)
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}: {e}')
            print('-' * 50)
    
    # –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print('\nüìä –°–í–û–î–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê')
    print('='*40)
    print(f'‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(valid_accounts)}/{len(accounts)} ({len(valid_accounts)/len(accounts)*100:.1f}%)')
    print(f'‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(problematic_accounts)}/{len(accounts)} ({len(problematic_accounts)/len(accounts)*100:.1f}%)')
    
    if valid_accounts:
        print('\n‚úÖ –í–ê–õ–ò–î–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´:')
        for acc in valid_accounts:
            print(f"  ‚Ä¢ {acc['username']}: Health={acc['health']}, Stage={acc['stage']}, Risk={acc['risk']}")
    
    if problematic_accounts:
        print('\n‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´:')
        for acc in problematic_accounts:
            print(f"  ‚Ä¢ {acc['username']}: {acc['reason']}")
            print(f"    Health={acc['health']}, Stage={acc['stage']}, Risk={acc['risk']}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    print('\nüìà –ê–ù–ê–õ–ò–ó –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú:')
    health_good = len([a for a in accounts if health_monitor.calculate_comprehensive_health_score(a.id) >= 40])
    stage_active = len([a for a in accounts if lifecycle_manager.determine_account_stage(a.id) == 'ACTIVE'])
    risk_low = len([a for a in accounts if predictive_monitor.calculate_ban_risk_score(a.id) <= 40])
    
    print(f'üß† Health Score ‚â• 40: {health_good}/{len(accounts)} ({health_good/len(accounts)*100:.1f}%)')
    print(f'üîÑ Stage = ACTIVE: {stage_active}/{len(accounts)} ({stage_active/len(accounts)*100:.1f}%)')
    print(f'üîÆ Risk Score ‚â§ 40: {risk_low}/{len(accounts)} ({risk_low/len(accounts)*100:.1f}%)')

def get_problem_reason(health_score, stage, risk_score):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º"""
    reasons = []
    
    if health_score < 40:
        reasons.append("–ù–∏–∑–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ")
    if stage != 'ACTIVE':
        reasons.append(f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π —ç—Ç–∞–ø ({stage})")
    if risk_score > 40:
        reasons.append("–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫")
    
    return ", ".join(reasons) if reasons else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞"

if __name__ == "__main__":
    check_accounts_detailed() 