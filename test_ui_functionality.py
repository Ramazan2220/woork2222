#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç UI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Telegram –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–æ–∫ –∏ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
"""

import asyncio
import sys
import traceback
from unittest.mock import MagicMock, AsyncMock
from telegram import Update, CallbackQuery, Message, Chat, User, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('.')

def create_mock_callback_query(data, user_id=123456789):
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ CallbackQuery"""
    query = MagicMock()
    query.data = data
    query.from_user.id = user_id
    query.from_user.username = "test_user"
    query.message.chat.id = user_id
    query.message.message_id = 1
    query.answer = AsyncMock()
    query.edit_message_text = AsyncMock()
    query.edit_message_reply_markup = AsyncMock()
    return query

def create_mock_context():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    context = MagicMock()
    context.user_data = {}
    context.bot_data = {}
    return context

async def test_warmup_buttons():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞"""
    print("üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞...")
    
    try:
        from telegram_bot.handlers.automation_handlers import (
            smart_warm_command, status_command, limits_command
        )
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞
        query = create_mock_callback_query("smart_warm_menu")
        context = create_mock_context()
        
        result = await smart_warm_command(query, context)
        print(f"‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞: {result if result else 'OK'}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
        query = create_mock_callback_query("status")
        result = await status_command(query, context)
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞: {result if result else 'OK'}")
        
        # –¢–µ—Å—Ç –ª–∏–º–∏—Ç–æ–≤
        query = create_mock_callback_query("limits")
        result = await limits_command(query, context)
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ª–∏–º–∏—Ç–æ–≤: {result if result else 'OK'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞: {e}")
        traceback.print_exc()
        return False

async def test_account_selection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    
    try:
        from telegram_bot.utils.account_selection import AccountSelector
        from database.db_manager import get_instagram_accounts
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = get_instagram_accounts()
        if not accounts:
            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return True
            
        print(f"üì± –ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
        selector = AccountSelector()
        
        # –¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä–∞
        query = create_mock_callback_query("test_action")
        context = create_mock_context()
        
        result = await selector.start_selection(
            query, context, 
            action_type="test", 
            title="–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
        )
        print(f"‚úÖ –ù–∞—á–∞–ª–æ –≤—ã–±–æ—Ä–∞: {result}")
        
        # –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ "–≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"
        query = create_mock_callback_query("acc_sel_source_all")
        context.user_data['account_selection'] = {
            'action_type': 'test',
            'title': '–¢–µ—Å—Ç'
        }
        
        result = await selector.handle_source_selection(query, context)
        print(f"‚úÖ –í—ã–±–æ—Ä –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {result}")
        
        # –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        if accounts:
            acc_id = accounts[0].id
            query = create_mock_callback_query(f"acc_sel_toggle_{acc_id}")
            
            result = await selector.handle_account_toggle(query, context)
            print(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {acc_id}: {result if result else 'OK'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        traceback.print_exc()
        return False

async def test_profile_handlers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    print("\nüë• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è...")
    
    try:
        from telegram_bot.handlers.profile_handlers import (
            profile_setup_menu, start_profile_selection
        )
        
        # –¢–µ—Å—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        query = create_mock_callback_query("profile_setup")
        context = create_mock_context()
        
        result = await profile_setup_menu(query, context)
        print(f"‚úÖ –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {result}")
        
        # –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        query = create_mock_callback_query("profile_select_source_all")
        result = await start_profile_selection(query, context)
        print(f"‚úÖ –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        traceback.print_exc()
        return False

async def test_callback_routing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ callback...")
    
    try:
        from telegram_bot.handlers import handle_callback
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö callback_data
        test_callbacks = [
            "smart_warm_menu",
            "status", 
            "limits",
            "acc_sel_source_all",
            "acc_sel_source_folder",
            "profile_setup",
            "profile_select_source_all"
        ]
        
        for callback_data in test_callbacks:
            query = create_mock_callback_query(callback_data)
            context = create_mock_context()
            
            try:
                result = await handle_callback(query, context)
                print(f"‚úÖ Callback '{callback_data}': {result if result else 'OK'}")
            except Exception as e:
                print(f"‚ùå Callback '{callback_data}': {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        traceback.print_exc()
        return False

async def test_keyboard_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
    print("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        from telegram_bot.keyboards import (
            get_warmup_menu_keyboard,
            get_warmup_mode_keyboard
        )
        
        # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞
        keyboard = get_warmup_menu_keyboard()
        print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ–≤–∞: {len(keyboard.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        # –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ–≥—Ä–µ–≤–∞
        keyboard = get_warmup_mode_keyboard()
        print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∂–∏–º–æ–≤: {len(keyboard.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï UI –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò TELEGRAM –ë–û–¢–ê")
    print("=" * 60)
    
    tests = [
        test_warmup_buttons,
        test_account_selection,
        test_profile_handlers,
        test_callback_routing,
        test_keyboard_generation
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if await test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False

if __name__ == "__main__":
    asyncio.run(main()) 