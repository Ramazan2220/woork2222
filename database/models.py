from sqlalchemy import Column, Integer, String, Boolean, DateTime, ForeignKey, Text, Float, JSON, Enum, Table
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from datetime import datetime
import enum

Base = declarative_base()

# –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–∫—Å–∏
account_proxy = Table(
    'account_proxy',
    Base.metadata,
    Column('account_id', Integer, ForeignKey('instagram_accounts.id'), primary_key=True),
    Column('proxy_id', Integer, ForeignKey('proxies.id'), primary_key=True)
)

# –¢–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏
account_groups = Table(
    'account_groups',
    Base.metadata,
    Column('account_id', Integer, ForeignKey('instagram_accounts.id'), primary_key=True),
    Column('group_id', Integer, ForeignKey('account_groups_table.id'), primary_key=True)
)

class TaskStatus(enum.Enum):
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"
    SCHEDULED = "scheduled"

class TaskType(enum.Enum):
    VIDEO = "video"
    PHOTO = "photo"
    CAROUSEL = "carousel"
    STORY = "story"
    REEL = "reel"
    REELS = "reels"  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    IGTV = "igtv"

class AccountGroup(Base):
    __tablename__ = 'account_groups_table'
    
    id = Column(Integer, primary_key=True)
    name = Column(String(255), nullable=False)
    description = Column(Text, nullable=True)
    icon = Column(String(10), default='üìÅ')  # –≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
    created_at = Column(DateTime, default=datetime.now)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    accounts = relationship("InstagramAccount", secondary=account_groups, back_populates="groups")

class Proxy(Base):
    __tablename__ = 'proxies'

    id = Column(Integer, primary_key=True)
    host = Column(String(255), nullable=False)
    port = Column(Integer, nullable=False)
    username = Column(String(255), nullable=True)
    password = Column(String(255), nullable=True)
    protocol = Column(String(10), default='http')
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.now)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    accounts = relationship("InstagramAccount", secondary=account_proxy, back_populates="proxies")

class InstagramAccount(Base):
    __tablename__ = 'instagram_accounts'

    id = Column(Integer, primary_key=True)
    username = Column(String(255), nullable=False, unique=True)
    password = Column(String(255), nullable=False)
    email = Column(String(255))
    email_password = Column(String(255))
    phone = Column(String(255))  # –¢–µ–ª–µ—Ñ–æ–Ω
    website = Column(String(255))  # –í–µ–±-—Å–∞–π—Ç
    full_name = Column(String(255))  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    biography = Column(Text)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    device_id = Column(String(255), nullable=True)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è Instagram
    is_active = Column(Boolean, default=True)
    status = Column(String(50), default='active')  # –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: active, inactive, banned, etc.
    created_at = Column(DateTime, default=datetime.now)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)
    session_data = Column(Text)
    last_error = Column(Text, nullable=True)  # –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
    last_check = Column(DateTime, nullable=True)  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    proxies = relationship("Proxy", secondary=account_proxy, back_populates="accounts")
    tasks = relationship("PublishTask", back_populates="account")
    proxy_id = Column(Integer, ForeignKey('proxies.id'), nullable=True)
    proxy = relationship("Proxy", foreign_keys=[proxy_id])
    groups = relationship("AccountGroup", secondary=account_groups, back_populates="accounts")

class PublishTask(Base):
    __tablename__ = 'publish_tasks'

    id = Column(Integer, primary_key=True)
    account_id = Column(Integer, ForeignKey('instagram_accounts.id'), nullable=False)
    user_id = Column(Integer, nullable=True)  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞—á—É
    task_type = Column(Enum(TaskType), nullable=False)
    status = Column(Enum(TaskStatus), default=TaskStatus.PENDING)
    media_path = Column(String(255), nullable=True)  # –ü—É—Ç—å –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª—É
    caption = Column(Text, nullable=True)  # –¢–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    hashtags = Column(Text, nullable=True)  # –•—ç—à—Ç–µ–≥–∏
    scheduled_time = Column(DateTime, nullable=True)  # –í—Ä–µ–º—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    completed_time = Column(DateTime, nullable=True)  # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    error_message = Column(Text, nullable=True)  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    created_at = Column(DateTime, default=datetime.now)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    location = Column(String(255), nullable=True)  # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    first_comment = Column(Text, nullable=True)  # –ü–µ—Ä–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    options = Column(JSON, nullable=True)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON

    # –î–ª—è –∫–∞—Ä—É—Å–µ–ª–∏
    media_paths = Column(JSON, nullable=True)  # –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏

    # –î–ª—è –∏—Å—Ç–æ—Ä–∏–π
    story_options = Column(JSON, nullable=True)  # –û–ø—Ü–∏–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–π (—Å—Ç–∏–∫–µ—Ä—ã, –æ–ø—Ä–æ—Å—ã –∏ —Ç.–¥.)

    # –î–ª—è —Ä–∏–ª—Å
    audio_path = Column(String(255), nullable=True)  # –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –¥–ª—è —Ä–∏–ª—Å
    audio_start_time = Column(Float, nullable=True)  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∞—É–¥–∏–æ
    
    # ID –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ Instagram
    media_id = Column(String(255), nullable=True)  # ID –º–µ–¥–∏–∞ –≤ Instagram –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    account = relationship("InstagramAccount", back_populates="tasks")

class TelegramUser(Base):
    __tablename__ = 'telegram_users'

    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True, nullable=False)
    username = Column(String(255), nullable=True)
    first_name = Column(String(255), nullable=True)
    last_name = Column(String(255), nullable=True)
    is_admin = Column(Boolean, default=False)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.now)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)
    last_activity = Column(DateTime, nullable=True)

class Setting(Base):
    __tablename__ = 'settings'

    id = Column(Integer, primary_key=True)
    key = Column(String(255), unique=True, nullable=False)
    value = Column(Text, nullable=True)
    description = Column(Text, nullable=True)
    created_at = Column(DateTime, default=datetime.now)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)

class Log(Base):
    __tablename__ = 'logs'

    id = Column(Integer, primary_key=True)
    level = Column(String(20), nullable=False)  # INFO, WARNING, ERROR, DEBUG
    message = Column(Text, nullable=False)
    source = Column(String(255), nullable=True)  # –ò—Å—Ç–æ—á–Ω–∏–∫ –ª–æ–≥–∞ (–º–æ–¥—É–ª—å, —Ñ—É–Ω–∫—Ü–∏—è)
    created_at = Column(DateTime, default=datetime.now)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = Column(JSON, nullable=True)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON

class WarmupStatus(enum.Enum):
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"

class WarmupTask(Base):
    __tablename__ = 'warmup_tasks'

    id = Column(Integer, primary_key=True)
    account_id = Column(Integer, ForeignKey('instagram_accounts.id'), nullable=False)
    status = Column(Enum(WarmupStatus), default=WarmupStatus.PENDING)
    settings = Column(JSON, nullable=False)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–µ–≤–∞
    progress = Column(JSON, nullable=True)  # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    error = Column(Text, nullable=True)  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    created_at = Column(DateTime, default=datetime.now)
    started_at = Column(DateTime, nullable=True)
    completed_at = Column(DateTime, nullable=True)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    account = relationship("InstagramAccount")

class FollowTaskStatus(enum.Enum):
    PENDING = "pending"
    RUNNING = "running"
    PAUSED = "paused"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"
    STOPPED = "stopped"

class FollowSourceType(enum.Enum):
    FOLLOWERS = "followers"      # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    FOLLOWING = "following"       # –ü–æ–¥–ø–∏—Å–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    HASHTAG = "hashtag"          # –ü–æ —Ö–µ—à—Ç–µ–≥—É
    LOCATION = "location"        # –ü–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    LIKERS = "likers"           # –õ–∞–π–∫–Ω—É–≤—à–∏–µ –ø–æ—Å—Ç
    COMMENTERS = "commenters"    # –ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä—ã –ø–æ—Å—Ç–∞

class FollowTask(Base):
    __tablename__ = 'follow_tasks'

    id = Column(Integer, primary_key=True)
    account_id = Column(Integer, ForeignKey('instagram_accounts.id'), nullable=False)
    name = Column(String(255), nullable=False)  # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    source_type = Column(Enum(FollowSourceType), nullable=False)
    source_value = Column(String(255), nullable=False)  # username, hashtag, location name –∏–ª–∏ URL –ø–æ—Å—Ç–∞
    status = Column(Enum(FollowTaskStatus), default=FollowTaskStatus.PENDING)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
    follows_per_hour = Column(Integer, default=20)
    follow_limit = Column(Integer, default=500)  # –õ–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–¥–∞—á–∏
    
    # –§–∏–ª—å—Ç—Ä—ã
    filters = Column(JSON, nullable=True)  # skip_private, skip_no_avatar, only_business, min_followers, max_followers
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    followed_count = Column(Integer, default=0)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    skipped_count = Column(Integer, default=0)   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    failed_count = Column(Integer, default=0)    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    
    # –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á—Ç–æ–±—ã –Ω–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –¥–≤–∞–∂–¥—ã)
    processed_users = Column(JSON, default=list)  # –°–ø–∏—Å–æ–∫ user_id —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
    
    # –í—Ä–µ–º—è
    created_at = Column(DateTime, default=datetime.now)
    started_at = Column(DateTime, nullable=True)
    completed_at = Column(DateTime, nullable=True)
    updated_at = Column(DateTime, default=datetime.now, onupdate=datetime.now)
    last_action_at = Column(DateTime, nullable=True)  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    
    # –û—à–∏–±–∫–∏
    error = Column(Text, nullable=True)
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    account = relationship("InstagramAccount")

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
class FollowHistory(Base):
    __tablename__ = 'follow_history'
    
    id = Column(Integer, primary_key=True)
    account_id = Column(Integer, ForeignKey('instagram_accounts.id'), nullable=False)
    target_user_id = Column(String(255), nullable=False)  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Instagram
    target_username = Column(String(255), nullable=True)  # Username –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    followed_at = Column(DateTime, default=datetime.now)
    unfollowed_at = Column(DateTime, nullable=True)  # –ï—Å–ª–∏ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å
    task_id = Column(Integer, ForeignKey('follow_tasks.id'), nullable=True)
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    account = relationship("InstagramAccount")
    task = relationship("FollowTask")