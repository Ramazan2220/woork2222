# -*- coding: utf-8 -*-
"""
Database Connection Pool - –ü—É–ª –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
- –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
- –û–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
- –ú–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- Thread-safe –æ–ø–µ—Ä–∞—Ü–∏–∏
"""

import time
import logging
import threading
from typing import Optional, Dict, Any
from dataclasses import dataclass
from contextlib import contextmanager
from sqlalchemy import create_engine, event
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.pool import StaticPool

logger = logging.getLogger(__name__)

@dataclass
class ConnectionStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î"""
    sessions_created: int = 0
    sessions_reused: int = 0
    active_sessions: int = 0
    total_sessions: int = 0
    avg_session_time: float = 0.0
    peak_sessions: int = 0
    connection_errors: int = 0
    last_activity: float = 0.0

class DatabaseConnectionPool:
    """–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π"""
    
    def __init__(self, database_url: str, 
                 pool_size: int = 20,
                 max_overflow: int = 30,
                 pool_timeout: int = 30,
                 pool_recycle: int = 3600):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        
        Args:
            database_url: URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
            pool_size: –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
            max_overflow: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            pool_timeout: –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Å–µ–∫)
            pool_recycle: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Å–µ–∫)
        """
        self.database_url = database_url
        self.pool_size = pool_size
        self.max_overflow = max_overflow
        self.pool_timeout = pool_timeout
        self.pool_recycle = pool_recycle
        
        # –°–æ–∑–¥–∞–µ–º engine —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—É–ª–∞
        if 'sqlite' in database_url.lower():
            # –î–ª—è SQLite –∏—Å–ø–æ–ª—å–∑—É–µ–º StaticPool
            self.engine = create_engine(
                database_url,
                poolclass=StaticPool,
                connect_args={'check_same_thread': False},
                echo=False
            )
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø—É–ª
            self.engine = create_engine(
                database_url,
                pool_size=pool_size,
                max_overflow=max_overflow,
                pool_timeout=pool_timeout,
                pool_recycle=pool_recycle,
                echo=False
            )
        
        # –°–æ–∑–¥–∞–µ–º sessionmaker
        self.SessionLocal = sessionmaker(
            bind=self.engine,
            autocommit=False,
            autoflush=False
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = ConnectionStats()
        self._lock = threading.RLock()
        self._session_times: Dict[int, float] = {}
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self._setup_events()
        
        logger.info(f"üóÑÔ∏è Database Connection Pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: pool_size={pool_size}, max_overflow={max_overflow}")
    
    def _setup_events(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        
        @event.listens_for(self.engine, "connect")
        def on_connect(dbapi_conn, connection_record):
            with self._lock:
                self.stats.sessions_created += 1
                logger.debug("üìä –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —Å–æ–∑–¥–∞–Ω–æ")
        
        @event.listens_for(self.engine, "checkout")
        def on_checkout(dbapi_conn, connection_record, connection_proxy):
            with self._lock:
                self.stats.active_sessions += 1
                self.stats.peak_sessions = max(self.stats.peak_sessions, self.stats.active_sessions)
                self.stats.last_activity = time.time()
        
        @event.listens_for(self.engine, "checkin")
        def on_checkin(dbapi_conn, connection_record):
            with self._lock:
                self.stats.active_sessions = max(0, self.stats.active_sessions - 1)
    
    @contextmanager
    def get_session(self):
        """
        –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
        
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
            with db_pool.get_session() as session:
                # —Ä–∞–±–æ—Ç–∞ —Å –ë–î
                pass
        """
        start_time = time.time()
        session = self.SessionLocal()
        session_id = id(session)
        
        try:
            with self._lock:
                self.stats.sessions_created += 1
                self.stats.total_sessions += 1
                self.stats.last_activity = time.time()
                self._session_times[session_id] = start_time
            
            logger.debug(f"üìä –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –ë–î: {session_id}")
            yield session
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –ë–î {session_id}: {e}")
            with self._lock:
                self.stats.connection_errors += 1
            session.rollback()
            raise
        finally:
            try:
                session.close()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
                if session_id in self._session_times:
                    session_time = time.time() - self._session_times[session_id]
                    with self._lock:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
                        if self.stats.avg_session_time == 0:
                            self.stats.avg_session_time = session_time
                        else:
                            self.stats.avg_session_time = (
                                self.stats.avg_session_time * 0.9 + session_time * 0.1
                            )
                        del self._session_times[session_id]
                
                logger.debug(f"üìä –°–µ—Å—Å–∏—è –ë–î {session_id} –∑–∞–∫—Ä—ã—Ç–∞")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
    
    def get_session_direct(self) -> Session:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ë–î –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        
        –í–ê–ñ–ù–û: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∑–≤–∞—Ç—å session.close() –≤—Ä—É—á–Ω—É—é!
        
        Returns:
            Session –æ–±—ä–µ–∫—Ç SQLAlchemy
        """
        start_time = time.time()
        session = self.SessionLocal()
        
        with self._lock:
            self.stats.sessions_created += 1
            self.stats.total_sessions += 1
            self.stats.last_activity = time.time()
        
        logger.debug(f"üìä –°–æ–∑–¥–∞–Ω–∞ –ø—Ä—è–º–∞—è —Å–µ—Å—Å–∏—è –ë–î: {id(session)}")
        return session
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞"""
        with self._lock:
            pool_status = {}
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—É–ª–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                if hasattr(self.engine.pool, 'size'):
                    pool_status.update({
                        'pool_size': self.engine.pool.size(),
                        'checked_in': self.engine.pool.checkedin(),
                        'checked_out': self.engine.pool.checkedout(),
                        'overflow': getattr(self.engine.pool, 'overflow', 0),
                        'invalid': getattr(self.engine.pool, 'invalid', 0)
                    })
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—É–ª–∞: {e}")
            
            return {
                'connection_stats': {
                    'sessions_created': self.stats.sessions_created,
                    'sessions_reused': self.stats.sessions_reused,
                    'active_sessions': self.stats.active_sessions,
                    'total_sessions': self.stats.total_sessions,
                    'avg_session_time': round(self.stats.avg_session_time, 4),
                    'peak_sessions': self.stats.peak_sessions,
                    'connection_errors': self.stats.connection_errors,
                    'last_activity': self.stats.last_activity
                },
                'pool_status': pool_status,
                'config': {
                    'pool_size': self.pool_size,
                    'max_overflow': self.max_overflow,
                    'pool_timeout': self.pool_timeout,
                    'pool_recycle': self.pool_recycle
                }
            }
    
    def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            with self.get_session() as session:
                session.execute("SELECT 1")
                return True
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ë–î –Ω–µ –ø—Ä–æ—à–ª–∞: {e}")
            return False
    
    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with self._lock:
            self.stats = ConnectionStats()
            self._session_times.clear()
            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Database Connection Pool —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def dispose(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            self.engine.dispose()
            logger.info("üõë Database Connection Pool: –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—É–ª–∞
_db_pool: Optional[DatabaseConnectionPool] = None

def init_db_pool(database_url: str,
                pool_size: int = 20,
                max_overflow: int = 30,
                pool_timeout: int = 30,
                pool_recycle: int = 3600):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ë–î"""
    global _db_pool
    _db_pool = DatabaseConnectionPool(
        database_url=database_url,
        pool_size=pool_size,
        max_overflow=max_overflow,
        pool_timeout=pool_timeout,
        pool_recycle=pool_recycle
    )
    logger.info("üóÑÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–π Database Connection Pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

@contextmanager
def get_db_session():
    """
    –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        with get_db_session() as session:
            # —Ä–∞–±–æ—Ç–∞ —Å –ë–î
            pass
    """
    if _db_pool is None:
        raise RuntimeError("Database Connection Pool –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ init_db_pool()")
    
    with _db_pool.get_session() as session:
        yield session

def get_session_direct() -> Session:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ë–î –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    –í–ê–ñ–ù–û: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∑–≤–∞—Ç—å session.close() –≤—Ä—É—á–Ω—É—é!
    
    Returns:
        Session –æ–±—ä–µ–∫—Ç SQLAlchemy
    """
    if _db_pool is None:
        raise RuntimeError("Database Connection Pool –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ init_db_pool()")
    
    return _db_pool.get_session_direct()

def get_db_stats() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞ –ë–î"""
    if _db_pool:
        return _db_pool.get_stats()
    return {'error': 'Pool not initialized'}

def db_health_check() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞ –ë–î"""
    if _db_pool:
        return _db_pool.health_check()
    return False

def reset_db_stats():
    """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞ –ë–î"""
    if _db_pool:
        _db_pool.reset_stats()

def dispose_db_pool():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø—É–ª–∞ –ë–î"""
    global _db_pool
    if _db_pool:
        _db_pool.dispose()
        _db_pool = None

logger.info("üì¶ Database Connection Pool –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω") 