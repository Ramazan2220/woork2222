import os
import logging
from datetime import datetime
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import joinedload
from typing import Tuple, Union

from config import DATABASE_URL
from database.models import Base, InstagramAccount, Proxy, PublishTask, TaskStatus, AccountGroup

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç Database Connection Pool
from database.connection_pool import init_db_pool, get_session_direct, get_db_stats, dispose_db_pool

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(os.path.dirname(DATABASE_URL.replace("sqlite:///", "")), exist_ok=True)

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ SQLAlchemy
engine = create_engine(DATABASE_URL)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
Session = sessionmaker(bind=engine)

# –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É–ª–∞
_pool_initialized = False

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    global _pool_initialized
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    Base.metadata.create_all(engine)
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Connection Pool
    if not _pool_initialized:
        try:
            init_db_pool(
                database_url=DATABASE_URL,
                pool_size=15,
                max_overflow=25,
                pool_timeout=30,
                pool_recycle=3600
            )
            _pool_initialized = True
            logger.info("‚úÖ Database Connection Pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ db_manager")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Database Connection Pool: {e}")
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —Å–µ—Å—Å–∏–π")

def get_session():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Connection Pool)"""
    global _pool_initialized
    
    if _pool_initialized:
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Connection Pool –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            return get_session_direct()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏–∑ –ø—É–ª–∞: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–µ—Å—Å–∏—é")
    
    # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–µ—Å—Å–∏—é
    return Session()

def add_instagram_account(username, password, email=None, email_password=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç Instagram –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        session = get_session()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_account = session.query(InstagramAccount).filter_by(username=username).first()
        if existing_account:
            session.close()
            return False, "–ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
        account = InstagramAccount(
            username=username,
            password=password,
            email=email,
            email_password=email_password,
            is_active=True
        )

        session.add(account)
        session.commit()
        account_id = account.id
        session.close()

        return True, account_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return False, str(e)

def add_instagram_account_without_login(username, password, email, email_password):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç Instagram –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞

    Args:
        username (str): –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Instagram
        password (str): –ü–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram
        email (str): Email, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –∞–∫–∫–∞—É–Ω—Ç—É
        email_password (str): –ü–∞—Ä–æ–ª—å –æ—Ç email

    Returns:
        InstagramAccount: –û–±—ä–µ–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –∏–Ω–∞—á–µ None
    """
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {username} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞")

    session = get_session()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        existing_account = session.query(InstagramAccount).filter_by(username=username).first()

        if existing_account:
            logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            session.close()
            return existing_account

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
        account = InstagramAccount(
            username=username,
            password=password,
            email=email,
            email_password=email_password,
            is_active=False,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Ö–æ–¥
            created_at=datetime.now()
        )

        session.add(account)
        session.commit()

        logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å ID {account.id}")

        return account
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {username} –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None
    finally:
        session.close()
        

def get_instagram_account(account_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç Instagram –ø–æ ID —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from sqlalchemy.orm import joinedload
        session = get_session()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º eager loading –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        account = session.query(InstagramAccount)\
                         .options(joinedload(InstagramAccount.groups))\
                         .options(joinedload(InstagramAccount.proxy))\
                         .filter_by(id=account_id)\
                         .first()
        session.close()
        return account
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return None

def get_instagram_accounts():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from sqlalchemy.orm import joinedload
        session = get_session()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º eager loading –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        accounts = session.query(InstagramAccount)\
                          .options(joinedload(InstagramAccount.groups))\
                          .options(joinedload(InstagramAccount.proxy))\
                          .all()
        session.close()
        return accounts
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return []

def get_user_active_accounts(user_id=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from sqlalchemy.orm import joinedload
        session = get_session()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        query = session.query(InstagramAccount)\
                       .options(joinedload(InstagramAccount.groups))\
                       .options(joinedload(InstagramAccount.proxy))\
                       .filter(InstagramAccount.is_active == True)
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω user_id, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = query.all()
        session.close()
        return accounts
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return []

def save_media_file(file_path, media_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª (–∑–∞–≥–ª—É—à–∫–∞)"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∑–∂–µ
        import os
        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        with open(file_path, 'wb') as f:
            f.write(media_data)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞: {e}")
        return False

def get_user_published_posts(user_id=None, limit=50):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        session = get_session()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        query = session.query(PublishTask)\
                       .filter(PublishTask.status == TaskStatus.COMPLETED)\
                       .order_by(PublishTask.created_at.desc())\
                       .limit(limit)
        
        tasks = query.all()
        session.close()
        return tasks
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
        return []

def update_instagram_account(account_id, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram"""
    try:
        session = get_session()
        account = session.query(InstagramAccount).filter_by(id=account_id).first()

        if not account:
            session.close()
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
        for key, value in kwargs.items():
            if hasattr(account, key):
                setattr(account, key, value)

        session.commit()
        session.close()

        return True, "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return False, str(e)

def delete_instagram_account(account_id):
    """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç Instagram"""
    try:
        session = get_session()
        account = session.query(InstagramAccount).filter_by(id=account_id).first()

        if not account:
            session.close()
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

        session.delete(account)
        session.commit()
        session.close()

        return True, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return False, str(e)

def add_proxy(protocol, host, port, username=None, password=None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        session = get_session()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–∫—Å–∏ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º username –≤ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        query = session.query(Proxy).filter_by(
            protocol=protocol,
            host=host,
            port=port
        )

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω username, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —É—Å–ª–æ–≤–∏–µ
        if username:
            query = query.filter_by(username=username)

        existing_proxy = query.first()

        if existing_proxy:
            session.close()
            return False, "–ü—Ä–æ–∫—Å–∏ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
        proxy = Proxy(
            protocol=protocol,
            host=host,
            port=port,
            username=username,
            password=password,
            is_active=True
        )

        session.add(proxy)
        session.commit()
        proxy_id = proxy.id
        session.close()

        return True, proxy_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return False, str(e)

def get_proxy(proxy_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –ø–æ ID

    Args:
        proxy_id (int): ID –ø—Ä–æ–∫—Å–∏

    Returns:
        Proxy: –û–±—ä–µ–∫—Ç –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        session = get_session()
        proxy = session.query(Proxy).filter_by(id=proxy_id).first()
        session.close()
        return proxy
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return None

def get_proxies(active_only=False):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏

    Args:
        active_only (bool): –ï—Å–ª–∏ True, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–∫—Å–∏

    Returns:
        list: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Proxy
    """
    try:
        session = get_session()
        query = session.query(Proxy)

        if active_only:
            query = query.filter_by(is_active=True)

        proxies = query.all()
        session.close()
        return proxies
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        return []

def update_proxy(proxy_id, **kwargs):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏

    Args:
        proxy_id (int): ID –ø—Ä–æ–∫—Å–∏
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    Returns:
        tuple: (success, message)
    """
    try:
        session = get_session()
        proxy = session.query(Proxy).filter_by(id=proxy_id).first()

        if not proxy:
            session.close()
            return False, "–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –ø—Ä–æ–∫—Å–∏
        for key, value in kwargs.items():
            if hasattr(proxy, key):
                setattr(proxy, key, value)

        session.commit()
        session.close()

        return True, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return False, str(e)

def delete_proxy(proxy_id):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–∫—Å–∏

    Args:
        proxy_id (int): ID –ø—Ä–æ–∫—Å–∏

    Returns:
        tuple: (success, message)
    """
    try:
        session = get_session()
        proxy = session.query(Proxy).filter_by(id=proxy_id).first()

        if not proxy:
            session.close()
            return False, "–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        accounts = session.query(InstagramAccount).filter_by(proxy_id=proxy_id).all()
        for account in accounts:
            account.proxy_id = None

        session.delete(proxy)
        session.commit()
        session.close()

        return True, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return False, str(e)

def assign_proxy_to_account(account_id, proxy_id):
    """
    –ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∞–∫–∫–∞—É–Ω—Ç—É

    Args:
        account_id (int): ID –∞–∫–∫–∞—É–Ω—Ç–∞
        proxy_id (int): ID –ø—Ä–æ–∫—Å–∏

    Returns:
        tuple: (success, message)
    """
    try:
        session = get_session()
        account = session.query(InstagramAccount).filter_by(id=account_id).first()
        proxy = session.query(Proxy).filter_by(id=proxy_id).first()

        if not account:
            session.close()
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

        if not proxy:
            session.close()
            return False, "–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        account.proxy_id = proxy_id
        session.commit()
        session.close()

        return True, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ –∞–∫–∫–∞—É–Ω—Ç—É: {e}")
        return False, str(e)

def get_proxy(proxy_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –ø–æ ID"""
    try:
        session = get_session()
        proxy = session.query(Proxy).filter_by(id=proxy_id).first()
        session.close()
        return proxy
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return None

def get_proxies():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏"""
    try:
        session = get_session()
        proxies = session.query(Proxy).all()
        session.close()
        return proxies
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        return []

def update_proxy(proxy_id, **kwargs):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏"""
    try:
        session = get_session()
        proxy = session.query(Proxy).filter_by(id=proxy_id).first()

        if not proxy:
            session.close()
            return False, "–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –ø—Ä–æ–∫—Å–∏
        for key, value in kwargs.items():
            if hasattr(proxy, key):
                setattr(proxy, key, value)

        session.commit()
        session.close()

        return True, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return False, str(e)

def delete_proxy(proxy_id):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–∫—Å–∏"""
    try:
        session = get_session()
        proxy = session.query(Proxy).filter_by(id=proxy_id).first()

        if not proxy:
            session.close()
            return False, "–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        session.delete(proxy)
        session.commit()
        session.close()

        return True, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        return False, str(e)

def assign_proxy_to_account(account_id, proxy_id):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∞–∫–∫–∞—É–Ω—Ç—É"""
    try:
        session = get_session()
        account = session.query(InstagramAccount).filter_by(id=account_id).first()
        proxy = session.query(Proxy).filter_by(id=proxy_id).first()

        if not account:
            session.close()
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

        if not proxy:
            session.close()
            return False, "–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        account.proxy_id = proxy_id
        session.commit()
        session.close()

        return True, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ –∞–∫–∫–∞—É–Ω—Ç—É: {e}")
        return False, str(e)

def create_publish_task(account_id, task_type, media_path, caption="", scheduled_time=None, additional_data=None, user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
    try:
        session = get_session()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        if scheduled_time:
            status = TaskStatus.SCHEDULED
        else:
            status = TaskStatus.PENDING

        task = PublishTask(
            account_id=account_id,
            task_type=task_type,
            media_path=media_path,
            caption=caption,
            status=status,
            scheduled_time=scheduled_time,
            options=additional_data,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ options –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            user_id=user_id  # –î–æ–±–∞–≤–ª—è–µ–º user_id
        )

        session.add(task)
        session.commit()
        task_id = task.id
        session.close()

        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ #{task_id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status.value}" + 
                   (f" –Ω–∞ {scheduled_time}" if scheduled_time else ""))

        return True, task_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        return False, str(e)

def update_publish_task_status(task_id, status, error_message=None, media_id=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
    try:
        session = get_session()
        task = session.query(PublishTask).filter_by(id=task_id).first()

        if not task:
            session.close()
            return False, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        task.status = status
        task.error_message = error_message
        task.media_id = media_id  # –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –µ—Å—Ç—å —ç—Ç–æ –ø–æ–ª–µ!

        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏ –µ—Å—Ç—å media_id, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —Ç–∞–∫–∂–µ –≤ options –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if status == TaskStatus.COMPLETED and media_id:
            task.completed_at = datetime.now()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º options, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å media_id (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            try:
                import json
                options = json.loads(task.options) if task.options and isinstance(task.options, str) else task.options or {}
                options['media_id'] = media_id
                task.options = json.dumps(options)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å options —Å media_id: {e}")
        elif status == TaskStatus.COMPLETED:
            task.completed_at = datetime.now()

        session.commit()
        session.close()

        return True, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
        return False, str(e)

def update_task_status(task_id, status, error_message=None, media_id=None):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –∞–ª–∏–∞—Å–æ–º –¥–ª—è update_publish_task_status
    """
    return update_publish_task_status(task_id, status, error_message, media_id)

def get_publish_task(task_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ ID"""
    try:
        session = get_session()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º joinedload –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        task = session.query(PublishTask).options(
            joinedload(PublishTask.account)
        ).filter_by(id=task_id).first()
        
        # –í–∞–∂–Ω–æ: –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –æ–±—ä–µ–∫—Ç –æ—Å—Ç–∞–≤–∞–ª—Å—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º
        if task:
            # –î–µ–ª–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –Ω—É–∂–Ω—ã
            task_data = {
                'id': task.id,
                'account_id': task.account_id,
                'account_username': task.account.username if task.account else None,
                'account_email': task.account.email if task.account else None,
                'account_email_password': task.account.email_password if task.account else None,
                'task_type': task.task_type,
                'status': task.status,
                'media_path': task.media_path,
                'caption': task.caption,
                'hashtags': task.hashtags,
                'options': task.options,
                'user_id': task.user_id,  # –î–æ–±–∞–≤–ª—è–µ–º user_id
                'account': task.account  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
            }
            session.close()
            return task_data
        else:
            session.close()
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        return None

def get_publish_tasks(account_id=None, status=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
    try:
        session = get_session()
        query = session.query(PublishTask)

        if account_id:
            query = query.filter_by(account_id=account_id)

        if status:
            query = query.filter_by(status=status)

        tasks = query.all()
        session.close()
        return tasks
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        return []

def get_pending_tasks():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        session = get_session()
        tasks = session.query(PublishTask).filter_by(status=TaskStatus.PENDING).all()
        session.close()
        return tasks
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞—á: {e}")
        return []

def get_scheduled_tasks():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é"""
    try:
        session = get_session()
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º SCHEDULED –∏–ª–∏ PENDING, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å scheduled_time
        tasks = session.query(PublishTask).filter(
            PublishTask.scheduled_time.isnot(None),
            PublishTask.status.in_([TaskStatus.SCHEDULED, TaskStatus.PENDING])
        ).options(
            joinedload(PublishTask.account)
        ).all()
        
        logger.debug(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(tasks)} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
        
        # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –æ–±—ä–µ–∫—Ç—ã –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏
        result = []
        for task in tasks:
            result.append(task)
        
        session.close()
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
        return []

def delete_publish_task(task_id):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
    try:
        session = get_session()
        task = session.query(PublishTask).filter_by(id=task_id).first()

        if not task:
            session.close()
            return False, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        session.delete(task)
        session.commit()
        session.close()

        return True, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        return False, str(e)

def bulk_add_instagram_accounts(accounts_data):
    """
    –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram

    Args:
        accounts_data (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            [
                {
                    "username": "user1",
                    "password": "pass1",
                    "proxy_id": None,  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                    "description": ""  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
                },
                ...
            ]

    Returns:
        tuple: (—É—Å–ø–µ—à–Ω–æ_–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ, –æ—à–∏–±–∫–∏)
    """
    session = get_session()
    success = []
    errors = []

    for data in accounts_data:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
            existing = session.query(InstagramAccount).filter_by(username=data["username"]).first()
            if existing:
                errors.append((data["username"], "–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"))
                continue

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
            account = InstagramAccount(
                username=data["username"],
                password=data["password"],
                is_active=True,
                proxy_id=data.get("proxy_id"),
                email=data.get("email"),
                email_password=data.get("email_password")
            )

            session.add(account)
            session.commit()
            success.append(data["username"])

        except Exception as e:
            session.rollback()
            errors.append((data["username"], str(e)))

    session.close()
    return success, errors

def update_account_session_data(account_id, session_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram"""
    try:
        session = get_session()
        account = session.query(InstagramAccount).filter_by(id=account_id).first()

        if not account:
            session.close()
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

        account.session_data = session_data
        account.last_login = datetime.now()
        
        session.commit()
        session.close()

        return True, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return False, str(e)

def get_proxy_for_account(account_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞

    Args:
        account_id (int): ID –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram

    Returns:
        Proxy: –û–±—ä–µ–∫—Ç –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
    """
    session = get_session()
    try:
        account = session.query(InstagramAccount).filter_by(id=account_id).first()
        if account and account.proxy_id:
            proxy = session.query(Proxy).filter_by(id=account.proxy_id).first()
            return proxy
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {str(e)}")
        return None
    finally:
        session.close()

def activate_instagram_account(account_id):
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç Instagram

    Args:
        account_id (int): ID –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram

    Returns:
        bool: True, –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∞—á–µ False
    """
    session = get_session()
    try:
        account = session.query(InstagramAccount).filter_by(id=account_id).first()
        if account:
            account.is_active = True
            account.updated_at = datetime.now()
            session.commit()
            logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {account.username} (ID: {account_id}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return True
        return False
    except Exception as e:
        session.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {str(e)}")
        return False
    finally:
        session.close()

def get_active_accounts():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram"""
    try:
        session = get_session()
        accounts = session.query(InstagramAccount).filter_by(is_active=True).all()
        session.close()
        return accounts
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return []

def get_accounts_with_email():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π"""
    try:
        session = get_session()
        accounts = session.query(InstagramAccount).filter(
            InstagramAccount.email != None,
            InstagramAccount.email != ""
        ).all()
        session.close()
        return accounts
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å email: {e}")
        return []

def get_all_accounts():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Instagram –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        session = get_session()
        accounts = session.query(InstagramAccount).all()
        session.close()
        return accounts
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return []

def update_account_session_data(account_id, session_data, last_login=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ Instagram"""
    try:
        session = get_session()
        account = session.query(InstagramAccount).filter_by(id=account_id).first()

        if not account:
            session.close()
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

        account.session_data = session_data
        if last_login:
            account.last_login = last_login
        else:
            account.last_login = datetime.now()

        session.commit()
        session.close()

        return True, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        return False, str(e)

def get_instagram_account_by_username(username):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç Instagram –ø–æ username —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from sqlalchemy.orm import joinedload
        session = get_session()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º eager loading –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        account = session.query(InstagramAccount)\
                         .options(joinedload(InstagramAccount.groups))\
                         .options(joinedload(InstagramAccount.proxy))\
                         .filter_by(username=username)\
                         .first()
        session.close()
        return account
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ username: {e}")
        return None

def generate_and_save_device_id(account_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π device_id –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    import uuid
    import random
    import string
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º device_id –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ—Ö–æ–∂–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Instagram device_id
        # –§–æ—Ä–º–∞—Ç: android-<hex_string>
        random_hex = ''.join(random.choices(string.hexdigits.lower(), k=16))
        device_id = f"android-{random_hex}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session = get_session()
        account = session.query(InstagramAccount).filter_by(id=account_id).first()
        
        if not account:
            session.close()
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –ï—Å–ª–∏ device_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if account.device_id:
            session.close()
            return True, account.device_id
        
        account.device_id = device_id
        session.commit()
        session.close()
        
        logger.info(f"Device ID —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}: {device_id}")
        return True, device_id
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ device_id –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        return False, str(e)

def get_or_create_device_id(account_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π device_id –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        session = get_session()
        account = session.query(InstagramAccount).filter_by(id=account_id).first()
        
        if not account:
            session.close()
            return None
        
        if account.device_id:
            session.close()
            return account.device_id
        
        session.close()
        
        # –ï—Å–ª–∏ device_id –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
        success, device_id = generate_and_save_device_id(account_id)
        if success:
            return device_id
        else:
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ device_id –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        return None

def ensure_account_device_consistency(account_id):
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        session = get_session()
        account = session.query(InstagramAccount).filter_by(id=account_id).first()
        
        if not account:
            session.close()
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        changes_made = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º device_id –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if not account.device_id:
            success, device_id = generate_and_save_device_id(account_id)
            if success:
                changes_made = True
                logger.info(f"Device ID —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
        if not account.proxy_id:
            from utils.proxy_manager import assign_proxy_to_account
            proxy_success, proxy_message = assign_proxy_to_account(account_id)
            if proxy_success:
                changes_made = True
                logger.info(f"–ü—Ä–æ–∫—Å–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–∫–∫–∞—É–Ω—Ç—É {account.username}")
        
        session.close()
        
        if changes_made:
            return True, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
        else:
            return True, "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}: {e}")
        return False, str(e)

# ===============================================
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
# ===============================================

def create_account_group(name: str, description: str = None, icon: str = 'üìÅ') -> Tuple[bool, Union[int, str]]:
    """
    –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    
    Args:
        name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        description: –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        icon: –≠–º–æ–¥–∑–∏ –∏–∫–æ–Ω–∫–∞
        
    Returns:
        (success, group_id –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    """
    session = Session()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≥—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        existing = session.query(AccountGroup).filter_by(name=name).first()
        if existing:
            return False, "–ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        group = AccountGroup(
            name=name,
            description=description,
            icon=icon
        )
        
        session.add(group)
        session.commit()
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {name} (ID: {group.id})")
        return True, group.id
        
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        return False, str(e)
    finally:
        session.close()

def get_account_groups():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    session = Session()
    try:
        groups = session.query(AccountGroup).order_by(AccountGroup.name).all()
        return groups
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        return []
    finally:
        session.close()

def get_account_group(group_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ ID"""
    session = Session()
    try:
        group = session.query(AccountGroup).filter_by(id=group_id).first()
        return group
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {group_id}: {e}")
        return None
    finally:
        session.close()

def update_account_group(group_id: int, name: str = None, description: str = None, icon: str = None) -> Tuple[bool, str]:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ"""
    session = Session()
    try:
        group = session.query(AccountGroup).filter_by(id=group_id).first()
        if not group:
            return False, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        if name:
            group.name = name
        if description is not None:
            group.description = description
        if icon:
            group.icon = icon
        
        session.commit()
        logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        return True, "–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        return False, str(e)
    finally:
        session.close()

def delete_account_group(group_id: int) -> Tuple[bool, str]:
    """–£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    session = Session()
    try:
        group = session.query(AccountGroup).filter_by(id=group_id).first()
        if not group:
            return False, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        session.delete(group)
        session.commit()
        
        logger.info(f"‚úÖ –ì—Ä—É–ø–ø–∞ {group.name} —É–¥–∞–ª–µ–Ω–∞")
        return True, "–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
        
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        return False, str(e)
    finally:
        session.close()

def add_account_to_group(account_id: int, group_id: int) -> Tuple[bool, str]:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ –≥—Ä—É–ø–ø—É"""
    session = Session()
    try:
        account = session.query(InstagramAccount).filter_by(id=account_id).first()
        if not account:
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        group = session.query(AccountGroup).filter_by(id=group_id).first()
        if not group:
            return False, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        if group not in account.groups:
            account.groups.append(group)
            session.commit()
            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group.name}")
            return True, "–ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É"
        else:
            return False, "–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ"
        
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
        return False, str(e)
    finally:
        session.close()

def remove_account_from_group(account_id: int, group_id: int) -> Tuple[bool, str]:
    """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –≥—Ä—É–ø–ø—ã"""
    session = Session()
    try:
        account = session.query(InstagramAccount).filter_by(id=account_id).first()
        if not account:
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        group = session.query(AccountGroup).filter_by(id=group_id).first()
        if not group:
            return False, "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        if group in account.groups:
            account.groups.remove(group)
            session.commit()
            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.username} —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {group.name}")
            return True, "–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã"
        else:
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ"
        
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã: {e}")
        return False, str(e)
    finally:
        session.close()

def get_accounts_in_group(group_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"""
    session = Session()
    try:
        group = session.query(AccountGroup).filter_by(id=group_id).first()
        if not group:
            return []
        
        accounts = group.accounts
        return accounts
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã: {e}")
        return []
    finally:
        session.close()

def get_accounts_without_group():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –Ω–µ –≤—Ö–æ–¥—è—â–∏—Ö –Ω–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É"""
    session = Session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –≥—Ä—É–ø–ø
        accounts = session.query(InstagramAccount).filter(
            ~InstagramAccount.groups.any()
        ).all()
        return accounts
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –≥—Ä—É–ø–ø—ã: {e}")
        return []
    finally:
        session.close()

def get_accounts_without_group():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –Ω–µ –≤—Ö–æ–¥—è—â–∏—Ö –Ω–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É"""
    session = Session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –≥—Ä—É–ø–ø
        accounts = session.query(InstagramAccount).filter(
            ~InstagramAccount.groups.any()
        ).all()
        return accounts
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –≥—Ä—É–ø–ø—ã: {e}")
        return []
    finally:
        session.close()
