import asyncio
from instagrapi import Client
from instagrapi.exceptions import LoginRequired, ChallengeRequired, ClientError
import json
import os
from datetime import datetime
import sys

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from database.db_manager import init_db, get_instagram_accounts

def handle_challenge(client, password):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç challenge –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
    try:
        challenge_info = client.challenge_code_handler
        if challenge_info:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å - –≤–≤–æ–¥–∏–º –µ–≥–æ
            if "password" in str(challenge_info).lower():
                print("   üîê Challenge –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å - –≤–≤–æ–¥–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                try:
                    client.challenge_resolve(password)
                    return True
                except:
                    print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ challenge —Å –ø–∞—Ä–æ–ª–µ–º")
                    return False
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email –∫–æ–¥ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            elif "email" in str(challenge_info).lower() or "code" in str(challenge_info).lower():
                print("   üìß Challenge –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ —Å –ø–æ—á—Ç—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
    except Exception as e:
        print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ challenge: {e}")
    return False

async def test_account(username, password):
    """Test single Instagram account"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {username}")
    print("   üì° –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Instagram...")
    
    cl = Client()
    try:
        cl.login(username, password)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –¥–ª—è {username}")
        print(f"   üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {cl.user_id}")
        print(f"   üìä –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω")
        return True
    except ChallengeRequired as e:
        print(f"üîê Challenge –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø challenge
        challenge_str = str(e).lower()
        if "password" in challenge_str:
            print("   üîê –¢–∏–ø challenge: –ü–∞—Ä–æ–ª—å - –ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–π—Ç–∏ challenge —Å –ø–∞—Ä–æ–ª–µ–º
                if handle_challenge(cl, password):
                    print(f"‚úÖ Challenge –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è {username}")
                    print(f"   üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {cl.user_id}")
                    return True
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ challenge –¥–ª—è {username}")
                    return False
            except Exception as ex:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ challenge –¥–ª—è {username}: {ex}")
                return False
        elif "email" in challenge_str or "code" in challenge_str:
            print("   üìß –¢–∏–ø challenge: Email –∫–æ–¥ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞)")
            return False
        elif "scraping_warning" in challenge_str:
            print("   ‚ö†Ô∏è –¢–∏–ø challenge: Scraping warning - –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –æ—Ç API")
            return False
        else:
            print(f"   ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø challenge - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
    except LoginRequired as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
        return False
    except ClientError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {str(e)}")
        return False

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    accounts = get_instagram_accounts()
    
    if not accounts:
        print("\n‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
        print("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã —á–µ—Ä–µ–∑ –±–æ—Ç–∞.")
        return
    
    total_accounts = len(accounts)
    print(f"\nüîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É {total_accounts} –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:")
    print("   ‚úÖ Challenge —Å –ø–∞—Ä–æ–ª–µ–º - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    print("   ‚ùå Challenge —Å email –∫–æ–¥–æ–º - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    print("   ‚ùå Scraping warning - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    
    working_accounts = []
    challenge_accounts = []
    
    for i, account in enumerate(accounts, 1):
        print(f"\nüìç –ê–∫–∫–∞—É–Ω—Ç {i}/{total_accounts}")
        username = account.username
        password = account.password
        
        if not username or not password:
            print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            continue
            
        result = await test_account(username, password)
        if result:
            working_accounts.append({
                'id': account.id,
                'username': username,
                'password': password
            })
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            backup_dir = 'working_accounts'
            os.makedirs(backup_dir, exist_ok=True)
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_file = os.path.join(backup_dir, f'working_account_{timestamp}.json')
            
            with open(backup_file, 'w') as f:
                json.dump({
                    'id': account.id,
                    'username': username,
                    'password': password,
                    'tested_at': timestamp
                }, f, indent=2)
            
            print(f"\nüíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ä–∞–±–æ—á–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {backup_file}")
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
            if len(working_accounts) >= 2:  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ 2 –∏–ª–∏ –±–æ–ª—å—à–µ —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                response = input(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ {len(working_accounts)} —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫? (y/n): ")
                if response.lower() != 'y':
                    break
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
            challenge_accounts.append({
                'id': account.id,
                'username': username,
                'status': 'challenge_or_error'
            })
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        if i < total_accounts:
            print("   ‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
            await asyncio.sleep(3)
    
    print(f"\nüìä –ò—Ç–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print(f"‚úÖ –†–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(working_accounts)}")
    print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(challenge_accounts)}")
    print(f"‚ùå –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total_accounts}")
    
    if working_accounts:
        print("\nüìã –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:")
        for acc in working_accounts:
            print(f"üë§ {acc['username']} (ID: {acc['id']})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        working_file = f"working_accounts_{timestamp}.txt"
        
        with open(working_file, 'w', encoding='utf-8') as f:
            f.write("# –†–∞–±–æ—á–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã Instagram\n")
            f.write(f"# –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            for acc in working_accounts:
                f.write(f"{acc['id']}:{acc['username']} (–ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)\n")
        
        print(f"\nüíæ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª —Ä–∞–±–æ—á–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {working_file}")
    
    if challenge_accounts:
        print(f"\n‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ ({len(challenge_accounts)}):")
        for acc in challenge_accounts:
            print(f"‚ùì {acc['username']} (ID: {acc['id']}) - —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")

if __name__ == "__main__":
    asyncio.run(main()) 