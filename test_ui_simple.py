#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ UI –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç telegram
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É —Ä–æ—É—Ç–∏–Ω–≥–∞ –∏ —Ä–∞–±–æ—Ç—É –∫–Ω–æ–ø–æ–∫
"""

import sys
import os
from unittest.mock import Mock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('.')

def test_button_routing():
    """–¢–µ—Å—Ç —Ä–æ—É—Ç–∏–Ω–≥–∞ –∫–Ω–æ–ø–æ–∫"""
    print("üß™ –¢–µ—Å—Ç 1: –†–æ—É—Ç–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫")
    print("="*40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º keyboards.py
    try:
        from telegram_bot.keyboards import get_warmup_menu_keyboard, get_warmup_mode_keyboard
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        warmup_menu = get_warmup_menu_keyboard()
        warmup_mode = get_warmup_mode_keyboard()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ callback_data
        menu_buttons = []
        for row in warmup_menu.inline_keyboard:
            for button in row:
                menu_buttons.append((button.text, button.callback_data))
        
        mode_buttons = []
        for row in warmup_mode.inline_keyboard:
            for button in row:
                mode_buttons.append((button.text, button.callback_data))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        expected_callbacks = ["smart_warm_menu", "status", "limits"]
        
        for text, callback_data in menu_buttons:
            if "–ø—Ä–æ–≥—Ä–µ–≤" in text.lower():
                if callback_data == "smart_warm_menu":
                    print(f"  ‚úÖ '{text}' ‚Üí {callback_data}")
                else:
                    print(f"  ‚ùå '{text}' ‚Üí {callback_data} (–æ–∂–∏–¥–∞–ª—Å—è smart_warm_menu)")
            elif "—Å—Ç–∞—Ç—É—Å" in text.lower():
                if callback_data == "status":
                    print(f"  ‚úÖ '{text}' ‚Üí {callback_data}")
                else:
                    print(f"  ‚ùå '{text}' ‚Üí {callback_data} (–æ–∂–∏–¥–∞–ª—Å—è status)")
            elif "–ª–∏–º–∏—Ç" in text.lower():
                if callback_data == "limits":
                    print(f"  ‚úÖ '{text}' ‚Üí {callback_data}")
                else:
                    print(f"  ‚ùå '{text}' ‚Üí {callback_data} (–æ–∂–∏–¥–∞–ª—Å—è limits)")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return False

def test_service_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 2: –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤")
    print("="*40)
    
    services_ok = True
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º advanced_warmup
    try:
        from services.advanced_warmup import advanced_warmup, WarmupStrategy
        print("  ‚úÖ advanced_warmup –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç–æ–¥—ã –µ—Å—Ç—å
        if hasattr(advanced_warmup, 'start_warmup'):
            print("  ‚úÖ start_warmup –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("  ‚ùå start_warmup –º–µ—Ç–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            services_ok = False
            
        if hasattr(advanced_warmup, 'determine_time_pattern'):
            print("  ‚úÖ determine_time_pattern –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("  ‚ùå determine_time_pattern –º–µ—Ç–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            services_ok = False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ advanced_warmup: {e}")
        services_ok = False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º rate_limiter
    try:
        from services.rate_limiter import rate_limiter, ActionType
        print("  ‚úÖ rate_limiter –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ rate_limiter: {e}")
        services_ok = False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º automation_service
    try:
        from services.account_automation import automation_service
        print("  ‚úÖ automation_service –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ automation_service: {e}")
        services_ok = False
    
    return services_ok

def test_handlers_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 3: –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
    print("="*40)
    
    handlers_ok = True
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
    try:
        # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ telegram –æ–±—ä–µ–∫—Ç–æ–≤
        import telegram_bot.handlers.automation_handlers as ah
        
        if hasattr(ah, 'smart_warm_command'):
            print("  ‚úÖ smart_warm_command —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("  ‚ùå smart_warm_command —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            handlers_ok = False
            
        if hasattr(ah, 'status_command'):
            print("  ‚úÖ status_command —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("  ‚ùå status_command —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            handlers_ok = False
            
        if hasattr(ah, 'limits_command'):
            print("  ‚úÖ limits_command —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("  ‚ùå limits_command —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            handlers_ok = False
            
        if hasattr(ah, 'register_automation_handlers'):
            print("  ‚úÖ register_automation_handlers —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("  ‚ùå register_automation_handlers —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            handlers_ok = False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ automation_handlers: {e}")
        handlers_ok = False
    
    return handlers_ok

def test_account_selection():
    """–¢–µ—Å—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 4: –°–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    print("="*40)
    
    try:
        from telegram_bot.utils.account_selection import AccountSelector
        print("  ‚úÖ AccountSelector –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        
        # –ú–æ–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
        with patch('database.db_manager.get_instagram_accounts') as mock_accounts:
            mock_account = Mock()
            mock_account.id = 1
            mock_account.username = "test_account"
            mock_account.is_active = True
            mock_accounts.return_value = [mock_account]
            
            print("  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –º–æ–∫–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AccountSelector: {e}")
        return False

def test_database_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç 5: –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("="*40)
    
    db_ok = True
    
    try:
        from database.db_manager import get_instagram_accounts, get_instagram_account
        print("  ‚úÖ –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å—Ç—å
        if callable(get_instagram_accounts):
            print("  ‚úÖ get_instagram_accounts - —Ñ—É–Ω–∫—Ü–∏—è")
        else:
            print("  ‚ùå get_instagram_accounts - –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è")
            db_ok = False
            
        if callable(get_instagram_account):
            print("  ‚úÖ get_instagram_account - —Ñ—É–Ω–∫—Ü–∏—è")
        else:
            print("  ‚ùå get_instagram_account - –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è")
            db_ok = False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π –ë–î: {e}")
        db_ok = False
    
    return db_ok

def test_time_patterns():
    """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç 6: –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
    print("="*40)
    
    try:
        from services.advanced_warmup import advanced_warmup
        from datetime import datetime
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        pattern = advanced_warmup.determine_time_pattern()
        
        if pattern:
            intensity = pattern.get('intensity', 0)
            print(f"  ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω: {intensity*100:.0f}% –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏")
            
            current_hour = datetime.now().hour
            if 6 <= current_hour < 9:
                expected_intensity = 0.3
                pattern_name = "—É—Ç—Ä–æ"
            elif 12 <= current_hour < 14:
                expected_intensity = 0.6
                pattern_name = "–æ–±–µ–¥"
            elif 18 <= current_hour < 22:
                expected_intensity = 1.0
                pattern_name = "–≤–µ—á–µ—Ä"
            else:
                expected_intensity = 0.2
                pattern_name = "–Ω–æ—á—å"
            
            print(f"  ‚úÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_hour}:xx ({pattern_name})")
            print(f"  ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {expected_intensity*100:.0f}%")
            
            if abs(intensity - expected_intensity) < 0.1:
                print("  ‚úÖ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫")
                return True
            else:
                print(f"  ‚ö†Ô∏è  –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ({intensity} vs {expected_intensity})")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
        else:
            print("  ‚ùå –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
        return False

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üî• –£–ü–†–û–©–ï–ù–ù–´–ô –¢–ï–°–¢ UI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("Advanced Warmup 2.0 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ Telegram –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("="*60)
    
    tests = [
        ("–†–æ—É—Ç–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫", test_button_routing),
        ("–ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤", test_service_imports),
        ("–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", test_handlers_logic),
        ("–°–µ–ª–µ–∫—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤", test_account_selection),
        ("–§—É–Ω–∫—Ü–∏–∏ –ë–î", test_database_functions),
        ("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã", test_time_patterns)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    
    for test_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"  {status} {test_name}")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üöÄ UI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüí° –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
        print("  ‚Ä¢ –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É")
        print("  ‚Ä¢ –°–µ—Ä–≤–∏—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç")
        print("  ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
    else:
        print(f"\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´: {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("–ù–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å!")
    
    print("="*60)
    
    return passed >= total * 0.8  # 80% —Ç–µ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å

if __name__ == "__main__":
    success = run_tests()
    if success:
        print("\nüéä –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    else:
        print("\n‚ö†Ô∏è  –ù–£–ñ–ù–´ –î–û–†–ê–ë–û–¢–ö–ò")
    
    sys.exit(0 if success else 1) 