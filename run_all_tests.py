#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å–∏—Å—Ç–µ–º
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import sys
import time
import subprocess
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def run_test_file(test_file):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    print(f"\n{'='*60}")
    print(f"üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê: {test_file}")
    print(f"{'='*60}")
    
    try:
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        result = subprocess.run(
            [sys.executable, test_file],
            capture_output=True,
            text=True,
            cwd=Path(__file__).parent
        )
        
        duration = time.time() - start_time
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.returncode == 0:
            print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û")
            if result.stdout:
                print(f"\n–í—ã–≤–æ–¥:\n{result.stdout}")
        else:
            print("‚ùå –¢–ï–°–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô")
            if result.stdout:
                print(f"\n–í—ã–≤–æ–¥:\n{result.stdout}")
            if result.stderr:
                print(f"\n–û—à–∏–±–∫–∏:\n{result.stderr}")
        
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        
        return result.returncode == 0, duration
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞ {test_file}: {e}")
        return False, 0

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üéØ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í –ü–†–û–î–í–ò–ù–£–¢–´–• –°–ò–°–¢–ï–ú")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    test_files = [
        "test_health_monitor.py",
        "test_activity_limiter.py", 
        "test_improved_warmer.py",
        "test_lifecycle_manager.py",
        "test_predictive_monitor.py",
        "test_advanced_verification.py"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    existing_files = []
    missing_files = []
    
    for test_file in test_files:
        if Path(test_file).exists():
            existing_files.append(test_file)
        else:
            missing_files.append(test_file)
    
    if missing_files:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:")
        for missing_file in missing_files:
            print(f"  ‚ùå {missing_file}")
        print()
    
    if not existing_files:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(existing_files)}")
    print("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for i, test_file in enumerate(existing_files, 1):
        print(f"  {i}. {test_file}")
    print()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    results = []
    total_duration = 0
    
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        try:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç")
            print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π")
            confirmation = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤? (y/N): ").lower().strip()
            
            if confirmation not in ['y', 'yes', '–¥–∞', '–¥']:
                print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return
                
        except KeyboardInterrupt:
            print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
            return
        
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç
        for i, test_file in enumerate(existing_files, 1):
            print(f"\nüìä –ü–†–û–ì–†–ï–°–°: {i}/{len(existing_files)}")
            
            success, duration = run_test_file(test_file)
            total_duration += duration
            
            results.append({
                'file': test_file,
                'success': success,
                'duration': duration
            })
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            if i < len(existing_files):
                print("\n‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...")
                time.sleep(3)
        
        # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        print(f"\n{'='*60}")
        print("üìä –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print(f"{'='*60}")
        
        successful_tests = [r for r in results if r['success']]
        failed_tests = [r for r in results if not r['success']]
        
        success_rate = len(successful_tests) / len(results) * 100 if results else 0
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã: {len(successful_tests)}/{len(results)} ({success_rate:.1f}%)")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã: {len(failed_tests)}/{len(results)}")
        print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.1f} —Å–µ–∫—É–Ω–¥")
        print()
        
        if successful_tests:
            print("‚úÖ –£–°–ü–ï–®–ù–´–ï –¢–ï–°–¢–´:")
            for result in successful_tests:
                print(f"  ‚Ä¢ {result['file']} ({result['duration']:.1f}—Å)")
            print()
        
        if failed_tests:
            print("‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
            for result in failed_tests:
                print(f"  ‚Ä¢ {result['file']} ({result['duration']:.1f}—Å)")
            print()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if len(successful_tests) == len(results):
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –í—Å–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        elif len(successful_tests) > len(failed_tests):
            print("‚ö†Ô∏è –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û")
            print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        else:
            print("‚ùå –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –û–®–ò–ë–ö–ò –í –¢–ï–°–¢–ê–•")
            print("üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        
        print(f"\n‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
        
        if results:
            print("\nüìä –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for result in results:
                status = "‚úÖ" if result['success'] else "‚ùå"
                print(f"  {status} {result['file']} ({result['duration']:.1f}—Å)")
    
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_all_tests: {e}")

def run_specific_test():
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    test_files = [
        "test_health_monitor.py",
        "test_activity_limiter.py",
        "test_improved_warmer.py", 
        "test_lifecycle_manager.py",
        "test_predictive_monitor.py",
        "test_advanced_verification.py"
    ]
    
    print("üéØ –í–´–ë–û–† –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –¢–ï–°–¢–ê")
    print("=" * 30)
    
    existing_files = [f for f in test_files if Path(f).exists()]
    
    if not existing_files:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
    for i, test_file in enumerate(existing_files, 1):
        print(f"  {i}. {test_file}")
    
    try:
        choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç (1-{len(existing_files)}) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞: ").strip()
        
        if choice.lower() == 'q':
            return
        
        try:
            index = int(choice) - 1
            if 0 <= index < len(existing_files):
                selected_file = existing_files[index]
                print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {selected_file}")
                success, duration = run_test_file(selected_file)
                
                status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
                print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢: {status} (–≤—Ä–µ–º—è: {duration:.1f}—Å)")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–∞")
            
    except KeyboardInterrupt:
        print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

if __name__ == "__main__":
    try:
        print("ü§ñ –°–ò–°–¢–ï–ú–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–î–í–ò–ù–£–¢–´–• –§–£–ù–ö–¶–ò–ô")
        print("=" * 50)
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç")
        print("q. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1/2/q): ").strip()
        
        if choice == '1':
            main()
        elif choice == '2':
            run_specific_test()
        elif choice.lower() == 'q':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}") 